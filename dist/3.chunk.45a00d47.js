webpackJsonp([3,8],Array(19).concat([
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20),__webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function(d3,echarts){
		var vm = avalon.define({
			$id:'bbb'
		})
		return avalon.controller(function($ctrl){
			$ctrl.$onRendered = function(){}
			$ctrl.$onEnter = function(){}
			$ctrl.$onBeforeUnload = function(){}
			$ctrl.$vmodels = [vm]
		})
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org Version 4.5.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';
	
	var version = "4.5.0";
	
	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};
	
	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};
	
	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}
	
	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;
	
	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};
	
	var number = function(x) {
	  return x === null ? NaN : +x;
	};
	
	var variance = function(array, f) {
	  var n = array.length,
	      m = 0,
	      a,
	      d,
	      s = 0,
	      i = -1,
	      j = 0;
	
	  if (f == null) {
	    while (++i < n) {
	      if (!isNaN(a = number(array[i]))) {
	        d = a - m;
	        m += d / ++j;
	        s += d * (a - m);
	      }
	    }
	  }
	
	  else {
	    while (++i < n) {
	      if (!isNaN(a = number(f(array[i], i, array)))) {
	        d = a - m;
	        m += d / ++j;
	        s += d * (a - m);
	      }
	    }
	  }
	
	  if (j > 1) return s / (j - 1);
	};
	
	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};
	
	var extent = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b,
	      c;
	
	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = c = b; break; }
	    while (++i < n) if ((b = array[i]) != null) {
	      if (a > b) a = b;
	      if (c < b) c = b;
	    }
	  }
	
	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = c = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null) {
	      if (a > b) a = b;
	      if (c < b) c = b;
	    }
	  }
	
	  return [a, c];
	};
	
	var array = Array.prototype;
	
	var slice = array.slice;
	var map = array.map;
	
	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var identity = function(x) {
	  return x;
	};
	
	var sequence = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);
	
	  while (++i < n) {
	    range[i] = start + i * step;
	  }
	
	  return range;
	};
	
	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);
	
	var ticks = function(start, stop, count) {
	  var step = tickStep(start, stop, count);
	  return sequence(
	    Math.ceil(start / step) * step,
	    Math.floor(stop / step) * step + step / 2, // inclusive
	    step
	  );
	};
	
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}
	
	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};
	
	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;
	
	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);
	
	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }
	
	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) tz = ticks(x0, x1, tz);
	
	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] >= x1) tz.pop(), --m;
	
	    var bins = new Array(m + 1),
	        bin;
	
	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }
	
	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }
	
	    return bins;
	  }
	
	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };
	
	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };
	
	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };
	
	  return histogram;
	};
	
	var threshold = function(array, p, f) {
	  if (f == null) f = number;
	  if (!(n = array.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +f(array[0], 0, array);
	  if (p >= 1) return +f(array[n - 1], n - 1, array);
	  var n,
	      h = (n - 1) * p,
	      i = Math.floor(h),
	      a = +f(array[i], i, array),
	      b = +f(array[i + 1], i + 1, array);
	  return a + (b - a) * (h - i);
	};
	
	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};
	
	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};
	
	var max = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b;
	
	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	  }
	
	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b > a) a = b;
	  }
	
	  return a;
	};
	
	var mean = function(array, f) {
	  var s = 0,
	      n = array.length,
	      a,
	      i = -1,
	      j = n;
	
	  if (f == null) {
	    while (++i < n) if (!isNaN(a = number(array[i]))) s += a; else --j;
	  }
	
	  else {
	    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) s += a; else --j;
	  }
	
	  if (j) return s / j;
	};
	
	var median = function(array, f) {
	  var numbers = [],
	      n = array.length,
	      a,
	      i = -1;
	
	  if (f == null) {
	    while (++i < n) if (!isNaN(a = number(array[i]))) numbers.push(a);
	  }
	
	  else {
	    while (++i < n) if (!isNaN(a = number(f(array[i], i, array)))) numbers.push(a);
	  }
	
	  return threshold(numbers.sort(ascending), 0.5);
	};
	
	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;
	
	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);
	
	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }
	
	  return merged;
	};
	
	var min = function(array, f) {
	  var i = -1,
	      n = array.length,
	      a,
	      b;
	
	  if (f == null) {
	    while (++i < n) if ((b = array[i]) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	  }
	
	  else {
	    while (++i < n) if ((b = f(array[i], i, array)) != null && b >= b) { a = b; break; }
	    while (++i < n) if ((b = f(array[i], i, array)) != null && a > b) a = b;
	  }
	
	  return a;
	};
	
	var pairs = function(array) {
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = [p, p = array[++i]];
	  return pairs;
	};
	
	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};
	
	var scan = function(array, compare) {
	  if (!(n = array.length)) return;
	  var i = 0,
	      n,
	      j = 0,
	      xi,
	      xj = array[j];
	
	  if (!compare) compare = ascending;
	
	  while (++i < n) if (compare(xi = array[i], xj) < 0 || compare(xj, xj) !== 0) xj = xi, j = i;
	
	  if (compare(xj, xj) === 0) return j;
	};
	
	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;
	
	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }
	
	  return array;
	};
	
	var sum = function(array, f) {
	  var s = 0,
	      n = array.length,
	      a,
	      i = -1;
	
	  if (f == null) {
	    while (++i < n) if (a = +array[i]) s += a; // Note: zero and null are equivalent.
	  }
	
	  else {
	    while (++i < n) if (a = +f(array[i], i, array)) s += a;
	  }
	
	  return s;
	};
	
	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};
	
	function length(d) {
	  return d.length;
	}
	
	var zip = function() {
	  return transpose(arguments);
	};
	
	var slice$1 = Array.prototype.slice;
	
	var identity$1 = function(x) {
	  return x;
	};
	
	var top = 1;
	var right = 2;
	var bottom = 3;
	var left = 4;
	var epsilon = 1e-6;
	
	function translateX(scale0, scale1, d) {
	  var x = scale0(d);
	  return "translate(" + (isFinite(x) ? x : scale1(d)) + ",0)";
	}
	
	function translateY(scale0, scale1, d) {
	  var y = scale0(d);
	  return "translate(0," + (isFinite(y) ? y : scale1(d)) + ")";
	}
	
	function center(scale) {
	  var offset = scale.bandwidth() / 2;
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return scale(d) + offset;
	  };
	}
	
	function entering() {
	  return !this.__axis;
	}
	
	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3;
	
	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        transform = orient === top || orient === bottom ? translateX : translateY,
	        range = scale.range(),
	        range0 = range[0] + 0.5,
	        range1 = range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : identity$1)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text"),
	        k = orient === top || orient === left ? -1 : 1,
	        x, y = orient === left || orient === right ? (x = "x", "y") : (x = "y", "x");
	
	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));
	
	    tick = tick.merge(tickEnter);
	
	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner)
	        .attr(y + "1", 0.5)
	        .attr(y + "2", 0.5));
	
	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr(y, 0.5)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
	
	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);
	
	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return transform(position, this.parentNode.__axis || position, d); });
	
	      tickEnter
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return transform(this.parentNode.__axis || position, position, d); });
	    }
	
	    tickExit.remove();
	
	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);
	
	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position, position, d); });
	
	    line
	        .attr(x + "2", k * tickSizeInner);
	
	    text
	        .attr(x, k * spacing)
	        .text(format);
	
	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
	
	    selection
	        .each(function() { this.__axis = position; });
	  }
	
	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };
	
	  axis.ticks = function() {
	    return tickArguments = slice$1.call(arguments), axis;
	  };
	
	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
	  };
	
	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
	  };
	
	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };
	
	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };
	
	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };
	
	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };
	
	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };
	
	  return axis;
	}
	
	function axisTop(scale) {
	  return axis(top, scale);
	}
	
	function axisRight(scale) {
	  return axis(right, scale);
	}
	
	function axisBottom(scale) {
	  return axis(bottom, scale);
	}
	
	function axisLeft(scale) {
	  return axis(left, scale);
	}
	
	var noop = {value: function() {}};
	
	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}
	
	function Dispatch(_) {
	  this._ = _;
	}
	
	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}
	
	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;
	
	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }
	
	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
	    }
	
	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};
	
	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}
	
	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}
	
	var xhtml = "http://www.w3.org/1999/xhtml";
	
	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};
	
	var namespace = function(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	};
	
	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}
	
	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}
	
	var creator = function(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	};
	
	var nextId = 0;
	
	function local$1() {
	  return new Local;
	}
	
	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}
	
	Local.prototype = local$1.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};
	
	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}
	
	var matcher$1 = matcher;
	
	var filterEvents = {};
	
	exports.event = null;
	
	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}
	
	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}
	
	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}
	
	function parseTypenames$1(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}
	
	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}
	
	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}
	
	var selection_on = function(typename, value, capture) {
	  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;
	
	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }
	
	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	};
	
	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}
	
	var sourceEvent = function() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	};
	
	var point = function(node, event) {
	  var svg = node.ownerSVGElement || node;
	
	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }
	
	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	};
	
	var mouse = function(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	};
	
	function none() {}
	
	var selector = function(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	};
	
	var selection_select = function(select) {
	  if (typeof select !== "function") select = selector(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	};
	
	function empty$1() {
	  return [];
	}
	
	var selectorAll = function(selector) {
	  return selector == null ? empty$1 : function() {
	    return this.querySelectorAll(selector);
	  };
	};
	
	var selection_selectAll = function(select) {
	  if (typeof select !== "function") select = selectorAll(select);
	
	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, parents);
	};
	
	var selection_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }
	
	  return new Selection(subgroups, this._parents);
	};
	
	var sparse = function(update) {
	  return new Array(update.length);
	};
	
	var selection_enter = function() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	};
	
	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}
	
	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};
	
	var constant$1 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var keyPrefix = "$"; // Protect against keys like “__proto__”.
	
	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;
	
	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}
	
	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;
	
	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }
	
	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }
	
	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}
	
	var selection_data = function(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }
	
	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;
	
	  if (typeof value !== "function") value = constant$1(value);
	
	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);
	
	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
	
	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }
	
	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	};
	
	var selection_exit = function() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	};
	
	var selection_merge = function(selection) {
	
	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }
	
	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }
	
	  return new Selection(merges, this._parents);
	};
	
	var selection_order = function() {
	
	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }
	
	  return this;
	};
	
	var selection_sort = function(compare) {
	  if (!compare) compare = ascending$1;
	
	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }
	
	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }
	
	  return new Selection(sortgroups, this._parents).order();
	};
	
	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}
	
	var selection_call = function() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	};
	
	var selection_nodes = function() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	};
	
	var selection_node = function() {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }
	
	  return null;
	};
	
	var selection_size = function() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	};
	
	var selection_empty = function() {
	  return !this.node();
	};
	
	var selection_each = function(callback) {
	
	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }
	
	  return this;
	};
	
	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}
	
	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}
	
	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}
	
	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}
	
	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}
	
	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}
	
	var selection_attr = function(name, value) {
	  var fullname = namespace(name);
	
	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }
	
	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	};
	
	var window = function(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	};
	
	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}
	
	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}
	
	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}
	
	var selection_style = function(name, value, priority) {
	  var node;
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : window(node = this.node())
	          .getComputedStyle(node, null)
	          .getPropertyValue(name);
	};
	
	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}
	
	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}
	
	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}
	
	var selection_property = function(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	};
	
	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}
	
	function classList(node) {
	  return node.classList || new ClassList(node);
	}
	
	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}
	
	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};
	
	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}
	
	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}
	
	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}
	
	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}
	
	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}
	
	var selection_classed = function(name, value) {
	  var names = classArray(name + "");
	
	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }
	
	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	};
	
	function textRemove() {
	  this.textContent = "";
	}
	
	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}
	
	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}
	
	var selection_text = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	};
	
	function htmlRemove() {
	  this.innerHTML = "";
	}
	
	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}
	
	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}
	
	var selection_html = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	};
	
	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}
	
	var selection_raise = function() {
	  return this.each(raise);
	};
	
	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}
	
	var selection_lower = function() {
	  return this.each(lower);
	};
	
	var selection_append = function(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	};
	
	function constantNull() {
	  return null;
	}
	
	var selection_insert = function(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	};
	
	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}
	
	var selection_remove = function() {
	  return this.each(remove);
	};
	
	var selection_datum = function(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	};
	
	function dispatchEvent(node, type, params) {
	  var window$$1 = window(node),
	      event = window$$1.CustomEvent;
	
	  if (event) {
	    event = new event(type, params);
	  } else {
	    event = window$$1.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }
	
	  node.dispatchEvent(event);
	}
	
	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}
	
	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}
	
	var selection_dispatch = function(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	};
	
	var root = [null];
	
	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}
	
	function selection() {
	  return new Selection([[document.documentElement]], root);
	}
	
	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};
	
	var select = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	};
	
	var selectAll = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	};
	
	var touch = function(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;
	
	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }
	
	  return null;
	};
	
	var touches = function(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;
	
	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }
	
	  return points;
	};
	
	function nopropagation() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	var dragDisable = function(view) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", noevent, true);
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", noevent, true);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	};
	
	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", null);
	  if (noclick) {
	    selection$$1.on("click.drag", noevent, true);
	    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
	  }
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}
	
	var constant$2 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
	  this.target = target;
	  this.type = type;
	  this.subject = subject;
	  this.identifier = id;
	  this.active = active;
	  this.x = x;
	  this.y = y;
	  this.dx = dx;
	  this.dy = dy;
	  this._ = dispatch;
	}
	
	DragEvent.prototype.on = function() {
	  var value = this._.on.apply(this._, arguments);
	  return value === this._ ? this : value;
	};
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter$1() {
	  return !exports.event.button;
	}
	
	function defaultContainer() {
	  return this.parentNode;
	}
	
	function defaultSubject(d) {
	  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
	}
	
	var drag = function() {
	  var filter = defaultFilter$1,
	      container = defaultContainer,
	      subject = defaultSubject,
	      gestures = {},
	      listeners = dispatch("start", "drag", "end"),
	      active = 0,
	      mousemoving,
	      touchending;
	
	  function drag(selection$$1) {
	    selection$$1
	        .on("mousedown.drag", mousedowned)
	        .on("touchstart.drag", touchstarted)
	        .on("touchmove.drag", touchmoved)
	        .on("touchend.drag touchcancel.drag", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }
	
	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
	    if (!gesture) return;
	    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
	    dragDisable(exports.event.view);
	    nopropagation();
	    mousemoving = false;
	    gesture("start");
	  }
	
	  function mousemoved() {
	    noevent();
	    mousemoving = true;
	    gestures.mouse("drag");
	  }
	
	  function mouseupped() {
	    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(exports.event.view, mousemoving);
	    noevent();
	    gestures.mouse("end");
	  }
	
	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var touches$$1 = exports.event.changedTouches,
	        c = container.apply(this, arguments),
	        n = touches$$1.length, i, gesture;
	
	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
	        nopropagation();
	        gesture("start");
	      }
	    }
	  }
	
	  function touchmoved() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;
	
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        noevent();
	        gesture("drag");
	      }
	    }
	  }
	
	  function touchended() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;
	
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        nopropagation();
	        gesture("end");
	      }
	    }
	  }
	
	  function beforestart(id, container, point, that, args) {
	    var p = point(container, id), s, dx, dy,
	        sublisteners = listeners.copy();
	
	    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
	      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
	      dx = s.x - p[0] || 0;
	      dy = s.y - p[1] || 0;
	      return true;
	    })) return;
	
	    return function gesture(type) {
	      var p0 = p, n;
	      switch (type) {
	        case "start": gestures[id] = gesture, n = active++; break;
	        case "end": delete gestures[id], --active; // nobreak
	        case "drag": p = point(container, id), n = active; break;
	      }
	      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
	    };
	  }
	
	  drag.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
	  };
	
	  drag.container = function(_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
	  };
	
	  drag.subject = function(_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
	  };
	
	  drag.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };
	
	  return drag;
	};
	
	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};
	
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}
	
	function Color() {}
	
	var darker = 0.7;
	var brighter = 1 / darker;
	
	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	
	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});
	
	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}
	
	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}
	
	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}
	
	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	
	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}
	
	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}
	
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));
	
	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}
	
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;
	
	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;
	
	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}
	
	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}
	
	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));
	
	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}
	
	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}
	
	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}
	
	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}
	
	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}
	
	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));
	
	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;
	
	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}
	
	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));
	
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}
	
	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};
	
	var constant$3 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}
	
	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	
	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
	}
	
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
	  };
	}
	
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
	}
	
	var interpolateRgb = ((function rgbGamma(y) {
	  var color$$1 = gamma(y);
	
	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	
	  rgb$$1.gamma = rgbGamma;
	
	  return rgb$$1;
	}))(1);
	
	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}
	
	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);
	
	var array$1 = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(nb),
	      c = new Array(nb),
	      i;
	
	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];
	
	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};
	
	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};
	
	var reinterpolate = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};
	
	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;
	
	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};
	
	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }
	
	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};
	
	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");
	
	function zero(b) {
	  return function() {
	    return b;
	  };
	}
	
	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}
	
	var interpolateString = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators
	
	  // Coerce inputs to strings.
	  a = a + "", b = b + "";
	
	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: reinterpolate(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }
	
	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }
	
	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};
	
	var interpolateValue = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$3(b)
	      : (t === "number" ? reinterpolate
	      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
	      : b instanceof color ? interpolateRgb
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$1
	      : isNaN(b) ? object
	      : reinterpolate)(a, b);
	};
	
	var interpolateRound = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};
	
	var degrees = 180 / Math.PI;
	
	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	
	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};
	
	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;
	
	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	
	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}
	
	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }
	
	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }
	
	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }
	
	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }
	
	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }
	
	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}
	
	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
	
	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;
	
	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}
	
	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}
	
	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}
	
	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var interpolateZoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;
	
	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }
	
	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }
	
	  i.duration = S * 1000;
	
	  return i;
	};
	
	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);
	
	function lab$1(start, end) {
	  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}
	
	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);
	
	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;
	
	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }
	
	    cubehelix$$1.gamma = cubehelixGamma;
	
	    return cubehelix$$1;
	  })(1);
	}
	
	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);
	
	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};
	
	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof requestAnimationFrame === "function" ? requestAnimationFrame : function(f) { setTimeout(f, 17); };
	
	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}
	
	function clearNow() {
	  clockNow = 0;
	}
	
	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}
	
	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};
	
	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}
	
	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}
	
	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}
	
	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}
	
	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}
	
	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow;
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, delay);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}
	
	var timeout$1 = function(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	};
	
	var interval$1 = function(callback, delay, time) {
	  var t = new Timer, total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? now() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	};
	
	var emptyOn = dispatch("start", "end", "interrupt");
	var emptyTween = [];
	
	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;
	
	var schedule = function(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	};
	
	function init(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
	  return schedule;
	}
	
	function set$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
	  return schedule;
	}
	
	function get$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
	  return schedule;
	}
	
	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;
	
	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);
	
	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);
	
	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }
	
	  function start(elapsed) {
	    var i, j, n, o;
	
	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();
	
	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;
	
	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return timeout$1(start);
	
	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }
	
	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }
	
	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    timeout$1(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });
	
	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;
	
	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }
	
	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;
	
	    while (++i < n) {
	      tween[i].call(null, t);
	    }
	
	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }
	
	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}
	
	var interrupt = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;
	
	  if (!schedules) return;
	
	  name = name == null ? null : name + "";
	
	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }
	
	  if (empty) delete node.__transition;
	};
	
	var selection_interrupt = function(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	};
	
	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;
	
	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }
	
	    schedule.tween = tween1;
	  };
	}
	
	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule = set$1(this, id),
	        tween = schedule.tween;
	
	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }
	
	    schedule.tween = tween1;
	  };
	}
	
	var transition_tween = function(name, value) {
	  var id = this._id;
	
	  name += "";
	
	  if (arguments.length < 2) {
	    var tween = get$1(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }
	
	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	};
	
	function tweenValue(transition, name, value) {
	  var id = transition._id;
	
	  transition.each(function() {
	    var schedule = set$1(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });
	
	  return function(node) {
	    return get$1(node, id).value[name];
	  };
	}
	
	var interpolate$$1 = function(a, b) {
	  var c;
	  return (typeof b === "number" ? reinterpolate
	      : b instanceof color ? interpolateRgb
	      : (c = color(b)) ? (b = c, interpolateRgb)
	      : interpolateString)(a, b);
	};
	
	function attrRemove$1(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}
	
	function attrRemoveNS$1(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}
	
	function attrConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}
	
	function attrConstantNS$1(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}
	
	function attrFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}
	
	function attrFunctionNS$1(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}
	
	var transition_attr = function(name, value) {
	  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate$$1;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
	      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
	};
	
	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	var transition_attrTween = function(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	};
	
	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}
	
	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}
	
	var transition_delay = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get$1(this.node(), id).delay;
	};
	
	function durationFunction(id, value) {
	  return function() {
	    set$1(this, id).duration = +value.apply(this, arguments);
	  };
	}
	
	function durationConstant(id, value) {
	  return value = +value, function() {
	    set$1(this, id).duration = value;
	  };
	}
	
	var transition_duration = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get$1(this.node(), id).duration;
	};
	
	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set$1(this, id).ease = value;
	  };
	}
	
	var transition_ease = function(value) {
	  var id = this._id;
	
	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get$1(this.node(), id).ease;
	};
	
	var transition_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }
	
	  return new Transition(subgroups, this._parents, this._name, this._id);
	};
	
	var transition_merge = function(transition) {
	  if (transition._id !== this._id) throw new Error;
	
	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }
	
	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }
	
	  return new Transition(merges, this._parents, this._name, this._id);
	};
	
	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}
	
	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set$1;
	  return function() {
	    var schedule = sit(this, id),
	        on = schedule.on;
	
	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
	
	    schedule.on = on1;
	  };
	}
	
	var transition_on = function(name, listener) {
	  var id = this._id;
	
	  return arguments.length < 2
	      ? get$1(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	};
	
	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}
	
	var transition_remove = function() {
	  return this.on("end.remove", removeFunction(this._id));
	};
	
	var transition_select = function(select$$1) {
	  var name = this._name,
	      id = this._id;
	
	  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);
	
	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
	      }
	    }
	  }
	
	  return new Transition(subgroups, this._parents, name, id);
	};
	
	var transition_selectAll = function(select$$1) {
	  var name = this._name,
	      id = this._id;
	
	  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);
	
	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }
	
	  return new Transition(subgroups, parents, name, id);
	};
	
	var Selection$1 = selection.prototype.constructor;
	
	var transition_selection = function() {
	  return new Selection$1(this._groups, this._parents);
	};
	
	function styleRemove$1(name, interpolate$$2) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}
	
	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}
	
	function styleConstant$1(name, interpolate$$2, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = window(this).getComputedStyle(this, null).getPropertyValue(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value1);
	  };
	}
	
	function styleFunction$1(name, interpolate$$2, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var style = window(this).getComputedStyle(this, null),
	        value0 = style.getPropertyValue(name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), style.getPropertyValue(name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$2(value00 = value0, value10 = value1);
	  };
	}
	
	var transition_style = function(name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$$1;
	  return value == null ? this
	          .styleTween(name, styleRemove$1(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant$1(name, i, value), priority);
	};
	
	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}
	
	var transition_styleTween = function(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	};
	
	function textConstant$1(value) {
	  return function() {
	    this.textContent = value;
	  };
	}
	
	function textFunction$1(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}
	
	var transition_text = function(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction$1(tweenValue(this, "text", value))
	      : textConstant$1(value == null ? "" : value + ""));
	};
	
	var transition_transition = function() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();
	
	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$1(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }
	
	  return new Transition(groups, this._parents, name, id1);
	};
	
	var id = 0;
	
	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}
	
	function transition(name) {
	  return selection().transition(name);
	}
	
	function newId() {
	  return ++id;
	}
	
	var selection_prototype = selection.prototype;
	
	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};
	
	function linear$1(t) {
	  return +t;
	}
	
	function quadIn(t) {
	  return t * t;
	}
	
	function quadOut(t) {
	  return t * (2 - t);
	}
	
	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}
	
	function cubicIn(t) {
	  return t * t * t;
	}
	
	function cubicOut(t) {
	  return --t * t * t + 1;
	}
	
	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}
	
	var exponent = 3;
	
	var polyIn = (function custom(e) {
	  e = +e;
	
	  function polyIn(t) {
	    return Math.pow(t, e);
	  }
	
	  polyIn.exponent = custom;
	
	  return polyIn;
	})(exponent);
	
	var polyOut = (function custom(e) {
	  e = +e;
	
	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }
	
	  polyOut.exponent = custom;
	
	  return polyOut;
	})(exponent);
	
	var polyInOut = (function custom(e) {
	  e = +e;
	
	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }
	
	  polyInOut.exponent = custom;
	
	  return polyInOut;
	})(exponent);
	
	var pi = Math.PI;
	var halfPi = pi / 2;
	
	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}
	
	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}
	
	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}
	
	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}
	
	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}
	
	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}
	
	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}
	
	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}
	
	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}
	
	var b1 = 4 / 11;
	var b2 = 6 / 11;
	var b3 = 8 / 11;
	var b4 = 3 / 4;
	var b5 = 9 / 11;
	var b6 = 10 / 11;
	var b7 = 15 / 16;
	var b8 = 21 / 22;
	var b9 = 63 / 64;
	var b0 = 1 / b1 / b1;
	
	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}
	
	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}
	
	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}
	
	var overshoot = 1.70158;
	
	var backIn = (function custom(s) {
	  s = +s;
	
	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }
	
	  backIn.overshoot = custom;
	
	  return backIn;
	})(overshoot);
	
	var backOut = (function custom(s) {
	  s = +s;
	
	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }
	
	  backOut.overshoot = custom;
	
	  return backOut;
	})(overshoot);
	
	var backInOut = (function custom(s) {
	  s = +s;
	
	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }
	
	  backInOut.overshoot = custom;
	
	  return backInOut;
	})(overshoot);
	
	var tau = 2 * Math.PI;
	var amplitude = 1;
	var period = 0.3;
	
	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }
	
	  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
	  elasticIn.period = function(p) { return custom(a, p); };
	
	  return elasticIn;
	})(amplitude, period);
	
	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }
	
	  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticOut.period = function(p) { return custom(a, p); };
	
	  return elasticOut;
	})(amplitude, period);
	
	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
	
	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }
	
	  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticInOut.period = function(p) { return custom(a, p); };
	
	  return elasticInOut;
	})(amplitude, period);
	
	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};
	
	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = now(), defaultTiming;
	    }
	  }
	  return timing;
	}
	
	var selection_transition = function(name) {
	  var id,
	      timing;
	
	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
	  }
	
	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }
	
	  return new Transition(groups, this._parents, name, id);
	};
	
	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;
	
	var root$1 = [null];
	
	var active = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;
	
	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
	        return new Transition([[node]], root$1, name, +i);
	      }
	    }
	  }
	
	  return null;
	};
	
	var constant$4 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var BrushEvent = function(target, type, selection) {
	  this.target = target;
	  this.type = type;
	  this.selection = selection;
	};
	
	function nopropagation$1() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent$1 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	var MODE_DRAG = {name: "drag"};
	var MODE_SPACE = {name: "space"};
	var MODE_HANDLE = {name: "handle"};
	var MODE_CENTER = {name: "center"};
	
	var X = {
	  name: "x",
	  handles: ["e", "w"].map(type),
	  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
	  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
	};
	
	var Y = {
	  name: "y",
	  handles: ["n", "s"].map(type),
	  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
	  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
	};
	
	var XY = {
	  name: "xy",
	  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
	  input: function(xy) { return xy; },
	  output: function(xy) { return xy; }
	};
	
	var cursors = {
	  overlay: "crosshair",
	  selection: "move",
	  n: "ns-resize",
	  e: "ew-resize",
	  s: "ns-resize",
	  w: "ew-resize",
	  nw: "nwse-resize",
	  ne: "nesw-resize",
	  se: "nwse-resize",
	  sw: "nesw-resize"
	};
	
	var flipX = {
	  e: "w",
	  w: "e",
	  nw: "ne",
	  ne: "nw",
	  se: "sw",
	  sw: "se"
	};
	
	var flipY = {
	  n: "s",
	  s: "n",
	  nw: "sw",
	  ne: "se",
	  se: "ne",
	  sw: "nw"
	};
	
	var signsX = {
	  overlay: +1,
	  selection: +1,
	  n: null,
	  e: +1,
	  s: null,
	  w: -1,
	  nw: -1,
	  ne: +1,
	  se: +1,
	  sw: -1
	};
	
	var signsY = {
	  overlay: +1,
	  selection: +1,
	  n: -1,
	  e: null,
	  s: +1,
	  w: null,
	  nw: -1,
	  ne: -1,
	  se: +1,
	  sw: +1
	};
	
	function type(t) {
	  return {type: t};
	}
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !exports.event.button;
	}
	
	function defaultExtent() {
	  var svg = this.ownerSVGElement || this;
	  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
	}
	
	// Like d3.local, but with the name “__brush” rather than auto-generated.
	function local$$1(node) {
	  while (!node.__brush) if (!(node = node.parentNode)) return;
	  return node.__brush;
	}
	
	function empty(extent) {
	  return extent[0][0] === extent[1][0]
	      || extent[0][1] === extent[1][1];
	}
	
	function brushSelection(node) {
	  var state = node.__brush;
	  return state ? state.dim.output(state.selection) : null;
	}
	
	function brushX() {
	  return brush$1(X);
	}
	
	function brushY() {
	  return brush$1(Y);
	}
	
	var brush = function() {
	  return brush$1(XY);
	};
	
	function brush$1(dim) {
	  var extent = defaultExtent,
	      filter = defaultFilter,
	      listeners = dispatch(brush, "start", "brush", "end"),
	      handleSize = 6,
	      touchending;
	
	  function brush(group) {
	    var overlay = group
	        .property("__brush", initialize)
	      .selectAll(".overlay")
	      .data([type("overlay")]);
	
	    overlay.enter().append("rect")
	        .attr("class", "overlay")
	        .attr("pointer-events", "all")
	        .attr("cursor", cursors.overlay)
	      .merge(overlay)
	        .each(function() {
	          var extent = local$$1(this).extent;
	          select(this)
	              .attr("x", extent[0][0])
	              .attr("y", extent[0][1])
	              .attr("width", extent[1][0] - extent[0][0])
	              .attr("height", extent[1][1] - extent[0][1]);
	        });
	
	    group.selectAll(".selection")
	      .data([type("selection")])
	      .enter().append("rect")
	        .attr("class", "selection")
	        .attr("cursor", cursors.selection)
	        .attr("fill", "#777")
	        .attr("fill-opacity", 0.3)
	        .attr("stroke", "#fff")
	        .attr("shape-rendering", "crispEdges");
	
	    var handle = group.selectAll(".handle")
	      .data(dim.handles, function(d) { return d.type; });
	
	    handle.exit().remove();
	
	    handle.enter().append("rect")
	        .attr("class", function(d) { return "handle handle--" + d.type; })
	        .attr("cursor", function(d) { return cursors[d.type]; });
	
	    group
	        .each(redraw)
	        .attr("fill", "none")
	        .attr("pointer-events", "all")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .on("mousedown.brush touchstart.brush", started);
	  }
	
	  brush.move = function(group, selection$$1) {
	    if (group.selection) {
	      group
	          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
	          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
	          .tween("brush", function() {
	            var that = this,
	                state = that.__brush,
	                emit = emitter(that, arguments),
	                selection0 = state.selection,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(this, arguments) : selection$$1, state.extent),
	                i = interpolateValue(selection0, selection1);
	
	            function tween(t) {
	              state.selection = t === 1 && empty(selection1) ? null : i(t);
	              redraw.call(that);
	              emit.brush();
	            }
	
	            return selection0 && selection1 ? tween : tween(1);
	          });
	    } else {
	      group
	          .each(function() {
	            var that = this,
	                args = arguments,
	                state = that.__brush,
	                selection1 = dim.input(typeof selection$$1 === "function" ? selection$$1.apply(that, args) : selection$$1, state.extent),
	                emit = emitter(that, args).beforestart();
	
	            interrupt(that);
	            state.selection = selection1 == null || empty(selection1) ? null : selection1;
	            redraw.call(that);
	            emit.start().brush().end();
	          });
	    }
	  };
	
	  function redraw() {
	    var group = select(this),
	        selection$$1 = local$$1(this).selection;
	
	    if (selection$$1) {
	      group.selectAll(".selection")
	          .style("display", null)
	          .attr("x", selection$$1[0][0])
	          .attr("y", selection$$1[0][1])
	          .attr("width", selection$$1[1][0] - selection$$1[0][0])
	          .attr("height", selection$$1[1][1] - selection$$1[0][1]);
	
	      group.selectAll(".handle")
	          .style("display", null)
	          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection$$1[1][0] - handleSize / 2 : selection$$1[0][0] - handleSize / 2; })
	          .attr("y", function(d) { return d.type[0] === "s" ? selection$$1[1][1] - handleSize / 2 : selection$$1[0][1] - handleSize / 2; })
	          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection$$1[1][0] - selection$$1[0][0] + handleSize : handleSize; })
	          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection$$1[1][1] - selection$$1[0][1] + handleSize : handleSize; });
	    }
	
	    else {
	      group.selectAll(".selection,.handle")
	          .style("display", "none")
	          .attr("x", null)
	          .attr("y", null)
	          .attr("width", null)
	          .attr("height", null);
	    }
	  }
	
	  function emitter(that, args) {
	    return that.__brush.emitter || new Emitter(that, args);
	  }
	
	  function Emitter(that, args) {
	    this.that = that;
	    this.args = args;
	    this.state = that.__brush;
	    this.active = 0;
	  }
	
	  Emitter.prototype = {
	    beforestart: function() {
	      if (++this.active === 1) this.state.emitter = this, this.starting = true;
	      return this;
	    },
	    start: function() {
	      if (this.starting) this.starting = false, this.emit("start");
	      return this;
	    },
	    brush: function() {
	      this.emit("brush");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) delete this.state.emitter, this.emit("end");
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };
	
	  function started() {
	    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
	    else if (touchending) return;
	    if (!filter.apply(this, arguments)) return;
	
	    var that = this,
	        type = exports.event.target.__data__.type,
	        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
	        signX = dim === Y ? null : signsX[type],
	        signY = dim === X ? null : signsY[type],
	        state = local$$1(that),
	        extent = state.extent,
	        selection$$1 = state.selection,
	        W = extent[0][0], w0, w1,
	        N = extent[0][1], n0, n1,
	        E = extent[1][0], e0, e1,
	        S = extent[1][1], s0, s1,
	        dx,
	        dy,
	        moving,
	        shifting = signX && signY && exports.event.shiftKey,
	        lockX,
	        lockY,
	        point0 = mouse(that),
	        point = point0,
	        emit = emitter(that, arguments).beforestart();
	
	    if (type === "overlay") {
	      state.selection = selection$$1 = [
	        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
	        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
	      ];
	    } else {
	      w0 = selection$$1[0][0];
	      n0 = selection$$1[0][1];
	      e0 = selection$$1[1][0];
	      s0 = selection$$1[1][1];
	    }
	
	    w1 = w0;
	    n1 = n0;
	    e1 = e0;
	    s1 = s0;
	
	    var group = select(that)
	        .attr("pointer-events", "none");
	
	    var overlay = group.selectAll(".overlay")
	        .attr("cursor", cursors[type]);
	
	    if (exports.event.touches) {
	      group
	          .on("touchmove.brush", moved, true)
	          .on("touchend.brush touchcancel.brush", ended, true);
	    } else {
	      var view = select(exports.event.view)
	          .on("keydown.brush", keydowned, true)
	          .on("keyup.brush", keyupped, true)
	          .on("mousemove.brush", moved, true)
	          .on("mouseup.brush", ended, true);
	
	      dragDisable(exports.event.view);
	    }
	
	    nopropagation$1();
	    interrupt(that);
	    redraw.call(that);
	    emit.start();
	
	    function moved() {
	      var point1 = mouse(that);
	      if (shifting && !lockX && !lockY) {
	        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
	        else lockX = true;
	      }
	      point = point1;
	      moving = true;
	      noevent$1();
	      move();
	    }
	
	    function move() {
	      var t;
	
	      dx = point[0] - point0[0];
	      dy = point[1] - point0[1];
	
	      switch (mode) {
	        case MODE_SPACE:
	        case MODE_DRAG: {
	          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
	          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
	          break;
	        }
	        case MODE_HANDLE: {
	          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
	          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
	          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
	          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
	          break;
	        }
	        case MODE_CENTER: {
	          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
	          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
	          break;
	        }
	      }
	
	      if (e1 < w1) {
	        signX *= -1;
	        t = w0, w0 = e0, e0 = t;
	        t = w1, w1 = e1, e1 = t;
	        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
	      }
	
	      if (s1 < n1) {
	        signY *= -1;
	        t = n0, n0 = s0, s0 = t;
	        t = n1, n1 = s1, s1 = t;
	        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
	      }
	
	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move!
	      if (lockX) w1 = selection$$1[0][0], e1 = selection$$1[1][0];
	      if (lockY) n1 = selection$$1[0][1], s1 = selection$$1[1][1];
	
	      if (selection$$1[0][0] !== w1
	          || selection$$1[0][1] !== n1
	          || selection$$1[1][0] !== e1
	          || selection$$1[1][1] !== s1) {
	        state.selection = [[w1, n1], [e1, s1]];
	        redraw.call(that);
	        emit.brush();
	      }
	    }
	
	    function ended() {
	      nopropagation$1();
	      if (exports.event.touches) {
	        if (exports.event.touches.length) return;
	        if (touchending) clearTimeout(touchending);
	        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
	      } else {
	        yesdrag(exports.event.view, moving);
	        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
	      }
	      group.attr("pointer-events", "all");
	      overlay.attr("cursor", cursors.overlay);
	      if (state.selection) selection$$1 = state.selection; // May be set by brush.move (on start)!
	      if (empty(selection$$1)) state.selection = null, redraw.call(that);
	      emit.end();
	    }
	
	    function keydowned() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          shifting = signX && signY;
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_HANDLE) {
	            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	            mode = MODE_CENTER;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE; takes priority over ALT
	          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
	            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
	            mode = MODE_SPACE;
	            overlay.attr("cursor", cursors.selection);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	
	    function keyupped() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          if (shifting) {
	            lockX = lockY = shifting = false;
	            move();
	          }
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	            mode = MODE_HANDLE;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE
	          if (mode === MODE_SPACE) {
	            if (exports.event.altKey) {
	              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	              mode = MODE_CENTER;
	            } else {
	              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	              mode = MODE_HANDLE;
	            }
	            overlay.attr("cursor", cursors[type]);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	  }
	
	  function initialize() {
	    var state = this.__brush || {selection: null};
	    state.extent = extent.apply(this, arguments);
	    state.dim = dim;
	    return state;
	  }
	
	  brush.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
	  };
	
	  brush.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
	  };
	
	  brush.handleSize = function(_) {
	    return arguments.length ? (handleSize = +_, brush) : handleSize;
	  };
	
	  brush.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? brush : value;
	  };
	
	  return brush;
	}
	
	var cos = Math.cos;
	var sin = Math.sin;
	var pi$1 = Math.PI;
	var halfPi$1 = pi$1 / 2;
	var tau$1 = pi$1 * 2;
	var max$1 = Math.max;
	
	function compareValue(compare) {
	  return function(a, b) {
	    return compare(
	      a.source.value + a.target.value,
	      b.source.value + b.target.value
	    );
	  };
	}
	
	var chord = function() {
	  var padAngle = 0,
	      sortGroups = null,
	      sortSubgroups = null,
	      sortChords = null;
	
	  function chord(matrix) {
	    var n = matrix.length,
	        groupSums = [],
	        groupIndex = sequence(n),
	        subgroupIndex = [],
	        chords = [],
	        groups = chords.groups = new Array(n),
	        subgroups = new Array(n * n),
	        k,
	        x,
	        x0,
	        dx,
	        i,
	        j;
	
	    // Compute the sum.
	    k = 0, i = -1; while (++i < n) {
	      x = 0, j = -1; while (++j < n) {
	        x += matrix[i][j];
	      }
	      groupSums.push(x);
	      subgroupIndex.push(sequence(n));
	      k += x;
	    }
	
	    // Sort groups…
	    if (sortGroups) groupIndex.sort(function(a, b) {
	      return sortGroups(groupSums[a], groupSums[b]);
	    });
	
	    // Sort subgroups…
	    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
	      d.sort(function(a, b) {
	        return sortSubgroups(matrix[i][a], matrix[i][b]);
	      });
	    });
	
	    // Convert the sum to scaling factor for [0, 2pi].
	    // TODO Allow start and end angle to be specified?
	    // TODO Allow padding to be specified as percentage?
	    k = max$1(0, tau$1 - padAngle * n) / k;
	    dx = k ? padAngle : tau$1 / n;
	
	    // Compute the start and end angle for each group and subgroup.
	    // Note: Opera has a bug reordering object literal properties!
	    x = 0, i = -1; while (++i < n) {
	      x0 = x, j = -1; while (++j < n) {
	        var di = groupIndex[i],
	            dj = subgroupIndex[di][j],
	            v = matrix[di][dj],
	            a0 = x,
	            a1 = x += v * k;
	        subgroups[dj * n + di] = {
	          index: di,
	          subindex: dj,
	          startAngle: a0,
	          endAngle: a1,
	          value: v
	        };
	      }
	      groups[di] = {
	        index: di,
	        startAngle: x0,
	        endAngle: x,
	        value: groupSums[di]
	      };
	      x += dx;
	    }
	
	    // Generate chords for each (non-empty) subgroup-subgroup link.
	    i = -1; while (++i < n) {
	      j = i - 1; while (++j < n) {
	        var source = subgroups[j * n + i],
	            target = subgroups[i * n + j];
	        if (source.value || target.value) {
	          chords.push(source.value < target.value
	              ? {source: target, target: source}
	              : {source: source, target: target});
	        }
	      }
	    }
	
	    return sortChords ? chords.sort(sortChords) : chords;
	  }
	
	  chord.padAngle = function(_) {
	    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
	  };
	
	  chord.sortGroups = function(_) {
	    return arguments.length ? (sortGroups = _, chord) : sortGroups;
	  };
	
	  chord.sortSubgroups = function(_) {
	    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
	  };
	
	  chord.sortChords = function(_) {
	    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
	  };
	
	  return chord;
	};
	
	var slice$2 = Array.prototype.slice;
	
	var constant$5 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var pi$2 = Math.PI;
	var tau$2 = 2 * pi$2;
	var epsilon$1 = 1e-6;
	var tauEpsilon = tau$2 - epsilon$1;
	
	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}
	
	function path() {
	  return new Path;
	}
	
	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon$1)) {}
	
	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }
	
	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;
	
	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon$1) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }
	
	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;
	
	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);
	
	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }
	
	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
	      this._ += "L" + x0 + "," + y0;
	    }
	
	    // Is this arc empty? We’re done.
	    if (!r) return;
	
	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }
	
	    // Otherwise, draw an arc!
	    else {
	      if (da < 0) da = da % tau$2 + tau$2;
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};
	
	function defaultSource(d) {
	  return d.source;
	}
	
	function defaultTarget(d) {
	  return d.target;
	}
	
	function defaultRadius(d) {
	  return d.radius;
	}
	
	function defaultStartAngle(d) {
	  return d.startAngle;
	}
	
	function defaultEndAngle(d) {
	  return d.endAngle;
	}
	
	var ribbon = function() {
	  var source = defaultSource,
	      target = defaultTarget,
	      radius = defaultRadius,
	      startAngle = defaultStartAngle,
	      endAngle = defaultEndAngle,
	      context = null;
	
	  function ribbon() {
	    var buffer,
	        argv = slice$2.call(arguments),
	        s = source.apply(this, argv),
	        t = target.apply(this, argv),
	        sr = +radius.apply(this, (argv[0] = s, argv)),
	        sa0 = startAngle.apply(this, argv) - halfPi$1,
	        sa1 = endAngle.apply(this, argv) - halfPi$1,
	        sx0 = sr * cos(sa0),
	        sy0 = sr * sin(sa0),
	        tr = +radius.apply(this, (argv[0] = t, argv)),
	        ta0 = startAngle.apply(this, argv) - halfPi$1,
	        ta1 = endAngle.apply(this, argv) - halfPi$1;
	
	    if (!context) context = buffer = path();
	
	    context.moveTo(sx0, sy0);
	    context.arc(0, 0, sr, sa0, sa1);
	    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
	      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
	      context.arc(0, 0, tr, ta0, ta1);
	    }
	    context.quadraticCurveTo(0, 0, sx0, sy0);
	    context.closePath();
	
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  ribbon.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
	  };
	
	  ribbon.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
	  };
	
	  ribbon.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
	  };
	
	  ribbon.source = function(_) {
	    return arguments.length ? (source = _, ribbon) : source;
	  };
	
	  ribbon.target = function(_) {
	    return arguments.length ? (target = _, ribbon) : target;
	  };
	
	  ribbon.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
	  };
	
	  return ribbon;
	};
	
	var prefix = "$";
	
	function Map() {}
	
	Map.prototype = map$1.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};
	
	function map$1(object, f) {
	  var map = new Map;
	
	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });
	
	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;
	
	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }
	
	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);
	
	  return map;
	}
	
	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;
	
	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) return rollup != null
	        ? rollup(array) : (sortValues != null
	        ? array.sort(sortValues)
	        : array);
	
	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map$1(),
	        values,
	        result = createResult();
	
	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }
	
	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });
	
	    return result;
	  }
	
	  function entries(map, depth) {
	    if (++depth > keys.length) return map;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map.entries();
	    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }
	
	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};
	
	function createObject() {
	  return {};
	}
	
	function setObject(object, key, value) {
	  object[key] = value;
	}
	
	function createMap() {
	  return map$1();
	}
	
	function setMap(map, key, value) {
	  map.set(key, value);
	}
	
	function Set() {}
	
	var proto = map$1.prototype;
	
	Set.prototype = set$2.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};
	
	function set$2(object, f) {
	  var set = new Set;
	
	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });
	
	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }
	
	  return set;
	}
	
	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};
	
	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};
	
	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};
	
	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}
	
	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}
	
	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];
	
	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });
	
	  return columns;
	}
	
	var dsv = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n]"),
	      delimiterCode = delimiter.charCodeAt(0);
	
	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns;
	    return rows;
	  }
	
	  function parseRows(text, f) {
	    var EOL = {}, // sentinel value for end-of-line
	        EOF = {}, // sentinel value for end-of-file
	        rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // the current line number
	        t, // the current token
	        eol; // is the current token followed by EOL?
	
	    function token() {
	      if (I >= N) return EOF; // special case: end of file
	      if (eol) return eol = false, EOL; // special case: end of line
	
	      // special case: quotes
	      var j = I, c;
	      if (text.charCodeAt(j) === 34) {
	        var i = j;
	        while (i++ < N) {
	          if (text.charCodeAt(i) === 34) {
	            if (text.charCodeAt(i + 1) !== 34) break;
	            ++i;
	          }
	        }
	        I = i + 2;
	        c = text.charCodeAt(i + 1);
	        if (c === 13) {
	          eol = true;
	          if (text.charCodeAt(i + 2) === 10) ++I;
	        } else if (c === 10) {
	          eol = true;
	        }
	        return text.slice(j + 1, i).replace(/""/g, "\"");
	      }
	
	      // common case: find next delimiter or newline
	      while (I < N) {
	        var k = 1;
	        c = text.charCodeAt(I++);
	        if (c === 10) eol = true; // \n
	        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
	        else if (c !== delimiterCode) continue;
	        return text.slice(j, I - k);
	      }
	
	      // special case: last token before EOF
	      return text.slice(j);
	    }
	
	    while ((t = token()) !== EOF) {
	      var a = [];
	      while (t !== EOL && t !== EOF) {
	        a.push(t);
	        t = token();
	      }
	      if (f && (a = f(a, n++)) == null) continue;
	      rows.push(a);
	    }
	
	    return rows;
	  }
	
	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }
	
	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }
	
	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }
	
	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
	        : text;
	  }
	
	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};
	
	var csv = dsv(",");
	
	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;
	
	var tsv = dsv("\t");
	
	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;
	
	var center$1 = function(x, y) {
	  var nodes;
	
	  if (x == null) x = 0;
	  if (y == null) y = 0;
	
	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }
	
	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };
	
	  return force;
	};
	
	var constant$6 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};
	
	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	};
	
	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points
	
	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;
	
	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }
	
	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;
	
	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}
	
	function addAll(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;
	
	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }
	
	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;
	
	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);
	
	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }
	
	  return this;
	}
	
	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points
	
	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;
	
	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }
	
	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;
	
	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }
	
	    if (this._root && this._root.length) this._root = node;
	  }
	
	  // If the quadtree covers the point already, just return.
	  else return this;
	
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};
	
	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};
	
	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};
	
	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};
	
	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;
	
	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }
	
	  while (q = quads.pop()) {
	
	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;
	
	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;
	
	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );
	
	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }
	
	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }
	
	  return data;
	};
	
	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points
	
	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;
	
	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;
	
	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }
	
	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;
	
	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;
	
	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;
	
	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];
	
	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }
	
	  return this;
	};
	
	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}
	
	var tree_root = function() {
	  return this._root;
	};
	
	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};
	
	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};
	
	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};
	
	function defaultX(d) {
	  return d[0];
	}
	
	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};
	
	function defaultY(d) {
	  return d[1];
	}
	
	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};
	
	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}
	
	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}
	
	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}
	
	var treeProto = quadtree.prototype = Quadtree.prototype;
	
	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;
	
	  if (!node) return copy;
	
	  if (!node.length) return copy._root = leaf_copy(node), copy;
	
	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }
	
	  return copy;
	};
	
	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;
	
	function x(d) {
	  return d.x + d.vx;
	}
	
	function y(d) {
	  return d.y + d.vy;
	}
	
	var collide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;
	
	  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);
	
	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;
	
	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x, y).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }
	
	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }
	
	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };
	
	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
	  };
	
	  return force;
	};
	
	function index(d) {
	  return d.index;
	}
	
	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}
	
	var link = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant$6(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;
	
	  if (links == null) links = [];
	
	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }
	
	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	
	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = map$1(nodes, id),
	        link;
	
	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }
	
	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }
	
	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }
	
	  function initializeStrength() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }
	
	  function initializeDistance() {
	    if (!nodes) return;
	
	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };
	
	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };
	
	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
	  };
	
	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
	  };
	
	  return force;
	};
	
	function x$1(d) {
	  return d.x;
	}
	
	function y$1(d) {
	  return d.y;
	}
	
	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));
	
	var simulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = map$1(),
	      stepper = timer(step),
	      event = dispatch("tick", "end");
	
	  if (nodes == null) nodes = [];
	
	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }
	
	  function tick() {
	    var i, n = nodes.length, node;
	
	    alpha += (alphaTarget - alpha) * alphaDecay;
	
	    forces.each(function(force) {
	      force(alpha);
	    });
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }
	
	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }
	
	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }
	
	  initializeNodes();
	
	  return simulation = {
	    tick: tick,
	
	    restart: function() {
	      return stepper.restart(step), simulation;
	    },
	
	    stop: function() {
	      return stepper.stop(), simulation;
	    },
	
	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },
	
	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },
	
	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },
	
	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },
	
	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },
	
	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },
	
	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },
	
	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;
	
	      if (radius == null) radius = Infinity;
	      else radius *= radius;
	
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }
	
	      return closest;
	    },
	
	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};
	
	var manyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant$6(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;
	
	  function force(_) {
	    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }
	
	  function accumulate(quad) {
	    var strength = 0, q, c, x$$1, y$$1, i;
	
	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x$$1 = y$$1 = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = q.value)) {
	          strength += c, x$$1 += c * q.x, y$$1 += c * q.y;
	        }
	      }
	      quad.x = x$$1 / strength;
	      quad.y = y$$1 / strength;
	    }
	
	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }
	
	    quad.value = strength;
	  }
	
	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;
	
	    var x$$1 = quad.x - node.x,
	        y$$1 = quad.y - node.y,
	        w = x2 - x1,
	        l = x$$1 * x$$1 + y$$1 * y$$1;
	
	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	        if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x$$1 * quad.value * alpha / l;
	        node.vy += y$$1 * quad.value * alpha / l;
	      }
	      return true;
	    }
	
	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;
	
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x$$1 === 0) x$$1 = jiggle(), l += x$$1 * x$$1;
	      if (y$$1 === 0) y$$1 = jiggle(), l += y$$1 * y$$1;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }
	
	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x$$1 * w;
	      node.vy += y$$1 * w;
	    } while (quad = quad.next);
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };
	
	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };
	
	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };
	
	  return force;
	};
	
	var x$2 = function(x) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      xz;
	
	  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
	  };
	
	  return force;
	};
	
	var y$2 = function(y) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      yz;
	
	  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);
	
	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }
	
	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }
	
	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };
	
	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };
	
	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
	  };
	
	  return force;
	};
	
	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);
	
	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};
	
	var exponent$1 = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};
	
	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;
	
	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }
	
	    return t.reverse().join(thousands);
	  };
	};
	
	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);
	
	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }
	
	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};
	
	var prefixExponent;
	
	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};
	
	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};
	
	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};
	
	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
	
	var formatSpecifier = function(specifier) {
	  return new FormatSpecifier(specifier);
	};
	
	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	
	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";
	
	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";
	
	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";
	
	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";
	
	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}
	
	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};
	
	var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];
	
	function identity$3(x) {
	  return x;
	}
	
	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
	      currency = locale.currency,
	      decimal = locale.decimal;
	
	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;
	
	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? "%" : "";
	
	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);
	
	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));
	
	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;
	
	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;
	
	        // Convert negative to positive, and compute the prefix.
	        // Note that -0 is not less than 0, but 1 / -0 is!
	        var valueNegative = (value < 0 || 1 / value < 0) && (value *= -1, true);
	
	        // Perform the initial formatting.
	        value = formatType(value, precision);
	
	        // If the original value was negative, it may be rounded to zero during
	        // formatting; treat this as (positive) zero.
	        if (valueNegative) {
	          i = -1, n = value.length;
	          valueNegative = false;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), (48 < c && c < 58)
	                || (type === "x" && 96 < c && c < 103)
	                || (type === "X" && 64 < c && c < 71)) {
	              valueNegative = true;
	              break;
	            }
	          }
	        }
	
	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");
	
	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }
	
	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);
	
	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";
	
	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
	
	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": return valuePrefix + value + valueSuffix + padding;
	        case "=": return valuePrefix + padding + value + valueSuffix;
	        case "^": return padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
	      }
	      return padding + valuePrefix + value + valueSuffix;
	    }
	
	    format.toString = function() {
	      return specifier + "";
	    };
	
	    return format;
	  }
	
	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }
	
	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};
	
	var locale$1;
	
	
	
	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});
	
	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  exports.format = locale$1.format;
	  exports.formatPrefix = locale$1.formatPrefix;
	  return locale$1;
	}
	
	var precisionFixed = function(step) {
	  return Math.max(0, -exponent$1(Math.abs(step)));
	};
	
	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
	};
	
	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
	};
	
	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/
	
	var adder = function() {
	  return new Adder;
	};
	
	function Adder() {
	  this.reset();
	}
	
	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add$1(temp, y, this.t);
	    add$1(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};
	
	var temp = new Adder;
	
	function add$1(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}
	
	var epsilon$2 = 1e-6;
	var epsilon2$1 = 1e-12;
	var pi$3 = Math.PI;
	var halfPi$2 = pi$3 / 2;
	var quarterPi = pi$3 / 4;
	var tau$3 = pi$3 * 2;
	
	var degrees$1 = 180 / pi$3;
	var radians = pi$3 / 180;
	
	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos$1 = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;
	
	var log = Math.log;
	var pow = Math.pow;
	var sin$1 = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;
	
	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
	}
	
	function asin(x) {
	  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
	}
	
	function haversin(x) {
	  return (x = sin$1(x / 2)) * x;
	}
	
	function noop$1() {}
	
	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}
	
	var streamObjectType = {
	  Feature: function(feature, stream) {
	    streamGeometry(feature.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};
	
	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};
	
	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}
	
	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}
	
	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};
	
	var areaRingSum = adder();
	
	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;
	
	var areaStream = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop$1;
	  },
	  sphere: function() {
	    areaSum.add(tau$3);
	  }
	};
	
	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}
	
	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}
	
	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
	}
	
	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole
	
	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos$1(phi),
	      sinPhi = sin$1(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
	      v = k * sdLambda * sin$1(adLambda);
	  areaRingSum.add(atan2(v, u));
	
	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}
	
	var area = function(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	};
	
	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}
	
	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
	  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
	}
	
	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	
	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}
	
	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}
	
	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}
	
	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}
	
	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range;
	
	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon$2) phi1 = 90;
	    else if (deltaSum < -epsilon$2) phi0 = -90;
	    range[0] = lambda0$1, range[1] = lambda1;
	  }
	};
	
	function boundsPoint(lambda, phi) {
	  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}
	
	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees$1 * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees$1;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees$1;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    boundsPoint(lambda, phi);
	  }
	  p0 = p, lambda2 = lambda;
	}
	
	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}
	
	function boundsLineEnd() {
	  range[0] = lambda0$1, range[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}
	
	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}
	
	function boundsRingStart() {
	  areaStream.lineStart();
	}
	
	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
	  range[0] = lambda0$1, range[1] = lambda1;
	  p0 = null;
	}
	
	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}
	
	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}
	
	function rangeContains(range, x) {
	  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	}
	
	var bounds = function(feature) {
	  var i, n, a, b, merged, deltaMax, delta;
	
	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);
	
	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);
	
	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }
	
	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }
	
	  ranges = range = null;
	
	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	};
	
	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point
	
	var centroidStream = {
	  sphere: noop$1,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};
	
	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
	}
	
	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}
	
	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}
	
	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}
	
	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}
	
	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}
	
	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidPointCartesian(x0, y0, z0);
	}
	
	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      u = x0 * x + y0 * y + z0 * z,
	      v = m && -acos(u) / m, // area weight
	      w = atan2(m, u); // line weight
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}
	
	var centroid = function(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);
	
	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;
	
	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2$1) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2$1) return [NaN, NaN];
	  }
	
	  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];
	};
	
	var constant$7 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var compose = function(a, b) {
	
	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }
	
	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };
	
	  return compose;
	};
	
	function rotationIdentity(lambda, phi) {
	  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	}
	
	rotationIdentity.invert = rotationIdentity;
	
	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}
	
	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	  };
	}
	
	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}
	
	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos$1(deltaPhi),
	      sinDeltaPhi = sin$1(deltaPhi),
	      cosDeltaGamma = cos$1(deltaGamma),
	      sinDeltaGamma = sin$1(deltaGamma);
	
	  function rotation(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }
	
	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };
	
	  return rotation;
	}
	
	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
	
	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }
	
	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };
	
	  return forward;
	};
	
	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos$1(radius),
	      sinRadius = sin$1(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau$3;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
	    stream.point(point[0], point[1]);
	  }
	}
	
	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;
	}
	
	var circle = function() {
	  var center = constant$7([0, 0]),
	      radius = constant$7(90),
	      precision = constant$7(6),
	      ring,
	      rotate,
	      stream = {point: point};
	
	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees$1, x[1] *= degrees$1;
	  }
	
	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }
	
	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;
	  };
	
	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;
	  };
	
	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;
	  };
	
	  return circle;
	};
	
	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$1,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};
	
	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};
	
	var pointEqual = function(a, b) {
	  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;
	};
	
	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}
	
	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;
	
	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;
	
	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }
	
	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });
	
	  if (!subject.length) return;
	
	  clip.sort(compareIntersection);
	  link$1(subject);
	  link$1(clip);
	
	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }
	
	  var start = subject[0],
	      points,
	      point;
	
	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};
	
	function link$1(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}
	
	var clipMax = 1e9;
	var clipMin = -clipMax;
	
	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?
	
	function clipExtent(x0, y0, x1, y1) {
	
	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }
	
	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }
	
	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }
	
	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }
	
	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }
	
	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;
	
	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };
	
	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }
	
	    function polygonInside() {
	      var winding = 0;
	
	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }
	
	      return winding;
	    }
	
	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }
	
	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }
	
	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }
	
	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }
	
	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }
	
	    return clipStream;
	  };
	}
	
	var extent$1 = function() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;
	
	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	};
	
	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;
	
	var lengthStream = {
	  sphere: noop$1,
	  point: noop$1,
	  lineStart: lengthLineStart,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1
	};
	
	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}
	
	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop$1;
	}
	
	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
	  lengthStream.point = lengthPoint;
	}
	
	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin$1(phi),
	      cosPhi = cos$1(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos$1(delta),
	      sinDelta = sin$1(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}
	
	var length$1 = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};
	
	var coordinates = [null, null];
	var object$1 = {type: "LineString", coordinates: coordinates};
	
	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length$1(object$1);
	};
	
	function graticuleX(y0, y1, dy) {
	  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}
	
	function graticuleY(x0, x1, dx) {
	  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}
	
	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;
	
	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }
	
	  function lines() {
	    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))
	        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));
	  }
	
	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };
	
	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };
	
	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };
	
	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };
	
	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };
	
	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };
	
	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };
	
	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };
	
	  return graticule
	      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
	      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
	}
	
	function graticule10() {
	  return graticule()();
	}
	
	var interpolate$1 = function(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos$1(y0),
	      sy0 = sin$1(y0),
	      cy1 = cos$1(y1),
	      sy1 = sin$1(y1),
	      kx0 = cy0 * cos$1(x0),
	      ky0 = cy0 * sin$1(x0),
	      kx1 = cy1 * cos$1(x1),
	      ky1 = cy1 * sin$1(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin$1(d);
	
	  var interpolate = d ? function(t) {
	    var B = sin$1(t *= d) / k,
	        A = sin$1(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees$1,
	      atan2(z, sqrt(x * x + y * y)) * degrees$1
	    ];
	  } : function() {
	    return [x0 * degrees$1, y0 * degrees$1];
	  };
	
	  interpolate.distance = d;
	
	  return interpolate;
	};
	
	var identity$4 = function(x) {
	  return x;
	};
	
	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;
	
	var areaStream$1 = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};
	
	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}
	
	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}
	
	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}
	
	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}
	
	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;
	
	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};
	
	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}
	
	// TODO Enforce positive area for exterior, negative area for interior?
	
	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;
	
	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};
	
	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}
	
	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}
	
	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}
	
	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}
	
	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}
	
	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}
	
	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);
	
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	
	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}
	
	function PathContext(context) {
	  this._context = context;
	}
	
	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau$3);
	        break;
	      }
	    }
	  },
	  result: noop$1
	};
	
	function PathString() {
	  this._string = [];
	}
	
	PathString.prototype = {
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    return this._circle = circle$1(_), this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    }
	  }
	};
	
	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}
	
	var index$1 = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;
	
	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }
	
	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };
	
	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };
	
	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };
	
	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
	  };
	
	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };
	
	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };
	
	  return path.projection(projection).context(context);
	};
	
	var sum$1 = adder();
	
	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin$1(lambda), -cos$1(lambda), 0],
	      angle = 0,
	      winding = 0;
	
	  sum$1.reset();
	
	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin$1(phi0),
	        cosPhi0 = cos$1(phi0);
	
	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin$1(phi1),
	          cosPhi1 = cos$1(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi$3,
	          k = sinPhi0 * sinPhi1;
	
	      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;
	
	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }
	
	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.
	
	  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
	};
	
	var clip = function(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;
	
	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };
	
	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }
	
	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }
	
	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }
	
	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }
	
	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }
	
	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }
	
	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();
	
	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;
	
	      ring.pop();
	      polygon.push(ring);
	      ring = null;
	
	      if (!n) return;
	
	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }
	
	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	
	      segments.push(ringSegments.filter(validSegment));
	    }
	
	    return clip;
	  };
	};
	
	function validSegment(segment) {
	  return segment.length > 1;
	}
	
	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
	}
	
	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi$3, -halfPi$2]
	);
	
	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections
	
	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}
	
	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon$2
	      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
	          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}
	
	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi$2;
	    stream.point(-pi$3, phi);
	    stream.point(0, phi);
	    stream.point(pi$3, phi);
	    stream.point(pi$3, 0);
	    stream.point(pi$3, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$3, -phi);
	    stream.point(-pi$3, 0);
	    stream.point(-pi$3, phi);
	  } else if (abs(from[0] - to[0]) > epsilon$2) {
	    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}
	
	var clipCircle = function(radius, delta) {
	  var cr = cos$1(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case
	
	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }
	
	  function visible(lambda, phi) {
	    return cos$1(lambda) * cos$1(phi) > cr;
	  }
	
	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon$2;
	            point1[1] += epsilon$2;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }
	
	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);
	
	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;
	
	    // Two polar points.
	    if (!determinant) return !two && a;
	
	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);
	
	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);
	
	    if (t2 < 0) return;
	
	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);
	
	    if (!two) return q;
	
	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;
	
	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
	
	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi$3) < epsilon$2,
	        meridian = polar || delta < epsilon$2;
	
	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
	
	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }
	
	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$3 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }
	
	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
	};
	
	var transform = function(methods) {
	  return {
	    stream: transformer(methods)
	  };
	};
	
	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}
	
	function TransformStream() {}
	
	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};
	
	function fitExtent(projection, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = projection.clipExtent && projection.clipExtent();
	
	  projection
	      .scale(150)
	      .translate([0, 0]);
	
	  if (clip != null) projection.clipExtent(null);
	
	  geoStream(object, projection.stream(boundsStream$1));
	
	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	
	  if (clip != null) projection.clipExtent(clip);
	
	  return projection
	      .scale(k * 150)
	      .translate([x, y]);
	}
	
	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}
	
	var maxDepth = 16;
	var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)
	
	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};
	
	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}
	
	function resample$1(project, delta2) {
	
	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point
	
	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };
	
	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }
	
	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }
	
	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }
	
	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }
	
	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }
	
	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }
	
	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }
	
	    return resampleStream;
	  };
	}
	
	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});
	
	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}
	
	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;
	
	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }
	
	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }
	
	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }
	
	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };
	
	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };
	
	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };
	
	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };
	
	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };
	
	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };
	
	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };
	
	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };
	
	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };
	
	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };
	
	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }
	
	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }
	
	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}
	
	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi$3 / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);
	
	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
	  };
	
	  return p;
	}
	
	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos$1(phi0);
	
	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
	  }
	
	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };
	
	  return forward;
	}
	
	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;
	
	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);
	
	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;
	
	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin$1(y)) / n;
	    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
	  }
	
	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };
	
	  return project;
	}
	
	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};
	
	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};
	
	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}
	
	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var albersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};
	
	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }
	
	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };
	
	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };
	
	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };
	
	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };
	
	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];
	
	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);
	
	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);
	
	    return reset();
	  };
	
	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };
	
	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };
	
	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }
	
	  return albersUsa.scale(1070);
	};
	
	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos$1(x),
	        cy = cos$1(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin$1(x),
	      k * sin$1(y)
	    ];
	  }
	}
	
	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin$1(c),
	        cc = cos$1(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}
	
	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});
	
	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});
	
	var azimuthalEqualArea = function() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};
	
	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin$1(c);
	});
	
	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});
	
	var azimuthalEquidistant = function() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};
	
	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi$2 + phi) / 2))];
	}
	
	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi$2];
	};
	
	var mercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau$3);
	};
	
	function mercatorProjection(project) {
	  var m = projection(project),
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      clipAuto;
	
	  m.scale = function(_) {
	    return arguments.length ? (scale(_), clipAuto && m.clipExtent(null), m) : scale();
	  };
	
	  m.translate = function(_) {
	    return arguments.length ? (translate(_), clipAuto && m.clipExtent(null), m) : translate();
	  };
	
	  m.clipExtent = function(_) {
	    if (!arguments.length) return clipAuto ? null : clipExtent();
	    if (clipAuto = _ == null) {
	      var k = pi$3 * scale(),
	          t = translate();
	      _ = [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]];
	    }
	    clipExtent(_);
	    return m;
	  };
	
	  return m.clipExtent(null);
	}
	
	function tany(y) {
	  return tan((halfPi$2 + y) / 2);
	}
	
	function conicConformalRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;
	
	  if (!n) return mercatorRaw;
	
	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
	    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
	    var r = f / pow(tany(y), n);
	    return [r * sin$1(n * x), f - r * cos$1(n * x)];
	  }
	
	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];
	  };
	
	  return project;
	}
	
	var conicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};
	
	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}
	
	equirectangularRaw.invert = equirectangularRaw;
	
	var equirectangular = function() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	};
	
	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
	      g = cy0 / n + y0;
	
	  if (abs(n) < epsilon$2) return equirectangularRaw;
	
	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin$1(nx), g - gy * cos$1(nx)];
	  }
	
	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };
	
	  return project;
	}
	
	var conicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};
	
	function gnomonicRaw(x, y) {
	  var cy = cos$1(y), k = cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	gnomonicRaw.invert = azimuthalInvert(atan);
	
	var gnomonic = function() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};
	
	function scaleTranslate(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}
	
	var identity$5 = function() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform = identity$4, // scale, translate and reflect
	      x0 = null, y0, x1, y1, clip = identity$4, // clip extent
	      cache,
	      cacheStream,
	      projection;
	
	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }
	
	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform(clip(cacheStream = stream));
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    }
	  };
	};
	
	function orthographicRaw(x, y) {
	  return [cos$1(y) * sin$1(x), sin$1(y)];
	}
	
	orthographicRaw.invert = azimuthalInvert(asin);
	
	var orthographic = function() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon$2);
	};
	
	function stereographicRaw(x, y) {
	  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}
	
	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});
	
	var stereographic = function() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};
	
	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi$2 + phi) / 2)), -lambda];
	}
	
	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi$2];
	};
	
	var transverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;
	
	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };
	
	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };
	
	  return rotate([0, 0, 90])
	      .scale(159.155);
	};
	
	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}
	
	function meanXReduce(x, c) {
	  return x + c.x;
	}
	
	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}
	
	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}
	
	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}
	
	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}
	
	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;
	
	  function cluster(root) {
	    var previousNode,
	        x = 0;
	
	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });
	
	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;
	
	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }
	
	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };
	
	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };
	
	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return cluster;
	};
	
	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}
	
	var node_count = function() {
	  return this.eachAfter(count);
	};
	
	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};
	
	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};
	
	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};
	
	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};
	
	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};
	
	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};
	
	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}
	
	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};
	
	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};
	
	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};
	
	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};
	
	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;
	
	  if (children == null) children = defaultChildren;
	
	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }
	
	  return root.eachBefore(computeHeight);
	}
	
	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}
	
	function defaultChildren(d) {
	  return d.children;
	}
	
	function copyData(node) {
	  node.data = node.data.data;
	}
	
	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}
	
	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}
	
	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};
	
	function Node$2(value) {
	  this._ = value;
	  this.next = null;
	}
	
	var shuffle$1 = function(array) {
	  var i,
	      n = (array = array.slice()).length,
	      head = null,
	      node = head;
	
	  while (n) {
	    var next = new Node$2(array[n - 1]);
	    if (node) node = node.next = next;
	    else node = head = next;
	    array[i] = array[--n];
	  }
	
	  return {
	    head: head,
	    tail: node
	  };
	};
	
	var enclose = function(circles) {
	  return encloseN(shuffle$1(circles), []);
	};
	
	function encloses(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r - b.r;
	  return dr * dr + 1e-6 > dx * dx + dy * dy;
	}
	
	// Returns the smallest circle that contains circles L and intersects circles B.
	function encloseN(L, B) {
	  var circle,
	      l0 = null,
	      l1 = L.head,
	      l2,
	      p1;
	
	  switch (B.length) {
	    case 1: circle = enclose1(B[0]); break;
	    case 2: circle = enclose2(B[0], B[1]); break;
	    case 3: circle = enclose3(B[0], B[1], B[2]); break;
	  }
	
	  while (l1) {
	    p1 = l1._, l2 = l1.next;
	    if (!circle || !encloses(circle, p1)) {
	
	      // Temporarily truncate L before l1.
	      if (l0) L.tail = l0, l0.next = null;
	      else L.head = L.tail = null;
	
	      B.push(p1);
	      circle = encloseN(L, B); // Note: reorders L!
	      B.pop();
	
	      // Move l1 to the front of L and reconnect the truncated list L.
	      if (L.head) l1.next = L.head, L.head = l1;
	      else l1.next = null, L.head = L.tail = l1;
	      l0 = L.tail, l0.next = l2;
	
	    } else {
	      l0 = l1;
	    }
	    l1 = l2;
	  }
	
	  L.tail = l0;
	  return circle;
	}
	
	function enclose1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}
	
	function enclose2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}
	
	function enclose3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = 2 * (x1 - x2),
	      b2 = 2 * (y1 - y2),
	      c2 = 2 * (r2 - r1),
	      d2 = x1 * x1 + y1 * y1 - r1 * r1 - x2 * x2 - y2 * y2 + r2 * r2,
	      a3 = 2 * (x1 - x3),
	      b3 = 2 * (y1 - y3),
	      c3 = 2 * (r3 - r1),
	      d3 = x1 * x1 + y1 * y1 - r1 * r1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / ab - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / ab - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (xa * xb + ya * yb + r1),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = (-B - Math.sqrt(B * B - 4 * A * C)) / (2 * A);
	  return {
	    x: xa + xb * r + x1,
	    y: ya + yb * r + y1,
	    r: r
	  };
	}
	
	function place(a, b, c) {
	  var ax = a.x,
	      ay = a.y,
	      da = b.r + c.r,
	      db = a.r + c.r,
	      dx = b.x - ax,
	      dy = b.y - ay,
	      dc = dx * dx + dy * dy;
	  if (dc) {
	    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
	        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	    c.x = ax + x * dx + y * dy;
	    c.y = ay + x * dy - y * dx;
	  } else {
	    c.x = ax + db;
	    c.y = ay;
	  }
	}
	
	function intersects(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r + b.r;
	  return dr * dr - 1e-6 > dx * dx + dy * dy;
	}
	
	function distance1(a, b) {
	  var l = a._.r;
	  while (a !== b) l += 2 * (a = a.next)._.r;
	  return l - b._.r;
	}
	
	function distance2(circle, x, y) {
	  var dx = circle.x - x,
	      dy = circle.y - y;
	  return dx * dx + dy * dy;
	}
	
	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}
	
	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;
	
	  var a, b, c, n;
	
	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;
	
	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;
	
	  // Place the third circle.
	  place(b, a, c = circles[2]);
	
	  // Initialize the weighted centroid.
	  var aa = a.r * a.r,
	      ba = b.r * b.r,
	      ca = c.r * c.r,
	      oa = aa + ba + ca,
	      ox = aa * a.x + ba * b.x + ca * c.x,
	      oy = aa * a.y + ba * b.y + ca * c.y,
	      cx, cy, i, j, k, sj, sk;
	
	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;
	
	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);
	
	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          if (sj + a._.r + b._.r > distance1(j, b)) a = j; else b = j;
	          a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          if (distance1(a, k) > sk + a._.r + b._.r) a = k; else b = k;
	          a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);
	
	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;
	
	    // Update the weighted centroid.
	    oa += ca = c._.r * c._.r;
	    ox += ca * c._.x;
	    oy += ca * c._.y;
	
	    // Compute the new closest circle a to centroid.
	    aa = distance2(a._, cx = ox / oa, cy = oy / oa);
	    while ((c = c.next) !== b) {
	      if ((ca = distance2(c._, cx, cy)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }
	
	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);
	
	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;
	
	  return c.r;
	}
	
	var siblings = function(circles) {
	  packEnclose(circles);
	  return circles;
	};
	
	function optional(f) {
	  return f == null ? null : required(f);
	}
	
	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}
	
	function constantZero() {
	  return 0;
	}
	
	var constant$8 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function defaultRadius$1(d) {
	  return Math.sqrt(d.value);
	}
	
	var index$2 = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;
	
	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius$1))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }
	
	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };
	
	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };
	
	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;
	  };
	
	  return pack;
	};
	
	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}
	
	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;
	
	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}
	
	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}
	
	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};
	
	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};
	
	var partition = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;
	
	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }
	
	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };
	
	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };
	
	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };
	
	  return partition;
	};
	
	var keyPrefix$1 = "$";
	var preroot = {depth: -1};
	var ambiguous = {};
	
	function defaultId(d) {
	  return d.id;
	}
	
	function defaultParentId(d) {
	  return d.parentId;
	}
	
	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;
	
	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};
	
	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix$1 + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }
	
	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix$1 + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }
	
	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");
	
	    return root;
	  }
	
	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };
	
	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };
	
	  return stratify;
	};
	
	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}
	
	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }
	
	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}
	
	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}
	
	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}
	
	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}
	
	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}
	
	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}
	
	TreeNode.prototype = Object.create(Node.prototype);
	
	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;
	
	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }
	
	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}
	
	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;
	
	  function tree(root) {
	    var t = treeRoot(root);
	
	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);
	
	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);
	
	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }
	
	    return root;
	  }
	
	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }
	
	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }
	
	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }
	
	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }
	
	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };
	
	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };
	
	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };
	
	  return tree;
	};
	
	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;
	
	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};
	
	var phi = (1 + Math.sqrt(5)) / 2;
	
	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;
	
	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;
	
	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);
	
	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }
	
	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }
	
	  return rows;
	}
	
	var squarify = ((function custom(ratio) {
	
	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }
	
	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return squarify;
	}))(phi);
	
	var index$3 = function() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;
	
	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }
	
	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }
	
	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };
	
	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };
	
	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };
	
	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };
	
	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;
	  };
	
	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };
	
	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;
	  };
	
	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;
	  };
	
	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
	  };
	
	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;
	  };
	
	  return treemap;
	};
	
	var binary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);
	
	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }
	
	  partition(0, n, parent.value, x0, y0, x1, y1);
	
	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }
	
	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;
	
	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }
	
	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;
	
	    if ((y1 - y0) > (x1 - x0)) {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    } else {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    }
	  }
	};
	
	var sliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};
	
	var resquarify = ((function custom(ratio) {
	
	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;
	
	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }
	
	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };
	
	  return resquarify;
	}))(phi);
	
	var area$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      a,
	      b = polygon[n - 1],
	      area = 0;
	
	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    area += a[1] * b[0] - a[0] * b[1];
	  }
	
	  return area / 2;
	};
	
	var centroid$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      x = 0,
	      y = 0,
	      a,
	      b = polygon[n - 1],
	      c,
	      k = 0;
	
	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    k += c = a[0] * b[1] - b[0] * a[1];
	    x += (a[0] + b[0]) * c;
	    y += (a[1] + b[1]) * c;
	  }
	
	  return k *= 3, [x / k, y / k];
	};
	
	// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
	// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
	// right, +y is up). Returns a positive value if ABC is counter-clockwise,
	// negative if clockwise, and zero if the points are collinear.
	var cross = function(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	};
	
	function lexicographicOrder(a, b) {
	  return a[0] - b[0] || a[1] - b[1];
	}
	
	// Computes the upper convex hull per the monotone chain algorithm.
	// Assumes points.length >= 3, is sorted by x, unique in y.
	// Returns an array of indices into points in left-to-right order.
	function computeUpperHullIndexes(points) {
	  var n = points.length,
	      indexes = [0, 1],
	      size = 2;
	
	  for (var i = 2; i < n; ++i) {
	    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
	    indexes[size++] = i;
	  }
	
	  return indexes.slice(0, size); // remove popped points
	}
	
	var hull = function(points) {
	  if ((n = points.length) < 3) return null;
	
	  var i,
	      n,
	      sortedPoints = new Array(n),
	      flippedPoints = new Array(n);
	
	  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
	  sortedPoints.sort(lexicographicOrder);
	  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];
	
	  var upperIndexes = computeUpperHullIndexes(sortedPoints),
	      lowerIndexes = computeUpperHullIndexes(flippedPoints);
	
	  // Construct the hull polygon, removing possible duplicate endpoints.
	  var skipLeft = lowerIndexes[0] === upperIndexes[0],
	      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
	      hull = [];
	
	  // Add upper hull in right-to-l order.
	  // Then add lower hull in left-to-right order.
	  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
	  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);
	
	  return hull;
	};
	
	var contains = function(polygon, point) {
	  var n = polygon.length,
	      p = polygon[n - 1],
	      x = point[0], y = point[1],
	      x0 = p[0], y0 = p[1],
	      x1, y1,
	      inside = false;
	
	  for (var i = 0; i < n; ++i) {
	    p = polygon[i], x1 = p[0], y1 = p[1];
	    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
	    x0 = x1, y0 = y1;
	  }
	
	  return inside;
	};
	
	var length$2 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      b = polygon[n - 1],
	      xa,
	      ya,
	      xb = b[0],
	      yb = b[1],
	      perimeter = 0;
	
	  while (++i < n) {
	    xa = xb;
	    ya = yb;
	    b = polygon[i];
	    xb = b[0];
	    yb = b[1];
	    xa -= xb;
	    ya -= yb;
	    perimeter += Math.sqrt(xa * xa + ya * ya);
	  }
	
	  return perimeter;
	};
	
	var slice$3 = [].slice;
	
	var noabort = {};
	
	function Queue(size) {
	  if (!(size >= 1)) throw new Error;
	  this._size = size;
	  this._call =
	  this._error = null;
	  this._tasks = [];
	  this._data = [];
	  this._waiting =
	  this._active =
	  this._ended =
	  this._start = 0; // inside a synchronous task callback?
	}
	
	Queue.prototype = queue.prototype = {
	  constructor: Queue,
	  defer: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    if (this._error != null) return this;
	    var t = slice$3.call(arguments, 1);
	    t.push(callback);
	    ++this._waiting, this._tasks.push(t);
	    poke$1(this);
	    return this;
	  },
	  abort: function() {
	    if (this._error == null) abort(this, new Error("abort"));
	    return this;
	  },
	  await: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
	    maybeNotify(this);
	    return this;
	  },
	  awaitAll: function(callback) {
	    if (typeof callback !== "function" || this._call) throw new Error;
	    this._call = callback;
	    maybeNotify(this);
	    return this;
	  }
	};
	
	function poke$1(q) {
	  if (!q._start) {
	    try { start$1(q); } // let the current task complete
	    catch (e) {
	      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
	      else if (!q._data) throw e; // await callback errored synchronously
	    }
	  }
	}
	
	function start$1(q) {
	  while (q._start = q._waiting && q._active < q._size) {
	    var i = q._ended + q._active,
	        t = q._tasks[i],
	        j = t.length - 1,
	        c = t[j];
	    t[j] = end(q, i);
	    --q._waiting, ++q._active;
	    t = c.apply(null, t);
	    if (!q._tasks[i]) continue; // task finished synchronously
	    q._tasks[i] = t || noabort;
	  }
	}
	
	function end(q, i) {
	  return function(e, r) {
	    if (!q._tasks[i]) return; // ignore multiple callbacks
	    --q._active, ++q._ended;
	    q._tasks[i] = null;
	    if (q._error != null) return; // ignore secondary errors
	    if (e != null) {
	      abort(q, e);
	    } else {
	      q._data[i] = r;
	      if (q._waiting) poke$1(q);
	      else maybeNotify(q);
	    }
	  };
	}
	
	function abort(q, e) {
	  var i = q._tasks.length, t;
	  q._error = e; // ignore active callbacks
	  q._data = undefined; // allow gc
	  q._waiting = NaN; // prevent starting
	
	  while (--i >= 0) {
	    if (t = q._tasks[i]) {
	      q._tasks[i] = null;
	      if (t.abort) {
	        try { t.abort(); }
	        catch (e) { /* ignore */ }
	      }
	    }
	  }
	
	  q._active = NaN; // allow notification
	  maybeNotify(q);
	}
	
	function maybeNotify(q) {
	  if (!q._active && q._call) {
	    var d = q._data;
	    q._data = undefined; // allow gc
	    q._call(q._error, d);
	  }
	}
	
	function queue(concurrency) {
	  return new Queue(arguments.length ? +concurrency : Infinity);
	}
	
	var uniform = function(min, max) {
	  min = min == null ? 0 : +min;
	  max = max == null ? 1 : +max;
	  if (arguments.length === 1) max = min, min = 0;
	  else max -= min;
	  return function() {
	    return Math.random() * max + min;
	  };
	};
	
	var normal = function(mu, sigma) {
	  var x, r;
	  mu = mu == null ? 0 : +mu;
	  sigma = sigma == null ? 1 : +sigma;
	  return function() {
	    var y;
	
	    // If available, use the second previously-generated uniform random.
	    if (x != null) y = x, x = null;
	
	    // Otherwise, generate a new x and y.
	    else do {
	      x = Math.random() * 2 - 1;
	      y = Math.random() * 2 - 1;
	      r = x * x + y * y;
	    } while (!r || r > 1);
	
	    return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
	  };
	};
	
	var logNormal = function() {
	  var randomNormal = normal.apply(this, arguments);
	  return function() {
	    return Math.exp(randomNormal());
	  };
	};
	
	var irwinHall = function(n) {
	  return function() {
	    for (var sum = 0, i = 0; i < n; ++i) sum += Math.random();
	    return sum;
	  };
	};
	
	var bates = function(n) {
	  var randomIrwinHall = irwinHall(n);
	  return function() {
	    return randomIrwinHall() / n;
	  };
	};
	
	var exponential$1 = function(lambda) {
	  return function() {
	    return -Math.log(1 - Math.random()) / lambda;
	  };
	};
	
	var request = function(url, callback) {
	  var request,
	      event = dispatch("beforesend", "progress", "load", "error"),
	      mimeType,
	      headers = map$1(),
	      xhr = new XMLHttpRequest,
	      user = null,
	      password = null,
	      response,
	      responseType,
	      timeout = 0;
	
	  // If IE does not support CORS, use XDomainRequest.
	  if (typeof XDomainRequest !== "undefined"
	      && !("withCredentials" in xhr)
	      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;
	
	  "onload" in xhr
	      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
	      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };
	
	  function respond(o) {
	    var status = xhr.status, result;
	    if (!status && hasResponse(xhr)
	        || status >= 200 && status < 300
	        || status === 304) {
	      if (response) {
	        try {
	          result = response.call(request, xhr);
	        } catch (e) {
	          event.call("error", request, e);
	          return;
	        }
	      } else {
	        result = xhr;
	      }
	      event.call("load", request, result);
	    } else {
	      event.call("error", request, o);
	    }
	  }
	
	  xhr.onprogress = function(e) {
	    event.call("progress", request, e);
	  };
	
	  request = {
	    header: function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers.get(name);
	      if (value == null) headers.remove(name);
	      else headers.set(name, value + "");
	      return request;
	    },
	
	    // If mimeType is non-null and no Accept header is set, a default is used.
	    mimeType: function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return request;
	    },
	
	    // Specifies what type the response value should take;
	    // for instance, arraybuffer, blob, document, or text.
	    responseType: function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return request;
	    },
	
	    timeout: function(value) {
	      if (!arguments.length) return timeout;
	      timeout = +value;
	      return request;
	    },
	
	    user: function(value) {
	      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
	    },
	
	    password: function(value) {
	      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
	    },
	
	    // Specify how to convert the response content to a specific type;
	    // changes the callback value on "load" events.
	    response: function(value) {
	      response = value;
	      return request;
	    },
	
	    // Alias for send("GET", …).
	    get: function(data, callback) {
	      return request.send("GET", data, callback);
	    },
	
	    // Alias for send("POST", …).
	    post: function(data, callback) {
	      return request.send("POST", data, callback);
	    },
	
	    // If callback is non-null, it will be used for error and load events.
	    send: function(method, data, callback) {
	      xhr.open(method, url, true, user, password);
	      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
	      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
	      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
	      if (responseType != null) xhr.responseType = responseType;
	      if (timeout > 0) xhr.timeout = timeout;
	      if (callback == null && typeof data === "function") callback = data, data = null;
	      if (callback != null && callback.length === 1) callback = fixCallback(callback);
	      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
	      event.call("beforesend", request, xhr);
	      xhr.send(data == null ? null : data);
	      return request;
	    },
	
	    abort: function() {
	      xhr.abort();
	      return request;
	    },
	
	    on: function() {
	      var value = event.on.apply(event, arguments);
	      return value === event ? request : value;
	    }
	  };
	
	  if (callback != null) {
	    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    return request.get(callback);
	  }
	
	  return request;
	};
	
	function fixCallback(callback) {
	  return function(error, xhr) {
	    callback(error == null ? xhr : null);
	  };
	}
	
	function hasResponse(xhr) {
	  var type = xhr.responseType;
	  return type && type !== "text"
	      ? xhr.response // null on error
	      : xhr.responseText; // "" on error
	}
	
	var type$1 = function(defaultMimeType, response) {
	  return function(url, callback) {
	    var r = request(url).mimeType(defaultMimeType).response(response);
	    if (callback != null) {
	      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	      return r.get(callback);
	    }
	    return r;
	  };
	};
	
	var html = type$1("text/html", function(xhr) {
	  return document.createRange().createContextualFragment(xhr.responseText);
	});
	
	var json = type$1("application/json", function(xhr) {
	  return JSON.parse(xhr.responseText);
	});
	
	var text = type$1("text/plain", function(xhr) {
	  return xhr.responseText;
	});
	
	var xml = type$1("application/xml", function(xhr) {
	  var xml = xhr.responseXML;
	  if (!xml) throw new Error("parse error");
	  return xml;
	});
	
	var dsv$1 = function(defaultMimeType, parse) {
	  return function(url, row, callback) {
	    if (arguments.length < 3) callback = row, row = null;
	    var r = request(url).mimeType(defaultMimeType);
	    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
	    r.row(row);
	    return callback ? r.get(callback) : r;
	  };
	};
	
	function responseOf(parse, row) {
	  return function(request$$1) {
	    return parse(request$$1.responseText, row);
	  };
	}
	
	var csv$1 = dsv$1("text/csv", csvParse);
	
	var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);
	
	var array$2 = Array.prototype;
	
	var map$3 = array$2.map;
	var slice$4 = array$2.slice;
	
	var implicit = {name: "implicit"};
	
	function ordinal(range) {
	  var index = map$1(),
	      domain = [],
	      unknown = implicit;
	
	  range = range == null ? [] : slice$4.call(range);
	
	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$1();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = slice$4.call(_), scale) : range.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return scale;
	}
	
	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;
	
	  delete scale.unknown;
	
	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };
	
	  scale.bandwidth = function() {
	    return bandwidth;
	  };
	
	  scale.step = function() {
	    return step;
	  };
	
	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };
	
	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };
	
	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };
	
	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };
	
	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };
	
	  return rescale();
	}
	
	function pointish(scale) {
	  var copy = scale.copy;
	
	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;
	
	  scale.copy = function() {
	    return pointish(copy());
	  };
	
	  return scale;
	}
	
	function point$1() {
	  return pointish(band().paddingInner(1));
	}
	
	var constant$9 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	var number$1 = function(x) {
	  return +x;
	};
	
	var unit = [0, 1];
	
	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$9(b);
	}
	
	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}
	
	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}
	
	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}
	
	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;
	
	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }
	
	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }
	
	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}
	
	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}
	
	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = interpolateValue,
	      clamp = false,
	      piecewise,
	      output,
	      input;
	
	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }
	
	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }
	
	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), rescale()) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range$$1 = slice$4.call(_), interpolate$$1 = interpolateRound, rescale();
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };
	
	  return rescale();
	}
	
	var tickFormat = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return exports.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return exports.format(specifier);
	};
	
	function linearish(scale) {
	  var domain = scale.domain;
	
	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };
	
	  scale.nice = function(count) {
	    var d = domain(),
	        i = d.length - 1,
	        n = count == null ? 10 : count,
	        start = d[0],
	        stop = d[i],
	        step = tickStep(start, stop, n);
	
	    if (step) {
	      step = tickStep(Math.floor(start / step) * step, Math.ceil(stop / step) * step, n);
	      d[0] = Math.floor(start / step) * step;
	      d[i] = Math.ceil(stop / step) * step;
	      domain(d);
	    }
	
	    return scale;
	  };
	
	  return scale;
	}
	
	function linear$2() {
	  var scale = continuous(deinterpolateLinear, reinterpolate);
	
	  scale.copy = function() {
	    return copy(scale, linear$2());
	  };
	
	  return linearish(scale);
	}
	
	function identity$6() {
	  var domain = [0, 1];
	
	  function scale(x) {
	    return +x;
	  }
	
	  scale.invert = scale;
	
	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$1), scale) : domain.slice();
	  };
	
	  scale.copy = function() {
	    return identity$6().domain(domain);
	  };
	
	  return linearish(scale);
	}
	
	var nice = function(domain, interval) {
	  domain = domain.slice();
	
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;
	
	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }
	
	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};
	
	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$9(b);
	}
	
	function reinterpolate$1(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}
	
	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}
	
	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}
	
	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}
	
	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}
	
	function log$1() {
	  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);
	
	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }
	
	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	
	    if (r = v < u) i = u, u = v, v = i;
	
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];
	
	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }
	
	    return r ? z.reverse() : z;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = exports.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };
	
	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };
	
	  scale.copy = function() {
	    return copy(scale, log$1().base(base));
	  };
	
	  return scale;
	}
	
	function raise$1(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}
	
	function pow$1() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;
	
	  function deinterpolate(a, b) {
	    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
	        ? function(x) { return (raise$1(x, exponent) - a) / b; }
	        : constant$9(b);
	  }
	
	  function reinterpolate(a, b) {
	    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
	    return function(t) { return raise$1(a + b * t, 1 / exponent); };
	  }
	
	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };
	
	  scale.copy = function() {
	    return copy(scale, pow$1().exponent(exponent));
	  };
	
	  return linearish(scale);
	}
	
	function sqrt$1() {
	  return pow$1().exponent(0.5);
	}
	
	function quantile$$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];
	
	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }
	
	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[bisectRight(thresholds, x)];
	  }
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), rescale()) : range$$1.slice();
	  };
	
	  scale.quantiles = function() {
	    return thresholds.slice();
	  };
	
	  scale.copy = function() {
	    return quantile$$1()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	function quantize$1() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];
	
	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }
	
	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice$4.call(_)).length - 1, rescale()) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return quantize$1()
	        .domain([x0, x1])
	        .range(range$$1);
	  };
	
	  return linearish(scale);
	}
	
	function threshold$1() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;
	
	  function scale(x) {
	    if (x <= x) return range$$1[bisectRight(domain, x, 0, n)];
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice$4.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };
	
	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range$$1);
	  };
	
	  return scale;
	}
	
	var t0$1 = new Date;
	var t1$1 = new Date;
	
	function newInterval(floori, offseti, count, field) {
	
	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }
	
	  interval.floor = interval;
	
	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };
	
	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };
	
	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };
	
	  interval.range = function(start, stop, step) {
	    var range = [];
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
	    return range;
	  };
	
	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) while (--step >= 0) while (offseti(date, 1), !test(date)) {} // eslint-disable-line no-empty
	    });
	  };
	
	  if (count) {
	    interval.count = function(start, end) {
	      t0$1.setTime(+start), t1$1.setTime(+end);
	      floori(t0$1), floori(t1$1);
	      return Math.floor(count(t0$1, t1$1));
	    };
	
	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }
	
	  return interval;
	}
	
	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});
	
	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	
	var milliseconds = millisecond.range;
	
	var durationSecond$1 = 1e3;
	var durationMinute$1 = 6e4;
	var durationHour$1 = 36e5;
	var durationDay$1 = 864e5;
	var durationWeek$1 = 6048e5;
	
	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond$1);
	}, function(start, end) {
	  return (end - start) / durationSecond$1;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	
	var seconds = second.range;
	
	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getMinutes();
	});
	
	var minutes = minute.range;
	
	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
	  if (offset < 0) offset += durationHour$1;
	  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getHours();
	});
	
	var hours = hour.range;
	
	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;
	}, function(date) {
	  return date.getDate() - 1;
	});
	
	var days = day.range;
	
	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
	  });
	}
	
	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);
	
	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;
	
	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	
	var months = month.range;
	
	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});
	
	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	
	var years = year.range;
	
	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	
	var utcMinutes = utcMinute.range;
	
	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getUTCHours();
	});
	
	var utcHours = utcHour.range;
	
	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay$1;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	
	var utcDays = utcDay.range;
	
	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek$1;
	  });
	}
	
	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);
	
	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;
	
	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	
	var utcMonths = utcMonth.range;
	
	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});
	
	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	
	var utcYears = utcYear.range;
	
	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}
	
	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}
	
	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}
	
	function formatLocale$1(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "S": formatSeconds,
	    "U": formatWeekNumberSunday,
	    "w": formatWeekdayNumber,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "S": formatUTCSeconds,
	    "U": formatUTCWeekNumberSunday,
	    "w": formatUTCWeekdayNumber,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "S": parseSeconds,
	    "U": parseWeekNumberSunday,
	    "w": parseWeekdayNumber,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };
	
	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);
	
	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	
	      if (!(date instanceof Date)) date = new Date(+date);
	
	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }
	
	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }
	
	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0);
	      if (i != string.length) return null;
	
	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;
	
	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }
	
	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }
	
	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }
	
	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;
	
	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }
	
	    return j;
	  }
	
	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }
	
	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }
	
	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }
	
	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }
	
	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }
	
	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }
	
	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }
	
	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }
	
	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }
	
	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }
	
	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }
	
	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }
	
	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }
	
	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}
	
	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	
	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}
	
	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}
	
	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}
	
	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}
	
	function parseWeekdayNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}
	
	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}
	
	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}
	
	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}
	
	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}
	
	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}
	
	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}
	
	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}
	
	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}
	
	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}
	
	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}
	
	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}
	
	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}
	
	function formatDayOfYear(d, p) {
	  return pad(1 + day.count(year(d), d), p, 3);
	}
	
	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}
	
	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}
	
	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}
	
	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}
	
	function formatWeekNumberSunday(d, p) {
	  return pad(sunday.count(year(d), d), p, 2);
	}
	
	function formatWeekdayNumber(d) {
	  return d.getDay();
	}
	
	function formatWeekNumberMonday(d, p) {
	  return pad(monday.count(year(d), d), p, 2);
	}
	
	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}
	
	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}
	
	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}
	
	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}
	
	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}
	
	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}
	
	function formatUTCDayOfYear(d, p) {
	  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
	}
	
	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}
	
	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}
	
	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}
	
	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}
	
	function formatUTCWeekNumberSunday(d, p) {
	  return pad(utcSunday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCWeekdayNumber(d) {
	  return d.getUTCDay();
	}
	
	function formatUTCWeekNumberMonday(d, p) {
	  return pad(utcMonday.count(utcYear(d), d), p, 2);
	}
	
	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}
	
	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}
	
	function formatUTCZone() {
	  return "+0000";
	}
	
	function formatLiteralPercent() {
	  return "%";
	}
	
	var locale$2;
	
	
	
	
	
	defaultLocale$1({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	
	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  exports.timeFormat = locale$2.format;
	  exports.timeParse = locale$2.parse;
	  exports.utcFormat = locale$2.utcFormat;
	  exports.utcParse = locale$2.utcParse;
	  return locale$2;
	}
	
	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
	
	function formatIsoNative(date) {
	  return date.toISOString();
	}
	
	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);
	
	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}
	
	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);
	
	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;
	
	function date$1(t) {
	  return new Date(t);
	}
	
	function number$2(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}
	
	function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, reinterpolate),
	      invert = scale.invert,
	      domain = scale.domain;
	
	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");
	
	  var tickIntervals = [
	    [second$$1,  1,      durationSecond],
	    [second$$1,  5,  5 * durationSecond],
	    [second$$1, 15, 15 * durationSecond],
	    [second$$1, 30, 30 * durationSecond],
	    [minute$$1,  1,      durationMinute],
	    [minute$$1,  5,  5 * durationMinute],
	    [minute$$1, 15, 15 * durationMinute],
	    [minute$$1, 30, 30 * durationMinute],
	    [  hour$$1,  1,      durationHour  ],
	    [  hour$$1,  3,  3 * durationHour  ],
	    [  hour$$1,  6,  6 * durationHour  ],
	    [  hour$$1, 12, 12 * durationHour  ],
	    [   day$$1,  1,      durationDay   ],
	    [   day$$1,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];
	
	  function tickFormat(date) {
	    return (second$$1(date) < date ? formatMillisecond
	        : minute$$1(date) < date ? formatSecond
	        : hour$$1(date) < date ? formatMinute
	        : day$$1(date) < date ? formatHour
	        : month$$1(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year$$1(date) < date ? formatMonth
	        : formatYear)(date);
	  }
	
	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;
	
	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = tickStep(start, stop, interval);
	        interval = millisecond$$1;
	      }
	    }
	
	    return step == null ? interval : interval.every(step);
	  }
	
	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? domain(map$3.call(_, number$2)) : domain().map(date$1);
	  };
	
	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };
	
	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };
	
	  scale.copy = function() {
	    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };
	
	  return scale;
	}
	
	var time = function() {
	  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};
	
	var utcTime = function() {
	  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};
	
	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};
	
	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
	
	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");
	
	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");
	
	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");
	
	var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));
	
	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
	
	var rainbow = cubehelix();
	
	var rainbow$1 = function(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	};
	
	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}
	
	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
	
	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
	
	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
	
	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
	
	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;
	
	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };
	
	  return linearish(scale);
	}
	
	var constant$10 = function(x) {
	  return function constant() {
	    return x;
	  };
	};
	
	var epsilon$3 = 1e-12;
	var pi$4 = Math.PI;
	var halfPi$3 = pi$4 / 2;
	var tau$4 = 2 * pi$4;
	
	function arcInnerRadius(d) {
	  return d.innerRadius;
	}
	
	function arcOuterRadius(d) {
	  return d.outerRadius;
	}
	
	function arcStartAngle(d) {
	  return d.startAngle;
	}
	
	function arcEndAngle(d) {
	  return d.endAngle;
	}
	
	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}
	
	function asin$1(x) {
	  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
	}
	
	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}
	
	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;
	
	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	
	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}
	
	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant$10(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;
	
	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi$3,
	        a1 = endAngle.apply(this, arguments) - halfPi$3,
	        da = Math.abs(a1 - a0),
	        cw = a1 > a0;
	
	    if (!context) context = buffer = path();
	
	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;
	
	    // Is it a point?
	    if (!(r1 > epsilon$3)) context.moveTo(0, 0);
	
	    // Or is it a circle or annulus?
	    else if (da > tau$4 - epsilon$3) {
	      context.moveTo(r1 * Math.cos(a0), r1 * Math.sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$3) {
	        context.moveTo(r0 * Math.cos(a1), r0 * Math.sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }
	
	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : Math.sqrt(r0 * r0 + r1 * r1)),
	          rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;
	
	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$3) {
	        var p0 = asin$1(rp / r0 * Math.sin(ap)),
	            p1 = asin$1(rp / r1 * Math.sin(ap));
	        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }
	
	      var x01 = r1 * Math.cos(a01),
	          y01 = r1 * Math.sin(a01),
	          x10 = r0 * Math.cos(a10),
	          y10 = r0 * Math.sin(a10);
	
	      // Apply rounded corners?
	      if (rc > epsilon$3) {
	        var x11 = r1 * Math.cos(a11),
	            y11 = r1 * Math.sin(a11),
	            x00 = r0 * Math.cos(a00),
	            y00 = r0 * Math.sin(a00);
	
	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$4) {
	          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2),
	              lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	      }
	
	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);
	
	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$3) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
	
	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
	
	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);
	
	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$3) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
	
	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
	
	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t1.y01, t1.x01), !cw);
	
	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, Math.atan2(t0.y01, t0.x01), Math.atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, Math.atan2(t0.cy + t0.y11, t0.cx + t0.x11), Math.atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, Math.atan2(t1.y11, t1.x11), Math.atan2(t1.y01, t1.x01), !cw);
	        }
	      }
	
	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }
	
	    context.closePath();
	
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
	    return [Math.cos(a) * r, Math.sin(a) * r];
	  };
	
	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;
	  };
	
	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;
	  };
	
	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;
	  };
	
	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
	  };
	
	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;
	  };
	
	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;
	  };
	
	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;
	  };
	
	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };
	
	  return arc;
	};
	
	function Linear(context) {
	  this._context = context;
	}
	
	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};
	
	var curveLinear = function(context) {
	  return new Linear(context);
	};
	
	function x$3(p) {
	  return p[0];
	}
	
	function y$3(p) {
	  return p[1];
	}
	
	var line = function() {
	  var x$$1 = x$3,
	      y$$1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : x$$1;
	  };
	
	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$10(+_), line) : y$$1;
	  };
	
	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;
	  };
	
	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };
	
	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };
	
	  return line;
	};
	
	var area$2 = function() {
	  var x0 = x$3,
	      x1 = null,
	      y0 = constant$10(0),
	      y1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;
	
	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);
	
	    if (context == null) output = curve(buffer = path());
	
	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }
	
	    if (buffer) return output = null, buffer + "" || null;
	  }
	
	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }
	
	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;
	  };
	
	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;
	  };
	
	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;
	  };
	
	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;
	  };
	
	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;
	  };
	
	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;
	  };
	
	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };
	
	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };
	
	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };
	
	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;
	  };
	
	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };
	
	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };
	
	  return area;
	};
	
	var descending$1 = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};
	
	var identity$7 = function(d) {
	  return d;
	};
	
	var pie = function() {
	  var value = identity$7,
	      sortValues = descending$1,
	      sort = null,
	      startAngle = constant$10(0),
	      endAngle = constant$10(tau$4),
	      padAngle = constant$10(0);
	
	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;
	
	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }
	
	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });
	
	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }
	
	    return arcs;
	  }
	
	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;
	  };
	
	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };
	
	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };
	
	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;
	  };
	
	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;
	  };
	
	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;
	  };
	
	  return pie;
	};
	
	var curveRadialLinear = curveRadial(curveLinear);
	
	function Radial(curve) {
	  this._curve = curve;
	}
	
	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};
	
	function curveRadial(curve) {
	
	  function radial(context) {
	    return new Radial(curve(context));
	  }
	
	  radial._curve = curve;
	
	  return radial;
	}
	
	function radialLine(l) {
	  var c = l.curve;
	
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	
	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };
	
	  return l;
	}
	
	var radialLine$1 = function() {
	  return radialLine(line().curve(curveRadialLinear));
	};
	
	var radialArea = function() {
	  var a = area$2().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;
	
	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return radialLine(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return radialLine(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return radialLine(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return radialLine(y1()); }, delete a.lineY1;
	
	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };
	
	  return a;
	};
	
	var circle$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$4);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$4);
	  }
	};
	
	var cross$1 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};
	
	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;
	
	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};
	
	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
	var kx = Math.sin(tau$4 / 10) * kr;
	var ky = -Math.cos(tau$4 / 10) * kr;
	
	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$4 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};
	
	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};
	
	var sqrt3 = Math.sqrt(3);
	
	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};
	
	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;
	
	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};
	
	var symbols = [
	  circle$2,
	  cross$1,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];
	
	var symbol = function() {
	  var type = constant$10(circle$2),
	      size = constant$10(64),
	      context = null;
	
	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }
	
	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;
	  };
	
	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;
	  };
	
	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };
	
	  return symbol;
	};
	
	var noop$2 = function() {};
	
	function point$2(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}
	
	function Basis(context) {
	  this._context = context;
	}
	
	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point$2(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basis$2 = function(context) {
	  return new Basis(context);
	};
	
	function BasisClosed(context) {
	  this._context = context;
	}
	
	BasisClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basisClosed$1 = function(context) {
	  return new BasisClosed(context);
	};
	
	function BasisOpen(context) {
	  this._context = context;
	}
	
	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};
	
	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};
	
	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}
	
	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;
	
	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;
	
	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }
	
	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	var bundle = ((function custom(beta) {
	
	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }
	
	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };
	
	  return bundle;
	}))(0.85);
	
	function point$3(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}
	
	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$3(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinal = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinalClosed = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}
	
	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var cardinalOpen = ((function custom(tension) {
	
	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }
	
	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };
	
	  return cardinal;
	}))(0);
	
	function point$4(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;
	
	  if (that._l01_a > epsilon$3) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }
	
	  if (that._l23_a > epsilon$3) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }
	
	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}
	
	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRom = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRomClosed = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}
	
	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	
	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }
	
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$4(this, x, y); break;
	    }
	
	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};
	
	var catmullRomOpen = ((function custom(alpha) {
	
	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }
	
	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };
	
	  return catmullRom;
	}))(0.5);
	
	function LinearClosed(context) {
	  this._context = context;
	}
	
	LinearClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};
	
	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};
	
	function sign$1(x) {
	  return x < 0 ? -1 : 1;
	}
	
	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}
	
	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}
	
	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$5(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}
	
	function MonotoneX(context) {
	  this._context = context;
	}
	
	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;
	
	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;
	    }
	
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};
	
	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}
	
	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};
	
	function ReflectContext(context) {
	  this._context = context;
	}
	
	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};
	
	function monotoneX(context) {
	  return new MonotoneX(context);
	}
	
	function monotoneY(context) {
	  return new MonotoneY(context);
	}
	
	function Natural(context) {
	  this._context = context;
	}
	
	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;
	
	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }
	
	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};
	
	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}
	
	var natural = function(context) {
	  return new Natural(context);
	};
	
	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}
	
	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};
	
	var step = function(context) {
	  return new Step(context, 0.5);
	};
	
	function stepBefore(context) {
	  return new Step(context, 0);
	}
	
	function stepAfter(context) {
	  return new Step(context, 1);
	}
	
	var slice$5 = Array.prototype.slice;
	
	var none$1 = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (var j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};
	
	var none$2 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};
	
	function stackValue(d, key) {
	  return d[key];
	}
	
	var stack = function() {
	  var keys = constant$10([]),
	      order = none$2,
	      offset = none$1,
	      value = stackValue;
	
	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;
	
	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }
	
	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }
	
	    offset(sz, oz);
	    return sz;
	  }
	
	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : keys;
	  };
	
	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;
	  };
	
	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$5.call(_)), stack) : order;
	  };
	
	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
	  };
	
	  return stack;
	};
	
	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none$1(series, order);
	};
	
	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none$1(series, order);
	};
	
	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none$1(series, order);
	};
	
	var ascending$2 = function(series) {
	  var sums = series.map(sum$2);
	  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};
	
	function sum$2(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}
	
	var descending$2 = function(series) {
	  return ascending$2(series).reverse();
	};
	
	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum$2),
	      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];
	
	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }
	
	  return bottoms.reverse().concat(tops);
	};
	
	var reverse = function(series) {
	  return none$2(series).reverse();
	};
	
	var constant$11 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function x$4(d) {
	  return d[0];
	}
	
	function y$4(d) {
	  return d[1];
	}
	
	function RedBlackTree() {
	  this._ = null; // root node
	}
	
	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}
	
	RedBlackTree.prototype = {
	  constructor: RedBlackTree,
	
	  insert: function(after, node) {
	    var parent, grandpa, uncle;
	
	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;
	
	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },
	
	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;
	
	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;
	
	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);
	
	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }
	
	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }
	
	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }
	
	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);
	
	    if (node) node.C = false;
	  }
	};
	
	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}
	
	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;
	
	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }
	
	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}
	
	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}
	
	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}
	
	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}
	
	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}
	
	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;
	
	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }
	
	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }
	
	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?
	
	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}
	
	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;
	
	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;
	
	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }
	
	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}
	
	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;
	
	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
	      delete edges[i];
	    }
	  }
	}
	
	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}
	
	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}
	
	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}
	
	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}
	
	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}
	
	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;
	
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;
	
	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }
	
	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
	              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
	              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }
	
	      if (nHalfedges) cover = false;
	    }
	  }
	
	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;
	
	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }
	
	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }
	
	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}
	
	var circlePool = [];
	
	var firstCircle;
	
	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}
	
	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;
	
	  if (!lArc || !rArc) return;
	
	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;
	
	  if (lSite === rSite) return;
	
	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;
	
	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2$2) return;
	
	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;
	
	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom
	
	  arc.circle = circle;
	
	  var before = null,
	      node = circles._;
	
	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }
	
	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}
	
	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}
	
	var beachPool = [];
	
	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}
	
	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}
	
	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}
	
	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];
	
	  detachBeach(beach);
	
	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon$4
	      && Math.abs(y - lArc.circle.cy) < epsilon$4) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }
	
	  disappearing.unshift(lArc);
	  detachCircle(lArc);
	
	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon$4
	      && Math.abs(y - rArc.circle.cy) < epsilon$4) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }
	
	  disappearing.push(rArc);
	  detachCircle(rArc);
	
	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }
	
	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);
	
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;
	
	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon$4) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon$4) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon$4) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon$4) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }
	
	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);
	
	  if (!lArc && !rArc) return;
	
	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }
	
	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }
	
	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);
	
	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
	
	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}
	
	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;
	
	  if (!pby2) return rfocx;
	
	  var lArc = arc.P;
	  if (!lArc) return -Infinity;
	
	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;
	
	  if (!plby2) return lfocx;
	
	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;
	
	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	
	  return (rfocx + lfocx) / 2;
	}
	
	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}
	
	var epsilon$4 = 1e-6;
	var epsilon2$2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;
	
	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}
	
	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}
	
	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;
	
	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;
	
	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }
	
	  sortCellHalfedges();
	
	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }
	
	  this.edges = edges;
	  this.cells = cells;
	
	  beaches =
	  circles =
	  edges =
	  cells = null;
	}
	
	Diagram.prototype = {
	  constructor: Diagram,
	
	  polygons: function() {
	    var edges = this.edges;
	
	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },
	
	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;
	
	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;
	
	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });
	
	    return triangles;
	  },
	
	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },
	
	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;
	
	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;
	
	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);
	
	    that._found = i0;
	
	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};
	
	var voronoi = function() {
	  var x$$1 = x$4,
	      y$$1 = y$4,
	      extent = null;
	
	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x$$1(d, i, data) / epsilon$4) * epsilon$4, Math.round(y$$1(d, i, data) / epsilon$4) * epsilon$4];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }
	
	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };
	
	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };
	
	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };
	
	  voronoi.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x$$1;
	  };
	
	  voronoi.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y$$1;
	  };
	
	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };
	
	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };
	
	  return voronoi;
	};
	
	var constant$12 = function(x) {
	  return function() {
	    return x;
	  };
	};
	
	function ZoomEvent(target, type, transform) {
	  this.target = target;
	  this.type = type;
	  this.transform = transform;
	}
	
	function Transform(k, x, y) {
	  this.k = k;
	  this.x = x;
	  this.y = y;
	}
	
	Transform.prototype = {
	  constructor: Transform,
	  scale: function(k) {
	    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
	  },
	  translate: function(x, y) {
	    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
	  },
	  apply: function(point) {
	    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
	  },
	  applyX: function(x) {
	    return x * this.k + this.x;
	  },
	  applyY: function(y) {
	    return y * this.k + this.y;
	  },
	  invert: function(location) {
	    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
	  },
	  invertX: function(x) {
	    return (x - this.x) / this.k;
	  },
	  invertY: function(y) {
	    return (y - this.y) / this.k;
	  },
	  rescaleX: function(x) {
	    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
	  },
	  rescaleY: function(y) {
	    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
	  },
	  toString: function() {
	    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
	  }
	};
	
	var identity$8 = new Transform(1, 0, 0);
	
	transform$1.prototype = Transform.prototype;
	
	function transform$1(node) {
	  return node.__zoom || identity$8;
	}
	
	function nopropagation$2() {
	  exports.event.stopImmediatePropagation();
	}
	
	var noevent$2 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};
	
	// Ignore right-click, since that should open the context menu.
	function defaultFilter$2() {
	  return !exports.event.button;
	}
	
	function defaultExtent$1() {
	  var e = this, w, h;
	  if (e instanceof SVGElement) {
	    e = e.ownerSVGElement || e;
	    w = e.width.baseVal.value;
	    h = e.height.baseVal.value;
	  } else {
	    w = e.clientWidth;
	    h = e.clientHeight;
	  }
	  return [[0, 0], [w, h]];
	}
	
	function defaultTransform() {
	  return this.__zoom || identity$8;
	}
	
	var zoom = function() {
	  var filter = defaultFilter$2,
	      extent = defaultExtent$1,
	      k0 = 0,
	      k1 = Infinity,
	      x0 = -k1,
	      x1 = k1,
	      y0 = x0,
	      y1 = x1,
	      duration = 250,
	      interpolate$$1 = interpolateZoom,
	      gestures = [],
	      listeners = dispatch("start", "zoom", "end"),
	      touchstarting,
	      touchending,
	      touchDelay = 500,
	      wheelDelay = 150;
	
	  function zoom(selection$$1) {
	    selection$$1
	        .on("wheel.zoom", wheeled)
	        .on("mousedown.zoom", mousedowned)
	        .on("dblclick.zoom", dblclicked)
	        .on("touchstart.zoom", touchstarted)
	        .on("touchmove.zoom", touchmoved)
	        .on("touchend.zoom touchcancel.zoom", touchended)
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .property("__zoom", defaultTransform);
	  }
	
	  zoom.transform = function(collection, transform) {
	    var selection$$1 = collection.selection ? collection.selection() : collection;
	    selection$$1.property("__zoom", defaultTransform);
	    if (collection !== selection$$1) {
	      schedule(collection, transform);
	    } else {
	      selection$$1.interrupt().each(function() {
	        gesture(this, arguments)
	            .start()
	            .zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform)
	            .end();
	      });
	    }
	  };
	
	  zoom.scaleBy = function(selection$$1, k) {
	    zoom.scaleTo(selection$$1, function() {
	      var k0 = this.__zoom.k,
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return k0 * k1;
	    });
	  };
	
	  zoom.scaleTo = function(selection$$1, k) {
	    zoom.transform(selection$$1, function() {
	      var e = extent.apply(this, arguments),
	          t0 = this.__zoom,
	          p0 = centroid(e),
	          p1 = t0.invert(p0),
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return constrain(translate(scale(t0, k1), p0, p1), e);
	    });
	  };
	
	  zoom.translateBy = function(selection$$1, x, y) {
	    zoom.transform(selection$$1, function() {
	      return constrain(this.__zoom.translate(
	        typeof x === "function" ? x.apply(this, arguments) : x,
	        typeof y === "function" ? y.apply(this, arguments) : y
	      ), extent.apply(this, arguments));
	    });
	  };
	
	  function scale(transform, k) {
	    k = Math.max(k0, Math.min(k1, k));
	    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
	  }
	
	  function translate(transform, p0, p1) {
	    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
	    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
	  }
	
	  function constrain(transform, extent) {
	    var dx0 = transform.invertX(extent[0][0]) - x0,
	        dx1 = transform.invertX(extent[1][0]) - x1,
	        dy0 = transform.invertY(extent[0][1]) - y0,
	        dy1 = transform.invertY(extent[1][1]) - y1;
	    return transform.translate(
	      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
	      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
	    );
	  }
	
	  function centroid(extent) {
	    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
	  }
	
	  function schedule(transition$$1, transform, center) {
	    transition$$1
	        .on("start.zoom", function() { gesture(this, arguments).start(); })
	        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
	        .tween("zoom", function() {
	          var that = this,
	              args = arguments,
	              g = gesture(that, args),
	              e = extent.apply(that, args),
	              p = center || centroid(e),
	              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
	              a = that.__zoom,
	              b = typeof transform === "function" ? transform.apply(that, args) : transform,
	              i = interpolate$$1(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
	          return function(t) {
	            if (t === 1) t = b; // Avoid rounding error on end.
	            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
	            g.zoom(null, t);
	          };
	        });
	  }
	
	  function gesture(that, args) {
	    for (var i = 0, n = gestures.length, g; i < n; ++i) {
	      if ((g = gestures[i]).that === that) {
	        return g;
	      }
	    }
	    return new Gesture(that, args);
	  }
	
	  function Gesture(that, args) {
	    this.that = that;
	    this.args = args;
	    this.index = -1;
	    this.active = 0;
	    this.extent = extent.apply(that, args);
	  }
	
	  Gesture.prototype = {
	    start: function() {
	      if (++this.active === 1) {
	        this.index = gestures.push(this) - 1;
	        this.emit("start");
	      }
	      return this;
	    },
	    zoom: function(key, transform) {
	      if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
	      if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
	      if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
	      this.that.__zoom = transform;
	      this.emit("zoom");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) {
	        gestures.splice(this.index, 1);
	        this.index = -1;
	        this.emit("end");
	      }
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };
	
	  function wheeled() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        t = this.__zoom,
	        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500))),
	        p = mouse(this);
	
	    // If the mouse is in the same location as before, reuse it.
	    // If there were recent wheel events, reset the wheel idle timeout.
	    if (g.wheel) {
	      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
	        g.mouse[1] = t.invert(g.mouse[0] = p);
	      }
	      clearTimeout(g.wheel);
	    }
	
	    // If this wheel event won’t trigger a transform change, ignore it.
	    else if (t.k === k) return;
	
	    // Otherwise, capture the mouse point and location at the start.
	    else {
	      g.mouse = [p, t.invert(p)];
	      interrupt(this);
	      g.start();
	    }
	
	    noevent$2();
	    g.wheel = setTimeout(wheelidled, wheelDelay);
	    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));
	
	    function wheelidled() {
	      g.wheel = null;
	      g.end();
	    }
	  }
	
	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
	        p = mouse(this);
	
	    dragDisable(exports.event.view);
	    nopropagation$2();
	    g.mouse = [p, this.__zoom.invert(p)];
	    interrupt(this);
	    g.start();
	
	    function mousemoved() {
	      noevent$2();
	      g.moved = true;
	      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
	    }
	
	    function mouseupped() {
	      v.on("mousemove.zoom mouseup.zoom", null);
	      yesdrag(exports.event.view, g.moved);
	      noevent$2();
	      g.end();
	    }
	  }
	
	  function dblclicked() {
	    if (!filter.apply(this, arguments)) return;
	    var t0 = this.__zoom,
	        p0 = mouse(this),
	        p1 = t0.invert(p0),
	        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
	        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));
	
	    noevent$2();
	    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
	    else select(this).call(zoom.transform, t1);
	  }
	
	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        started,
	        n = touches$$1.length, i, t, p;
	
	    nopropagation$2();
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      p = [p, this.__zoom.invert(p), t.identifier];
	      if (!g.touch0) g.touch0 = p, started = true;
	      else if (!g.touch1) g.touch1 = p;
	    }
	
	    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
	    if (touchstarting) {
	      touchstarting = clearTimeout(touchstarting);
	      if (!g.touch1) {
	        g.end();
	        p = select(this).on("dblclick.zoom");
	        if (p) p.apply(this, arguments);
	        return;
	      }
	    }
	
	    if (started) {
	      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
	      interrupt(this);
	      g.start();
	    }
	  }
	
	  function touchmoved() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t, p, l;
	
	    noevent$2();
	    if (touchstarting) touchstarting = clearTimeout(touchstarting);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
	      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
	    }
	    t = g.that.__zoom;
	    if (g.touch1) {
	      var p0 = g.touch0[0], l0 = g.touch0[1],
	          p1 = g.touch1[0], l1 = g.touch1[1],
	          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
	          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
	      t = scale(t, Math.sqrt(dp / dl));
	      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	    }
	    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
	    else return;
	    g.zoom("touch", constrain(translate(t, p, l), g.extent));
	  }
	
	  function touchended() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t;
	
	    nopropagation$2();
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, touchDelay);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i];
	      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
	      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
	    }
	    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
	    if (!g.touch0) g.end();
	  }
	
	  zoom.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;
	  };
	
	  zoom.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
	  };
	
	  zoom.scaleExtent = function(_) {
	    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
	  };
	
	  zoom.translateExtent = function(_) {
	    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
	  };
	
	  zoom.duration = function(_) {
	    return arguments.length ? (duration = +_, zoom) : duration;
	  };
	
	  zoom.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, zoom) : interpolate$$1;
	  };
	
	  zoom.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? zoom : value;
	  };
	
	  return zoom;
	};
	
	exports.version = version;
	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = threshold;
	exports.range = sequence;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	exports.axisTop = axisTop;
	exports.axisRight = axisRight;
	exports.axisBottom = axisBottom;
	exports.axisLeft = axisLeft;
	exports.brush = brush;
	exports.brushX = brushX;
	exports.brushY = brushY;
	exports.brushSelection = brushSelection;
	exports.chord = chord;
	exports.ribbon = ribbon;
	exports.nest = nest;
	exports.set = set$2;
	exports.map = map$1;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;
	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.cubehelix = cubehelix;
	exports.dispatch = dispatch;
	exports.drag = drag;
	exports.dragDisable = dragDisable;
	exports.dragEnable = yesdrag;
	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;
	exports.easeLinear = linear$1;
	exports.easeQuad = quadInOut;
	exports.easeQuadIn = quadIn;
	exports.easeQuadOut = quadOut;
	exports.easeQuadInOut = quadInOut;
	exports.easeCubic = cubicInOut;
	exports.easeCubicIn = cubicIn;
	exports.easeCubicOut = cubicOut;
	exports.easeCubicInOut = cubicInOut;
	exports.easePoly = polyInOut;
	exports.easePolyIn = polyIn;
	exports.easePolyOut = polyOut;
	exports.easePolyInOut = polyInOut;
	exports.easeSin = sinInOut;
	exports.easeSinIn = sinIn;
	exports.easeSinOut = sinOut;
	exports.easeSinInOut = sinInOut;
	exports.easeExp = expInOut;
	exports.easeExpIn = expIn;
	exports.easeExpOut = expOut;
	exports.easeExpInOut = expInOut;
	exports.easeCircle = circleInOut;
	exports.easeCircleIn = circleIn;
	exports.easeCircleOut = circleOut;
	exports.easeCircleInOut = circleInOut;
	exports.easeBounce = bounceOut;
	exports.easeBounceIn = bounceIn;
	exports.easeBounceOut = bounceOut;
	exports.easeBounceInOut = bounceInOut;
	exports.easeBack = backInOut;
	exports.easeBackIn = backIn;
	exports.easeBackOut = backOut;
	exports.easeBackInOut = backInOut;
	exports.easeElastic = elasticOut;
	exports.easeElasticIn = elasticIn;
	exports.easeElasticOut = elasticOut;
	exports.easeElasticInOut = elasticInOut;
	exports.forceCenter = center$1;
	exports.forceCollide = collide;
	exports.forceLink = link;
	exports.forceManyBody = manyBody;
	exports.forceSimulation = simulation;
	exports.forceX = x$2;
	exports.forceY = y$2;
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent$1;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate$1;
	exports.geoLength = length$1;
	exports.geoPath = index$1;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$5;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;
	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index$2;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$3;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;
	exports.interpolate = interpolateValue;
	exports.interpolateArray = array$1;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = reinterpolate;
	exports.interpolateObject = object;
	exports.interpolateRound = interpolateRound;
	exports.interpolateString = interpolateString;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = interpolateZoom;
	exports.interpolateRgb = interpolateRgb;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;
	exports.path = path;
	exports.polygonArea = area$1;
	exports.polygonCentroid = centroid$1;
	exports.polygonHull = hull;
	exports.polygonContains = contains;
	exports.polygonLength = length$2;
	exports.quadtree = quadtree;
	exports.queue = queue;
	exports.randomUniform = uniform;
	exports.randomNormal = normal;
	exports.randomLogNormal = logNormal;
	exports.randomBates = bates;
	exports.randomIrwinHall = irwinHall;
	exports.randomExponential = exponential$1;
	exports.request = request;
	exports.html = html;
	exports.json = json;
	exports.text = text;
	exports.xml = xml;
	exports.csv = csv$1;
	exports.tsv = tsv$1;
	exports.scaleBand = band;
	exports.scalePoint = point$1;
	exports.scaleIdentity = identity$6;
	exports.scaleLinear = linear$2;
	exports.scaleLog = log$1;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow$1;
	exports.scaleSqrt = sqrt$1;
	exports.scaleQuantile = quantile$$1;
	exports.scaleQuantize = quantize$1;
	exports.scaleThreshold = threshold$1;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.schemeCategory10 = category10;
	exports.schemeCategory20b = category20b;
	exports.schemeCategory20c = category20c;
	exports.schemeCategory20 = category20;
	exports.interpolateCubehelixDefault = cubehelix$3;
	exports.interpolateRainbow = rainbow$1;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;
	exports.scaleSequential = sequential;
	exports.creator = creator;
	exports.local = local$1;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = window;
	exports.customEvent = customEvent;
	exports.arc = arc;
	exports.area = area$2;
	exports.line = line;
	exports.pie = pie;
	exports.radialArea = radialArea;
	exports.radialLine = radialLine$1;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle$2;
	exports.symbolCross = cross$1;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed$1;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis$2;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetNone = none$1;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending$2;
	exports.stackOrderDescending = descending$2;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$2;
	exports.stackOrderReverse = reverse;
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	exports.timeFormatDefaultLocale = defaultLocale$1;
	exports.timeFormatLocale = formatLocale$1;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	exports.now = now;
	exports.timer = timer;
	exports.timerFlush = timerFlush;
	exports.timeout = timeout$1;
	exports.interval = interval$1;
	exports.transition = transition;
	exports.active = active;
	exports.interrupt = interrupt;
	exports.voronoi = voronoi;
	exports.zoom = zoom;
	exports.zoomTransform = transform$1;
	exports.zoomIdentity = identity$8;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Export echarts as CommonJS module
	 */
	module.exports = __webpack_require__(22);
	
	// Import all charts and components
	__webpack_require__(121);
	__webpack_require__(155);
	__webpack_require__(162);
	__webpack_require__(171);
	__webpack_require__(175);
	
	__webpack_require__(185);
	__webpack_require__(206);
	__webpack_require__(218);
	__webpack_require__(239);
	__webpack_require__(243);
	__webpack_require__(247);
	__webpack_require__(262);
	__webpack_require__(268);
	__webpack_require__(275);
	__webpack_require__(281);
	__webpack_require__(285);
	__webpack_require__(294);
	__webpack_require__(298);
	__webpack_require__(301);
	
	__webpack_require__(313);
	__webpack_require__(134);
	__webpack_require__(314);
	__webpack_require__(320);
	__webpack_require__(324);
	__webpack_require__(335);
	__webpack_require__(248);
	__webpack_require__(302);
	__webpack_require__(338);
	
	__webpack_require__(349);
	
	__webpack_require__(350);
	__webpack_require__(364);
	
	__webpack_require__(379);
	__webpack_require__(385);
	__webpack_require__(388);
	
	__webpack_require__(391);
	__webpack_require__(400);
	
	__webpack_require__(412);


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// Enable DEV mode when using source code without build. which has no __DEV__ variable
	// In build process 'typeof __DEV__' will be replace with 'boolean'
	// So this code will be removed or disabled anyway after built.
	if (typeof __DEV__ === 'undefined') {
	    // In browser
	    if (typeof window !== 'undefined') {
	        window.__DEV__ = true;
	    }
	    // In node
	    else if (typeof global !== 'undefined') {
	        global.__DEV__ = true;
	    }
	}
	
	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */
	
	/**
	 * @module echarts
	 */
	
	
	    var env = __webpack_require__(23);
	
	    var GlobalModel = __webpack_require__(24);
	    var ExtensionAPI = __webpack_require__(46);
	    var CoordinateSystemManager = __webpack_require__(47);
	    var OptionManager = __webpack_require__(48);
	
	    var ComponentModel = __webpack_require__(40);
	    var SeriesModel = __webpack_require__(49);
	
	    var ComponentView = __webpack_require__(50);
	    var ChartView = __webpack_require__(63);
	    var graphic = __webpack_require__(64);
	    var modelUtil = __webpack_require__(26);
	    var throttle = __webpack_require__(102);
	
	    var zrender = __webpack_require__(103);
	    var zrUtil = __webpack_require__(25);
	    var colorTool = __webpack_require__(60);
	    var Eventful = __webpack_require__(54);
	    var timsort = __webpack_require__(107);
	
	    var each = zrUtil.each;
	    var parseClassType = ComponentModel.parseClassType;
	
	    var PRIORITY_PROCESSOR_FILTER = 1000;
	    var PRIORITY_PROCESSOR_STATISTIC = 5000;
	
	
	    var PRIORITY_VISUAL_LAYOUT = 1000;
	    var PRIORITY_VISUAL_GLOBAL = 2000;
	    var PRIORITY_VISUAL_CHART = 3000;
	    var PRIORITY_VISUAL_COMPONENT = 4000;
	    // FIXME
	    // necessary?
	    var PRIORITY_VISUAL_BRUSH = 5000;
	
	    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	    // where they must not be invoked nestedly, except the only case: invoke
	    // dispatchAction with updateMethod "none" in main process.
	    // This flag is used to carry out this rule.
	    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
	    var IN_MAIN_PROCESS = '__flagInMainProcess';
	    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';
	    var OPTION_UPDATED = '__optionUpdated';
	    var ACTION_REG = /^[a-zA-Z0-9_]+$/;
	
	    function createRegisterEventWithLowercaseName(method) {
	        return function (eventName, handler, context) {
	            // Event name is all lowercase
	            eventName = eventName && eventName.toLowerCase();
	            Eventful.prototype[method].call(this, eventName, handler, context);
	        };
	    }
	
	    /**
	     * @module echarts~MessageCenter
	     */
	    function MessageCenter() {
	        Eventful.call(this);
	    }
	    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	    zrUtil.mixin(MessageCenter, Eventful);
	
	    /**
	     * @module echarts~ECharts
	     */
	    function ECharts (dom, theme, opts) {
	        opts = opts || {};
	
	        // Get theme by name
	        if (typeof theme === 'string') {
	            theme = themeStorage[theme];
	        }
	
	        /**
	         * @type {string}
	         */
	        this.id;
	        /**
	         * Group id
	         * @type {string}
	         */
	        this.group;
	        /**
	         * @type {HTMLDomElement}
	         * @private
	         */
	        this._dom = dom;
	        /**
	         * @type {module:zrender/ZRender}
	         * @private
	         */
	        var zr = this._zr = zrender.init(dom, {
	            renderer: opts.renderer || 'canvas',
	            devicePixelRatio: opts.devicePixelRatio,
	            width: opts.width,
	            height: opts.height
	        });
	
	        /**
	         * Expect 60 pfs.
	         * @type {Function}
	         * @private
	         */
	        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);
	
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._theme = zrUtil.clone(theme);
	
	        /**
	         * @type {Array.<module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsViews = [];
	
	        /**
	         * @type {Object.<string, module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsMap = {};
	
	        /**
	         * @type {Array.<module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsViews = [];
	
	        /**
	         * @type {Object.<string, module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsMap = {};
	
	        /**
	         * @type {module:echarts/ExtensionAPI}
	         * @private
	         */
	        this._api = new ExtensionAPI(this);
	
	        /**
	         * @type {module:echarts/CoordinateSystem}
	         * @private
	         */
	        this._coordSysMgr = new CoordinateSystemManager();
	
	        Eventful.call(this);
	
	        /**
	         * @type {module:echarts~MessageCenter}
	         * @private
	         */
	        this._messageCenter = new MessageCenter();
	
	        // Init mouse events
	        this._initEvents();
	
	        // In case some people write `window.onresize = chart.resize`
	        this.resize = zrUtil.bind(this.resize, this);
	
	        // Can't dispatch action during rendering procedure
	        this._pendingActions = [];
	        // Sort on demand
	        function prioritySortFunc(a, b) {
	            return a.prio - b.prio;
	        }
	        timsort(visualFuncs, prioritySortFunc);
	        timsort(dataProcessorFuncs, prioritySortFunc);
	
	        zr.animation.on('frame', this._onframe, this);
	    }
	
	    var echartsProto = ECharts.prototype;
	
	    echartsProto._onframe = function () {
	        // Lazy update
	        if (this[OPTION_UPDATED]) {
	            var silent = this[OPTION_UPDATED].silent;
	
	            this[IN_MAIN_PROCESS] = true;
	
	            updateMethods.prepareAndUpdate.call(this);
	
	            this[IN_MAIN_PROCESS] = false;
	
	            this[OPTION_UPDATED] = false;
	
	            flushPendingActions.call(this, silent);
	
	            triggerUpdatedEvent.call(this, silent);
	        }
	    };
	    /**
	     * @return {HTMLDomElement}
	     */
	    echartsProto.getDom = function () {
	        return this._dom;
	    };
	
	    /**
	     * @return {module:zrender~ZRender}
	     */
	    echartsProto.getZr = function () {
	        return this._zr;
	    };
	
	    /**
	     * Usage:
	     * chart.setOption(option, notMerge, lazyUpdate);
	     * chart.setOption(option, {
	     *     notMerge: ...,
	     *     lazyUpdate: ...,
	     *     silent: ...
	     * });
	     *
	     * @param {Object} option
	     * @param {Object|boolean} [opts] opts or notMerge.
	     * @param {boolean} [opts.notMerge=false]
	     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	     */
	    echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	        if (__DEV__) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');
	        }
	
	        var silent;
	        if (zrUtil.isObject(notMerge)) {
	            lazyUpdate = notMerge.lazyUpdate;
	            silent = notMerge.silent;
	            notMerge = notMerge.notMerge;
	        }
	
	        this[IN_MAIN_PROCESS] = true;
	
	        if (!this._model || notMerge) {
	            var optionManager = new OptionManager(this._api);
	            var theme = this._theme;
	            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	            ecModel.init(null, null, theme, optionManager);
	        }
	
	        // FIXME
	        // ugly
	        this.__lastOnlyGraphic = !!(option && option.graphic);
	        zrUtil.each(option, function (o, mainType) {
	            mainType !== 'graphic' && (this.__lastOnlyGraphic = false);
	        }, this);
	
	        this._model.setOption(option, optionPreprocessorFuncs);
	
	        if (lazyUpdate) {
	            this[OPTION_UPDATED] = {silent: silent};
	            this[IN_MAIN_PROCESS] = false;
	        }
	        else {
	            updateMethods.prepareAndUpdate.call(this);
	            // Ensure zr refresh sychronously, and then pixel in canvas can be
	            // fetched after `setOption`.
	            this._zr.flush();
	
	            this[OPTION_UPDATED] = false;
	            this[IN_MAIN_PROCESS] = false;
	
	            flushPendingActions.call(this, silent);
	            triggerUpdatedEvent.call(this, silent);
	        }
	    };
	
	    /**
	     * @DEPRECATED
	     */
	    echartsProto.setTheme = function () {
	        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	    };
	
	    /**
	     * @return {module:echarts/model/Global}
	     */
	    echartsProto.getModel = function () {
	        return this._model;
	    };
	
	    /**
	     * @return {Object}
	     */
	    echartsProto.getOption = function () {
	        return this._model && this._model.getOption();
	    };
	
	    /**
	     * @return {number}
	     */
	    echartsProto.getWidth = function () {
	        return this._zr.getWidth();
	    };
	
	    /**
	     * @return {number}
	     */
	    echartsProto.getHeight = function () {
	        return this._zr.getHeight();
	    };
	
	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getRenderedCanvas = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        opts = opts || {};
	        opts.pixelRatio = opts.pixelRatio || 1;
	        opts.backgroundColor = opts.backgroundColor
	            || this._model.get('backgroundColor');
	        var zr = this._zr;
	        var list = zr.storage.getDisplayList();
	        // Stop animations
	        zrUtil.each(list, function (el) {
	            el.stopAnimation(true);
	        });
	        return zr.painter.getRenderedCanvas(opts);
	    };
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     * @param {string} [opts.excludeComponents]
	     */
	    echartsProto.getDataURL = function (opts) {
	        opts = opts || {};
	        var excludeComponents = opts.excludeComponents;
	        var ecModel = this._model;
	        var excludesComponentViews = [];
	        var self = this;
	
	        each(excludeComponents, function (componentType) {
	            ecModel.eachComponent({
	                mainType: componentType
	            }, function (component) {
	                var view = self._componentsMap[component.__viewId];
	                if (!view.group.ignore) {
	                    excludesComponentViews.push(view);
	                    view.group.ignore = true;
	                }
	            });
	        });
	
	        var url = this.getRenderedCanvas(opts).toDataURL(
	            'image/' + (opts && opts.type || 'png')
	        );
	
	        each(excludesComponentViews, function (view) {
	            view.group.ignore = false;
	        });
	        return url;
	    };
	
	
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getConnectedDataURL = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        var groupId = this.group;
	        var mathMin = Math.min;
	        var mathMax = Math.max;
	        var MAX_NUMBER = Infinity;
	        if (connectedGroups[groupId]) {
	            var left = MAX_NUMBER;
	            var top = MAX_NUMBER;
	            var right = -MAX_NUMBER;
	            var bottom = -MAX_NUMBER;
	            var canvasList = [];
	            var dpr = (opts && opts.pixelRatio) || 1;
	
	            zrUtil.each(instances, function (chart, id) {
	                if (chart.group === groupId) {
	                    var canvas = chart.getRenderedCanvas(
	                        zrUtil.clone(opts)
	                    );
	                    var boundingRect = chart.getDom().getBoundingClientRect();
	                    left = mathMin(boundingRect.left, left);
	                    top = mathMin(boundingRect.top, top);
	                    right = mathMax(boundingRect.right, right);
	                    bottom = mathMax(boundingRect.bottom, bottom);
	                    canvasList.push({
	                        dom: canvas,
	                        left: boundingRect.left,
	                        top: boundingRect.top
	                    });
	                }
	            });
	
	            left *= dpr;
	            top *= dpr;
	            right *= dpr;
	            bottom *= dpr;
	            var width = right - left;
	            var height = bottom - top;
	            var targetCanvas = zrUtil.createCanvas();
	            targetCanvas.width = width;
	            targetCanvas.height = height;
	            var zr = zrender.init(targetCanvas);
	
	            each(canvasList, function (item) {
	                var img = new graphic.Image({
	                    style: {
	                        x: item.left * dpr - left,
	                        y: item.top * dpr - top,
	                        image: item.dom
	                    }
	                });
	                zr.add(img);
	            });
	            zr.refreshImmediately();
	
	            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	        }
	        else {
	            return this.getDataURL(opts);
	        }
	    };
	
	    /**
	     * Convert from logical coordinate system to pixel coordinate system.
	     * See CoordinateSystem#convertToPixel.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId, geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName,
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {Array|number} result
	     */
	    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');
	
	    /**
	     * Convert from pixel coordinate system to logical coordinate system.
	     * See CoordinateSystem#convertFromPixel.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId / geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {Array|number} result
	     */
	    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');
	
	    function doConvertPixel(methodName, finder, value) {
	        var ecModel = this._model;
	        var coordSysList = this._coordSysMgr.getCoordinateSystems();
	        var result;
	
	        finder = modelUtil.parseFinder(ecModel, finder);
	
	        for (var i = 0; i < coordSysList.length; i++) {
	            var coordSys = coordSysList[i];
	            if (coordSys[methodName]
	                && (result = coordSys[methodName](ecModel, finder, value)) != null
	            ) {
	                return result;
	            }
	        }
	
	        if (__DEV__) {
	            console.warn(
	                'No coordinate system that supports ' + methodName + ' found by the given finder.'
	            );
	        }
	    }
	
	    /**
	     * Is the specified coordinate systems or components contain the given pixel point.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId / geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {boolean} result
	     */
	    echartsProto.containPixel = function (finder, value) {
	        var ecModel = this._model;
	        var result;
	
	        finder = modelUtil.parseFinder(ecModel, finder);
	
	        zrUtil.each(finder, function (models, key) {
	            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	                var coordSys = model.coordinateSystem;
	                if (coordSys && coordSys.containPoint) {
	                    result |= !!coordSys.containPoint(value);
	                }
	                else if (key === 'seriesModels') {
	                    var view = this._chartsMap[model.__viewId];
	                    if (view && view.containPoint) {
	                        result |= view.containPoint(value, model);
	                    }
	                    else {
	                        if (__DEV__) {
	                            console.warn(key + ': ' + (view
	                                ? 'The found component do not support containPoint.'
	                                : 'No view mapping to the found component.'
	                            ));
	                        }
	                    }
	                }
	                else {
	                    if (__DEV__) {
	                        console.warn(key + ': containPoint is not supported');
	                    }
	                }
	            }, this);
	        }, this);
	
	        return !!result;
	    };
	
	    /**
	     * Get visual from series or data.
	     * @param {string|Object} finder
	     *        If string, e.g., 'series', means {seriesIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            dataIndex / dataIndexInside
	     *        }
	     *        If dataIndex is not specified, series visual will be fetched,
	     *        but not data item visual.
	     *        If all of seriesIndex, seriesId, seriesName are not specified,
	     *        visual will be fetched from first series.
	     * @param {string} visualType 'color', 'symbol', 'symbolSize'
	     */
	    echartsProto.getVisual = function (finder, visualType) {
	        var ecModel = this._model;
	
	        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});
	
	        var seriesModel = finder.seriesModel;
	
	        if (__DEV__) {
	            if (!seriesModel) {
	                console.warn('There is no specified seires model');
	            }
	        }
	
	        var data = seriesModel.getData();
	
	        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')
	            ? finder.dataIndexInside
	            : finder.hasOwnProperty('dataIndex')
	            ? data.indexOfRawIndex(finder.dataIndex)
	            : null;
	
	        return dataIndexInside != null
	            ? data.getItemVisual(dataIndexInside, visualType)
	            : data.getVisual(visualType);
	    };
	
	
	    var updateMethods = {
	
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        update: function (payload) {
	            // console.time && console.time('update');
	
	            var ecModel = this._model;
	            var api = this._api;
	            var coordSysMgr = this._coordSysMgr;
	            var zr = this._zr;
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }
	
	            // Fixme First time update ?
	            ecModel.restoreData();
	
	            // TODO
	            // Save total ecModel here for undo/redo (after restoring data and before processing data).
	            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	
	            // Create new coordinate system each update
	            // In LineView may save the old coordinate system and use it to get the orignal point
	            coordSysMgr.create(this._model, this._api);
	
	            processData.call(this, ecModel, api);
	
	            stackSeriesData.call(this, ecModel);
	
	            coordSysMgr.update(ecModel, api);
	
	            doVisualEncoding.call(this, ecModel, payload);
	
	            doRender.call(this, ecModel, payload);
	
	            // Set background
	            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';
	
	            var painter = zr.painter;
	            // TODO all use clearColor ?
	            if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	                zr.configLayer(0, {
	                    clearColor: backgroundColor
	                });
	            }
	            else {
	                // In IE8
	                if (!env.canvasSupported) {
	                    var colorArr = colorTool.parse(backgroundColor);
	                    backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                    if (colorArr[3] === 0) {
	                        backgroundColor = 'transparent';
	                    }
	                }
	                if (backgroundColor.colorStops || backgroundColor.image) {
	                    // Gradient background
	                    // FIXME Fixed layer？
	                    zr.configLayer(0, {
	                        clearColor: backgroundColor
	                    });
	                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;
	
	                    this._dom.style.background = 'transparent';
	                }
	                else {
	                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {
	                        zr.configLayer(0, {
	                            clearColor: null
	                        });
	                    }
	                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;
	
	                    this._dom.style.background = backgroundColor;
	                }
	            }
	
	            // console.time && console.timeEnd('update');
	        },
	
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateView: function (payload) {
	            var ecModel = this._model;
	
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }
	
	            ecModel.eachSeries(function (seriesModel) {
	                seriesModel.getData().clearAllVisual();
	            });
	
	            doVisualEncoding.call(this, ecModel, payload);
	
	            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	        },
	
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateVisual: function (payload) {
	            var ecModel = this._model;
	
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }
	
	            ecModel.eachSeries(function (seriesModel) {
	                seriesModel.getData().clearAllVisual();
	            });
	
	            doVisualEncoding.call(this, ecModel, payload, true);
	
	            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	        },
	
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateLayout: function (payload) {
	            var ecModel = this._model;
	
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }
	
	            doLayout.call(this, ecModel, payload);
	
	            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	        },
	
	        /**
	         * @param {Object} payload
	         * @private
	         */
	        prepareAndUpdate: function (payload) {
	            var ecModel = this._model;
	
	            prepareView.call(this, 'component', ecModel);
	
	            prepareView.call(this, 'chart', ecModel);
	
	            // FIXME
	            // ugly
	            if (this.__lastOnlyGraphic) {
	                each(this._componentsViews, function (componentView) {
	                    var componentModel = componentView.__model;
	                    if (componentModel && componentModel.mainType === 'graphic') {
	                        componentView.render(componentModel, ecModel, this._api, payload);
	                        updateZ(componentModel, componentView);
	                    }
	                }, this);
	                this.__lastOnlyGraphic = false;
	            }
	            else {
	                updateMethods.update.call(this, payload);
	            }
	        }
	    };
	
	    /**
	     * @private
	     */
	    function updateDirectly(ecIns, method, payload, mainType, subType) {
	        var ecModel = ecIns._model;
	        var query = {};
	        query[mainType + 'Id'] = payload[mainType + 'Id'];
	        query[mainType + 'Index'] = payload[mainType + 'Index'];
	        query[mainType + 'Name'] = payload[mainType + 'Name'];
	
	        var condition = {mainType: mainType, query: query};
	        subType && (condition.subType = subType); // subType may be '' by parseClassType;
	
	        // If dispatchAction before setOption, do nothing.
	        ecModel && ecModel.eachComponent(condition, function (model, index) {
	            var view = ecIns[
	                mainType === 'series' ? '_chartsMap' : '_componentsMap'
	            ][model.__viewId];
	            if (view && view.__alive) {
	                view[method](model, ecModel, ecIns._api, payload);
	            }
	        }, ecIns);
	    }
	
	    /**
	     * Resize the chart
	     * @param {Object} opts
	     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	     * @param {boolean} [opts.silent=false]
	     */
	    echartsProto.resize = function (opts) {
	        if (__DEV__) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');
	        }
	
	        this[IN_MAIN_PROCESS] = true;
	
	        this._zr.resize(opts);
	
	        var optionChanged = this._model && this._model.resetOption('media');
	        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';
	
	        updateMethods[updateMethod].call(this);
	
	        // Resize loading effect
	        this._loadingFX && this._loadingFX.resize();
	
	        this[IN_MAIN_PROCESS] = false;
	
	        var silent = opts && opts.silent;
	
	        flushPendingActions.call(this, silent);
	
	        triggerUpdatedEvent.call(this, silent);
	    };
	
	    /**
	     * Show loading effect
	     * @param  {string} [name='default']
	     * @param  {Object} [cfg]
	     */
	    echartsProto.showLoading = function (name, cfg) {
	        if (zrUtil.isObject(name)) {
	            cfg = name;
	            name = '';
	        }
	        name = name || 'default';
	
	        this.hideLoading();
	        if (!loadingEffects[name]) {
	            if (__DEV__) {
	                console.warn('Loading effects ' + name + ' not exists.');
	            }
	            return;
	        }
	        var el = loadingEffects[name](this._api, cfg);
	        var zr = this._zr;
	        this._loadingFX = el;
	
	        zr.add(el);
	    };
	
	    /**
	     * Hide loading effect
	     */
	    echartsProto.hideLoading = function () {
	        this._loadingFX && this._zr.remove(this._loadingFX);
	        this._loadingFX = null;
	    };
	
	    /**
	     * @param {Object} eventObj
	     * @return {Object}
	     */
	    echartsProto.makeActionFromEvent = function (eventObj) {
	        var payload = zrUtil.extend({}, eventObj);
	        payload.type = eventActionMap[eventObj.type];
	        return payload;
	    };
	
	    /**
	     * @pubilc
	     * @param {Object} payload
	     * @param {string} [payload.type] Action type
	     * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	     * @param {boolean} [opt.silent=false] Whether trigger events.
	     * @param {boolean} [opt.flush=undefined]
	     *                  true: Flush immediately, and then pixel in canvas can be fetched
	     *                      immediately. Caution: it might affect performance.
	     *                  false: Not not flush.
	     *                  undefined: Auto decide whether perform flush.
	     */
	    echartsProto.dispatchAction = function (payload, opt) {
	        if (!zrUtil.isObject(opt)) {
	            opt = {silent: !!opt};
	        }
	
	        if (!actions[payload.type]) {
	            return;
	        }
	
	        // if (__DEV__) {
	        //     zrUtil.assert(
	        //         !this[IN_MAIN_PROCESS],
	        //         '`dispatchAction` should not be called during main process.'
	        //         + 'unless updateMathod is "none".'
	        //     );
	        // }
	
	        // May dispatchAction in rendering procedure
	        if (this[IN_MAIN_PROCESS]) {
	            this._pendingActions.push(payload);
	            return;
	        }
	
	        doDispatchAction.call(this, payload, opt.silent);
	
	        if (opt.flush) {
	            this._zr.flush(true);
	        }
	        else if (opt.flush !== false && env.browser.weChat) {
	            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	            // hang when sliding page (on touch event), which cause that zr does not
	            // refresh util user interaction finished, which is not expected.
	            // But `dispatchAction` may be called too frequently when pan on touch
	            // screen, which impacts performance if do not throttle them.
	            this._throttledZrFlush();
	        }
	
	        flushPendingActions.call(this, opt.silent);
	
	        triggerUpdatedEvent.call(this, opt.silent);
	    };
	
	    function doDispatchAction(payload, silent) {
	        var payloadType = payload.type;
	        var actionWrap = actions[payloadType];
	        var actionInfo = actionWrap.actionInfo;
	
	        var cptType = (actionInfo.update || 'update').split(':');
	        var updateMethod = cptType.pop();
	        cptType = cptType[0] && parseClassType(cptType[0]);
	
	        this[IN_MAIN_PROCESS] = true;
	
	        var payloads = [payload];
	        var batched = false;
	        // Batch action
	        if (payload.batch) {
	            batched = true;
	            payloads = zrUtil.map(payload.batch, function (item) {
	                item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	                item.batch = null;
	                return item;
	            });
	        }
	
	        var eventObjBatch = [];
	        var eventObj;
	        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';
	
	        for (var i = 0; i < payloads.length; i++) {
	            var batchItem = payloads[i];
	            // Action can specify the event by return it.
	            eventObj = actionWrap.action(batchItem, this._model);
	            // Emit event outside
	            eventObj = eventObj || zrUtil.extend({}, batchItem);
	            // Convert type to eventType
	            eventObj.type = actionInfo.event || eventObj.type;
	            eventObjBatch.push(eventObj);
	
	            // light update does not perform data process, layout and visual.
	            if (isHighDown) {
	                // method, payload, mainType, subType
	                updateDirectly(this, updateMethod, batchItem, 'series');
	            }
	            else if (cptType) {
	                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	            }
	        }
	
	        if (updateMethod !== 'none' && !isHighDown && !cptType) {
	            // Still dirty
	            if (this[OPTION_UPDATED]) {
	                // FIXME Pass payload ?
	                updateMethods.prepareAndUpdate.call(this, payload);
	                this[OPTION_UPDATED] = false;
	            }
	            else {
	                updateMethods[updateMethod].call(this, payload);
	            }
	        }
	
	        // Follow the rule of action batch
	        if (batched) {
	            eventObj = {
	                type: actionInfo.event || payloadType,
	                batch: eventObjBatch
	            };
	        }
	        else {
	            eventObj = eventObjBatch[0];
	        }
	
	        this[IN_MAIN_PROCESS] = false;
	
	        !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	    }
	
	    function flushPendingActions(silent) {
	        var pendingActions = this._pendingActions;
	        while (pendingActions.length) {
	            var payload = pendingActions.shift();
	            doDispatchAction.call(this, payload, silent);
	        }
	    }
	
	    function triggerUpdatedEvent(silent) {
	        !silent && this.trigger('updated');
	    }
	
	    /**
	     * Register event
	     * @method
	     */
	    echartsProto.on = createRegisterEventWithLowercaseName('on');
	    echartsProto.off = createRegisterEventWithLowercaseName('off');
	    echartsProto.one = createRegisterEventWithLowercaseName('one');
	
	    /**
	     * @param {string} methodName
	     * @private
	     */
	    function invokeUpdateMethod(methodName, ecModel, payload) {
	        var api = this._api;
	
	        // Update all components
	        each(this._componentsViews, function (component) {
	            var componentModel = component.__model;
	            component[methodName](componentModel, ecModel, api, payload);
	
	            updateZ(componentModel, component);
	        }, this);
	
	        // Upate all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chart = this._chartsMap[seriesModel.__viewId];
	            chart[methodName](seriesModel, ecModel, api, payload);
	
	            updateZ(seriesModel, chart);
	
	            updateProgressiveAndBlend(seriesModel, chart);
	        }, this);
	
	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);
	    }
	
	    /**
	     * Prepare view instances of charts and components
	     * @param  {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function prepareView(type, ecModel) {
	        var isComponent = type === 'component';
	        var viewList = isComponent ? this._componentsViews : this._chartsViews;
	        var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	        var zr = this._zr;
	
	        for (var i = 0; i < viewList.length; i++) {
	            viewList[i].__alive = false;
	        }
	
	        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	            if (isComponent) {
	                if (componentType === 'series') {
	                    return;
	                }
	            }
	            else {
	                model = componentType;
	            }
	
	            // Consider: id same and type changed.
	            var viewId = model.id + '_' + model.type;
	            var view = viewMap[viewId];
	            if (!view) {
	                var classType = parseClassType(model.type);
	                var Clazz = isComponent
	                    ? ComponentView.getClass(classType.main, classType.sub)
	                    : ChartView.getClass(classType.sub);
	                if (Clazz) {
	                    view = new Clazz();
	                    view.init(ecModel, this._api);
	                    viewMap[viewId] = view;
	                    viewList.push(view);
	                    zr.add(view.group);
	                }
	                else {
	                    // Error
	                    return;
	                }
	            }
	
	            model.__viewId = viewId;
	            view.__alive = true;
	            view.__id = viewId;
	            view.__model = model;
	        }, this);
	
	        for (var i = 0; i < viewList.length;) {
	            var view = viewList[i];
	            if (!view.__alive) {
	                zr.remove(view.group);
	                view.dispose(ecModel, this._api);
	                viewList.splice(i, 1);
	                delete viewMap[view.__id];
	            }
	            else {
	                i++;
	            }
	        }
	    }
	
	    /**
	     * Processor data in each series
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function processData(ecModel, api) {
	        each(dataProcessorFuncs, function (process) {
	            process.func(ecModel, api);
	        });
	    }
	
	    /**
	     * @private
	     */
	    function stackSeriesData(ecModel) {
	        var stackedDataMap = {};
	        ecModel.eachSeries(function (series) {
	            var stack = series.get('stack');
	            var data = series.getData();
	            if (stack && data.type === 'list') {
	                var previousStack = stackedDataMap[stack];
	                if (previousStack) {
	                    data.stackedOn = previousStack;
	                }
	                stackedDataMap[stack] = data;
	            }
	        });
	    }
	
	    /**
	     * Layout before each chart render there series, special visual encoding stage
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doLayout(ecModel, payload) {
	        var api = this._api;
	        each(visualFuncs, function (visual) {
	            if (visual.isLayout) {
	                visual.func(ecModel, api, payload);
	            }
	        });
	    }
	
	    /**
	     * Encode visual infomation from data after data processing
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @param {object} layout
	     * @param {boolean} [excludesLayout]
	     * @private
	     */
	    function doVisualEncoding(ecModel, payload, excludesLayout) {
	        var api = this._api;
	        ecModel.clearColorPalette();
	        ecModel.eachSeries(function (seriesModel) {
	            seriesModel.clearColorPalette();
	        });
	        each(visualFuncs, function (visual) {
	            (!excludesLayout || !visual.isLayout)
	                && visual.func(ecModel, api, payload);
	        });
	    }
	
	    /**
	     * Render each chart and component
	     * @private
	     */
	    function doRender(ecModel, payload) {
	        var api = this._api;
	        // Render all components
	        each(this._componentsViews, function (componentView) {
	            var componentModel = componentView.__model;
	            componentView.render(componentModel, ecModel, api, payload);
	
	            updateZ(componentModel, componentView);
	        }, this);
	
	        each(this._chartsViews, function (chart) {
	            chart.__alive = false;
	        }, this);
	
	        // Render all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chartView = this._chartsMap[seriesModel.__viewId];
	            chartView.__alive = true;
	            chartView.render(seriesModel, ecModel, api, payload);
	
	            chartView.group.silent = !!seriesModel.get('silent');
	
	            updateZ(seriesModel, chartView);
	
	            updateProgressiveAndBlend(seriesModel, chartView);
	
	        }, this);
	
	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);
	
	        // Remove groups of unrendered charts
	        each(this._chartsViews, function (chart) {
	            if (!chart.__alive) {
	                chart.remove(ecModel, api);
	            }
	        }, this);
	    }
	
	    var MOUSE_EVENT_NAMES = [
	        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',
	        'mousedown', 'mouseup', 'globalout', 'contextmenu'
	    ];
	    /**
	     * @private
	     */
	    echartsProto._initEvents = function () {
	        each(MOUSE_EVENT_NAMES, function (eveName) {
	            this._zr.on(eveName, function (e) {
	                var ecModel = this.getModel();
	                var el = e.target;
	                var params;
	
	                // no e.target when 'globalout'.
	                if (eveName === 'globalout') {
	                    params = {};
	                }
	                else if (el && el.dataIndex != null) {
	                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	                }
	                // If element has custom eventData of components
	                else if (el && el.eventData) {
	                    params = zrUtil.extend({}, el.eventData);
	                }
	
	                if (params) {
	                    params.event = e;
	                    params.type = eveName;
	                    this.trigger(eveName, params);
	                }
	
	            }, this);
	        }, this);
	
	        each(eventActionMap, function (actionType, eventType) {
	            this._messageCenter.on(eventType, function (event) {
	                this.trigger(eventType, event);
	            }, this);
	        }, this);
	    };
	
	    /**
	     * @return {boolean}
	     */
	    echartsProto.isDisposed = function () {
	        return this._disposed;
	    };
	
	    /**
	     * Clear
	     */
	    echartsProto.clear = function () {
	        this.setOption({ series: [] }, true);
	    };
	    /**
	     * Dispose instance
	     */
	    echartsProto.dispose = function () {
	        if (this._disposed) {
	            if (__DEV__) {
	                console.warn('Instance ' + this.id + ' has been disposed');
	            }
	            return;
	        }
	        this._disposed = true;
	
	        var api = this._api;
	        var ecModel = this._model;
	
	        each(this._componentsViews, function (component) {
	            component.dispose(ecModel, api);
	        });
	        each(this._chartsViews, function (chart) {
	            chart.dispose(ecModel, api);
	        });
	
	        // Dispose after all views disposed
	        this._zr.dispose();
	
	        delete instances[this.id];
	    };
	
	    zrUtil.mixin(ECharts, Eventful);
	
	    function updateHoverLayerStatus(zr, ecModel) {
	        var storage = zr.storage;
	        var elCount = 0;
	        storage.traverse(function (el) {
	            if (!el.isGroup) {
	                elCount++;
	            }
	        });
	        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	            storage.traverse(function (el) {
	                if (!el.isGroup) {
	                    el.useHoverLayer = true;
	                }
	            });
	        }
	    }
	    /**
	     * Update chart progressive and blend.
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateProgressiveAndBlend(seriesModel, chartView) {
	        // Progressive configuration
	        var elCount = 0;
	        chartView.group.traverse(function (el) {
	            if (el.type !== 'group' && !el.ignore) {
	                elCount++;
	            }
	        });
	        var frameDrawNum = +seriesModel.get('progressive');
	        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;
	        if (needProgressive) {
	            chartView.group.traverse(function (el) {
	                // FIXME marker and other components
	                if (!el.isGroup) {
	                    el.progressive = needProgressive ?
	                        Math.floor(elCount++ / frameDrawNum) : -1;
	                    if (needProgressive) {
	                        el.stopAnimation(true);
	                    }
	                }
	            });
	        }
	
	        // Blend configration
	        var blendMode = seriesModel.get('blendMode') || null;
	        if (__DEV__) {
	            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {
	                console.warn('Only canvas support blendMode');
	            }
	        }
	        chartView.group.traverse(function (el) {
	            // FIXME marker and other components
	            if (!el.isGroup) {
	                el.setStyle('blend', blendMode);
	            }
	        });
	    }
	    /**
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateZ(model, view) {
	        var z = model.get('z');
	        var zlevel = model.get('zlevel');
	        // Set z and zlevel
	        view.group.traverse(function (el) {
	            if (el.type !== 'group') {
	                z != null && (el.z = z);
	                zlevel != null && (el.zlevel = zlevel);
	            }
	        });
	    }
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var actions = [];
	
	    /**
	     * Map eventType to actionType
	     * @type {Object}
	     */
	    var eventActionMap = {};
	
	    /**
	     * Data processor functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var dataProcessorFuncs = [];
	
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var optionPreprocessorFuncs = [];
	
	    /**
	     * Visual encoding functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var visualFuncs = [];
	    /**
	     * Theme storage
	     * @type {Object.<key, Object>}
	     */
	    var themeStorage = {};
	    /**
	     * Loading effects
	     */
	    var loadingEffects = {};
	
	
	    var instances = {};
	    var connectedGroups = {};
	
	    var idBase = new Date() - 0;
	    var groupIdBase = new Date() - 0;
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	    /**
	     * @alias module:echarts
	     */
	    var echarts = {
	        /**
	         * @type {number}
	         */
	        version: '3.4.0',
	        dependencies: {
	            zrender: '3.3.0'
	        }
	    };
	
	    function enableConnect(chart) {
	
	        var STATUS_PENDING = 0;
	        var STATUS_UPDATING = 1;
	        var STATUS_UPDATED = 2;
	        var STATUS_KEY = '__connectUpdateStatus';
	        function updateConnectedChartsStatus(charts, status) {
	            for (var i = 0; i < charts.length; i++) {
	                var otherChart = charts[i];
	                otherChart[STATUS_KEY] = status;
	            }
	        }
	        zrUtil.each(eventActionMap, function (actionType, eventType) {
	            chart._messageCenter.on(eventType, function (event) {
	                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                    var action = chart.makeActionFromEvent(event);
	                    var otherCharts = [];
	
	                    zrUtil.each(instances, function (otherChart) {
	                        if (otherChart !== chart && otherChart.group === chart.group) {
	                            otherCharts.push(otherChart);
	                        }
	                    });
	
	                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                    each(otherCharts, function (otherChart) {
	                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                            otherChart.dispatchAction(action);
	                        }
	                    });
	                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	                }
	            });
	        });
	
	    }
	    /**
	     * @param {HTMLDomElement} dom
	     * @param {Object} [theme]
	     * @param {Object} opts
	     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	     * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	     *                              Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	     *                               Can be 'auto' (the same as null/undefined)
	     */
	    echarts.init = function (dom, theme, opts) {
	        if (__DEV__) {
	            // Check version
	            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {
	                throw new Error(
	                    'ZRender ' + zrender.version
	                    + ' is too old for ECharts ' + echarts.version
	                    + '. Current version need ZRender '
	                    + echarts.dependencies.zrender + '+'
	                );
	            }
	            if (!dom) {
	                throw new Error('Initialize failed: invalid dom.');
	            }
	            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {
	                console.warn('Can\'t get dom width or height');
	            }
	        }
	
	        var chart = new ECharts(dom, theme, opts);
	        chart.id = 'ec_' + idBase++;
	        instances[chart.id] = chart;
	
	        dom.setAttribute &&
	            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);
	
	        enableConnect(chart);
	
	        return chart;
	    };
	
	    /**
	     * @return {string|Array.<module:echarts~ECharts>} groupId
	     */
	    echarts.connect = function (groupId) {
	        // Is array of charts
	        if (zrUtil.isArray(groupId)) {
	            var charts = groupId;
	            groupId = null;
	            // If any chart has group
	            zrUtil.each(charts, function (chart) {
	                if (chart.group != null) {
	                    groupId = chart.group;
	                }
	            });
	            groupId = groupId || ('g_' + groupIdBase++);
	            zrUtil.each(charts, function (chart) {
	                chart.group = groupId;
	            });
	        }
	        connectedGroups[groupId] = true;
	        return groupId;
	    };
	
	    /**
	     * @return {string} groupId
	     */
	    echarts.disConnect = function (groupId) {
	        connectedGroups[groupId] = false;
	    };
	
	    /**
	     * Dispose a chart instance
	     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	     */
	    echarts.dispose = function (chart) {
	        if (zrUtil.isDom(chart)) {
	            chart = echarts.getInstanceByDom(chart);
	        }
	        else if (typeof chart === 'string') {
	            chart = instances[chart];
	        }
	        if ((chart instanceof ECharts) && !chart.isDisposed()) {
	            chart.dispose();
	        }
	    };
	
	    /**
	     * @param  {HTMLDomElement} dom
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceByDom = function (dom) {
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        return instances[key];
	    };
	    /**
	     * @param {string} key
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceById = function (key) {
	        return instances[key];
	    };
	
	    /**
	     * Register theme
	     */
	    echarts.registerTheme = function (name, theme) {
	        themeStorage[name] = theme;
	    };
	
	    /**
	     * Register option preprocessor
	     * @param {Function} preprocessorFunc
	     */
	    echarts.registerPreprocessor = function (preprocessorFunc) {
	        optionPreprocessorFuncs.push(preprocessorFunc);
	    };
	
	    /**
	     * @param {number} [priority=1000]
	     * @param {Function} processorFunc
	     */
	    echarts.registerProcessor = function (priority, processorFunc) {
	        if (typeof priority === 'function') {
	            processorFunc = priority;
	            priority = PRIORITY_PROCESSOR_FILTER;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown processor priority');
	            }
	        }
	        dataProcessorFuncs.push({
	            prio: priority,
	            func: processorFunc
	        });
	    };
	
	    /**
	     * Usage:
	     * registerAction('someAction', 'someEvent', function () { ... });
	     * registerAction('someAction', function () { ... });
	     * registerAction(
	     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	     *     function () { ... }
	     * );
	     *
	     * @param {(string|Object)} actionInfo
	     * @param {string} actionInfo.type
	     * @param {string} [actionInfo.event]
	     * @param {string} [actionInfo.update]
	     * @param {string} [eventName]
	     * @param {Function} action
	     */
	    echarts.registerAction = function (actionInfo, eventName, action) {
	        if (typeof eventName === 'function') {
	            action = eventName;
	            eventName = '';
	        }
	        var actionType = zrUtil.isObject(actionInfo)
	            ? actionInfo.type
	            : ([actionInfo, actionInfo = {
	                event: eventName
	            }][0]);
	
	        // Event name is all lowercase
	        actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	        eventName = actionInfo.event;
	
	        // Validate action type and event name.
	        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));
	
	        if (!actions[actionType]) {
	            actions[actionType] = {action: action, actionInfo: actionInfo};
	        }
	        eventActionMap[eventName] = actionType;
	    };
	
	    /**
	     * @param {string} type
	     * @param {*} CoordinateSystem
	     */
	    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	        CoordinateSystemManager.register(type, CoordinateSystem);
	    };
	
	    /**
	     * Layout is a special stage of visual encoding
	     * Most visual encoding like color are common for different chart
	     * But each chart has it's own layout algorithm
	     *
	     * @param {number} [priority=1000]
	     * @param {Function} layoutFunc
	     */
	    echarts.registerLayout = function (priority, layoutFunc) {
	        if (typeof priority === 'function') {
	            layoutFunc = priority;
	            priority = PRIORITY_VISUAL_LAYOUT;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown layout priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: layoutFunc,
	            isLayout: true
	        });
	    };
	
	    /**
	     * @param {number} [priority=3000]
	     * @param {Function} visualFunc
	     */
	    echarts.registerVisual = function (priority, visualFunc) {
	        if (typeof priority === 'function') {
	            visualFunc = priority;
	            priority = PRIORITY_VISUAL_CHART;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown visual priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: visualFunc
	        });
	    };
	
	    /**
	     * @param {string} name
	     */
	    echarts.registerLoading = function (name, loadingFx) {
	        loadingEffects[name] = loadingFx;
	    };
	
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentModel = function (opts/*, superClass*/) {
	        // var Clazz = ComponentModel;
	        // if (superClass) {
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	        // }
	        return ComponentModel.extend(opts);
	    };
	
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentView = function (opts/*, superClass*/) {
	        // var Clazz = ComponentView;
	        // if (superClass) {
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	        // }
	        return ComponentView.extend(opts);
	    };
	
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendSeriesModel = function (opts/*, superClass*/) {
	        // var Clazz = SeriesModel;
	        // if (superClass) {
	        //     superClass = 'series.' + superClass.replace('series.', '');
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	        // }
	        return SeriesModel.extend(opts);
	    };
	
	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendChartView = function (opts/*, superClass*/) {
	        // var Clazz = ChartView;
	        // if (superClass) {
	        //     superClass = superClass.replace('series.', '');
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ChartView.getClass(classType.main, true);
	        // }
	        return ChartView.extend(opts);
	    };
	
	    /**
	     * ZRender need a canvas context to do measureText.
	     * But in node environment canvas may be created by node-canvas.
	     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	     *
	     * Be careful of using it in the browser.
	     *
	     * @param {Function} creator
	     * @example
	     *     var Canvas = require('canvas');
	     *     var echarts = require('echarts');
	     *     echarts.setCanvasCreator(function () {
	     *         // Small size is enough.
	     *         return new Canvas(32, 32);
	     *     });
	     */
	    echarts.setCanvasCreator = function (creator) {
	        zrUtil.createCanvas = creator;
	    };
	
	    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(115));
	    echarts.registerPreprocessor(__webpack_require__(116));
	    echarts.registerLoading('default', __webpack_require__(118));
	
	    // Default action
	    echarts.registerAction({
	        type: 'highlight',
	        event: 'highlight',
	        update: 'highlight'
	    }, zrUtil.noop);
	    echarts.registerAction({
	        type: 'downplay',
	        event: 'downplay',
	        update: 'downplay'
	    }, zrUtil.noop);
	
	
	    // --------
	    // Exports
	    // --------
	    //
	    echarts.List = __webpack_require__(119);
	    echarts.Model = __webpack_require__(33);
	
	    echarts.graphic = __webpack_require__(64);
	    echarts.number = __webpack_require__(28);
	    echarts.format = __webpack_require__(27);
	    echarts.throttle = throttle.throttle;
	    echarts.matrix = __webpack_require__(32);
	    echarts.vector = __webpack_require__(31);
	    echarts.color = __webpack_require__(60);
	
	    echarts.util = {};
	    each([
	            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',
	            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',
	            'extend', 'defaults', 'clone'
	        ],
	        function (name) {
	            echarts.util[name] = zrUtil[name];
	        }
	    );
	
	    // PRIORITY
	    echarts.PRIORITY = {
	        PROCESSOR: {
	            FILTER: PRIORITY_PROCESSOR_FILTER,
	            STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	        },
	        VISUAL: {
	            LAYOUT: PRIORITY_VISUAL_LAYOUT,
	            GLOBAL: PRIORITY_VISUAL_GLOBAL,
	            CHART: PRIORITY_VISUAL_CHART,
	            COMPONENT: PRIORITY_VISUAL_COMPONENT,
	            BRUSH: PRIORITY_VISUAL_BRUSH
	        }
	    };
	
	    module.exports = echarts;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 23 */
/***/ function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	
	    var env = {};
	    if (typeof navigator === 'undefined') {
	        // In node
	        env = {
	            browser: {},
	            os: {},
	            node: true,
	            // Assume canvas is supported
	            canvasSupported: true
	        };
	    }
	    else {
	        env = detect(navigator.userAgent);
	    }
	
	    module.exports = env;
	
	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.
	
	    function detect(ua) {
	        var os = {};
	        var browser = {};
	        // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        // var touchpad = webos && ua.match(/TouchPad/);
	        // var kindle = ua.match(/Kindle\/([\d.]+)/);
	        // var silk = ua.match(/Silk\/([\d._]+)/);
	        // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        // var playbook = ua.match(/PlayBook/);
	        // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/)
	            // IE 11 Trident/7.0; rv:11.0
	            || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	        var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+
	
	        var weChat = (/micromessenger/i).test(ua);
	
	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes
	
	        // if (browser.webkit = !!webkit) browser.version = webkit[1];
	
	        // if (android) os.android = true, os.version = android[2];
	        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        // if (webos) os.webos = true, os.version = webos[2];
	        // if (touchpad) os.touchpad = true;
	        // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        // if (bb10) os.bb10 = true, os.version = bb10[2];
	        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        // if (playbook) browser.playbook = true;
	        // if (kindle) os.kindle = true, os.version = kindle[1];
	        // if (silk) browser.silk = true, browser.version = silk[1];
	        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        // if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox) {
	            browser.firefox = true;
	            browser.version = firefox[1];
	        }
	        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        // if (webview) browser.webview = true;
	
	        if (ie) {
	            browser.ie = true;
	            browser.version = ie[1];
	        }
	
	        if (edge) {
	            browser.edge = true;
	            browser.version = edge[1];
	        }
	
	        // It is difficult to detect WeChat in Win Phone precisely, because ua can
	        // not be set on win phone. So we do not consider Win Phone.
	        if (weChat) {
	            browser.weChat = true;
	        }
	
	        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));
	
	        return {
	            browser: browser,
	            os: os,
	            node: false,
	            // 原生canvas支持，改极端点了
	            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	            canvasSupported : document.createElement('canvas').getContext ? true : false,
	            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	            // works on most browsers
	            // IE10/11 does not support touch event, and MS Edge supports them but not by
	            // default, so we dont check navigator.maxTouchPoints for them here.
	            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	            // <http://caniuse.com/#search=pointer%20event>.
	            pointerEventsSupported: 'onpointerdown' in window
	                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	                // events currently. So we dont use that on other browsers unless tested sufficiently.
	                // Although IE 10 supports pointer event, it use old style and is different from the
	                // standard. So we exclude that. (IE 10 is hardly used on touch device)
	                && (browser.edge || (browser.ie && browser.version >= 11))
	        };
	    }


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */
	
	
	
	    /**
	     * Caution: If the mechanism should be changed some day, these cases
	     * should be considered:
	     *
	     * (1) In `merge option` mode, if using the same option to call `setOption`
	     * many times, the result should be the same (try our best to ensure that).
	     * (2) In `merge option` mode, if a component has no id/name specified, it
	     * will be merged by index, and the result sequence of the components is
	     * consistent to the original sequence.
	     * (3) `reset` feature (in toolbox). Find detailed info in comments about
	     * `mergeOption` in module:echarts/model/OptionManager.
	     */
	
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var Model = __webpack_require__(33);
	    var each = zrUtil.each;
	    var filter = zrUtil.filter;
	    var map = zrUtil.map;
	    var isArray = zrUtil.isArray;
	    var indexOf = zrUtil.indexOf;
	    var isObject = zrUtil.isObject;
	
	    var ComponentModel = __webpack_require__(40);
	
	    var globalDefault = __webpack_require__(44);
	
	    var OPTION_INNER_KEY = '\0_ec_inner';
	
	    /**
	     * @alias module:echarts/model/Global
	     *
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {Object} theme
	     */
	    var GlobalModel = Model.extend({
	
	        constructor: GlobalModel,
	
	        init: function (option, parentModel, theme, optionManager) {
	            theme = theme || {};
	
	            this.option = null; // Mark as not initialized.
	
	            /**
	             * @type {module:echarts/model/Model}
	             * @private
	             */
	            this._theme = new Model(theme);
	
	            /**
	             * @type {module:echarts/model/OptionManager}
	             */
	            this._optionManager = optionManager;
	        },
	
	        setOption: function (option, optionPreprocessorFuncs) {
	            zrUtil.assert(
	                !(OPTION_INNER_KEY in option),
	                'please use chart.getOption()'
	            );
	
	            this._optionManager.setOption(option, optionPreprocessorFuncs);
	
	            this.resetOption();
	        },
	
	        /**
	         * @param {string} type null/undefined: reset all.
	         *                      'recreate': force recreate all.
	         *                      'timeline': only reset timeline option
	         *                      'media': only reset media query option
	         * @return {boolean} Whether option changed.
	         */
	        resetOption: function (type) {
	            var optionChanged = false;
	            var optionManager = this._optionManager;
	
	            if (!type || type === 'recreate') {
	                var baseOption = optionManager.mountOption(type === 'recreate');
	
	                if (!this.option || type === 'recreate') {
	                    initBase.call(this, baseOption);
	                }
	                else {
	                    this.restoreData();
	                    this.mergeOption(baseOption);
	                }
	                optionChanged = true;
	            }
	
	            if (type === 'timeline' || type === 'media') {
	                this.restoreData();
	            }
	
	            if (!type || type === 'recreate' || type === 'timeline') {
	                var timelineOption = optionManager.getTimelineOption(this);
	                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	            }
	
	            if (!type || type === 'recreate' || type === 'media') {
	                var mediaOptions = optionManager.getMediaOption(this, this._api);
	                if (mediaOptions.length) {
	                    each(mediaOptions, function (mediaOption) {
	                        this.mergeOption(mediaOption, optionChanged = true);
	                    }, this);
	                }
	            }
	
	            return optionChanged;
	        },
	
	        /**
	         * @protected
	         */
	        mergeOption: function (newOption) {
	            var option = this.option;
	            var componentsMap = this._componentsMap;
	            var newCptTypes = [];
	
	            // 如果不存在对应的 component model 则直接 merge
	            each(newOption, function (componentOption, mainType) {
	                if (componentOption == null) {
	                    return;
	                }
	
	                if (!ComponentModel.hasClass(mainType)) {
	                    option[mainType] = option[mainType] == null
	                        ? zrUtil.clone(componentOption)
	                        : zrUtil.merge(option[mainType], componentOption, true);
	                }
	                else {
	                    newCptTypes.push(mainType);
	                }
	            });
	
	            // FIXME OPTION 同步是否要改回原来的
	            ComponentModel.topologicalTravel(
	                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this
	            );
	
	            this._seriesIndices = this._seriesIndices || [];
	
	            function visitComponent(mainType, dependencies) {
	                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	
	                var mapResult = modelUtil.mappingToExists(
	                    componentsMap[mainType], newCptOptionList
	                );
	
	                modelUtil.makeIdAndName(mapResult);
	
	                // Set mainType and complete subType.
	                each(mapResult, function (item, index) {
	                    var opt = item.option;
	                    if (isObject(opt)) {
	                        item.keyInfo.mainType = mainType;
	                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	                    }
	                });
	
	                var dependentModels = getComponentsByTypes(
	                    componentsMap, dependencies
	                );
	
	                option[mainType] = [];
	                componentsMap[mainType] = [];
	
	                each(mapResult, function (resultItem, index) {
	                    var componentModel = resultItem.exist;
	                    var newCptOption = resultItem.option;
	
	                    zrUtil.assert(
	                        isObject(newCptOption) || componentModel,
	                        'Empty component definition'
	                    );
	
	                    // Consider where is no new option and should be merged using {},
	                    // see removeEdgeAndAdd in topologicalTravel and
	                    // ComponentModel.getAllClassMainTypes.
	                    if (!newCptOption) {
	                        componentModel.mergeOption({}, this);
	                        componentModel.optionUpdated({}, false);
	                    }
	                    else {
	                        var ComponentModelClass = ComponentModel.getClass(
	                            mainType, resultItem.keyInfo.subType, true
	                        );
	
	                        if (componentModel && componentModel instanceof ComponentModelClass) {
	                            componentModel.name = resultItem.keyInfo.name;
	                            componentModel.mergeOption(newCptOption, this);
	                            componentModel.optionUpdated(newCptOption, false);
	                        }
	                        else {
	                            // PENDING Global as parent ?
	                            var extraOpt = zrUtil.extend(
	                                {
	                                    dependentModels: dependentModels,
	                                    componentIndex: index
	                                },
	                                resultItem.keyInfo
	                            );
	                            componentModel = new ComponentModelClass(
	                                newCptOption, this, this, extraOpt
	                            );
	                            zrUtil.extend(componentModel, extraOpt);
	                            componentModel.init(newCptOption, this, this, extraOpt);
	                            // Call optionUpdated after init.
	                            // newCptOption has been used as componentModel.option
	                            // and may be merged with theme and default, so pass null
	                            // to avoid confusion.
	                            componentModel.optionUpdated(null, true);
	                        }
	                    }
	
	                    componentsMap[mainType][index] = componentModel;
	                    option[mainType][index] = componentModel.option;
	                }, this);
	
	                // Backup series for filtering.
	                if (mainType === 'series') {
	                    this._seriesIndices = createSeriesIndices(componentsMap.series);
	                }
	            }
	        },
	
	        /**
	         * Get option for output (cloned option and inner info removed)
	         * @public
	         * @return {Object}
	         */
	        getOption: function () {
	            var option = zrUtil.clone(this.option);
	
	            each(option, function (opts, mainType) {
	                if (ComponentModel.hasClass(mainType)) {
	                    var opts = modelUtil.normalizeToArray(opts);
	                    for (var i = opts.length - 1; i >= 0; i--) {
	                        // Remove options with inner id.
	                        if (modelUtil.isIdInner(opts[i])) {
	                            opts.splice(i, 1);
	                        }
	                    }
	                    option[mainType] = opts;
	                }
	            });
	
	            delete option[OPTION_INNER_KEY];
	
	            return option;
	        },
	
	        /**
	         * @return {module:echarts/model/Model}
	         */
	        getTheme: function () {
	            return this._theme;
	        },
	
	        /**
	         * @param {string} mainType
	         * @param {number} [idx=0]
	         * @return {module:echarts/model/Component}
	         */
	        getComponent: function (mainType, idx) {
	            var list = this._componentsMap[mainType];
	            if (list) {
	                return list[idx || 0];
	            }
	        },
	
	        /**
	         * If none of index and id and name used, return all components with mainType.
	         * @param {Object} condition
	         * @param {string} condition.mainType
	         * @param {string} [condition.subType] If ignore, only query by mainType
	         * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	         * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	         * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        queryComponents: function (condition) {
	            var mainType = condition.mainType;
	            if (!mainType) {
	                return [];
	            }
	
	            var index = condition.index;
	            var id = condition.id;
	            var name = condition.name;
	
	            var cpts = this._componentsMap[mainType];
	
	            if (!cpts || !cpts.length) {
	                return [];
	            }
	
	            var result;
	
	            if (index != null) {
	                if (!isArray(index)) {
	                    index = [index];
	                }
	                result = filter(map(index, function (idx) {
	                    return cpts[idx];
	                }), function (val) {
	                    return !!val;
	                });
	            }
	            else if (id != null) {
	                var isIdArray = isArray(id);
	                result = filter(cpts, function (cpt) {
	                    return (isIdArray && indexOf(id, cpt.id) >= 0)
	                        || (!isIdArray && cpt.id === id);
	                });
	            }
	            else if (name != null) {
	                var isNameArray = isArray(name);
	                result = filter(cpts, function (cpt) {
	                    return (isNameArray && indexOf(name, cpt.name) >= 0)
	                        || (!isNameArray && cpt.name === name);
	                });
	            }
	            else {
	                // Return all components with mainType
	                result = cpts;
	            }
	
	            return filterBySubType(result, condition);
	        },
	
	        /**
	         * The interface is different from queryComponents,
	         * which is convenient for inner usage.
	         *
	         * @usage
	         * var result = findComponents(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series'},
	         *     function (model, index) {...}
	         * );
	         * // result like [component0, componnet1, ...]
	         *
	         * @param {Object} condition
	         * @param {string} condition.mainType Mandatory.
	         * @param {string} [condition.subType] Optional.
	         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	         *        where xxx is mainType.
	         *        If query attribute is null/undefined or has no index/id/name,
	         *        do not filtering by query conditions, which is convenient for
	         *        no-payload situations or when target of action is global.
	         * @param {Function} [condition.filter] parameter: component, return boolean.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        findComponents: function (condition) {
	            var query = condition.query;
	            var mainType = condition.mainType;
	
	            var queryCond = getQueryCond(query);
	            var result = queryCond
	                ? this.queryComponents(queryCond)
	                : this._componentsMap[mainType];
	
	            return doFilter(filterBySubType(result, condition));
	
	            function getQueryCond(q) {
	                var indexAttr = mainType + 'Index';
	                var idAttr = mainType + 'Id';
	                var nameAttr = mainType + 'Name';
	                return q && (
	                        q[indexAttr] != null
	                        || q[idAttr] != null
	                        || q[nameAttr] != null
	                    )
	                    ? {
	                        mainType: mainType,
	                        // subType will be filtered finally.
	                        index: q[indexAttr],
	                        id: q[idAttr],
	                        name: q[nameAttr]
	                    }
	                    : null;
	            }
	
	            function doFilter(res) {
	                return condition.filter
	                     ? filter(res, condition.filter)
	                     : res;
	            }
	        },
	
	        /**
	         * @usage
	         * eachComponent('legend', function (legendModel, index) {
	         *     ...
	         * });
	         * eachComponent(function (componentType, model, index) {
	         *     // componentType does not include subType
	         *     // (componentType is 'xxx' but not 'xxx.aa')
	         * });
	         * eachComponent(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	         *     function (model, index) {...}
	         * );
	         * eachComponent(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	         *     function (model, index) {...}
	         * );
	         *
	         * @param {string|Object=} mainType When mainType is object, the definition
	         *                                  is the same as the method 'findComponents'.
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachComponent: function (mainType, cb, context) {
	            var componentsMap = this._componentsMap;
	
	            if (typeof mainType === 'function') {
	                context = cb;
	                cb = mainType;
	                each(componentsMap, function (components, componentType) {
	                    each(components, function (component, index) {
	                        cb.call(context, componentType, component, index);
	                    });
	                });
	            }
	            else if (zrUtil.isString(mainType)) {
	                each(componentsMap[mainType], cb, context);
	            }
	            else if (isObject(mainType)) {
	                var queryResult = this.findComponents(mainType);
	                each(queryResult, cb, context);
	            }
	        },
	
	        /**
	         * @param {string} name
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByName: function (name) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.name === name;
	            });
	        },
	
	        /**
	         * @param {number} seriesIndex
	         * @return {module:echarts/model/Series}
	         */
	        getSeriesByIndex: function (seriesIndex) {
	            return this._componentsMap.series[seriesIndex];
	        },
	
	        /**
	         * @param {string} subType
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByType: function (subType) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.subType === subType;
	            });
	        },
	
	        /**
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeries: function () {
	            return this._componentsMap.series.slice();
	        },
	
	        /**
	         * After filtering, series may be different
	         * frome raw series.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                cb.call(context, series, rawSeriesIndex);
	            }, this);
	        },
	
	        /**
	         * Iterate raw series before filtered.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeries: function (cb, context) {
	            each(this._componentsMap.series, cb, context);
	        },
	
	        /**
	         * After filtering, series may be different.
	         * frome raw series.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeriesByType: function (subType, cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                if (series.subType === subType) {
	                    cb.call(context, series, rawSeriesIndex);
	                }
	            }, this);
	        },
	
	        /**
	         * Iterate raw series before filtered of given type.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeriesByType: function (subType, cb, context) {
	            return each(this.getSeriesByType(subType), cb, context);
	        },
	
	        /**
	         * @param {module:echarts/model/Series} seriesModel
	         */
	        isSeriesFiltered: function (seriesModel) {
	            assertSeriesInitialized(this);
	            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	        },
	
	        /**
	         * @param {Function} cb
	         * @param {*} context
	         */
	        filterSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            var filteredSeries = filter(
	                this._componentsMap.series, cb, context
	            );
	            this._seriesIndices = createSeriesIndices(filteredSeries);
	        },
	
	        restoreData: function () {
	            var componentsMap = this._componentsMap;
	
	            this._seriesIndices = createSeriesIndices(componentsMap.series);
	
	            var componentTypes = [];
	            each(componentsMap, function (components, componentType) {
	                componentTypes.push(componentType);
	            });
	
	            ComponentModel.topologicalTravel(
	                componentTypes,
	                ComponentModel.getAllClassMainTypes(),
	                function (componentType, dependencies) {
	                    each(componentsMap[componentType], function (component) {
	                        component.restoreData();
	                    });
	                }
	            );
	        }
	
	    });
	
	    /**
	     * @inner
	     */
	    function mergeTheme(option, theme) {
	        zrUtil.each(theme, function (themeItem, name) {
	            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	            if (!ComponentModel.hasClass(name)) {
	                if (typeof themeItem === 'object') {
	                    option[name] = !option[name]
	                        ? zrUtil.clone(themeItem)
	                        : zrUtil.merge(option[name], themeItem, false);
	                }
	                else {
	                    if (option[name] == null) {
	                        option[name] = themeItem;
	                    }
	                }
	            }
	        });
	    }
	
	    function initBase(baseOption) {
	        baseOption = baseOption;
	
	        // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	        this.option = {};
	        this.option[OPTION_INNER_KEY] = 1;
	
	        /**
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @private
	         */
	        this._componentsMap = {};
	
	        /**
	         * Mapping between filtered series list and raw series list.
	         * key: filtered series indices, value: raw series indices.
	         * @type {Array.<nubmer>}
	         * @private
	         */
	        this._seriesIndices = null;
	
	        mergeTheme(baseOption, this._theme.option);
	
	        // TODO Needs clone when merging to the unexisted property
	        zrUtil.merge(baseOption, globalDefault, false);
	
	        this.mergeOption(baseOption);
	    }
	
	    /**
	     * @inner
	     * @param {Array.<string>|string} types model types
	     * @return {Object} key: {string} type, value: {Array.<Object>} models
	     */
	    function getComponentsByTypes(componentsMap, types) {
	        if (!zrUtil.isArray(types)) {
	            types = types ? [types] : [];
	        }
	
	        var ret = {};
	        each(types, function (type) {
	            ret[type] = (componentsMap[type] || []).slice();
	        });
	
	        return ret;
	    }
	
	    /**
	     * @inner
	     */
	    function determineSubType(mainType, newCptOption, existComponent) {
	        var subType = newCptOption.type
	            ? newCptOption.type
	            : existComponent
	            ? existComponent.subType
	            // Use determineSubType only when there is no existComponent.
	            : ComponentModel.determineSubType(mainType, newCptOption);
	
	        // tooltip, markline, markpoint may always has no subType
	        return subType;
	    }
	
	    /**
	     * @inner
	     */
	    function createSeriesIndices(seriesModels) {
	        return map(seriesModels, function (series) {
	            return series.componentIndex;
	        }) || [];
	    }
	
	    /**
	     * @inner
	     */
	    function filterBySubType(components, condition) {
	        // Using hasOwnProperty for restrict. Consider
	        // subType is undefined in user payload.
	        return condition.hasOwnProperty('subType')
	            ? filter(components, function (cpt) {
	                return cpt.subType === condition.subType;
	            })
	            : components;
	    }
	
	    /**
	     * @inner
	     */
	    function assertSeriesInitialized(ecModel) {
	        // Components that use _seriesIndices should depends on series component,
	        // which make sure that their initialization is after series.
	        if (__DEV__) {
	            if (!ecModel._seriesIndices) {
	                throw new Error('Series has not been initialized yet.');
	            }
	        }
	    }
	
	    zrUtil.mixin(GlobalModel, __webpack_require__(45));
	
	    module.exports = GlobalModel;


/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * @module zrender/core/util
	 */
	
	
	    // 用于处理merge时无法遍历Date等对象的问题
	    var BUILTIN_OBJECT = {
	        '[object Function]': 1,
	        '[object RegExp]': 1,
	        '[object Date]': 1,
	        '[object Error]': 1,
	        '[object CanvasGradient]': 1,
	        '[object CanvasPattern]': 1,
	        // For node-canvas
	        '[object Image]': 1,
	        '[object Canvas]': 1
	    };
	
	    var TYPED_ARRAY = {
	        '[object Int8Array]': 1,
	        '[object Uint8Array]': 1,
	        '[object Uint8ClampedArray]': 1,
	        '[object Int16Array]': 1,
	        '[object Uint16Array]': 1,
	        '[object Int32Array]': 1,
	        '[object Uint32Array]': 1,
	        '[object Float32Array]': 1,
	        '[object Float64Array]': 1
	    };
	
	    var objToString = Object.prototype.toString;
	
	    var arrayProto = Array.prototype;
	    var nativeForEach = arrayProto.forEach;
	    var nativeFilter = arrayProto.filter;
	    var nativeSlice = arrayProto.slice;
	    var nativeMap = arrayProto.map;
	    var nativeReduce = arrayProto.reduce;
	
	    /**
	     * Those data types can be cloned:
	     *     Plain object, Array, TypedArray, number, string, null, undefined.
	     * Those data types will be assgined using the orginal data:
	     *     BUILTIN_OBJECT
	     * Instance of user defined class will be cloned to a plain object, without
	     * properties in prototype.
	     * Other data types is not supported (not sure what will happen).
	     *
	     * Caution: do not support clone Date, for performance consideration.
	     * (There might be a large number of date in `series.data`).
	     * So date should not be modified in and out of echarts.
	     *
	     * @param {*} source
	     * @return {*} new
	     */
	    function clone(source) {
	        if (source == null || typeof source != 'object') {
	            return source;
	        }
	
	        var result = source;
	        var typeStr = objToString.call(source);
	
	        if (typeStr === '[object Array]') {
	            result = [];
	            for (var i = 0, len = source.length; i < len; i++) {
	                result[i] = clone(source[i]);
	            }
	        }
	        else if (TYPED_ARRAY[typeStr]) {
	            result = source.constructor.from(source);
	        }
	        else if (!BUILTIN_OBJECT[typeStr] && !isDom(source)) {
	            result = {};
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    result[key] = clone(source[key]);
	                }
	            }
	        }
	
	        return result;
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} target
	     * @param {*} source
	     * @param {boolean} [overwrite=false]
	     */
	    function merge(target, source, overwrite) {
	        // We should escapse that source is string
	        // and enter for ... in ...
	        if (!isObject(source) || !isObject(target)) {
	            return overwrite ? clone(source) : target;
	        }
	
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                var sourceProp = source[key];
	
	                if (isObject(sourceProp)
	                    && isObject(targetProp)
	                    && !isArray(sourceProp)
	                    && !isArray(targetProp)
	                    && !isDom(sourceProp)
	                    && !isDom(targetProp)
	                    && !isBuildInObject(sourceProp)
	                    && !isBuildInObject(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(targetProp, sourceProp, overwrite);
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                    target[key] = clone(source[key], true);
	                }
	            }
	        }
	
	        return target;
	    }
	
	    /**
	     * @param {Array} targetAndSources The first item is target, and the rests are source.
	     * @param {boolean} [overwrite=false]
	     * @return {*} target
	     */
	    function mergeAll(targetAndSources, overwrite) {
	        var result = targetAndSources[0];
	        for (var i = 1, len = targetAndSources.length; i < len; i++) {
	            result = merge(result, targetAndSources[i], overwrite);
	        }
	        return result;
	    }
	
	    /**
	     * @param {*} target
	     * @param {*} source
	     * @memberOf module:zrender/core/util
	     */
	    function extend(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }
	
	    /**
	     * @param {*} target
	     * @param {*} source
	     * @param {boolen} [overlay=false]
	     * @memberOf module:zrender/core/util
	     */
	    function defaults(target, source, overlay) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)
	                && (overlay ? source[key] != null : target[key] == null)
	            ) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }
	
	    function createCanvas() {
	        return document.createElement('canvas');
	    }
	    // FIXME
	    var _ctx;
	    function getContext() {
	        if (!_ctx) {
	            // Use util.createCanvas instead of createCanvas
	            // because createCanvas may be overwritten in different environment
	            _ctx = util.createCanvas().getContext('2d');
	        }
	        return _ctx;
	    }
	
	    /**
	     * 查询数组中元素的index
	     * @memberOf module:zrender/core/util
	     */
	    function indexOf(array, value) {
	        if (array) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }
	
	    /**
	     * 构造类继承关系
	     *
	     * @memberOf module:zrender/core/util
	     * @param {Function} clazz 源类
	     * @param {Function} baseClazz 基类
	     */
	    function inherits(clazz, baseClazz) {
	        var clazzPrototype = clazz.prototype;
	        function F() {}
	        F.prototype = baseClazz.prototype;
	        clazz.prototype = new F();
	
	        for (var prop in clazzPrototype) {
	            clazz.prototype[prop] = clazzPrototype[prop];
	        }
	        clazz.prototype.constructor = clazz;
	        clazz.superClass = baseClazz;
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Object|Function} target
	     * @param {Object|Function} sorce
	     * @param {boolean} overlay
	     */
	    function mixin(target, source, overlay) {
	        target = 'prototype' in target ? target.prototype : target;
	        source = 'prototype' in source ? source.prototype : source;
	
	        defaults(target, source, overlay);
	    }
	
	    /**
	     * @param {Array|TypedArray} data
	     */
	    function isArrayLike(data) {
	        if (! data) {
	            return;
	        }
	        if (typeof data == 'string') {
	            return false;
	        }
	        return typeof data.length == 'number';
	    }
	
	    /**
	     * 数组或对象遍历
	     * @memberOf module:zrender/core/util
	     * @param {Object|Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     */
	    function each(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.forEach && obj.forEach === nativeForEach) {
	            obj.forEach(cb, context);
	        }
	        else if (obj.length === +obj.length) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                cb.call(context, obj[i], i, obj);
	            }
	        }
	        else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    cb.call(context, obj[key], key, obj);
	                }
	            }
	        }
	    }
	
	    /**
	     * 数组映射
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function map(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.map && obj.map === nativeMap) {
	            return obj.map(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                result.push(cb.call(context, obj[i], i, obj));
	            }
	            return result;
	        }
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {Object} [memo]
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function reduce(obj, cb, memo, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.reduce && obj.reduce === nativeReduce) {
	            return obj.reduce(cb, memo, context);
	        }
	        else {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                memo = cb.call(context, memo, obj[i], i, obj);
	            }
	            return memo;
	        }
	    }
	
	    /**
	     * 数组过滤
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function filter(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.filter && obj.filter === nativeFilter) {
	            return obj.filter(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (cb.call(context, obj[i], i, obj)) {
	                    result.push(obj[i]);
	                }
	            }
	            return result;
	        }
	    }
	
	    /**
	     * 数组项查找
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function find(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                return obj[i];
	            }
	        }
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @param {*} context
	     * @return {Function}
	     */
	    function bind(func, context) {
	        var args = nativeSlice.call(arguments, 2);
	        return function () {
	            return func.apply(context, args.concat(nativeSlice.call(arguments)));
	        };
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @return {Function}
	     */
	    function curry(func) {
	        var args = nativeSlice.call(arguments, 1);
	        return function () {
	            return func.apply(this, args.concat(nativeSlice.call(arguments)));
	        };
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isArray(value) {
	        return objToString.call(value) === '[object Array]';
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isFunction(value) {
	        return typeof value === 'function';
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isString(value) {
	        return objToString.call(value) === '[object String]';
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isObject(value) {
	        // Avoid a V8 JIT bug in Chrome 19-20.
	        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	        var type = typeof value;
	        return type === 'function' || (!!value && type == 'object');
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isBuildInObject(value) {
	        return !!BUILTIN_OBJECT[objToString.call(value)];
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isDom(value) {
	        return typeof value === 'object'
	            && typeof value.nodeType === 'number'
	            && typeof value.ownerDocument === 'object';
	    }
	
	    /**
	     * Whether is exactly NaN. Notice isNaN('a') returns true.
	     * @param {*} value
	     * @return {boolean}
	     */
	    function eqNaN(value) {
	        return value !== value;
	    }
	
	    /**
	     * If value1 is not null, then return value1, otherwise judget rest of values.
	     * @memberOf module:zrender/core/util
	     * @return {*} Final value
	     */
	    function retrieve(values) {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} arr
	     * @param {number} startIndex
	     * @param {number} endIndex
	     * @return {Array}
	     */
	    function slice() {
	        return Function.call.apply(nativeSlice, arguments);
	    }
	
	    /**
	     * @memberOf module:zrender/core/util
	     * @param {boolean} condition
	     * @param {string} message
	     */
	    function assert(condition, message) {
	        if (!condition) {
	            throw new Error(message);
	        }
	    }
	
	    var util = {
	        inherits: inherits,
	        mixin: mixin,
	        clone: clone,
	        merge: merge,
	        mergeAll: mergeAll,
	        extend: extend,
	        defaults: defaults,
	        getContext: getContext,
	        createCanvas: createCanvas,
	        indexOf: indexOf,
	        slice: slice,
	        find: find,
	        isArrayLike: isArrayLike,
	        each: each,
	        map: map,
	        reduce: reduce,
	        filter: filter,
	        bind: bind,
	        curry: curry,
	        isArray: isArray,
	        isString: isString,
	        isObject: isObject,
	        isFunction: isFunction,
	        isBuildInObject: isBuildInObject,
	        isDom: isDom,
	        eqNaN: eqNaN,
	        retrieve: retrieve,
	        assert: assert,
	        noop: function () {}
	    };
	    module.exports = util;
	


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var formatUtil = __webpack_require__(27);
	    var nubmerUtil = __webpack_require__(28);
	    var Model = __webpack_require__(33);
	    var zrUtil = __webpack_require__(25);
	    var each = zrUtil.each;
	    var isObject = zrUtil.isObject;
	
	    var modelUtil = {};
	
	    /**
	     * If value is not array, then translate it to array.
	     * @param  {*} value
	     * @return {Array} [value] or value
	     */
	    modelUtil.normalizeToArray = function (value) {
	        return value instanceof Array
	            ? value
	            : value == null
	            ? []
	            : [value];
	    };
	
	    /**
	     * Sync default option between normal and emphasis like `position` and `show`
	     * In case some one will write code like
	     *     label: {
	     *         normal: {
	     *             show: false,
	     *             position: 'outside',
	     *             textStyle: {
	     *                 fontSize: 18
	     *             }
	     *         },
	     *         emphasis: {
	     *             show: true
	     *         }
	     *     }
	     * @param {Object} opt
	     * @param {Array.<string>} subOpts
	     */
	     modelUtil.defaultEmphasis = function (opt, subOpts) {
	        if (opt) {
	            var emphasisOpt = opt.emphasis = opt.emphasis || {};
	            var normalOpt = opt.normal = opt.normal || {};
	
	            // Default emphasis option from normal
	            each(subOpts, function (subOptName) {
	                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	                if (val != null) {
	                    emphasisOpt[subOptName] = val;
	                }
	            });
	        }
	    };
	
	    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];
	
	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method retieves value from data.
	     * @param {string|number|Date|Array|Object} dataItem
	     * @return {number|string|Date|Array.<number|string|Date>}
	     */
	    modelUtil.getDataItemValue = function (dataItem) {
	        // Performance sensitive.
	        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	    };
	
	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method determine if dataItem has extra option besides value
	     * @param {string|number|Date|Array|Object} dataItem
	     */
	    modelUtil.isDataItemOption = function (dataItem) {
	        return isObject(dataItem)
	            && !(dataItem instanceof Array);
	            // // markLine data can be array
	            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	    };
	
	    /**
	     * This helper method convert value in data.
	     * @param {string|number|Date} value
	     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	     */
	    modelUtil.converDataValue = function (value, dimInfo) {
	        // Performance sensitive.
	        var dimType = dimInfo && dimInfo.type;
	        if (dimType === 'ordinal') {
	            return value;
	        }
	
	        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	            value = +nubmerUtil.parseDate(value);
	        }
	
	        // dimType defaults 'number'.
	        // If dimType is not ordinal and value is null or undefined or NaN or '-',
	        // parse to NaN.
	        return (value == null || value === '')
	            ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	    };
	
	    /**
	     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	     * @param {module:echarts/data/List} data
	     * @param {Object} opt
	     * @param {string} [opt.seriesIndex]
	     * @param {Object} [opt.name]
	     * @param {Object} [opt.mainType]
	     * @param {Object} [opt.subType]
	     */
	    modelUtil.createDataFormatModel = function (data, opt) {
	        var model = new Model();
	        zrUtil.mixin(model, modelUtil.dataFormatMixin);
	        model.seriesIndex = opt.seriesIndex;
	        model.name = opt.name || '';
	        model.mainType = opt.mainType;
	        model.subType = opt.subType;
	
	        model.getData = function () {
	            return data;
	        };
	        return model;
	    };
	
	    // PENDING A little ugly
	    modelUtil.dataFormatMixin = {
	        /**
	         * Get params for formatter
	         * @param {number} dataIndex
	         * @param {string} [dataType]
	         * @return {Object}
	         */
	        getDataParams: function (dataIndex, dataType) {
	            var data = this.getData(dataType);
	
	            var seriesIndex = this.seriesIndex;
	            var seriesName = this.name;
	
	            var rawValue = this.getRawValue(dataIndex, dataType);
	            var rawDataIndex = data.getRawIndex(dataIndex);
	            var name = data.getName(dataIndex, true);
	            var itemOpt = data.getRawDataItem(dataIndex);
	
	            return {
	                componentType: this.mainType,
	                componentSubType: this.subType,
	                seriesType: this.mainType === 'series' ? this.subType : null,
	                seriesIndex: seriesIndex,
	                seriesName: seriesName,
	                name: name,
	                dataIndex: rawDataIndex,
	                data: itemOpt,
	                dataType: dataType,
	                value: rawValue,
	                color: data.getItemVisual(dataIndex, 'color'),
	
	                // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	                $vars: ['seriesName', 'name', 'value']
	            };
	        },
	
	        /**
	         * Format label
	         * @param {number} dataIndex
	         * @param {string} [status='normal'] 'normal' or 'emphasis'
	         * @param {string} [dataType]
	         * @param {number} [dimIndex]
	         * @return {string}
	         */
	        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
	            status = status || 'normal';
	            var data = this.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);
	
	            var params = this.getDataParams(dataIndex, dataType);
	            if (dimIndex != null && (params.value instanceof Array)) {
	                params.value = params.value[dimIndex];
	            }
	
	            var formatter = itemModel.get(['label', status, 'formatter']);
	
	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            }
	            else if (typeof formatter === 'string') {
	                return formatUtil.formatTpl(formatter, params);
	            }
	        },
	
	        /**
	         * Get raw value in option
	         * @param {number} idx
	         * @param {string} [dataType]
	         * @return {Object}
	         */
	        getRawValue: function (idx, dataType) {
	            var data = this.getData(dataType);
	            var dataItem = data.getRawDataItem(idx);
	            if (dataItem != null) {
	                return (isObject(dataItem) && !(dataItem instanceof Array))
	                    ? dataItem.value : dataItem;
	            }
	        },
	
	        /**
	         * Should be implemented.
	         * @param {number} dataIndex
	         * @param {boolean} [multipleSeries=false]
	         * @param {number} [dataType]
	         * @return {string} tooltip string
	         */
	        formatTooltip: zrUtil.noop
	    };
	
	    /**
	     * Mapping to exists for merge.
	     *
	     * @public
	     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	     * @param {Object|Array.<Object>} newCptOptions
	     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          index of which is the same as exists.
	     */
	    modelUtil.mappingToExists = function (exists, newCptOptions) {
	        // Mapping by the order by original option (but not order of
	        // new option) in merge mode. Because we should ensure
	        // some specified index (like xAxisIndex) is consistent with
	        // original option, which is easy to understand, espatially in
	        // media query. And in most case, merge option is used to
	        // update partial option but not be expected to change order.
	        newCptOptions = (newCptOptions || []).slice();
	
	        var result = zrUtil.map(exists || [], function (obj, index) {
	            return {exist: obj};
	        });
	
	        // Mapping by id or name if specified.
	        each(newCptOptions, function (cptOption, index) {
	            if (!isObject(cptOption)) {
	                return;
	            }
	
	            // id has highest priority.
	            for (var i = 0; i < result.length; i++) {
	                if (!result[i].option // Consider name: two map to one.
	                    && cptOption.id != null
	                    && result[i].exist.id === cptOption.id + ''
	                ) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    return;
	                }
	            }
	
	            for (var i = 0; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option // Consider name: two map to one.
	                    // Can not match when both ids exist but different.
	                    && (exist.id == null || cptOption.id == null)
	                    && cptOption.name != null
	                    && !modelUtil.isIdInner(cptOption)
	                    && !modelUtil.isIdInner(exist)
	                    && exist.name === cptOption.name + ''
	                ) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    return;
	                }
	            }
	        });
	
	        // Otherwise mapping by index.
	        each(newCptOptions, function (cptOption, index) {
	            if (!isObject(cptOption)) {
	                return;
	            }
	
	            var i = 0;
	            for (; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option
	                    // Existing model that already has id should be able to
	                    // mapped to (because after mapping performed model may
	                    // be assigned with a id, whish should not affect next
	                    // mapping), except those has inner id.
	                    && !modelUtil.isIdInner(exist)
	                    // Caution:
	                    // Do not overwrite id. But name can be overwritten,
	                    // because axis use name as 'show label text'.
	                    // 'exist' always has id and name and we dont
	                    // need to check it.
	                    && cptOption.id == null
	                ) {
	                    result[i].option = cptOption;
	                    break;
	                }
	            }
	
	            if (i >= result.length) {
	                result.push({option: cptOption});
	            }
	        });
	
	        return result;
	    };
	
	    /**
	     * Make id and name for mapping result (result of mappingToExists)
	     * into `keyInfo` field.
	     *
	     * @public
	     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          which order is the same as exists.
	     * @return {Array.<Object>} The input.
	     */
	    modelUtil.makeIdAndName = function (mapResult) {
	        // We use this id to hash component models and view instances
	        // in echarts. id can be specified by user, or auto generated.
	
	        // The id generation rule ensures new view instance are able
	        // to mapped to old instance when setOption are called in
	        // no-merge mode. So we generate model id by name and plus
	        // type in view id.
	
	        // name can be duplicated among components, which is convenient
	        // to specify multi components (like series) by one name.
	
	        // Ensure that each id is distinct.
	        var idMap = {};
	
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            existCpt && (idMap[existCpt.id] = item);
	        });
	
	        each(mapResult, function (item, index) {
	            var opt = item.option;
	
	            zrUtil.assert(
	                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,
	                'id duplicates: ' + (opt && opt.id)
	            );
	
	            opt && opt.id != null && (idMap[opt.id] = item);
	            !item.keyInfo && (item.keyInfo = {});
	        });
	
	        // Make name and id.
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            var opt = item.option;
	            var keyInfo = item.keyInfo;
	
	            if (!isObject(opt)) {
	                return;
	            }
	
	            // name can be overwitten. Consider case: axis.name = '20km'.
	            // But id generated by name will not be changed, which affect
	            // only in that case: setOption with 'not merge mode' and view
	            // instance will be recreated, which can be accepted.
	            keyInfo.name = opt.name != null
	                ? opt.name + ''
	                : existCpt
	                ? existCpt.name
	                : '\0-';
	
	            if (existCpt) {
	                keyInfo.id = existCpt.id;
	            }
	            else if (opt.id != null) {
	                keyInfo.id = opt.id + '';
	            }
	            else {
	                // Consider this situatoin:
	                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	                //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	                // Series with the same name between optionA and optionB
	                // should be mapped.
	                var idNum = 0;
	                do {
	                    keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	                }
	                while (idMap[keyInfo.id]);
	            }
	
	            idMap[keyInfo.id] = item;
	        });
	    };
	
	    /**
	     * @public
	     * @param {Object} cptOption
	     * @return {boolean}
	     */
	    modelUtil.isIdInner = function (cptOption) {
	        return isObject(cptOption)
	            && cptOption.id
	            && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	    };
	
	    /**
	     * A helper for removing duplicate items between batchA and batchB,
	     * and in themselves, and categorize by series.
	     *
	     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	     */
	    modelUtil.compressBatches = function (batchA, batchB) {
	        var mapA = {};
	        var mapB = {};
	
	        makeMap(batchA || [], mapA);
	        makeMap(batchB || [], mapB, mapA);
	
	        return [mapToArray(mapA), mapToArray(mapB)];
	
	        function makeMap(sourceBatch, map, otherMap) {
	            for (var i = 0, len = sourceBatch.length; i < len; i++) {
	                var seriesId = sourceBatch[i].seriesId;
	                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);
	                var otherDataIndices = otherMap && otherMap[seriesId];
	
	                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	                    var dataIndex = dataIndices[j];
	
	                    if (otherDataIndices && otherDataIndices[dataIndex]) {
	                        otherDataIndices[dataIndex] = null;
	                    }
	                    else {
	                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	                    }
	                }
	            }
	        }
	
	        function mapToArray(map, isData) {
	            var result = [];
	            for (var i in map) {
	                if (map.hasOwnProperty(i) && map[i] != null) {
	                    if (isData) {
	                        result.push(+i);
	                    }
	                    else {
	                        var dataIndices = mapToArray(map[i], true);
	                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});
	                    }
	                }
	            }
	            return result;
	        }
	    };
	
	    /**
	     * @param {module:echarts/data/List} data
	     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	     *                         each of which can be Array or primary type.
	     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	     */
	    modelUtil.queryDataIndex = function (data, payload) {
	        if (payload.dataIndexInside != null) {
	            return payload.dataIndexInside;
	        }
	        else if (payload.dataIndex != null) {
	            return zrUtil.isArray(payload.dataIndex)
	                ? zrUtil.map(payload.dataIndex, function (value) {
	                    return data.indexOfRawIndex(value);
	                })
	                : data.indexOfRawIndex(payload.dataIndex);
	        }
	        else if (payload.name != null) {
	            return zrUtil.isArray(payload.name)
	                ? zrUtil.map(payload.name, function (value) {
	                    return data.indexOfName(value);
	                })
	                : data.indexOfName(payload.name);
	        }
	    };
	
	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex, seriesId, seriesName,
	     *            geoIndex, geoId, goeName,
	     *            bmapIndex, bmapId, bmapName,
	     *            xAxisIndex, xAxisId, xAxisName,
	     *            yAxisIndex, yAxisId, yAxisName,
	     *            gridIndex, gridId, gridName,
	     *            ... (can be extended)
	     *        }
	     *        Each properties can be number|string|Array.<number>|Array.<string>
	     *        For example, a finder could be
	     *        {
	     *            seriesIndex: 3,
	     *            geoId: ['aa', 'cc'],
	     *            gridName: ['xx', 'rr']
	     *        }
	     * @param {Object} [opt]
	     * @param {string} [opt.defaultMainType]
	     * @return {Object} result like:
	     *        {
	     *            seriesModels: [seriesModel1, seriesModel2],
	     *            seriesModel: seriesModel1, // The first model
	     *            geoModels: [geoModel1, geoModel2],
	     *            geoModel: geoModel1, // The first model
	     *            ...
	     *        }
	     */
	    modelUtil.parseFinder = function (ecModel, finder, opt) {
	        if (zrUtil.isString(finder)) {
	            var obj = {};
	            obj[finder + 'Index'] = 0;
	            finder = obj;
	        }
	
	        var defaultMainType = opt && opt.defaultMainType;
	        if (defaultMainType
	            && !has(finder, defaultMainType + 'Index')
	            && !has(finder, defaultMainType + 'Id')
	            && !has(finder, defaultMainType + 'Name')
	        ) {
	            finder[defaultMainType + 'Index'] = 0;
	        }
	
	        var result = {};
	
	        each(finder, function (value, key) {
	            var value = finder[key];
	
	            // Exclude 'dataIndex' and other illgal keys.
	            if (key === 'dataIndex' || key === 'dataIndexInside') {
	                result[key] = value;
	                return;
	            }
	
	            var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	            var mainType = parsedKey[1];
	            var queryType = parsedKey[2];
	
	            if (!mainType || !queryType) {
	                return;
	            }
	
	            var queryParam = {mainType: mainType};
	            queryParam[queryType.toLowerCase()] = value;
	            var models = ecModel.queryComponents(queryParam);
	            result[mainType + 'Models'] = models;
	            result[mainType + 'Model'] = models[0];
	        });
	
	        return result;
	    };
	
	    function has(obj, prop) {
	        return obj && obj.hasOwnProperty(prop);
	    }
	
	    module.exports = modelUtil;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var textContain = __webpack_require__(29);
	
	    var formatUtil = {};
	    /**
	     * 每三位默认加,格式化
	     * @type {string|number} x
	     */
	    formatUtil.addCommas = function (x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,')
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    };
	
	    /**
	     * @param {string} str
	     * @param {boolean} [upperCaseFirst=false]
	     * @return {string} str
	     */
	    formatUtil.toCamelCase = function (str, upperCaseFirst) {
	        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {
	            return group1.toUpperCase();
	        });
	
	        if (upperCaseFirst && str) {
	            str = str.charAt(0).toUpperCase() + str.slice(1);
	        }
	
	        return str;
	    };
	
	    /**
	     * Normalize css liked array configuration
	     * e.g.
	     *  3 => [3, 3, 3, 3]
	     *  [4, 2] => [4, 2, 4, 2]
	     *  [4, 3, 2] => [4, 3, 2, 3]
	     * @param {number|Array.<number>} val
	     */
	    formatUtil.normalizeCssArray = function (val) {
	        var len = val.length;
	        if (typeof (val) === 'number') {
	            return [val, val, val, val];
	        }
	        else if (len === 2) {
	            // vertical | horizontal
	            return [val[0], val[1], val[0], val[1]];
	        }
	        else if (len === 3) {
	            // top | horizontal | bottom
	            return [val[0], val[1], val[2], val[1]];
	        }
	        return val;
	    };
	
	    var encodeHTML = formatUtil.encodeHTML = function (source) {
	        return String(source)
	            .replace(/&/g, '&amp;')
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;')
	            .replace(/"/g, '&quot;')
	            .replace(/'/g, '&#39;');
	    };
	
	    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
	
	    var wrapVar = function (varName, seriesIdx) {
	        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	    };
	
	    /**
	     * Template formatter
	     * @param {string} tpl
	     * @param {Array.<Object>|Object} paramsList
	     * @param {boolean} [encode=false]
	     * @return {string}
	     */
	    formatUtil.formatTpl = function (tpl, paramsList, encode) {
	        if (!zrUtil.isArray(paramsList)) {
	            paramsList = [paramsList];
	        }
	        var seriesLen = paramsList.length;
	        if (!seriesLen) {
	            return '';
	        }
	
	        var $vars = paramsList[0].$vars || [];
	        for (var i = 0; i < $vars.length; i++) {
	            var alias = TPL_VAR_ALIAS[i];
	            var val = wrapVar(alias, 0);
	            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);
	        }
	        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	            for (var k = 0; k < $vars.length; k++) {
	                var val = paramsList[seriesIdx][$vars[k]];
	                tpl = tpl.replace(
	                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),
	                    encode ? encodeHTML(val) : val
	                );
	            }
	        }
	
	        return tpl;
	    };
	
	
	    /**
	     * @param {string} str
	     * @return {string}
	     * @inner
	     */
	    var s2d = function (str) {
	        return str < 10 ? ('0' + str) : str;
	    };
	
	    /**
	     * ISO Date format
	     * @param {string} tpl
	     * @param {number} value
	     * @inner
	     */
	    formatUtil.formatTime = function (tpl, value) {
	        if (tpl === 'week'
	            || tpl === 'month'
	            || tpl === 'quarter'
	            || tpl === 'half-year'
	            || tpl === 'year'
	        ) {
	            tpl = 'MM-dd\nyyyy';
	        }
	
	        var date = numberUtil.parseDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();
	
	        tpl = tpl.replace('MM', s2d(M))
	            .toLowerCase()
	            .replace('yyyy', y)
	            .replace('yy', y % 100)
	            .replace('dd', s2d(d))
	            .replace('d', d)
	            .replace('hh', s2d(h))
	            .replace('h', h)
	            .replace('mm', s2d(m))
	            .replace('m', m)
	            .replace('ss', s2d(s))
	            .replace('s', s);
	
	        return tpl;
	    };
	
	    /**
	     * Capital first
	     * @param {string} str
	     * @return {string}
	     */
	    formatUtil.capitalFirst = function (str) {
	        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	    };
	
	    formatUtil.truncateText = textContain.truncateText;
	
	    module.exports = formatUtil;


/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */
	
	
	
	    var number = {};
	
	    var RADIAN_EPSILON = 1e-4;
	
	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }
	
	    /**
	     * Linear mapping a value from domain to range
	     * @memberOf module:echarts/util/number
	     * @param  {(number|Array.<number>)} val
	     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	     * @param  {boolean} clamp
	     * @return {(number|Array.<number>}
	     */
	    number.linearMap = function (val, domain, range, clamp) {
	        var subDomain = domain[1] - domain[0];
	        var subRange = range[1] - range[0];
	
	        if (subDomain === 0) {
	            return subRange === 0
	                ? range[0]
	                : (range[0] + range[1]) / 2;
	        }
	
	        // Avoid accuracy problem in edge, such as
	        // 146.39 - 62.83 === 83.55999999999999.
	        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	        // It is a little verbose for efficiency considering this method
	        // is a hotspot.
	        if (clamp) {
	            if (subDomain > 0) {
	                if (val <= domain[0]) {
	                    return range[0];
	                }
	                else if (val >= domain[1]) {
	                    return range[1];
	                }
	            }
	            else {
	                if (val >= domain[0]) {
	                    return range[0];
	                }
	                else if (val <= domain[1]) {
	                    return range[1];
	                }
	            }
	        }
	        else {
	            if (val === domain[0]) {
	                return range[0];
	            }
	            if (val === domain[1]) {
	                return range[1];
	            }
	        }
	
	        return (val - domain[0]) / subDomain * subRange + range[0];
	    };
	
	    /**
	     * Convert a percent string to absolute number.
	     * Returns NaN if percent is not a valid string or number
	     * @memberOf module:echarts/util/number
	     * @param {string|number} percent
	     * @param {number} all
	     * @return {number}
	     */
	    number.parsePercent = function(percent, all) {
	        switch (percent) {
	            case 'center':
	            case 'middle':
	                percent = '50%';
	                break;
	            case 'left':
	            case 'top':
	                percent = '0%';
	                break;
	            case 'right':
	            case 'bottom':
	                percent = '100%';
	                break;
	        }
	        if (typeof percent === 'string') {
	            if (_trim(percent).match(/%$/)) {
	                return parseFloat(percent) / 100 * all;
	            }
	
	            return parseFloat(percent);
	        }
	
	        return percent == null ? NaN : +percent;
	    };
	
	    /**
	     * Fix rounding error of float numbers
	     * @param {number} x
	     * @return {number}
	     */
	    number.round = function (x, precision) {
	        if (precision == null) {
	            precision = 10;
	        }
	        // Avoid range error
	        precision = Math.min(Math.max(0, precision), 20);
	        return +(+x).toFixed(precision);
	    };
	
	    number.asc = function (arr) {
	        arr.sort(function (a, b) {
	            return a - b;
	        });
	        return arr;
	    };
	
	    /**
	     * Get precision
	     * @param {number} val
	     */
	    number.getPrecision = function (val) {
	        val = +val;
	        if (isNaN(val)) {
	            return 0;
	        }
	        // It is much faster than methods converting number to string as follows
	        //      var tmp = val.toString();
	        //      return tmp.length - 1 - tmp.indexOf('.');
	        // especially when precision is low
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    };
	
	    number.getPrecisionSafe = function (val) {
	        var str = val.toString();
	        var dotIndex = str.indexOf('.');
	        if (dotIndex < 0) {
	            return 0;
	        }
	        return str.length - 1 - dotIndex;
	    };
	
	    /**
	     * Minimal dicernible data precisioin according to a single pixel.
	     * @param {Array.<number>} dataExtent
	     * @param {Array.<number>} pixelExtent
	     * @return {number} precision
	     */
	    number.getPixelPrecision = function (dataExtent, pixelExtent) {
	        var log = Math.log;
	        var LN10 = Math.LN10;
	        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	        // toFixed() digits argument must be between 0 and 20.
	        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	        return !isFinite(precision) ? 20 : precision;
	    };
	
	    // Number.MAX_SAFE_INTEGER, ie do not support.
	    number.MAX_SAFE_INTEGER = 9007199254740991;
	
	    /**
	     * To 0 - 2 * PI, considering negative radian.
	     * @param {number} radian
	     * @return {number}
	     */
	    number.remRadian = function (radian) {
	        var pi2 = Math.PI * 2;
	        return (radian % pi2 + pi2) % pi2;
	    };
	
	    /**
	     * @param {type} radian
	     * @return {boolean}
	     */
	    number.isRadianAroundZero = function (val) {
	        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	    };
	
	    /**
	     * @param {string|Date|number} value
	     * @return {Date} date
	     */
	    number.parseDate = function (value) {
	        if (value instanceof Date) {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // Treat as ISO format. See issue #3623
	            var ret = new Date(value);
	            if (isNaN(+ret)) {
	                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local
	                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));
	            }
	            return ret;
	        }
	
	        return new Date(Math.round(value));
	    };
	
	    /**
	     * Quantity of a number. e.g. 0.1, 1, 10, 100
	     * @param  {number} val
	     * @return {number}
	     */
	    number.quantity = function (val) {
	        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));
	    };
	
	    // "Nice Numbers for Graph Labels" of Graphic Gems
	    /**
	     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	     * @param  {number} val
	     * @param  {boolean} round
	     * @return {number}
	     */
	    number.nice = function (val, round) {
	        var exp10 = number.quantity(val);
	        var f = val / exp10; // between 1 and 10
	        var nf;
	        if (round) {
	            if (f < 1.5) { nf = 1; }
	            else if (f < 2.5) { nf = 2; }
	            else if (f < 4) { nf = 3; }
	            else if (f < 7) { nf = 5; }
	            else { nf = 10; }
	        }
	        else {
	            if (f < 1) { nf = 1; }
	            else if (f < 2) { nf = 2; }
	            else if (f < 3) { nf = 3; }
	            else if (f < 5) { nf = 5; }
	            else { nf = 10; }
	        }
	        return nf * exp10;
	    };
	
	    /**
	     * Order intervals asc, and split them when overlap.
	     * expect(numberUtil.reformIntervals([
	     *     {interval: [18, 62], close: [1, 1]},
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [1, 1]},
	     *     {interval: [62, 150], close: [1, 1]},
	     *     {interval: [106, 150], close: [1, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ])).toEqual([
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [0, 1]},
	     *     {interval: [18, 62], close: [0, 1]},
	     *     {interval: [62, 150], close: [0, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ]);
	     * @param {Array.<Object>} list, where `close` mean open or close
	     *        of the interval, and Infinity can be used.
	     * @return {Array.<Object>} The origin list, which has been reformed.
	     */
	    number.reformIntervals = function (list) {
	        list.sort(function (a, b) {
	            return littleThan(a, b, 0) ? -1 : 1;
	        });
	
	        var curr = -Infinity;
	        var currClose = 1;
	        for (var i = 0; i < list.length;) {
	            var interval = list[i].interval;
	            var close = list[i].close;
	
	            for (var lg = 0; lg < 2; lg++) {
	                if (interval[lg] <= curr) {
	                    interval[lg] = curr;
	                    close[lg] = !lg ? 1 - currClose : 1;
	                }
	                curr = interval[lg];
	                currClose = close[lg];
	            }
	
	            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	                list.splice(i, 1);
	            }
	            else {
	                i++;
	            }
	        }
	
	        return list;
	
	        function littleThan(a, b, lg) {
	            return a.interval[lg] < b.interval[lg]
	                || (
	                    a.interval[lg] === b.interval[lg]
	                    && (
	                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))
	                        || (!lg && littleThan(a, b, 1))
	                    )
	                );
	        }
	    };
	
	    /**
	     * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	     * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	     * subtraction forces infinities to NaN
	     * @param {*} v
	     * @return {boolean}
	     */
	    number.isNumeric = function (v) {
	        return v - parseFloat(v) >= 0;
	    };
	
	    module.exports = number;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var textWidthCache = {};
	    var textWidthCacheCounter = 0;
	    var TEXT_CACHE_MAX = 5000;
	
	    var util = __webpack_require__(25);
	    var BoundingRect = __webpack_require__(30);
	    var retrieve = util.retrieve;
	
	    function getTextWidth(text, textFont) {
	        var key = text + ':' + textFont;
	        if (textWidthCache[key]) {
	            return textWidthCache[key];
	        }
	
	        var textLines = (text + '').split('\n');
	        var width = 0;
	
	        for (var i = 0, l = textLines.length; i < l; i++) {
	            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	        }
	
	        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	            textWidthCacheCounter = 0;
	            textWidthCache = {};
	        }
	        textWidthCacheCounter++;
	        textWidthCache[key] = width;
	
	        return width;
	    }
	
	    function getTextRect(text, textFont, textAlign, textBaseline) {
	        var textLineLen = ((text || '') + '').split('\n').length;
	
	        var width = getTextWidth(text, textFont);
	        // FIXME 高度计算比较粗暴
	        var lineHeight = getTextWidth('国', textFont);
	        var height = textLineLen * lineHeight;
	
	        var rect = new BoundingRect(0, 0, width, height);
	        // Text has a special line height property
	        rect.lineHeight = lineHeight;
	
	        switch (textBaseline) {
	            case 'bottom':
	            case 'alphabetic':
	                rect.y -= lineHeight;
	                break;
	            case 'middle':
	                rect.y -= lineHeight / 2;
	                break;
	            // case 'hanging':
	            // case 'top':
	        }
	
	        // FIXME Right to left language
	        switch (textAlign) {
	            case 'end':
	            case 'right':
	                rect.x -= rect.width;
	                break;
	            case 'center':
	                rect.x -= rect.width / 2;
	                break;
	            // case 'start':
	            // case 'left':
	        }
	
	        return rect;
	    }
	
	    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {
	
	        var x = rect.x;
	        var y = rect.y;
	
	        var height = rect.height;
	        var width = rect.width;
	
	        var textHeight = textRect.height;
	
	        var halfHeight = height / 2 - textHeight / 2;
	
	        var textAlign = 'left';
	
	        switch (textPosition) {
	            case 'left':
	                x -= distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'right':
	                x += distance + width;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'top':
	                x += width / 2;
	                y -= distance + textHeight;
	                textAlign = 'center';
	                break;
	            case 'bottom':
	                x += width / 2;
	                y += height + distance;
	                textAlign = 'center';
	                break;
	            case 'inside':
	                x += width / 2;
	                y += halfHeight;
	                textAlign = 'center';
	                break;
	            case 'insideLeft':
	                x += distance;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'insideRight':
	                x += width - distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'insideTop':
	                x += width / 2;
	                y += distance;
	                textAlign = 'center';
	                break;
	            case 'insideBottom':
	                x += width / 2;
	                y += height - textHeight - distance;
	                textAlign = 'center';
	                break;
	            case 'insideTopLeft':
	                x += distance;
	                y += distance;
	                textAlign = 'left';
	                break;
	            case 'insideTopRight':
	                x += width - distance;
	                y += distance;
	                textAlign = 'right';
	                break;
	            case 'insideBottomLeft':
	                x += distance;
	                y += height - textHeight - distance;
	                break;
	            case 'insideBottomRight':
	                x += width - distance;
	                y += height - textHeight - distance;
	                textAlign = 'right';
	                break;
	        }
	
	        return {
	            x: x,
	            y: y,
	            textAlign: textAlign,
	            textBaseline: 'top'
	        };
	    }
	
	    /**
	     * Show ellipsis if overflow.
	     *
	     * @param  {string} text
	     * @param  {string} containerWidth
	     * @param  {string} textFont
	     * @param  {number} [ellipsis='...']
	     * @param  {Object} [options]
	     * @param  {number} [options.maxIterations=3]
	     * @param  {number} [options.minChar=0] If truncate result are less
	     *                  then minChar, ellipsis will not show, which is
	     *                  better for user hint in some cases.
	     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	     * @return {string}
	     */
	    function truncateText(text, containerWidth, textFont, ellipsis, options) {
	        if (!containerWidth) {
	            return '';
	        }
	
	        options = options || {};
	
	        ellipsis = retrieve(ellipsis, '...');
	        var maxIterations = retrieve(options.maxIterations, 2);
	        var minChar = retrieve(options.minChar, 0);
	        // FIXME
	        // Other languages?
	        var cnCharWidth = getTextWidth('国', textFont);
	        // FIXME
	        // Consider proportional font?
	        var ascCharWidth = getTextWidth('a', textFont);
	        var placeholder = retrieve(options.placeholder, '');
	
	        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.
	        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	            contentWidth -= ascCharWidth;
	        }
	
	        var ellipsisWidth = getTextWidth(ellipsis);
	        if (ellipsisWidth > contentWidth) {
	            ellipsis = '';
	            ellipsisWidth = 0;
	        }
	
	        contentWidth = containerWidth - ellipsisWidth;
	
	        var textLines = (text + '').split('\n');
	
	        for (var i = 0, len = textLines.length; i < len; i++) {
	            var textLine = textLines[i];
	            var lineWidth = getTextWidth(textLine, textFont);
	
	            if (lineWidth <= containerWidth) {
	                continue;
	            }
	
	            for (var j = 0;; j++) {
	                if (lineWidth <= contentWidth || j >= maxIterations) {
	                    textLine += ellipsis;
	                    break;
	                }
	
	                var subLength = j === 0
	                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)
	                    : lineWidth > 0
	                    ? Math.floor(textLine.length * contentWidth / lineWidth)
	                    : 0;
	
	                textLine = textLine.substr(0, subLength);
	                lineWidth = getTextWidth(textLine, textFont);
	            }
	
	            if (textLine === '') {
	                textLine = placeholder;
	            }
	
	            textLines[i] = textLine;
	        }
	
	        return textLines.join('\n');
	    }
	
	    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	        var width = 0;
	        var i = 0;
	        for (var len = text.length; i < len && width < contentWidth; i++) {
	            var charCode = text.charCodeAt(i);
	            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;
	        }
	        return i;
	    }
	
	    var textContain = {
	
	        getWidth: getTextWidth,
	
	        getBoundingRect: getTextRect,
	
	        adjustTextPositionOnRect: adjustTextPositionOnRect,
	
	        truncateText: truncateText,
	
	        measureText: function (text, textFont) {
	            var ctx = util.getContext();
	            ctx.font = textFont || '12px sans-serif';
	            return ctx.measureText(text);
	        }
	    };
	
	    module.exports = textContain;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */
	
	
	    var vec2 = __webpack_require__(31);
	    var matrix = __webpack_require__(32);
	
	    var v2ApplyTransform = vec2.applyTransform;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    /**
	     * @alias module:echarts/core/BoundingRect
	     */
	    function BoundingRect(x, y, width, height) {
	
	        if (width < 0) {
	            x = x + width;
	            width = -width;
	        }
	        if (height < 0) {
	            y = y + height;
	            height = -height;
	        }
	
	        /**
	         * @type {number}
	         */
	        this.x = x;
	        /**
	         * @type {number}
	         */
	        this.y = y;
	        /**
	         * @type {number}
	         */
	        this.width = width;
	        /**
	         * @type {number}
	         */
	        this.height = height;
	    }
	
	    BoundingRect.prototype = {
	
	        constructor: BoundingRect,
	
	        /**
	         * @param {module:echarts/core/BoundingRect} other
	         */
	        union: function (other) {
	            var x = mathMin(other.x, this.x);
	            var y = mathMin(other.y, this.y);
	
	            this.width = mathMax(
	                    other.x + other.width,
	                    this.x + this.width
	                ) - x;
	            this.height = mathMax(
	                    other.y + other.height,
	                    this.y + this.height
	                ) - y;
	            this.x = x;
	            this.y = y;
	        },
	
	        /**
	         * @param {Array.<number>} m
	         * @methods
	         */
	        applyTransform: (function () {
	            var lt = [];
	            var rb = [];
	            var lb = [];
	            var rt = [];
	            return function (m) {
	                // In case usage like this
	                // el.getBoundingRect().applyTransform(el.transform)
	                // And element has no transform
	                if (!m) {
	                    return;
	                }
	                lt[0] = lb[0] = this.x;
	                lt[1] = rt[1] = this.y;
	                rb[0] = rt[0] = this.x + this.width;
	                rb[1] = lb[1] = this.y + this.height;
	
	                v2ApplyTransform(lt, lt, m);
	                v2ApplyTransform(rb, rb, m);
	                v2ApplyTransform(lb, lb, m);
	                v2ApplyTransform(rt, rt, m);
	
	                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	                this.width = maxX - this.x;
	                this.height = maxY - this.y;
	            };
	        })(),
	
	        /**
	         * Calculate matrix of transforming from self to target rect
	         * @param  {module:zrender/core/BoundingRect} b
	         * @return {Array.<number>}
	         */
	        calculateTransform: function (b) {
	            var a = this;
	            var sx = b.width / a.width;
	            var sy = b.height / a.height;
	
	            var m = matrix.create();
	
	            // 矩阵右乘
	            matrix.translate(m, m, [-a.x, -a.y]);
	            matrix.scale(m, m, [sx, sy]);
	            matrix.translate(m, m, [b.x, b.y]);
	
	            return m;
	        },
	
	        /**
	         * @param {(module:echarts/core/BoundingRect|Object)} b
	         * @return {boolean}
	         */
	        intersect: function (b) {
	            if (!b) {
	                return false;
	            }
	
	            if (!(b instanceof BoundingRect)) {
	                // Normalize negative width/height.
	                b = BoundingRect.create(b);
	            }
	
	            var a = this;
	            var ax0 = a.x;
	            var ax1 = a.x + a.width;
	            var ay0 = a.y;
	            var ay1 = a.y + a.height;
	
	            var bx0 = b.x;
	            var bx1 = b.x + b.width;
	            var by0 = b.y;
	            var by1 = b.y + b.height;
	
	            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	        },
	
	        contain: function (x, y) {
	            var rect = this;
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        },
	
	        /**
	         * @return {module:echarts/core/BoundingRect}
	         */
	        clone: function () {
	            return new BoundingRect(this.x, this.y, this.width, this.height);
	        },
	
	        /**
	         * Copy from another rect
	         */
	        copy: function (other) {
	            this.x = other.x;
	            this.y = other.y;
	            this.width = other.width;
	            this.height = other.height;
	        },
	
	        plain: function () {
	            return {
	                x: this.x,
	                y: this.y,
	                width: this.width,
	                height: this.height
	            };
	        }
	    };
	
	    /**
	     * @param {Object|module:zrender/core/BoundingRect} rect
	     * @param {number} rect.x
	     * @param {number} rect.y
	     * @param {number} rect.width
	     * @param {number} rect.height
	     * @return {module:zrender/core/BoundingRect}
	     */
	    BoundingRect.create = function (rect) {
	        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	    };
	
	    module.exports = BoundingRect;


/***/ },
/* 31 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;
	
	    /**
	     * @typedef {Float32Array|Array.<number>} Vector2
	     */
	    /**
	     * 二维向量类
	     * @exports zrender/tool/vector
	     */
	    var vector = {
	        /**
	         * 创建一个向量
	         * @param {number} [x=0]
	         * @param {number} [y=0]
	         * @return {Vector2}
	         */
	        create: function (x, y) {
	            var out = new ArrayCtor(2);
	            if (x == null) {
	                x = 0;
	            }
	            if (y == null) {
	                y = 0;
	            }
	            out[0] = x;
	            out[1] = y;
	            return out;
	        },
	
	        /**
	         * 复制向量数据
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        copy: function (out, v) {
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },
	
	        /**
	         * 克隆一个向量
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        clone: function (v) {
	            var out = new ArrayCtor(2);
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },
	
	        /**
	         * 设置向量的两个项
	         * @param {Vector2} out
	         * @param {number} a
	         * @param {number} b
	         * @return {Vector2} 结果
	         */
	        set: function (out, a, b) {
	            out[0] = a;
	            out[1] = b;
	            return out;
	        },
	
	        /**
	         * 向量相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        add: function (out, v1, v2) {
	            out[0] = v1[0] + v2[0];
	            out[1] = v1[1] + v2[1];
	            return out;
	        },
	
	        /**
	         * 向量缩放后相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} a
	         */
	        scaleAndAdd: function (out, v1, v2, a) {
	            out[0] = v1[0] + v2[0] * a;
	            out[1] = v1[1] + v2[1] * a;
	            return out;
	        },
	
	        /**
	         * 向量相减
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        sub: function (out, v1, v2) {
	            out[0] = v1[0] - v2[0];
	            out[1] = v1[1] - v2[1];
	            return out;
	        },
	
	        /**
	         * 向量长度
	         * @param {Vector2} v
	         * @return {number}
	         */
	        len: function (v) {
	            return Math.sqrt(this.lenSquare(v));
	        },
	
	        /**
	         * 向量长度平方
	         * @param {Vector2} v
	         * @return {number}
	         */
	        lenSquare: function (v) {
	            return v[0] * v[0] + v[1] * v[1];
	        },
	
	        /**
	         * 向量乘法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        mul: function (out, v1, v2) {
	            out[0] = v1[0] * v2[0];
	            out[1] = v1[1] * v2[1];
	            return out;
	        },
	
	        /**
	         * 向量除法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        div: function (out, v1, v2) {
	            out[0] = v1[0] / v2[0];
	            out[1] = v1[1] / v2[1];
	            return out;
	        },
	
	        /**
	         * 向量点乘
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        dot: function (v1, v2) {
	            return v1[0] * v2[0] + v1[1] * v2[1];
	        },
	
	        /**
	         * 向量缩放
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {number} s
	         */
	        scale: function (out, v, s) {
	            out[0] = v[0] * s;
	            out[1] = v[1] * s;
	            return out;
	        },
	
	        /**
	         * 向量归一化
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        normalize: function (out, v) {
	            var d = vector.len(v);
	            if (d === 0) {
	                out[0] = 0;
	                out[1] = 0;
	            }
	            else {
	                out[0] = v[0] / d;
	                out[1] = v[1] / d;
	            }
	            return out;
	        },
	
	        /**
	         * 计算向量间距离
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distance: function (v1, v2) {
	            return Math.sqrt(
	                (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1])
	            );
	        },
	
	        /**
	         * 向量距离平方
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distanceSquare: function (v1, v2) {
	            return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	        },
	
	        /**
	         * 求负向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        negate: function (out, v) {
	            out[0] = -v[0];
	            out[1] = -v[1];
	            return out;
	        },
	
	        /**
	         * 插值两个点
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} t
	         */
	        lerp: function (out, v1, v2, t) {
	            out[0] = v1[0] + t * (v2[0] - v1[0]);
	            out[1] = v1[1] + t * (v2[1] - v1[1]);
	            return out;
	        },
	
	        /**
	         * 矩阵左乘向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {Vector2} m
	         */
	        applyTransform: function (out, v, m) {
	            var x = v[0];
	            var y = v[1];
	            out[0] = m[0] * x + m[2] * y + m[4];
	            out[1] = m[1] * x + m[3] * y + m[5];
	            return out;
	        },
	        /**
	         * 求两个向量最小值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        min: function (out, v1, v2) {
	            out[0] = Math.min(v1[0], v2[0]);
	            out[1] = Math.min(v1[1], v2[1]);
	            return out;
	        },
	        /**
	         * 求两个向量最大值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        max: function (out, v1, v2) {
	            out[0] = Math.max(v1[0], v2[0]);
	            out[1] = Math.max(v1[1], v2[1]);
	            return out;
	        }
	    };
	
	    vector.length = vector.len;
	    vector.lengthSquare = vector.lenSquare;
	    vector.dist = vector.distance;
	    vector.distSquare = vector.distanceSquare;
	
	    module.exports = vector;
	


/***/ },
/* 32 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;
	    /**
	     * 3x2矩阵操作类
	     * @exports zrender/tool/matrix
	     */
	    var matrix = {
	        /**
	         * 创建一个单位矩阵
	         * @return {Float32Array|Array.<number>}
	         */
	        create : function() {
	            var out = new ArrayCtor(6);
	            matrix.identity(out);
	
	            return out;
	        },
	        /**
	         * 设置矩阵为单位矩阵
	         * @param {Float32Array|Array.<number>} out
	         */
	        identity : function(out) {
	            out[0] = 1;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            out[4] = 0;
	            out[5] = 0;
	            return out;
	        },
	        /**
	         * 复制矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m
	         */
	        copy: function(out, m) {
	            out[0] = m[0];
	            out[1] = m[1];
	            out[2] = m[2];
	            out[3] = m[3];
	            out[4] = m[4];
	            out[5] = m[5];
	            return out;
	        },
	        /**
	         * 矩阵相乘
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m1
	         * @param {Float32Array|Array.<number>} m2
	         */
	        mul : function (out, m1, m2) {
	            // Consider matrix.mul(m, m2, m);
	            // where out is the same as m2.
	            // So use temp variable to escape error.
	            var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	            var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	            var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	            var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	            out[0] = out0;
	            out[1] = out1;
	            out[2] = out2;
	            out[3] = out3;
	            out[4] = out4;
	            out[5] = out5;
	            return out;
	        },
	        /**
	         * 平移变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        translate : function(out, a, v) {
	            out[0] = a[0];
	            out[1] = a[1];
	            out[2] = a[2];
	            out[3] = a[3];
	            out[4] = a[4] + v[0];
	            out[5] = a[5] + v[1];
	            return out;
	        },
	        /**
	         * 旋转变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {number} rad
	         */
	        rotate : function(out, a, rad) {
	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];
	            var st = Math.sin(rad);
	            var ct = Math.cos(rad);
	
	            out[0] = aa * ct + ab * st;
	            out[1] = -aa * st + ab * ct;
	            out[2] = ac * ct + ad * st;
	            out[3] = -ac * st + ct * ad;
	            out[4] = ct * atx + st * aty;
	            out[5] = ct * aty - st * atx;
	            return out;
	        },
	        /**
	         * 缩放变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        scale : function(out, a, v) {
	            var vx = v[0];
	            var vy = v[1];
	            out[0] = a[0] * vx;
	            out[1] = a[1] * vy;
	            out[2] = a[2] * vx;
	            out[3] = a[3] * vy;
	            out[4] = a[4] * vx;
	            out[5] = a[5] * vy;
	            return out;
	        },
	        /**
	         * 求逆矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         */
	        invert : function(out, a) {
	
	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];
	
	            var det = aa * ad - ab * ac;
	            if (!det) {
	                return null;
	            }
	            det = 1.0 / det;
	
	            out[0] = ad * det;
	            out[1] = -ab * det;
	            out[2] = -ac * det;
	            out[3] = aa * det;
	            out[4] = (ac * aty - ad * atx) * det;
	            out[5] = (ab * atx - aa * aty) * det;
	            return out;
	        }
	    };
	
	    module.exports = matrix;
	


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/model/Model
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var clazzUtil = __webpack_require__(34);
	    var env = __webpack_require__(23);
	
	    /**
	     * @alias module:echarts/model/Model
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} [parentModel]
	     * @param {module:echarts/model/Global} [ecModel]
	     */
	    function Model(option, parentModel, ecModel) {
	        /**
	         * @type {module:echarts/model/Model}
	         * @readOnly
	         */
	        this.parentModel = parentModel;
	
	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        this.ecModel = ecModel;
	
	        /**
	         * @type {Object}
	         * @protected
	         */
	        this.option = option;
	
	        // Simple optimization
	        // if (this.init) {
	        //     if (arguments.length <= 4) {
	        //         this.init(option, parentModel, ecModel, extraOpt);
	        //     }
	        //     else {
	        //         this.init.apply(this, arguments);
	        //     }
	        // }
	    }
	
	    Model.prototype = {
	
	        constructor: Model,
	
	        /**
	         * Model 的初始化函数
	         * @param {Object} option
	         */
	        init: null,
	
	        /**
	         * 从新的 Option merge
	         */
	        mergeOption: function (option) {
	            zrUtil.merge(this.option, option, true);
	        },
	
	        /**
	         * @param {string|Array.<string>} path
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        get: function (path, ignoreParent) {
	            if (path == null) {
	                return this.option;
	            }
	
	            return doGet(
	                this.option,
	                this.parsePath(path),
	                !ignoreParent && getParent(this, path)
	            );
	        },
	
	        /**
	         * @param {string} key
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        getShallow: function (key, ignoreParent) {
	            var option = this.option;
	
	            var val = option == null ? option : option[key];
	            var parentModel = !ignoreParent && getParent(this, key);
	            if (val == null && parentModel) {
	                val = parentModel.getShallow(key);
	            }
	            return val;
	        },
	
	        /**
	         * @param {string|Array.<string>} path
	         * @param {module:echarts/model/Model} [parentModel]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path, parentModel) {
	            var obj = path == null
	                ? this.option
	                : doGet(this.option, path = this.parsePath(path));
	
	            var thisParentModel;
	            parentModel = parentModel || (
	                (thisParentModel = getParent(this, path))
	                    && thisParentModel.getModel(path)
	            );
	
	            return new Model(obj, parentModel, this.ecModel);
	        },
	
	        /**
	         * If model has option
	         */
	        isEmpty: function () {
	            return this.option == null;
	        },
	
	        restoreData: function () {},
	
	        // Pending
	        clone: function () {
	            var Ctor = this.constructor;
	            return new Ctor(zrUtil.clone(this.option));
	        },
	
	        setReadOnly: function (properties) {
	            clazzUtil.setReadOnly(this, properties);
	        },
	
	        // If path is null/undefined, return null/undefined.
	        parsePath: function(path) {
	            if (typeof path === 'string') {
	                path = path.split('.');
	            }
	            return path;
	        },
	
	        /**
	         * @param {Function} getParentMethod
	         *        param {Array.<string>|string} path
	         *        return {module:echarts/model/Model}
	         */
	        customizeGetParent: function (getParentMethod) {
	            clazzUtil.set(this, 'getParent', getParentMethod);
	        },
	
	        isAnimationEnabled: function () {
	            if (!env.node) {
	                if (this.option.animation != null) {
	                    return !!this.option.animation;
	                }
	                else if (this.parentModel) {
	                    return this.parentModel.isAnimationEnabled();
	                }
	            }
	        }
	    };
	
	    function doGet(obj, pathArr, parentModel) {
	        for (var i = 0; i < pathArr.length; i++) {
	            // Ignore empty
	            if (!pathArr[i]) {
	                continue;
	            }
	            // obj could be number/string/... (like 0)
	            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;
	            if (obj == null) {
	                break;
	            }
	        }
	        if (obj == null && parentModel) {
	            obj = parentModel.get(pathArr);
	        }
	        return obj;
	    }
	
	    function getParent(model, path) {
	        var getParentMethod = clazzUtil.get(model, 'getParent');
	        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	    }
	
	    // Enable Model.extend.
	    clazzUtil.enableClassExtend(Model);
	
	    var mixin = zrUtil.mixin;
	    mixin(Model, __webpack_require__(35));
	    mixin(Model, __webpack_require__(37));
	    mixin(Model, __webpack_require__(38));
	    mixin(Model, __webpack_require__(39));
	
	    module.exports = Model;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var clazz = {};
	
	    var TYPE_DELIMITER = '.';
	    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	    var MEMBER_PRIFIX = '\0ec_\0';
	
	    /**
	     * Hide private class member.
	     * The same behavior as `host[name] = value;` (can be right-value)
	     * @public
	     */
	    clazz.set = function (host, name, value) {
	        return (host[MEMBER_PRIFIX + name] = value);
	    };
	
	    /**
	     * Hide private class member.
	     * The same behavior as `host[name];`
	     * @public
	     */
	    clazz.get = function (host, name) {
	        return host[MEMBER_PRIFIX + name];
	    };
	
	    /**
	     * For hidden private class member.
	     * The same behavior as `host.hasOwnProperty(name);`
	     * @public
	     */
	    clazz.hasOwn = function (host, name) {
	        return host.hasOwnProperty(MEMBER_PRIFIX + name);
	    };
	
	    /**
	     * @public
	     */
	    var parseClassType = clazz.parseClassType = function (componentType) {
	        var ret = {main: '', sub: ''};
	        if (componentType) {
	            componentType = componentType.split(TYPE_DELIMITER);
	            ret.main = componentType[0] || '';
	            ret.sub = componentType[1] || '';
	        }
	        return ret;
	    };
	
	    /**
	     * @public
	     */
	    function checkClassType(componentType) {
	        zrUtil.assert(
	            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),
	            'componentType "' + componentType + '" illegal'
	        );
	    }
	
	    /**
	     * @public
	     */
	    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {
	
	        RootClass.$constructor = RootClass;
	        RootClass.extend = function (proto) {
	
	            if (__DEV__) {
	                zrUtil.each(mandatoryMethods, function (method) {
	                    if (!proto[method]) {
	                        console.warn(
	                            'Method `' + method + '` should be implemented'
	                            + (proto.type ? ' in ' + proto.type : '') + '.'
	                        );
	                    }
	                });
	            }
	
	            var superClass = this;
	            var ExtendedClass = function () {
	                if (!proto.$constructor) {
	                    superClass.apply(this, arguments);
	                }
	                else {
	                    proto.$constructor.apply(this, arguments);
	                }
	            };
	
	            zrUtil.extend(ExtendedClass.prototype, proto);
	
	            ExtendedClass.extend = this.extend;
	            ExtendedClass.superCall = superCall;
	            ExtendedClass.superApply = superApply;
	            zrUtil.inherits(ExtendedClass, this);
	            ExtendedClass.superClass = superClass;
	
	            return ExtendedClass;
	        };
	    };
	
	    // superCall should have class info, which can not be fetch from 'this'.
	    // Consider this case:
	    // class A has method f,
	    // class B inherits class A, overrides method f, f call superApply('f'),
	    // class C inherits class B, do not overrides method f,
	    // then when method of class C is called, dead loop occured.
	    function superCall(context, methodName) {
	        var args = zrUtil.slice(arguments, 2);
	        return this.superClass.prototype[methodName].apply(context, args);
	    }
	
	    function superApply(context, methodName, args) {
	        return this.superClass.prototype[methodName].apply(context, args);
	    }
	
	    /**
	     * @param {Object} entity
	     * @param {Object} options
	     * @param {boolean} [options.registerWhenExtend]
	     * @public
	     */
	    clazz.enableClassManagement = function (entity, options) {
	        options = options || {};
	
	        /**
	         * Component model classes
	         * key: componentType,
	         * value:
	         *     componentClass, when componentType is 'xxx'
	         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	         * @type {Object}
	         */
	        var storage = {};
	
	        entity.registerClass = function (Clazz, componentType) {
	            if (componentType) {
	                checkClassType(componentType);
	                componentType = parseClassType(componentType);
	
	                if (!componentType.sub) {
	                    if (__DEV__) {
	                        if (storage[componentType.main]) {
	                            console.warn(componentType.main + ' exists.');
	                        }
	                    }
	                    storage[componentType.main] = Clazz;
	                }
	                else if (componentType.sub !== IS_CONTAINER) {
	                    var container = makeContainer(componentType);
	                    container[componentType.sub] = Clazz;
	                }
	            }
	            return Clazz;
	        };
	
	        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	            var Clazz = storage[componentMainType];
	
	            if (Clazz && Clazz[IS_CONTAINER]) {
	                Clazz = subType ? Clazz[subType] : null;
	            }
	
	            if (throwWhenNotFound && !Clazz) {
	                throw new Error(
	                    !subType
	                        ? componentMainType + '.' + 'type should be specified.'
	                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'
	                );
	            }
	
	            return Clazz;
	        };
	
	        entity.getClassesByMainType = function (componentType) {
	            componentType = parseClassType(componentType);
	
	            var result = [];
	            var obj = storage[componentType.main];
	
	            if (obj && obj[IS_CONTAINER]) {
	                zrUtil.each(obj, function (o, type) {
	                    type !== IS_CONTAINER && result.push(o);
	                });
	            }
	            else {
	                result.push(obj);
	            }
	
	            return result;
	        };
	
	        entity.hasClass = function (componentType) {
	            // Just consider componentType.main.
	            componentType = parseClassType(componentType);
	            return !!storage[componentType.main];
	        };
	
	        /**
	         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	         */
	        entity.getAllClassMainTypes = function () {
	            var types = [];
	            zrUtil.each(storage, function (obj, type) {
	                types.push(type);
	            });
	            return types;
	        };
	
	        /**
	         * If a main type is container and has sub types
	         * @param  {string}  mainType
	         * @return {boolean}
	         */
	        entity.hasSubTypes = function (componentType) {
	            componentType = parseClassType(componentType);
	            var obj = storage[componentType.main];
	            return obj && obj[IS_CONTAINER];
	        };
	
	        entity.parseClassType = parseClassType;
	
	        function makeContainer(componentType) {
	            var container = storage[componentType.main];
	            if (!container || !container[IS_CONTAINER]) {
	                container = storage[componentType.main] = {};
	                container[IS_CONTAINER] = true;
	            }
	            return container;
	        }
	
	        if (options.registerWhenExtend) {
	            var originalExtend = entity.extend;
	            if (originalExtend) {
	                entity.extend = function (proto) {
	                    var ExtendedClass = originalExtend.call(this, proto);
	                    return entity.registerClass(ExtendedClass, proto.type);
	                };
	            }
	        }
	
	        return entity;
	    };
	
	    /**
	     * @param {string|Array.<string>} properties
	     */
	    clazz.setReadOnly = function (obj, properties) {
	        // FIXME It seems broken in IE8 simulation of IE11
	        // if (!zrUtil.isArray(properties)) {
	        //     properties = properties != null ? [properties] : [];
	        // }
	        // zrUtil.each(properties, function (prop) {
	        //     var value = obj[prop];
	
	        //     Object.defineProperty
	        //         && Object.defineProperty(obj, prop, {
	        //             value: value, writable: false
	        //         });
	        //     zrUtil.isArray(obj[prop])
	        //         && Object.freeze
	        //         && Object.freeze(obj[prop]);
	        // });
	    };
	
	    module.exports = clazz;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	
	    var getLineStyle = __webpack_require__(36)(
	        [
	            ['lineWidth', 'width'],
	            ['stroke', 'color'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]
	    );
	    module.exports = {
	        getLineStyle: function (excludes) {
	            var style = getLineStyle.call(this, excludes);
	            var lineDash = this.getLineDash(style.lineWidth);
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },
	
	        getLineDash: function (lineWidth) {
	            if (lineWidth == null) {
	                lineWidth = 1;
	            }
	            var lineType = this.get('type');
	            var dotSize = Math.max(lineWidth, 2);
	            var dashSize = lineWidth * 4;
	            return (lineType === 'solid' || lineType == null) ? null
	                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);
	        }
	    };


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Parse shadow style
	// TODO Only shallow path support
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (properties) {
	        // Normalize
	        for (var i = 0; i < properties.length; i++) {
	            if (!properties[i][1]) {
	               properties[i][1] = properties[i][0];
	            }
	        }
	        return function (excludes) {
	            var style = {};
	            for (var i = 0; i < properties.length; i++) {
	                var propName = properties[i][1];
	                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                    continue;
	                }
	                var val = this.getShallow(propName);
	                if (val != null) {
	                    style[properties[i][0]] = val;
	                }
	            }
	            return style;
	        };
	    };


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	
	    module.exports = {
	        getAreaStyle: __webpack_require__(36)(
	            [
	                ['fill', 'color'],
	                ['shadowBlur'],
	                ['shadowOffsetX'],
	                ['shadowOffsetY'],
	                ['opacity'],
	                ['shadowColor']
	            ]
	        )
	    };


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var textContain = __webpack_require__(29);
	
	    function getShallow(model, path) {
	        return model && model.getShallow(path);
	    }
	
	    module.exports = {
	        /**
	         * Get color property or get color from option.textStyle.color
	         * @return {string}
	         */
	        getTextColor: function () {
	            var ecModel = this.ecModel;
	            return this.getShallow('color')
	                || (ecModel && ecModel.get('textStyle.color'));
	        },
	
	        /**
	         * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	         * @return {string}
	         */
	        getFont: function () {
	            var ecModel = this.ecModel;
	            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	            return [
	                // FIXME in node-canvas fontWeight is before fontStyle
	                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),
	                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),
	                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',
	                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'
	            ].join(' ');
	        },
	
	        getTextRect: function (text) {
	            return textContain.getBoundingRect(
	                text,
	                this.getFont(),
	                this.getShallow('align'),
	                this.getShallow('baseline')
	            );
	        },
	
	        truncateText: function (text, containerWidth, ellipsis, options) {
	            return textContain.truncateText(
	                text, containerWidth, this.getFont(), ellipsis, options
	            );
	        }
	    };


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	
	    var getItemStyle = __webpack_require__(36)(
	        [
	            ['fill', 'color'],
	            ['stroke', 'borderColor'],
	            ['lineWidth', 'borderWidth'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor'],
	            ['textPosition'],
	            ['textAlign']
	        ]
	    );
	    module.exports = {
	        getItemStyle: function (excludes) {
	            var style = getItemStyle.call(this, excludes);
	            var lineDash = this.getBorderLineDash();
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },
	
	        getBorderLineDash: function () {
	            var lineType = this.get('borderType');
	            return (lineType === 'solid' || lineType == null) ? null
	                : (lineType === 'dashed' ? [5, 5] : [1, 1]);
	        }
	    };


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */
	
	
	    var Model = __webpack_require__(33);
	    var zrUtil = __webpack_require__(25);
	    var arrayPush = Array.prototype.push;
	    var componentUtil = __webpack_require__(41);
	    var clazzUtil = __webpack_require__(34);
	    var layout = __webpack_require__(42);
	
	    /**
	     * @alias module:echarts/model/Component
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {module:echarts/model/Model} ecModel
	     */
	    var ComponentModel = Model.extend({
	
	        type: 'component',
	
	        /**
	         * @readOnly
	         * @type {string}
	         */
	        id: '',
	
	        /**
	         * @readOnly
	         */
	        name: '',
	
	        /**
	         * @readOnly
	         * @type {string}
	         */
	        mainType: '',
	
	        /**
	         * @readOnly
	         * @type {string}
	         */
	        subType: '',
	
	        /**
	         * @readOnly
	         * @type {number}
	         */
	        componentIndex: 0,
	
	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,
	
	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        ecModel: null,
	
	        /**
	         * key: componentType
	         * value:  Component model list, can not be null.
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @readOnly
	         */
	        dependentModels: [],
	
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        uid: null,
	
	        /**
	         * Support merge layout params.
	         * Only support 'box' now (left/right/top/bottom/width/height).
	         * @type {string|Object} Object can be {ignoreSize: true}
	         * @readOnly
	         */
	        layoutMode: null,
	
	        $constructor: function (option, parentModel, ecModel, extraOpt) {
	            Model.call(this, option, parentModel, ecModel, extraOpt);
	
	            this.uid = componentUtil.getUID('componentModel');
	        },
	
	
	        init: function (option, parentModel, ecModel, extraOpt) {
	            this.mergeDefaultAndTheme(option, ecModel);
	        },
	
	        mergeDefaultAndTheme: function (option, ecModel) {
	            var layoutMode = this.layoutMode;
	            var inputPositionParams = layoutMode
	                ? layout.getLayoutParams(option) : {};
	
	            var themeModel = ecModel.getTheme();
	            zrUtil.merge(option, themeModel.get(this.mainType));
	            zrUtil.merge(option, this.getDefaultOption());
	
	            if (layoutMode) {
	                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	            }
	        },
	
	        mergeOption: function (option, extraOpt) {
	            zrUtil.merge(this.option, option, true);
	
	            var layoutMode = this.layoutMode;
	            if (layoutMode) {
	                layout.mergeLayoutParam(this.option, option, layoutMode);
	            }
	        },
	
	        // Hooker after init or mergeOption
	        optionUpdated: function (newCptOption, isInit) {},
	
	        getDefaultOption: function () {
	            if (!clazzUtil.hasOwn(this, '__defaultOption')) {
	                var optList = [];
	                var Class = this.constructor;
	                while (Class) {
	                    var opt = Class.prototype.defaultOption;
	                    opt && optList.push(opt);
	                    Class = Class.superClass;
	                }
	
	                var defaultOption = {};
	                for (var i = optList.length - 1; i >= 0; i--) {
	                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	                }
	                clazzUtil.set(this, '__defaultOption', defaultOption);
	            }
	            return clazzUtil.get(this, '__defaultOption');
	        },
	
	        getReferringComponents: function (mainType) {
	            return this.ecModel.queryComponents({
	                mainType: mainType,
	                index: this.get(mainType + 'Index', true),
	                id: this.get(mainType + 'Id', true)
	            });
	        }
	
	    });
	
	    // Reset ComponentModel.extend, add preConstruct.
	    // clazzUtil.enableClassExtend(
	    //     ComponentModel,
	    //     function (option, parentModel, ecModel, extraOpt) {
	    //         // Set dependentModels, componentIndex, name, id, mainType, subType.
	    //         zrUtil.extend(this, extraOpt);
	
	    //         this.uid = componentUtil.getUID('componentModel');
	
	    //         // this.setReadOnly([
	    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	    //         //     'dependentModels', 'componentIndex'
	    //         // ]);
	    //     }
	    // );
	
	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(
	        ComponentModel, {registerWhenExtend: true}
	    );
	    componentUtil.enableSubTypeDefaulter(ComponentModel);
	
	    // Add capability of ComponentModel.topologicalTravel.
	    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);
	
	    function getDependencies(componentType) {
	        var deps = [];
	        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	            arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	        });
	        // Ensure main type
	        return zrUtil.map(deps, function (type) {
	            return clazzUtil.parseClassType(type).main;
	        });
	    }
	
	    zrUtil.mixin(ComponentModel, __webpack_require__(43));
	
	    module.exports = ComponentModel;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var clazz = __webpack_require__(34);
	
	    var parseClassType = clazz.parseClassType;
	
	    var base = 0;
	
	    var componentUtil = {};
	
	    var DELIMITER = '_';
	
	    /**
	     * @public
	     * @param {string} type
	     * @return {string}
	     */
	    componentUtil.getUID = function (type) {
	        // Considering the case of crossing js context,
	        // use Math.random to make id as unique as possible.
	        return [(type || ''), base++, Math.random()].join(DELIMITER);
	    };
	
	    /**
	     * @inner
	     */
	    componentUtil.enableSubTypeDefaulter = function (entity) {
	
	        var subTypeDefaulters = {};
	
	        entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	            componentType = parseClassType(componentType);
	            subTypeDefaulters[componentType.main] = defaulter;
	        };
	
	        entity.determineSubType = function (componentType, option) {
	            var type = option.type;
	            if (!type) {
	                var componentTypeMain = parseClassType(componentType).main;
	                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                    type = subTypeDefaulters[componentTypeMain](option);
	                }
	            }
	            return type;
	        };
	
	        return entity;
	    };
	
	    /**
	     * Topological travel on Activity Network (Activity On Vertices).
	     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	     *
	     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	     *
	     * If there is circle dependencey, Error will be thrown.
	     *
	     */
	    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {
	
	        /**
	         * @public
	         * @param {Array.<string>} targetNameList Target Component type list.
	         *                                           Can be ['aa', 'bb', 'aa.xx']
	         * @param {Array.<string>} fullNameList By which we can build dependency graph.
	         * @param {Function} callback Params: componentType, dependencies.
	         * @param {Object} context Scope of callback.
	         */
	        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	            if (!targetNameList.length) {
	                return;
	            }
	
	            var result = makeDepndencyGraph(fullNameList);
	            var graph = result.graph;
	            var stack = result.noEntryList;
	
	            var targetNameSet = {};
	            zrUtil.each(targetNameList, function (name) {
	                targetNameSet[name] = true;
	            });
	
	            while (stack.length) {
	                var currComponentType = stack.pop();
	                var currVertex = graph[currComponentType];
	                var isInTargetNameSet = !!targetNameSet[currComponentType];
	                if (isInTargetNameSet) {
	                    callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                    delete targetNameSet[currComponentType];
	                }
	                zrUtil.each(
	                    currVertex.successor,
	                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge
	                );
	            }
	
	            zrUtil.each(targetNameSet, function () {
	                throw new Error('Circle dependency may exists');
	            });
	
	            function removeEdge(succComponentType) {
	                graph[succComponentType].entryCount--;
	                if (graph[succComponentType].entryCount === 0) {
	                    stack.push(succComponentType);
	                }
	            }
	
	            // Consider this case: legend depends on series, and we call
	            // chart.setOption({series: [...]}), where only series is in option.
	            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	            // not be called, but only sereis.mergeOption is called. Thus legend
	            // have no chance to update its local record about series (like which
	            // name of series is available in legend).
	            function removeEdgeAndAdd(succComponentType) {
	                targetNameSet[succComponentType] = true;
	                removeEdge(succComponentType);
	            }
	        };
	
	        /**
	         * DepndencyGraph: {Object}
	         * key: conponentType,
	         * value: {
	         *     successor: [conponentTypes...],
	         *     originalDeps: [conponentTypes...],
	         *     entryCount: {number}
	         * }
	         */
	        function makeDepndencyGraph(fullNameList) {
	            var graph = {};
	            var noEntryList = [];
	
	            zrUtil.each(fullNameList, function (name) {
	
	                var thisItem = createDependencyGraphItem(graph, name);
	                var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	
	                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	                thisItem.entryCount = availableDeps.length;
	                if (thisItem.entryCount === 0) {
	                    noEntryList.push(name);
	                }
	
	                zrUtil.each(availableDeps, function (dependentName) {
	                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                        thisItem.predecessor.push(dependentName);
	                    }
	                    var thatItem = createDependencyGraphItem(graph, dependentName);
	                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                        thatItem.successor.push(name);
	                    }
	                });
	            });
	
	            return {graph: graph, noEntryList: noEntryList};
	        }
	
	        function createDependencyGraphItem(graph, name) {
	            if (!graph[name]) {
	                graph[name] = {predecessor: [], successor: []};
	            }
	            return graph[name];
	        }
	
	        function getAvailableDependencies(originalDeps, fullNameList) {
	            var availableDeps = [];
	            zrUtil.each(originalDeps, function (dep) {
	                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	            });
	            return availableDeps;
	        }
	    };
	
	    module.exports = componentUtil;


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning
	
	
	    var zrUtil = __webpack_require__(25);
	    var BoundingRect = __webpack_require__(30);
	    var numberUtil = __webpack_require__(28);
	    var formatUtil = __webpack_require__(27);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;
	
	    var layout = {};
	
	    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [
	        'left', 'right', 'top', 'bottom', 'width', 'height'
	    ];
	
	    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	        var x = 0;
	        var y = 0;
	        if (maxWidth == null) {
	            maxWidth = Infinity;
	        }
	        if (maxHeight == null) {
	            maxHeight = Infinity;
	        }
	        var currentLineMaxSize = 0;
	        group.eachChild(function (child, idx) {
	            var position = child.position;
	            var rect = child.getBoundingRect();
	            var nextChild = group.childAt(idx + 1);
	            var nextChildRect = nextChild && nextChild.getBoundingRect();
	            var nextX;
	            var nextY;
	            if (orient === 'horizontal') {
	                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);
	                nextX = x + moveX;
	                // Wrap when width exceeds maxWidth or meet a `newline` group
	                if (nextX > maxWidth || child.newline) {
	                    x = 0;
	                    nextX = moveX;
	                    y += currentLineMaxSize + gap;
	                    currentLineMaxSize = rect.height;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	                }
	            }
	            else {
	                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);
	                nextY = y + moveY;
	                // Wrap when width exceeds maxHeight or meet a `newline` group
	                if (nextY > maxHeight || child.newline) {
	                    x += currentLineMaxSize + gap;
	                    y = 0;
	                    nextY = moveY;
	                    currentLineMaxSize = rect.width;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	                }
	            }
	
	            if (child.newline) {
	                return;
	            }
	
	            position[0] = x;
	            position[1] = y;
	
	            orient === 'horizontal'
	                ? (x = nextX + gap)
	                : (y = nextY + gap);
	        });
	    }
	
	    /**
	     * VBox or HBox layouting
	     * @param {string} orient
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.box = boxLayout;
	
	    /**
	     * VBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.vbox = zrUtil.curry(boxLayout, 'vertical');
	
	    /**
	     * HBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');
	
	    /**
	     * If x or x2 is not specified or 'center' 'left' 'right',
	     * the width would be as long as possible.
	     * If y or y2 is not specified or 'middle' 'top' 'bottom',
	     * the height would be as long as possible.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.x]
	     * @param {number|string} [positionInfo.y]
	     * @param {number|string} [positionInfo.x2]
	     * @param {number|string} [positionInfo.y2]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @return {Object} {width, height}
	     */
	    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;
	
	        var x = parsePercent(positionInfo.x, containerWidth);
	        var y = parsePercent(positionInfo.y, containerHeight);
	        var x2 = parsePercent(positionInfo.x2, containerWidth);
	        var y2 = parsePercent(positionInfo.y2, containerHeight);
	
	        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	
	        margin = formatUtil.normalizeCssArray(margin || 0);
	
	        return {
	            width: Math.max(x2 - x - margin[1] - margin[3], 0),
	            height: Math.max(y2 - y - margin[0] - margin[2], 0)
	        };
	    };
	
	    /**
	     * Parse position info.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {number|string} [positionInfo.width]
	     * @param {number|string} [positionInfo.height]
	     * @param {number|string} [positionInfo.aspect] Aspect is width / height
	     * @param {Object} containerRect
	     * @param {string|number} [margin]
	     *
	     * @return {module:zrender/core/BoundingRect}
	     */
	    layout.getLayoutRect = function (
	        positionInfo, containerRect, margin
	    ) {
	        margin = formatUtil.normalizeCssArray(margin || 0);
	
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;
	
	        var left = parsePercent(positionInfo.left, containerWidth);
	        var top = parsePercent(positionInfo.top, containerHeight);
	        var right = parsePercent(positionInfo.right, containerWidth);
	        var bottom = parsePercent(positionInfo.bottom, containerHeight);
	        var width = parsePercent(positionInfo.width, containerWidth);
	        var height = parsePercent(positionInfo.height, containerHeight);
	
	        var verticalMargin = margin[2] + margin[0];
	        var horizontalMargin = margin[1] + margin[3];
	        var aspect = positionInfo.aspect;
	
	        // If width is not specified, calculate width from left and right
	        if (isNaN(width)) {
	            width = containerWidth - right - horizontalMargin - left;
	        }
	        if (isNaN(height)) {
	            height = containerHeight - bottom - verticalMargin - top;
	        }
	
	        // If width and height are not given
	        // 1. Graph should not exceeds the container
	        // 2. Aspect must be keeped
	        // 3. Graph should take the space as more as possible
	        if (isNaN(width) && isNaN(height)) {
	            if (aspect > containerWidth / containerHeight) {
	                width = containerWidth * 0.8;
	            }
	            else {
	                height = containerHeight * 0.8;
	            }
	        }
	
	        if (aspect != null) {
	            // Calculate width or height with given aspect
	            if (isNaN(width)) {
	                width = aspect * height;
	            }
	            if (isNaN(height)) {
	                height = width / aspect;
	            }
	        }
	
	        // If left is not specified, calculate left from right and width
	        if (isNaN(left)) {
	            left = containerWidth - right - width - horizontalMargin;
	        }
	        if (isNaN(top)) {
	            top = containerHeight - bottom - height - verticalMargin;
	        }
	
	        // Align left and top
	        switch (positionInfo.left || positionInfo.right) {
	            case 'center':
	                left = containerWidth / 2 - width / 2 - margin[3];
	                break;
	            case 'right':
	                left = containerWidth - width - horizontalMargin;
	                break;
	        }
	        switch (positionInfo.top || positionInfo.bottom) {
	            case 'middle':
	            case 'center':
	                top = containerHeight / 2 - height / 2 - margin[0];
	                break;
	            case 'bottom':
	                top = containerHeight - height - verticalMargin;
	                break;
	        }
	        // If something is wrong and left, top, width, height are calculated as NaN
	        left = left || 0;
	        top = top || 0;
	        if (isNaN(width)) {
	            // Width may be NaN if only one value is given except width
	            width = containerWidth - left - (right || 0);
	        }
	        if (isNaN(height)) {
	            // Height may be NaN if only one value is given except height
	            height = containerHeight - top - (bottom || 0);
	        }
	
	        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	        rect.margin = margin;
	        return rect;
	    };
	
	
	    /**
	     * Position a zr element in viewport
	     *  Group position is specified by either
	     *  {left, top}, {right, bottom}
	     *  If all properties exists, right and bottom will be igonred.
	     *
	     * Logic:
	     *     1. Scale (against origin point in parent coord)
	     *     2. Rotate (against origin point in parent coord)
	     *     3. Traslate (with el.position by this method)
	     * So this method only fixes the last step 'Traslate', which does not affect
	     * scaling and rotating.
	     *
	     * If be called repeatly with the same input el, the same result will be gotten.
	     *
	     * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @param {Object} [opt]
	     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	     * @param {Array.<number>} [opt.boundingMode='all']
	     *        Specify how to calculate boundingRect when locating.
	     *        'all': Position the boundingRect that is transformed and uioned
	     *               both itself and its descendants.
	     *               This mode simplies confine the elements in the bounding
	     *               of their container (e.g., using 'right: 0').
	     *        'raw': Position the boundingRect that is not transformed and only itself.
	     *               This mode is useful when you want a element can overflow its
	     *               container. (Consider a rotated circle needs to be located in a corner.)
	     *               In this mode positionInfo.width/height can only be number.
	     */
	    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {
	        var h = !opt || !opt.hv || opt.hv[0];
	        var v = !opt || !opt.hv || opt.hv[1];
	        var boundingMode = opt && opt.boundingMode || 'all';
	
	        if (!h && !v) {
	            return;
	        }
	
	        var rect;
	        if (boundingMode === 'raw') {
	            rect = el.type === 'group'
	                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)
	                : el.getBoundingRect();
	        }
	        else {
	            rect = el.getBoundingRect();
	            if (el.needLocalTransform()) {
	                var transform = el.getLocalTransform();
	                // Notice: raw rect may be inner object of el,
	                // which should not be modified.
	                rect = rect.clone();
	                rect.applyTransform(transform);
	            }
	        }
	
	        positionInfo = layout.getLayoutRect(
	            zrUtil.defaults(
	                {width: rect.width, height: rect.height},
	                positionInfo
	            ),
	            containerRect,
	            margin
	        );
	
	        // Because 'tranlate' is the last step in transform
	        // (see zrender/core/Transformable#getLocalTransfrom),
	        // we can just only modify el.position to get final result.
	        var elPos = el.position;
	        var dx = h ? positionInfo.x - rect.x : 0;
	        var dy = v ? positionInfo.y - rect.y : 0;
	
	        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	    };
	
	    /**
	     * Consider Case:
	     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	     * through setOption or media query, using normal zrUtil.merge will cause
	     * {right: 0} does not take effect.
	     *
	     * @example
	     * ComponentModel.extend({
	     *     init: function () {
	     *         ...
	     *         var inputPositionParams = layout.getLayoutParams(option);
	     *         this.mergeOption(inputPositionParams);
	     *     },
	     *     mergeOption: function (newOption) {
	     *         newOption && zrUtil.merge(thisOption, newOption, true);
	     *         layout.mergeLayoutParam(thisOption, newOption);
	     *     }
	     * });
	     *
	     * @param {Object} targetOption
	     * @param {Object} newOption
	     * @param {Object|string} [opt]
	     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	     */
	    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	        !zrUtil.isObject(opt) && (opt = {});
	        var hNames = ['width', 'left', 'right']; // Order by priority.
	        var vNames = ['height', 'top', 'bottom']; // Order by priority.
	        var hResult = merge(hNames);
	        var vResult = merge(vNames);
	
	        copy(hNames, targetOption, hResult);
	        copy(vNames, targetOption, vResult);
	
	        function merge(names) {
	            var newParams = {};
	            var newValueCount = 0;
	            var merged = {};
	            var mergedValueCount = 0;
	            var enoughParamNumber = opt.ignoreSize ? 1 : 2;
	
	            each(names, function (name) {
	                merged[name] = targetOption[name];
	            });
	            each(names, function (name) {
	                // Consider case: newOption.width is null, which is
	                // set by user for removing width setting.
	                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	                hasValue(newParams, name) && newValueCount++;
	                hasValue(merged, name) && mergedValueCount++;
	            });
	
	            // Case: newOption: {width: ..., right: ...},
	            // or targetOption: {right: ...} and newOption: {width: ...},
	            // There is no conflict when merged only has params count
	            // little than enoughParamNumber.
	            if (mergedValueCount === enoughParamNumber || !newValueCount) {
	                return merged;
	            }
	            // Case: newOption: {width: ..., right: ...},
	            // Than we can make sure user only want those two, and ignore
	            // all origin params in targetOption.
	            else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            }
	            else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	        }
	
	        function hasProp(obj, name) {
	            return obj.hasOwnProperty(name);
	        }
	
	        function hasValue(obj, name) {
	            return obj[name] != null && obj[name] !== 'auto';
	        }
	
	        function copy(names, target, source) {
	            each(names, function (name) {
	                target[name] = source[name];
	            });
	        }
	    };
	
	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.getLayoutParams = function (source) {
	        return layout.copyLayoutParams({}, source);
	    };
	
	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.copyLayoutParams = function (target, source) {
	        source && target && each(LOCATION_PARAMS, function (name) {
	            source.hasOwnProperty(name) && (target[name] = source[name]);
	        });
	        return target;
	    };
	
	    module.exports = layout;


/***/ },
/* 43 */
/***/ function(module, exports) {

	
	
	    module.exports = {
	        getBoxLayoutParams: function () {
	            return {
	                left: this.get('left'),
	                top: this.get('top'),
	                right: this.get('right'),
	                bottom: this.get('bottom'),
	                width: this.get('width'),
	                height: this.get('height')
	            };
	        }
	    };


/***/ },
/* 44 */
/***/ function(module, exports) {

	
	    var platform = '';
	    // Navigator not exists in node
	    if (typeof navigator !== 'undefined') {
	        platform = navigator.platform || '';
	    }
	    module.exports = {
	        // 全图默认背景
	        // backgroundColor: 'rgba(0,0,0,0)',
	
	        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	        // 浅色
	        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	        // 深色
	        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],
	
	        // 默认需要 Grid 配置项
	        // grid: {},
	        // 主题，主题
	        textStyle: {
	            // color: '#000',
	            // decoration: 'none',
	            // PENDING
	            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	            // fontFamily: 'Arial, Verdana, sans-serif',
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },
	
	        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	        // Default is source-over
	        blendMode: null,
	
	        animation: true,
	        animationDuration: 1000,
	        animationDurationUpdate: 300,
	        animationEasing: 'exponentialOut',
	        animationEasingUpdate: 'cubicOut',
	
	        animationThreshold: 2000,
	        // Configuration for progressive/incremental rendering
	        progressiveThreshold: 3000,
	        progressive: 400,
	
	        // Threshold of if use single hover layer to optimize.
	        // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	        // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	        // which is unexpected.
	        // see example <echarts/test/heatmap-large.html>.
	        hoverLayerThreshold: 3000
	    };


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var classUtil = __webpack_require__(34);
	    var set = classUtil.set;
	    var get = classUtil.get;
	
	    module.exports = {
	        clearColorPalette: function () {
	            set(this, 'colorIdx', 0);
	            set(this, 'colorNameMap', {});
	        },
	
	        getColorFromPalette: function (name, scope) {
	            scope = scope || this;
	            var colorIdx = get(scope, 'colorIdx') || 0;
	            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});
	            if (colorNameMap[name]) {
	                return colorNameMap[name];
	            }
	            var colorPalette = this.get('color', true) || [];
	            if (!colorPalette.length) {
	                return;
	            }
	
	            var color = colorPalette[colorIdx];
	            if (name) {
	                colorNameMap[name] = color;
	            }
	            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);
	
	            return color;
	        }
	    };


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var echartsAPIList = [
	        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',
	        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'
	    ];
	
	    function ExtensionAPI(chartInstance) {
	        zrUtil.each(echartsAPIList, function (name) {
	            this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	        }, this);
	    }
	
	    module.exports = ExtensionAPI;


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * Interface of Coordinate System Class
	     *
	     * create:
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {module:echarts/ExtensionAPI} api
	     *     @return {Object} coordinate system instance
	     *
	     * update:
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {module:echarts/ExtensionAPI} api
	     *
	     * convertToPixel:
	     * convertFromPixel:
	     *     These two methods is also responsible for determine whether this
	     *     coodinate system is applicable to the given `finder`.
	     *     Each coordinate system will be tried, util one returns none
	     *     null/undefined value.
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {Object} finder
	     *     @param {Array|number} value
	     *     @return {Array|number} convert result.
	     *
	     * containPoint:
	     *     @param {Array.<number>} point In pixel coordinate system.
	     *     @return {boolean}
	     */
	
	    var coordinateSystemCreators = {};
	
	    function CoordinateSystemManager() {
	
	        this._coordinateSystems = [];
	    }
	
	    CoordinateSystemManager.prototype = {
	
	        constructor: CoordinateSystemManager,
	
	        create: function (ecModel, api) {
	            var coordinateSystems = [];
	            zrUtil.each(coordinateSystemCreators, function (creater, type) {
	                var list = creater.create(ecModel, api);
	                coordinateSystems = coordinateSystems.concat(list || []);
	            });
	
	            this._coordinateSystems = coordinateSystems;
	        },
	
	        update: function (ecModel, api) {
	            zrUtil.each(this._coordinateSystems, function (coordSys) {
	                // FIXME MUST have
	                coordSys.update && coordSys.update(ecModel, api);
	            });
	        },
	
	        getCoordinateSystems: function () {
	            return this._coordinateSystems.slice();
	        }
	    };
	
	    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	        coordinateSystemCreators[type] = coordinateSystemCreator;
	    };
	
	    CoordinateSystemManager.get = function (type) {
	        return coordinateSystemCreators[type];
	    };
	
	    module.exports = CoordinateSystemManager;


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */
	
	
	
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var ComponentModel = __webpack_require__(40);
	    var each = zrUtil.each;
	    var clone = zrUtil.clone;
	    var map = zrUtil.map;
	    var merge = zrUtil.merge;
	
	    var QUERY_REG = /^(min|max)?(.+)$/;
	
	    /**
	     * TERM EXPLANATIONS:
	     *
	     * [option]:
	     *
	     *     An object that contains definitions of components. For example:
	     *     var option = {
	     *         title: {...},
	     *         legend: {...},
	     *         visualMap: {...},
	     *         series: [
	     *             {data: [...]},
	     *             {data: [...]},
	     *             ...
	     *         ]
	     *     };
	     *
	     * [rawOption]:
	     *
	     *     An object input to echarts.setOption. 'rawOption' may be an
	     *     'option', or may be an object contains multi-options. For example:
	     *     var option = {
	     *         baseOption: {
	     *             title: {...},
	     *             legend: {...},
	     *             series: [
	     *                 {data: [...]},
	     *                 {data: [...]},
	     *                 ...
	     *             ]
	     *         },
	     *         timeline: {...},
	     *         options: [
	     *             {title: {...}, series: {data: [...]}},
	     *             {title: {...}, series: {data: [...]}},
	     *             ...
	     *         ],
	     *         media: [
	     *             {
	     *                 query: {maxWidth: 320},
	     *                 option: {series: {x: 20}, visualMap: {show: false}}
	     *             },
	     *             {
	     *                 query: {minWidth: 320, maxWidth: 720},
	     *                 option: {series: {x: 500}, visualMap: {show: true}}
	     *             },
	     *             {
	     *                 option: {series: {x: 1200}, visualMap: {show: true}}
	     *             }
	     *         ]
	     *     };
	     *
	     * @alias module:echarts/model/OptionManager
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function OptionManager(api) {
	
	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;
	
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._timelineOptions = [];
	
	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._mediaList = [];
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._mediaDefault;
	
	        /**
	         * -1, means default.
	         * empty means no media.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._currentMediaIndices = [];
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._optionBackup;
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._newBaseOption;
	    }
	
	    // timeline.notMerge is not supported in ec3. Firstly there is rearly
	    // case that notMerge is needed. Secondly supporting 'notMerge' requires
	    // rawOption cloned and backuped when timeline changed, which does no
	    // good to performance. What's more, that both timeline and setOption
	    // method supply 'notMerge' brings complex and some problems.
	    // Consider this case:
	    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);
	
	    OptionManager.prototype = {
	
	        constructor: OptionManager,
	
	        /**
	         * @public
	         * @param {Object} rawOption Raw option.
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Array.<Function>} optionPreprocessorFuncs
	         * @return {Object} Init option
	         */
	        setOption: function (rawOption, optionPreprocessorFuncs) {
	            rawOption = clone(rawOption, true);
	
	            // FIXME
	            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。
	
	            var oldOptionBackup = this._optionBackup;
	            var newParsedOption = parseRawOption.call(
	                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup
	            );
	            this._newBaseOption = newParsedOption.baseOption;
	
	            // For setOption at second time (using merge mode);
	            if (oldOptionBackup) {
	                // Only baseOption can be merged.
	                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);
	
	                // For simplicity, timeline options and media options do not support merge,
	                // that is, if you `setOption` twice and both has timeline options, the latter
	                // timeline opitons will not be merged to the formers, but just substitude them.
	                if (newParsedOption.timelineOptions.length) {
	                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	                }
	                if (newParsedOption.mediaList.length) {
	                    oldOptionBackup.mediaList = newParsedOption.mediaList;
	                }
	                if (newParsedOption.mediaDefault) {
	                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	                }
	            }
	            else {
	                this._optionBackup = newParsedOption;
	            }
	        },
	
	        /**
	         * @param {boolean} isRecreate
	         * @return {Object}
	         */
	        mountOption: function (isRecreate) {
	            var optionBackup = this._optionBackup;
	
	            // TODO
	            // 如果没有reset功能则不clone。
	
	            this._timelineOptions = map(optionBackup.timelineOptions, clone);
	            this._mediaList = map(optionBackup.mediaList, clone);
	            this._mediaDefault = clone(optionBackup.mediaDefault);
	            this._currentMediaIndices = [];
	
	            return clone(isRecreate
	                // this._optionBackup.baseOption, which is created at the first `setOption`
	                // called, and is merged into every new option by inner method `mergeOption`
	                // each time `setOption` called, can be only used in `isRecreate`, because
	                // its reliability is under suspicion. In other cases option merge is
	                // performed by `model.mergeOption`.
	                ? optionBackup.baseOption : this._newBaseOption
	            );
	        },
	
	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Object}
	         */
	        getTimelineOption: function (ecModel) {
	            var option;
	            var timelineOptions = this._timelineOptions;
	
	            if (timelineOptions.length) {
	                // getTimelineOption can only be called after ecModel inited,
	                // so we can get currentIndex from timelineModel.
	                var timelineModel = ecModel.getComponent('timeline');
	                if (timelineModel) {
	                    option = clone(
	                        timelineOptions[timelineModel.getCurrentIndex()],
	                        true
	                    );
	                }
	            }
	
	            return option;
	        },
	
	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Array.<Object>}
	         */
	        getMediaOption: function (ecModel) {
	            var ecWidth = this._api.getWidth();
	            var ecHeight = this._api.getHeight();
	            var mediaList = this._mediaList;
	            var mediaDefault = this._mediaDefault;
	            var indices = [];
	            var result = [];
	
	            // No media defined.
	            if (!mediaList.length && !mediaDefault) {
	                return result;
	            }
	
	            // Multi media may be applied, the latter defined media has higher priority.
	            for (var i = 0, len = mediaList.length; i < len; i++) {
	                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                    indices.push(i);
	                }
	            }
	
	            // FIXME
	            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	            if (!indices.length && mediaDefault) {
	                indices = [-1];
	            }
	
	            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	                result = map(indices, function (index) {
	                    return clone(
	                        index === -1 ? mediaDefault.option : mediaList[index].option
	                    );
	                });
	            }
	            // Otherwise return nothing.
	
	            this._currentMediaIndices = indices;
	
	            return result;
	        }
	    };
	
	    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	        var timelineOptions = [];
	        var mediaList = [];
	        var mediaDefault;
	        var baseOption;
	
	        // Compatible with ec2.
	        var timelineOpt = rawOption.timeline;
	
	        if (rawOption.baseOption) {
	            baseOption = rawOption.baseOption;
	        }
	
	        // For timeline
	        if (timelineOpt || rawOption.options) {
	            baseOption = baseOption || {};
	            timelineOptions = (rawOption.options || []).slice();
	        }
	
	        // For media query
	        if (rawOption.media) {
	            baseOption = baseOption || {};
	            var media = rawOption.media;
	            each(media, function (singleMedia) {
	                if (singleMedia && singleMedia.option) {
	                    if (singleMedia.query) {
	                        mediaList.push(singleMedia);
	                    }
	                    else if (!mediaDefault) {
	                        // Use the first media default.
	                        mediaDefault = singleMedia;
	                    }
	                }
	            });
	        }
	
	        // For normal option
	        if (!baseOption) {
	            baseOption = rawOption;
	        }
	
	        // Set timelineOpt to baseOption in ec3,
	        // which is convenient for merge option.
	        if (!baseOption.timeline) {
	            baseOption.timeline = timelineOpt;
	        }
	
	        // Preprocess.
	        each([baseOption].concat(timelineOptions)
	            .concat(zrUtil.map(mediaList, function (media) {
	                return media.option;
	            })),
	            function (option) {
	                each(optionPreprocessorFuncs, function (preProcess) {
	                    preProcess(option, isNew);
	                });
	            }
	        );
	
	        return {
	            baseOption: baseOption,
	            timelineOptions: timelineOptions,
	            mediaDefault: mediaDefault,
	            mediaList: mediaList
	        };
	    }
	
	    /**
	     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	     * Support: width, height, aspectRatio
	     * Can use max or min as prefix.
	     */
	    function applyMediaQuery(query, ecWidth, ecHeight) {
	        var realMap = {
	            width: ecWidth,
	            height: ecHeight,
	            aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	        };
	
	        var applicatable = true;
	
	        zrUtil.each(query, function (value, attr) {
	            var matched = attr.match(QUERY_REG);
	
	            if (!matched || !matched[1] || !matched[2]) {
	                return;
	            }
	
	            var operator = matched[1];
	            var realAttr = matched[2].toLowerCase();
	
	            if (!compare(realMap[realAttr], value, operator)) {
	                applicatable = false;
	            }
	        });
	
	        return applicatable;
	    }
	
	    function compare(real, expect, operator) {
	        if (operator === 'min') {
	            return real >= expect;
	        }
	        else if (operator === 'max') {
	            return real <= expect;
	        }
	        else { // Equals
	            return real === expect;
	        }
	    }
	
	    function indicesEquals(indices1, indices2) {
	        // indices is always order by asc and has only finite number.
	        return indices1.join(',') === indices2.join(',');
	    }
	
	    /**
	     * Consider case:
	     * `chart.setOption(opt1);`
	     * Then user do some interaction like dataZoom, dataView changing.
	     * `chart.setOption(opt2);`
	     * Then user press 'reset button' in toolbox.
	     *
	     * After doing that all of the interaction effects should be reset, the
	     * chart should be the same as the result of invoke
	     * `chart.setOption(opt1); chart.setOption(opt2);`.
	     *
	     * Although it is not able ensure that
	     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	     * `chart.setOption(merge(opt1, opt2));` exactly,
	     * this might be the only simple way to implement that feature.
	     *
	     * MEMO: We've considered some other approaches:
	     * 1. Each model handle its self restoration but not uniform treatment.
	     *     (Too complex in logic and error-prone)
	     * 2. Use a shadow ecModel. (Performace expensive)
	     */
	    function mergeOption(oldOption, newOption) {
	        newOption = newOption || {};
	
	        each(newOption, function (newCptOpt, mainType) {
	            if (newCptOpt == null) {
	                return;
	            }
	
	            var oldCptOpt = oldOption[mainType];
	
	            if (!ComponentModel.hasClass(mainType)) {
	                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	            }
	            else {
	                newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	
	                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	
	                oldOption[mainType] = map(mapResult, function (item) {
	                    return (item.option && item.exist)
	                        ? merge(item.exist, item.option, true)
	                        : (item.exist || item.option);
	                });
	            }
	        });
	    }
	
	    module.exports = OptionManager;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var formatUtil = __webpack_require__(27);
	    var classUtil = __webpack_require__(34);
	    var modelUtil = __webpack_require__(26);
	    var ComponentModel = __webpack_require__(40);
	    var colorPaletteMixin = __webpack_require__(45);
	    var env = __webpack_require__(23);
	    var layout = __webpack_require__(42);
	
	    var set = classUtil.set;
	    var get = classUtil.get;
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;
	
	    var SeriesModel = ComponentModel.extend({
	
	        type: 'series.__base__',
	
	        /**
	         * @readOnly
	         */
	        seriesIndex: 0,
	
	        // coodinateSystem will be injected in the echarts/CoordinateSystem
	        coordinateSystem: null,
	
	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,
	
	        /**
	         * Data provided for legend
	         * @type {Function}
	         */
	        // PENDING
	        legendDataProvider: null,
	
	        /**
	         * Access path of color for visual
	         */
	        visualColorAccessPath: 'itemStyle.normal.color',
	
	        /**
	         * Support merge layout params.
	         * Only support 'box' now (left/right/top/bottom/width/height).
	         * @type {string|Object} Object can be {ignoreSize: true}
	         * @readOnly
	         */
	        layoutMode: null,
	
	        init: function (option, parentModel, ecModel, extraOpt) {
	
	            /**
	             * @type {number}
	             * @readOnly
	             */
	            this.seriesIndex = this.componentIndex;
	
	            this.mergeDefaultAndTheme(option, ecModel);
	
	            /**
	             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	             * @private
	             */
	            set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));
	
	            // If we reverse the order (make data firstly, and then make
	            // dataBeforeProcessed by cloneShallow), cloneShallow will
	            // cause data.graph.data !== data when using
	            // module:echarts/data/Graph or module:echarts/data/Tree.
	            // See module:echarts/data/helper/linkList
	            this.restoreData();
	        },
	
	        /**
	         * Util for merge default and theme to option
	         * @param  {Object} option
	         * @param  {module:echarts/model/Global} ecModel
	         */
	        mergeDefaultAndTheme: function (option, ecModel) {
	            var layoutMode = this.layoutMode;
	            var inputPositionParams = layoutMode
	                ? layout.getLayoutParams(option) : {};
	
	            zrUtil.merge(
	                option,
	                ecModel.getTheme().get(this.subType)
	            );
	            zrUtil.merge(option, this.getDefaultOption());
	
	            // Default label emphasis `position` and `show`
	            // FIXME Set label in mergeOption
	            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);
	
	            this.fillDataTextStyle(option.data);
	
	            if (layoutMode) {
	                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	            }
	        },
	
	        mergeOption: function (newSeriesOption, ecModel) {
	            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	            this.fillDataTextStyle(newSeriesOption.data);
	
	            var layoutMode = this.layoutMode;
	            if (layoutMode) {
	                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	            }
	
	            var data = this.getInitialData(newSeriesOption, ecModel);
	            // TODO Merge data?
	            if (data) {
	                set(this, 'data', data);
	                set(this, 'dataBeforeProcessed', data.cloneShallow());
	            }
	        },
	
	        fillDataTextStyle: function (data) {
	            // Default data label emphasis `position` and `show`
	            // FIXME Tree structure data ?
	            // FIXME Performance ?
	            if (data) {
	                for (var i = 0; i < data.length; i++) {
	                    if (data[i] && data[i].label) {
	                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);
	                    }
	                }
	            }
	        },
	
	        /**
	         * Init a data structure from data related option in series
	         * Must be overwritten
	         */
	        getInitialData: function () {},
	
	        /**
	         * @param {string} [dataType]
	         * @return {module:echarts/data/List}
	         */
	        getData: function (dataType) {
	            var data = get(this, 'data');
	            return dataType == null ? data : data.getLinkedData(dataType);
	        },
	
	        /**
	         * @param {module:echarts/data/List} data
	         */
	        setData: function (data) {
	            set(this, 'data', data);
	        },
	
	        /**
	         * Get data before processed
	         * @return {module:echarts/data/List}
	         */
	        getRawData: function () {
	            return get(this, 'dataBeforeProcessed');
	        },
	
	        /**
	         * Coord dimension to data dimension.
	         *
	         * By default the result is the same as dimensions of series data.
	         * But in some series data dimensions are different from coord dimensions (i.e.
	         * candlestick and boxplot). Override this method to handle those cases.
	         *
	         * Coord dimension to data dimension can be one-to-many
	         *
	         * @param {string} coordDim
	         * @return {Array.<string>} dimensions on the axis.
	         */
	        coordDimToDataDim: function (coordDim) {
	            return [coordDim];
	        },
	
	        /**
	         * Convert data dimension to coord dimension.
	         *
	         * @param {string|number} dataDim
	         * @return {string}
	         */
	        dataDimToCoordDim: function (dataDim) {
	            return dataDim;
	        },
	
	        /**
	         * Get base axis if has coordinate system and has axis.
	         * By default use coordSys.getBaseAxis();
	         * Can be overrided for some chart.
	         * @return {type} description
	         */
	        getBaseAxis: function () {
	            var coordSys = this.coordinateSystem;
	            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	        },
	
	        // FIXME
	        /**
	         * Default tooltip formatter
	         *
	         * @param {number} dataIndex
	         * @param {boolean} [multipleSeries=false]
	         * @param {number} [dataType]
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            function formatArrayValue(value) {
	                var result = [];
	
	                zrUtil.each(value, function (val, idx) {
	                    var dimInfo = data.getDimensionInfo(idx);
	                    var dimType = dimInfo && dimInfo.type;
	                    var valStr;
	
	                    if (dimType === 'ordinal') {
	                        valStr = val + '';
	                    }
	                    else if (dimType === 'time') {
	                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);
	                    }
	                    else {
	                        valStr = addCommas(val);
	                    }
	
	                    valStr && result.push(valStr);
	                });
	
	                return result.join(', ');
	            }
	
	            var data = get(this, 'data');
	
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = encodeHTML(
	                zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value)
	            );
	            var name = data.getName(dataIndex);
	
	            var color = data.getItemVisual(dataIndex, 'color');
	            if (zrUtil.isObject(color) && color.colorStops) {
	                color = (color.colorStops[0] || {}).color;
	            }
	            color = color || 'transparent';
	
	            var colorEl = '<span style="display:inline-block;margin-right:5px;'
	                + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '"></span>';
	
	            var seriesName = this.name;
	            // FIXME
	            if (seriesName === '\0-') {
	                // Not show '-'
	                seriesName = '';
	            }
	            return !multipleSeries
	                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl
	                    + (name
	                        ? encodeHTML(name) + ' : ' + formattedValue
	                        : formattedValue
	                    )
	                  )
	                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);
	        },
	
	        /**
	         * @return {boolean}
	         */
	        isAnimationEnabled: function () {
	            if (env.node) {
	                return false;
	            }
	
	            var animationEnabled = this.getShallow('animation');
	            if (animationEnabled) {
	                if (this.getData().count() > this.getShallow('animationThreshold')) {
	                    animationEnabled = false;
	                }
	            }
	            return animationEnabled;
	        },
	
	        restoreData: function () {
	            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());
	        },
	
	        getColorFromPalette: function (name, scope) {
	            var ecModel = this.ecModel;
	            // PENDING
	            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);
	            if (!color) {
	                color = ecModel.getColorFromPalette(name, scope);
	            }
	            return color;
	        },
	
	        /**
	         * Get data indices for show tooltip content. See tooltip.
	         * @abstract
	         * @param {Array.<string>|string} dim
	         * @param {Array.<number>} value
	         * @param {module:echarts/coord/single/SingleAxis} baseAxis
	         * @return {Array.<number>} data indices.
	         */
	        getAxisTooltipDataIndex: null,
	
	        /**
	         * See tooltip.
	         * @abstract
	         * @param {number} dataIndex
	         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	         */
	        getTooltipPosition: null
	    });
	
	    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	    zrUtil.mixin(SeriesModel, colorPaletteMixin);
	
	    module.exports = SeriesModel;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var Group = __webpack_require__(51);
	    var componentUtil = __webpack_require__(41);
	    var clazzUtil = __webpack_require__(34);
	
	    var Component = function () {
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();
	
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewComponent');
	    };
	
	    Component.prototype = {
	
	        constructor: Component,
	
	        init: function (ecModel, api) {},
	
	        render: function (componentModel, ecModel, api, payload) {},
	
	        dispose: function () {}
	
	    };
	
	    var componentProto = Component.prototype;
	    componentProto.updateView
	        = componentProto.updateLayout
	        = componentProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            // Do nothing;
	        };
	    // Enable Component.extend.
	    clazzUtil.enableClassExtend(Component);
	
	    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});
	
	    module.exports = Component;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/lib/container/Group');
	 *     var Circle = require('zrender/lib/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var Element = __webpack_require__(52);
	    var BoundingRect = __webpack_require__(30);
	
	    /**
	     * @alias module:zrender/graphic/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function (opts) {
	
	        opts = opts || {};
	
	        Element.call(this, opts);
	
	        for (var key in opts) {
	            if (opts.hasOwnProperty(key)) {
	                this[key] = opts[key];
	            }
	        }
	
	        this._children = [];
	
	        this.__storage = null;
	
	        this.__dirty = true;
	    };
	
	    Group.prototype = {
	
	        constructor: Group,
	
	        isGroup: true,
	
	        /**
	         * @type {string}
	         */
	        type: 'group',
	
	        /**
	         * 所有子孙元素是否响应鼠标事件
	         * @name module:/zrender/container/Group#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,
	
	        /**
	         * @return {Array.<module:zrender/Element>}
	         */
	        children: function () {
	            return this._children.slice();
	        },
	
	        /**
	         * 获取指定 index 的儿子节点
	         * @param  {number} idx
	         * @return {module:zrender/Element}
	         */
	        childAt: function (idx) {
	            return this._children[idx];
	        },
	
	        /**
	         * 获取指定名字的儿子节点
	         * @param  {string} name
	         * @return {module:zrender/Element}
	         */
	        childOfName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                if (children[i].name === name) {
	                    return children[i];
	                }
	             }
	        },
	
	        /**
	         * @return {number}
	         */
	        childCount: function () {
	            return this._children.length;
	        },
	
	        /**
	         * 添加子节点到最后
	         * @param {module:zrender/Element} child
	         */
	        add: function (child) {
	            if (child && child !== this && child.parent !== this) {
	
	                this._children.push(child);
	
	                this._doAdd(child);
	            }
	
	            return this;
	        },
	
	        /**
	         * 添加子节点在 nextSibling 之前
	         * @param {module:zrender/Element} child
	         * @param {module:zrender/Element} nextSibling
	         */
	        addBefore: function (child, nextSibling) {
	            if (child && child !== this && child.parent !== this
	                && nextSibling && nextSibling.parent === this) {
	
	                var children = this._children;
	                var idx = children.indexOf(nextSibling);
	
	                if (idx >= 0) {
	                    children.splice(idx, 0, child);
	                    this._doAdd(child);
	                }
	            }
	
	            return this;
	        },
	
	        _doAdd: function (child) {
	            if (child.parent) {
	                child.parent.remove(child);
	            }
	
	            child.parent = this;
	
	            var storage = this.__storage;
	            var zr = this.__zr;
	            if (storage && storage !== child.__storage) {
	
	                storage.addToMap(child);
	
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	
	            zr && zr.refresh();
	        },
	
	        /**
	         * 移除子节点
	         * @param {module:zrender/Element} child
	         */
	        remove: function (child) {
	            var zr = this.__zr;
	            var storage = this.__storage;
	            var children = this._children;
	
	            var idx = zrUtil.indexOf(children, child);
	            if (idx < 0) {
	                return this;
	            }
	            children.splice(idx, 1);
	
	            child.parent = null;
	
	            if (storage) {
	
	                storage.delFromMap(child.id);
	
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	
	            zr && zr.refresh();
	
	            return this;
	        },
	
	        /**
	         * 移除所有子节点
	         */
	        removeAll: function () {
	            var children = this._children;
	            var storage = this.__storage;
	            var child;
	            var i;
	            for (i = 0; i < children.length; i++) {
	                child = children[i];
	                if (storage) {
	                    storage.delFromMap(child.id);
	                    if (child instanceof Group) {
	                        child.delChildrenFromStorage(storage);
	                    }
	                }
	                child.parent = null;
	            }
	            children.length = 0;
	
	            return this;
	        },
	
	        /**
	         * 遍历所有子节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        eachChild: function (cb, context) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                cb.call(context, child, i);
	            }
	            return this;
	        },
	
	        /**
	         * 深度优先遍历所有子孙节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                cb.call(context, child);
	
	                if (child.type === 'group') {
	                    child.traverse(cb, context);
	                }
	            }
	            return this;
	        },
	
	        addChildrenToStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.addToMap(child);
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	        },
	
	        delChildrenFromStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	        },
	
	        dirty: function () {
	            this.__dirty = true;
	            this.__zr && this.__zr.refresh();
	            return this;
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function (includeChildren) {
	            // TODO Caching
	            var rect = null;
	            var tmpRect = new BoundingRect(0, 0, 0, 0);
	            var children = includeChildren || this._children;
	            var tmpMat = [];
	
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                if (child.ignore || child.invisible) {
	                    continue;
	                }
	
	                var childRect = child.getBoundingRect();
	                var transform = child.getLocalTransform(tmpMat);
	                // TODO
	                // The boundingRect cacluated by transforming original
	                // rect may be bigger than the actual bundingRect when rotation
	                // is used. (Consider a circle rotated aginst its center, where
	                // the actual boundingRect should be the same as that not be
	                // rotated.) But we can not find better approach to calculate
	                // actual boundingRect yet, considering performance.
	                if (transform) {
	                    tmpRect.copy(childRect);
	                    tmpRect.applyTransform(transform);
	                    rect = rect || tmpRect.clone();
	                    rect.union(tmpRect);
	                }
	                else {
	                    rect = rect || childRect.clone();
	                    rect.union(childRect);
	                }
	            }
	            return rect || tmpRect;
	        }
	    };
	
	    zrUtil.inherits(Group, Element);
	
	    module.exports = Group;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/Element
	 */
	
	
	    var guid = __webpack_require__(53);
	    var Eventful = __webpack_require__(54);
	    var Transformable = __webpack_require__(55);
	    var Animatable = __webpack_require__(56);
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * @alias module:zrender/Element
	     * @constructor
	     * @extends {module:zrender/mixin/Animatable}
	     * @extends {module:zrender/mixin/Transformable}
	     * @extends {module:zrender/mixin/Eventful}
	     */
	    var Element = function (opts) {
	
	        Transformable.call(this, opts);
	        Eventful.call(this, opts);
	        Animatable.call(this, opts);
	
	        /**
	         * 画布元素ID
	         * @type {string}
	         */
	        this.id = opts.id || guid();
	    };
	
	    Element.prototype = {
	
	        /**
	         * 元素类型
	         * Element type
	         * @type {string}
	         */
	        type: 'element',
	
	        /**
	         * 元素名字
	         * Element name
	         * @type {string}
	         */
	        name: '',
	
	        /**
	         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	         * ZRender instance will be assigned when element is associated with zrender
	         * @name module:/zrender/Element#__zr
	         * @type {module:zrender/ZRender}
	         */
	        __zr: null,
	
	        /**
	         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	         * If ignore drawing and events of the element object
	         * @name module:/zrender/Element#ignore
	         * @type {boolean}
	         * @default false
	         */
	        ignore: false,
	
	        /**
	         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	         * 该路径会继承被裁减对象的变换
	         * @type {module:zrender/graphic/Path}
	         * @see http://www.w3.org/TR/2dcontext/#clipping-region
	         * @readOnly
	         */
	        clipPath: null,
	
	        /**
	         * Drift element
	         * @param  {number} dx dx on the global space
	         * @param  {number} dy dy on the global space
	         */
	        drift: function (dx, dy) {
	            switch (this.draggable) {
	                case 'horizontal':
	                    dy = 0;
	                    break;
	                case 'vertical':
	                    dx = 0;
	                    break;
	            }
	
	            var m = this.transform;
	            if (!m) {
	                m = this.transform = [1, 0, 0, 1, 0, 0];
	            }
	            m[4] += dx;
	            m[5] += dy;
	
	            this.decomposeTransform();
	            this.dirty(false);
	        },
	
	        /**
	         * Hook before update
	         */
	        beforeUpdate: function () {},
	        /**
	         * Hook after update
	         */
	        afterUpdate: function () {},
	        /**
	         * Update each frame
	         */
	        update: function () {
	            this.updateTransform();
	        },
	
	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {},
	
	        /**
	         * @protected
	         */
	        attrKV: function (key, value) {
	            if (key === 'position' || key === 'scale' || key === 'origin') {
	                // Copy the array
	                if (value) {
	                    var target = this[key];
	                    if (!target) {
	                        target = this[key] = [];
	                    }
	                    target[0] = value[0];
	                    target[1] = value[1];
	                }
	            }
	            else {
	                this[key] = value;
	            }
	        },
	
	        /**
	         * Hide the element
	         */
	        hide: function () {
	            this.ignore = true;
	            this.__zr && this.__zr.refresh();
	        },
	
	        /**
	         * Show the element
	         */
	        show: function () {
	            this.ignore = false;
	            this.__zr && this.__zr.refresh();
	        },
	
	        /**
	         * @param {string|Object} key
	         * @param {*} value
	         */
	        attr: function (key, value) {
	            if (typeof key === 'string') {
	                this.attrKV(key, value);
	            }
	            else if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    if (key.hasOwnProperty(name)) {
	                        this.attrKV(name, key[name]);
	                    }
	                }
	            }
	
	            this.dirty(false);
	
	            return this;
	        },
	
	        /**
	         * @param {module:zrender/graphic/Path} clipPath
	         */
	        setClipPath: function (clipPath) {
	            var zr = this.__zr;
	            if (zr) {
	                clipPath.addSelfToZr(zr);
	            }
	
	            // Remove previous clip path
	            if (this.clipPath && this.clipPath !== clipPath) {
	                this.removeClipPath();
	            }
	
	            this.clipPath = clipPath;
	            clipPath.__zr = zr;
	            clipPath.__clipTarget = this;
	
	            this.dirty(false);
	        },
	
	        /**
	         */
	        removeClipPath: function () {
	            var clipPath = this.clipPath;
	            if (clipPath) {
	                if (clipPath.__zr) {
	                    clipPath.removeSelfFromZr(clipPath.__zr);
	                }
	
	                clipPath.__zr = null;
	                clipPath.__clipTarget = null;
	                this.clipPath = null;
	
	                this.dirty(false);
	            }
	        },
	
	        /**
	         * Add self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        addSelfToZr: function (zr) {
	            this.__zr = zr;
	            // 添加动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.addAnimator(animators[i]);
	                }
	            }
	
	            if (this.clipPath) {
	                this.clipPath.addSelfToZr(zr);
	            }
	        },
	
	        /**
	         * Remove self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        removeSelfFromZr: function (zr) {
	            this.__zr = null;
	            // 移除动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.removeAnimator(animators[i]);
	                }
	            }
	
	            if (this.clipPath) {
	                this.clipPath.removeSelfFromZr(zr);
	            }
	        }
	    };
	
	    zrUtil.mixin(Element, Animatable);
	    zrUtil.mixin(Element, Transformable);
	    zrUtil.mixin(Element, Eventful);
	
	    module.exports = Element;


/***/ },
/* 53 */
/***/ function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	
	
	    var idStart = 0x0907;
	
	    module.exports = function () {
	        return idStart++;
	    };
	


/***/ },
/* 54 */
/***/ function(module, exports) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	
	
	    var arrySlice = Array.prototype.slice;
	
	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._$handlers = {};
	    };
	
	    Eventful.prototype = {
	
	        constructor: Eventful,
	
	        /**
	         * 单次触发绑定，trigger后销毁
	         *
	         * @param {string} event 事件名
	         * @param {Function} handler 响应函数
	         * @param {Object} context
	         */
	        one: function (event, handler, context) {
	            var _h = this._$handlers;
	
	            if (!handler || !event) {
	                return this;
	            }
	
	            if (!_h[event]) {
	                _h[event] = [];
	            }
	
	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }
	
	            _h[event].push({
	                h: handler,
	                one: true,
	                ctx: context || this
	            });
	
	            return this;
	        },
	
	        /**
	         * 绑定事件
	         * @param {string} event 事件名
	         * @param {Function} handler 事件处理函数
	         * @param {Object} [context]
	         */
	        on: function (event, handler, context) {
	            var _h = this._$handlers;
	
	            if (!handler || !event) {
	                return this;
	            }
	
	            if (!_h[event]) {
	                _h[event] = [];
	            }
	
	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }
	
	            _h[event].push({
	                h: handler,
	                one: false,
	                ctx: context || this
	            });
	
	            return this;
	        },
	
	        /**
	         * 是否绑定了事件
	         * @param  {string}  event
	         * @return {boolean}
	         */
	        isSilent: function (event) {
	            var _h = this._$handlers;
	            return _h[event] && _h[event].length;
	        },
	
	        /**
	         * 解绑事件
	         * @param {string} event 事件名
	         * @param {Function} [handler] 事件处理函数
	         */
	        off: function (event, handler) {
	            var _h = this._$handlers;
	
	            if (!event) {
	                this._$handlers = {};
	                return this;
	            }
	
	            if (handler) {
	                if (_h[event]) {
	                    var newList = [];
	                    for (var i = 0, l = _h[event].length; i < l; i++) {
	                        if (_h[event][i]['h'] != handler) {
	                            newList.push(_h[event][i]);
	                        }
	                    }
	                    _h[event] = newList;
	                }
	
	                if (_h[event] && _h[event].length === 0) {
	                    delete _h[event];
	                }
	            }
	            else {
	                delete _h[event];
	            }
	
	            return this;
	        },
	
	        /**
	         * 事件分发
	         *
	         * @param {string} type 事件类型
	         */
	        trigger: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;
	
	                if (argLen > 3) {
	                    args = arrySlice.call(args, 1);
	                }
	
	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(_h[i]['ctx']);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(_h[i]['ctx'], args);
	                            break;
	                    }
	
	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }
	
	            return this;
	        },
	
	        /**
	         * 带有context的事件分发, 最后一个参数是事件回调的context
	         * @param {string} type 事件类型
	         */
	        triggerWithContext: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;
	
	                if (argLen > 4) {
	                    args = arrySlice.call(args, 1, args.length - 1);
	                }
	                var ctx = args[args.length - 1];
	
	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(ctx);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(ctx, args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(ctx, args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(ctx, args);
	                            break;
	                    }
	
	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }
	
	            return this;
	        }
	    };
	
	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrag
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */
	
	    module.exports = Eventful;
	


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	
	
	    var matrix = __webpack_require__(32);
	    var vector = __webpack_require__(31);
	    var mIdentity = matrix.identity;
	
	    var EPSILON = 5e-5;
	
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	
	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function (opts) {
	        opts = opts || {};
	        // If there are no given position, rotation, scale
	        if (!opts.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [0, 0];
	        }
	        if (opts.rotation == null) {
	            /**
	             * 旋转
	             * @type {Array.<number>}
	             * @default 0
	             */
	            this.rotation = 0;
	        }
	        if (!opts.scale) {
	            /**
	             * 缩放
	             * @type {Array.<number>}
	             * @default [1, 1]
	             */
	            this.scale = [1, 1];
	        }
	        /**
	         * 旋转和缩放的原点
	         * @type {Array.<number>}
	         * @default null
	         */
	        this.origin = this.origin || null;
	    };
	
	    var transformableProto = Transformable.prototype;
	    transformableProto.transform = null;
	
	    /**
	     * 判断是否需要有坐标变换
	     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	     */
	    transformableProto.needLocalTransform = function () {
	        return isNotAroundZero(this.rotation)
	            || isNotAroundZero(this.position[0])
	            || isNotAroundZero(this.position[1])
	            || isNotAroundZero(this.scale[0] - 1)
	            || isNotAroundZero(this.scale[1] - 1);
	    };
	
	    transformableProto.updateTransform = function () {
	        var parent = this.parent;
	        var parentHasTransform = parent && parent.transform;
	        var needLocalTransform = this.needLocalTransform();
	
	        var m = this.transform;
	        if (!(needLocalTransform || parentHasTransform)) {
	            m && mIdentity(m);
	            return;
	        }
	
	        m = m || matrix.create();
	
	        if (needLocalTransform) {
	            this.getLocalTransform(m);
	        }
	        else {
	            mIdentity(m);
	        }
	
	        // 应用父节点变换
	        if (parentHasTransform) {
	            if (needLocalTransform) {
	                matrix.mul(m, parent.transform, m);
	            }
	            else {
	                matrix.copy(m, parent.transform);
	            }
	        }
	        // 保存这个变换矩阵
	        this.transform = m;
	
	        this.invTransform = this.invTransform || matrix.create();
	        matrix.invert(this.invTransform, m);
	    };
	
	    transformableProto.getLocalTransform = function (m) {
	        m = m || [];
	        mIdentity(m);
	
	        var origin = this.origin;
	
	        var scale = this.scale;
	        var rotation = this.rotation;
	        var position = this.position;
	        if (origin) {
	            // Translate to origin
	            m[4] -= origin[0];
	            m[5] -= origin[1];
	        }
	        matrix.scale(m, m, scale);
	        if (rotation) {
	            matrix.rotate(m, m, rotation);
	        }
	        if (origin) {
	            // Translate back from origin
	            m[4] += origin[0];
	            m[5] += origin[1];
	        }
	
	        m[4] += position[0];
	        m[5] += position[1];
	
	        return m;
	    };
	    /**
	     * 将自己的transform应用到context上
	     * @param {Context2D} ctx
	     */
	    transformableProto.setTransform = function (ctx) {
	        var m = this.transform;
	        var dpr = ctx.dpr || 1;
	        if (m) {
	            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	        }
	        else {
	            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	        }
	    };
	
	    transformableProto.restoreTransform = function (ctx) {
	        var m = this.transform;
	        var dpr = ctx.dpr || 1;
	        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	    }
	
	    var tmpTransform = [];
	
	    /**
	     * 分解`transform`矩阵到`position`, `rotation`, `scale`
	     */
	    transformableProto.decomposeTransform = function () {
	        if (!this.transform) {
	            return;
	        }
	        var parent = this.parent;
	        var m = this.transform;
	        if (parent && parent.transform) {
	            // Get local transform and decompose them to position, scale, rotation
	            matrix.mul(tmpTransform, parent.invTransform, m);
	            m = tmpTransform;
	        }
	        var sx = m[0] * m[0] + m[1] * m[1];
	        var sy = m[2] * m[2] + m[3] * m[3];
	        var position = this.position;
	        var scale = this.scale;
	        if (isNotAroundZero(sx - 1)) {
	            sx = Math.sqrt(sx);
	        }
	        if (isNotAroundZero(sy - 1)) {
	            sy = Math.sqrt(sy);
	        }
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        position[0] = m[4];
	        position[1] = m[5];
	        scale[0] = sx;
	        scale[1] = sy;
	        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	    };
	
	    /**
	     * Get global scale
	     * @return {Array.<number>}
	     */
	    transformableProto.getGlobalScale = function () {
	        var m = this.transform;
	        if (!m) {
	            return [1, 1];
	        }
	        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        return [sx, sy];
	    };
	    /**
	     * 变换坐标位置到 shape 的局部坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToLocal = function (x, y) {
	        var v2 = [x, y];
	        var invTransform = this.invTransform;
	        if (invTransform) {
	            vector.applyTransform(v2, v2, invTransform);
	        }
	        return v2;
	    };
	
	    /**
	     * 变换局部坐标位置到全局坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToGlobal = function (x, y) {
	        var v2 = [x, y];
	        var transform = this.transform;
	        if (transform) {
	            vector.applyTransform(v2, v2, transform);
	        }
	        return v2;
	    };
	
	    module.exports = Transformable;
	


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/mixin/Animatable
	 */
	
	
	    var Animator = __webpack_require__(57);
	    var util = __webpack_require__(25);
	    var isString = util.isString;
	    var isFunction = util.isFunction;
	    var isObject = util.isObject;
	    var log = __webpack_require__(61);
	
	    /**
	     * @alias modue:zrender/mixin/Animatable
	     * @constructor
	     */
	    var Animatable = function () {
	
	        /**
	         * @type {Array.<module:zrender/animation/Animator>}
	         * @readOnly
	         */
	        this.animators = [];
	    };
	
	    Animatable.prototype = {
	
	        constructor: Animatable,
	
	        /**
	         * 动画
	         *
	         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	         * @param {boolean} [loop] 动画是否循环
	         * @return {module:zrender/animation/Animator}
	         * @example:
	         *     el.animate('style', false)
	         *         .when(1000, {x: 10} )
	         *         .done(function(){ // Animation done })
	         *         .start()
	         */
	        animate: function (path, loop) {
	            var target;
	            var animatingShape = false;
	            var el = this;
	            var zr = this.__zr;
	            if (path) {
	                var pathSplitted = path.split('.');
	                var prop = el;
	                // If animating shape
	                animatingShape = pathSplitted[0] === 'shape';
	                for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                    if (!prop) {
	                        continue;
	                    }
	                    prop = prop[pathSplitted[i]];
	                }
	                if (prop) {
	                    target = prop;
	                }
	            }
	            else {
	                target = el;
	            }
	
	            if (!target) {
	                log(
	                    'Property "'
	                    + path
	                    + '" is not existed in element '
	                    + el.id
	                );
	                return;
	            }
	
	            var animators = el.animators;
	
	            var animator = new Animator(target, loop);
	
	            animator.during(function (target) {
	                el.dirty(animatingShape);
	            })
	            .done(function () {
	                // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	                animators.splice(util.indexOf(animators, animator), 1);
	            });
	
	            animators.push(animator);
	
	            // If animate after added to the zrender
	            if (zr) {
	                zr.animation.addAnimator(animator);
	            }
	
	            return animator;
	        },
	
	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stopAnimation: function (forwardToLast) {
	            var animators = this.animators;
	            var len = animators.length;
	            for (var i = 0; i < len; i++) {
	                animators[i].stop(forwardToLast);
	            }
	            animators.length = 0;
	
	            return this;
	        },
	
	        /**
	         * @param {Object} target
	         * @param {number} [time=500] Time in ms
	         * @param {string} [easing='linear']
	         * @param {number} [delay=0]
	         * @param {Function} [callback]
	         *
	         * @example
	         *  // Animate position
	         *  el.animateTo({
	         *      position: [10, 10]
	         *  }, function () { // done })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	         *  el.animateTo({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100, 'cubicOut', function () { // done })
	         */
	         // TODO Return animation key
	        animateTo: function (target, time, delay, easing, callback) {
	            // animateTo(target, time, easing, callback);
	            if (isString(delay)) {
	                callback = easing;
	                easing = delay;
	                delay = 0;
	            }
	            // animateTo(target, time, delay, callback);
	            else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }
	            // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                callback = delay;
	                delay = 0;
	            }
	            // animateTo(target, callback)
	            else if (isFunction(time)) {
	                callback = time;
	                time = 500;
	            }
	            // animateTo(target)
	            else if (!time) {
	                time = 500;
	            }
	            // Stop all previous animations
	            this.stopAnimation();
	            this._animateToShallow('', this, target, time, delay, easing, callback);
	
	            // Animators may be removed immediately after start
	            // if there is nothing to animate
	            var animators = this.animators.slice();
	            var count = animators.length;
	            function done() {
	                count--;
	                if (!count) {
	                    callback && callback();
	                }
	            }
	
	            // No animators. This should be checked before animators[i].start(),
	            // because 'done' may be executed immediately if no need to animate.
	            if (!count) {
	                callback && callback();
	            }
	            // Start after all animators created
	            // Incase any animator is done immediately when all animation properties are not changed
	            for (var i = 0; i < animators.length; i++) {
	                animators[i]
	                    .done(done)
	                    .start(easing);
	            }
	        },
	
	        /**
	         * @private
	         * @param {string} path=''
	         * @param {Object} source=this
	         * @param {Object} target
	         * @param {number} [time=500]
	         * @param {number} [delay=0]
	         *
	         * @example
	         *  // Animate position
	         *  el._animateToShallow({
	         *      position: [10, 10]
	         *  })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms
	         *  el._animateToShallow({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100)
	         */
	        _animateToShallow: function (path, source, target, time, delay) {
	            var objShallow = {};
	            var propertyCount = 0;
	            for (var name in target) {
	                if (!target.hasOwnProperty(name)) {
	                    continue;
	                }
	
	                if (source[name] != null) {
	                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                        this._animateToShallow(
	                            path ? path + '.' + name : name,
	                            source[name],
	                            target[name],
	                            time,
	                            delay
	                        );
	                    }
	                    else {
	                        objShallow[name] = target[name];
	                        propertyCount++;
	                    }
	                }
	                else if (target[name] != null) {
	                    // Attr directly if not has property
	                    // FIXME, if some property not needed for element ?
	                    if (!path) {
	                        this.attr(name, target[name]);
	                    }
	                    else {  // Shape or style
	                        var props = {};
	                        props[path] = {};
	                        props[path][name] = target[name];
	                        this.attr(props);
	                    }
	                }
	            }
	
	            if (propertyCount > 0) {
	                this.animate(path, false)
	                    .when(time == null ? 500 : time, objShallow)
	                    .delay(delay || 0);
	            }
	
	            return this;
	        }
	    };
	
	    module.exports = Animatable;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/animation/Animator
	 */
	
	
	    var Clip = __webpack_require__(58);
	    var color = __webpack_require__(60);
	    var util = __webpack_require__(25);
	    var isArrayLike = util.isArrayLike;
	
	    var arraySlice = Array.prototype.slice;
	
	    function defaultGetter(target, key) {
	        return target[key];
	    }
	
	    function defaultSetter(target, key, value) {
	        target[key] = value;
	    }
	
	    /**
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} percent
	     * @return {number}
	     */
	    function interpolateNumber(p0, p1, percent) {
	        return (p1 - p0) * percent + p0;
	    }
	
	    /**
	     * @param  {string} p0
	     * @param  {string} p1
	     * @param  {number} percent
	     * @return {string}
	     */
	    function interpolateString(p0, p1, percent) {
	        return percent > 0.5 ? p1 : p0;
	    }
	
	    /**
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {number} percent
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function interpolateArray(p0, p1, percent, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = interpolateNumber(p0[i], p1[i], percent);
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = interpolateNumber(
	                        p0[i][j], p1[i][j], percent
	                    );
	                }
	            }
	        }
	    }
	
	    // arr0 is source array, arr1 is target array.
	    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	    function fillArr(arr0, arr1, arrDim) {
	        var arr0Len = arr0.length;
	        var arr1Len = arr1.length;
	        if (arr0Len !== arr1Len) {
	            // FIXME Not work for TypedArray
	            var isPreviousLarger = arr0Len > arr1Len;
	            if (isPreviousLarger) {
	                // Cut the previous
	                arr0.length = arr1Len;
	            }
	            else {
	                // Fill the previous
	                for (var i = arr0Len; i < arr1Len; i++) {
	                    arr0.push(
	                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])
	                    );
	                }
	            }
	        }
	        // Handling NaN value
	        var len2 = arr0[0] && arr0[0].length;
	        for (var i = 0; i < arr0.length; i++) {
	            if (arrDim === 1) {
	                if (isNaN(arr0[i])) {
	                    arr0[i] = arr1[i];
	                }
	            }
	            else {
	                for (var j = 0; j < len2; j++) {
	                    if (isNaN(arr0[i][j])) {
	                        arr0[i][j] = arr1[i][j];
	                    }
	                }
	            }
	        }
	    }
	
	    /**
	     * @param  {Array} arr0
	     * @param  {Array} arr1
	     * @param  {number} arrDim
	     * @return {boolean}
	     */
	    function isArraySame(arr0, arr1, arrDim) {
	        if (arr0 === arr1) {
	            return true;
	        }
	        var len = arr0.length;
	        if (len !== arr1.length) {
	            return false;
	        }
	        if (arrDim === 1) {
	            for (var i = 0; i < len; i++) {
	                if (arr0[i] !== arr1[i]) {
	                    return false;
	                }
	            }
	        }
	        else {
	            var len2 = arr0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    if (arr0[i][j] !== arr1[i][j]) {
	                        return false;
	                    }
	                }
	            }
	        }
	        return true;
	    }
	
	    /**
	     * Catmull Rom interpolate array
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {Array} p2
	     * @param  {Array} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function catmullRomInterpolateArray(
	        p0, p1, p2, p3, t, t2, t3, out, arrDim
	    ) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = catmullRomInterpolate(
	                    p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                );
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = catmullRomInterpolate(
	                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                        t, t2, t3
	                    );
	                }
	            }
	        }
	    }
	
	    /**
	     * Catmull Rom interpolate number
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @return {number}
	     */
	    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }
	
	    function cloneValue(value) {
	        if (isArrayLike(value)) {
	            var len = value.length;
	            if (isArrayLike(value[0])) {
	                var ret = [];
	                for (var i = 0; i < len; i++) {
	                    ret.push(arraySlice.call(value[i]));
	                }
	                return ret;
	            }
	
	            return arraySlice.call(value);
	        }
	
	        return value;
	    }
	
	    function rgba2String(rgba) {
	        rgba[0] = Math.floor(rgba[0]);
	        rgba[1] = Math.floor(rgba[1]);
	        rgba[2] = Math.floor(rgba[2]);
	
	        return 'rgba(' + rgba.join(',') + ')';
	    }
	
	    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {
	        var getter = animator._getter;
	        var setter = animator._setter;
	        var useSpline = easing === 'spline';
	
	        var trackLen = keyframes.length;
	        if (!trackLen) {
	            return;
	        }
	        // Guess data type
	        var firstVal = keyframes[0].value;
	        var isValueArray = isArrayLike(firstVal);
	        var isValueColor = false;
	        var isValueString = false;
	
	        // For vertices morphing
	        var arrDim = (
	                isValueArray
	                && isArrayLike(firstVal[0])
	            )
	            ? 2 : 1;
	        var trackMaxTime;
	        // Sort keyframe as ascending
	        keyframes.sort(function(a, b) {
	            return a.time - b.time;
	        });
	
	        trackMaxTime = keyframes[trackLen - 1].time;
	        // Percents of each keyframe
	        var kfPercents = [];
	        // Value of each keyframe
	        var kfValues = [];
	        var prevValue = keyframes[0].value;
	        var isAllValueEqual = true;
	        for (var i = 0; i < trackLen; i++) {
	            kfPercents.push(keyframes[i].time / trackMaxTime);
	            // Assume value is a color when it is a string
	            var value = keyframes[i].value;
	
	            // Check if value is equal, deep check if value is array
	            if (!((isValueArray && isArraySame(value, prevValue, arrDim))
	                || (!isValueArray && value === prevValue))) {
	                isAllValueEqual = false;
	            }
	            prevValue = value;
	
	            // Try converting a string to a color array
	            if (typeof value == 'string') {
	                var colorArray = color.parse(value);
	                if (colorArray) {
	                    value = colorArray;
	                    isValueColor = true;
	                }
	                else {
	                    isValueString = true;
	                }
	            }
	            kfValues.push(value);
	        }
	        if (isAllValueEqual) {
	            return;
	        }
	
	        var lastValue = kfValues[trackLen - 1];
	        // Polyfill array and NaN value
	        for (var i = 0; i < trackLen - 1; i++) {
	            if (isValueArray) {
	                fillArr(kfValues[i], lastValue, arrDim);
	            }
	            else {
	                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	                    kfValues[i] = lastValue;
	                }
	            }
	        }
	        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);
	
	        // Cache the key of last frame to speed up when
	        // animation playback is sequency
	        var lastFrame = 0;
	        var lastFramePercent = 0;
	        var start;
	        var w;
	        var p0;
	        var p1;
	        var p2;
	        var p3;
	
	        if (isValueColor) {
	            var rgba = [0, 0, 0, 0];
	        }
	
	        var onframe = function (target, percent) {
	            // Find the range keyframes
	            // kf1-----kf2---------current--------kf3
	            // find kf2 and kf3 and do interpolation
	            var frame;
	            // In the easing function like elasticOut, percent may less than 0
	            if (percent < 0) {
	                frame = 0;
	            }
	            else if (percent < lastFramePercent) {
	                // Start from next key
	                // PENDING start from lastFrame ?
	                start = Math.min(lastFrame + 1, trackLen - 1);
	                for (frame = start; frame >= 0; frame--) {
	                    if (kfPercents[frame] <= percent) {
	                        break;
	                    }
	                }
	                // PENDING really need to do this ?
	                frame = Math.min(frame, trackLen - 2);
	            }
	            else {
	                for (frame = lastFrame; frame < trackLen; frame++) {
	                    if (kfPercents[frame] > percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame - 1, trackLen - 2);
	            }
	            lastFrame = frame;
	            lastFramePercent = percent;
	
	            var range = (kfPercents[frame + 1] - kfPercents[frame]);
	            if (range === 0) {
	                return;
	            }
	            else {
	                w = (percent - kfPercents[frame]) / range;
	            }
	            if (useSpline) {
	                p1 = kfValues[frame];
	                p0 = kfValues[frame === 0 ? frame : frame - 1];
	                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	                if (isValueArray) {
	                    catmullRomInterpolateArray(
	                        p0, p1, p2, p3, w, w * w, w * w * w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        value = catmullRomInterpolateArray(
	                            p0, p1, p2, p3, w, w * w, w * w * w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(p1, p2, w);
	                    }
	                    else {
	                        value = catmullRomInterpolate(
	                            p0, p1, p2, p3, w, w * w, w * w * w
	                        );
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	            else {
	                if (isValueArray) {
	                    interpolateArray(
	                        kfValues[frame], kfValues[frame + 1], w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        interpolateArray(
	                            kfValues[frame], kfValues[frame + 1], w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    else {
	                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	        };
	
	        var clip = new Clip({
	            target: animator._target,
	            life: trackMaxTime,
	            loop: animator._loop,
	            delay: animator._delay,
	            onframe: onframe,
	            ondestroy: oneTrackDone
	        });
	
	        if (easing && easing !== 'spline') {
	            clip.easing = easing;
	        }
	
	        return clip;
	    }
	
	    /**
	     * @alias module:zrender/animation/Animator
	     * @constructor
	     * @param {Object} target
	     * @param {boolean} loop
	     * @param {Function} getter
	     * @param {Function} setter
	     */
	    var Animator = function(target, loop, getter, setter) {
	        this._tracks = {};
	        this._target = target;
	
	        this._loop = loop || false;
	
	        this._getter = getter || defaultGetter;
	        this._setter = setter || defaultSetter;
	
	        this._clipCount = 0;
	
	        this._delay = 0;
	
	        this._doneList = [];
	
	        this._onframeList = [];
	
	        this._clipList = [];
	    };
	
	    Animator.prototype = {
	        /**
	         * 设置动画关键帧
	         * @param  {number} time 关键帧时间，单位是ms
	         * @param  {Object} props 关键帧的属性值，key-value表示
	         * @return {module:zrender/animation/Animator}
	         */
	        when: function(time /* ms */, props) {
	            var tracks = this._tracks;
	            for (var propName in props) {
	                if (!props.hasOwnProperty(propName)) {
	                    continue;
	                }
	
	                if (!tracks[propName]) {
	                    tracks[propName] = [];
	                    // Invalid value
	                    var value = this._getter(this._target, propName);
	                    if (value == null) {
	                        // zrLog('Invalid property ' + propName);
	                        continue;
	                    }
	                    // If time is 0
	                    //  Then props is given initialize value
	                    // Else
	                    //  Initialize value from current prop value
	                    if (time !== 0) {
	                        tracks[propName].push({
	                            time: 0,
	                            value: cloneValue(value)
	                        });
	                    }
	                }
	                tracks[propName].push({
	                    time: time,
	                    value: props[propName]
	                });
	            }
	            return this;
	        },
	        /**
	         * 添加动画每一帧的回调函数
	         * @param  {Function} callback
	         * @return {module:zrender/animation/Animator}
	         */
	        during: function (callback) {
	            this._onframeList.push(callback);
	            return this;
	        },
	
	        _doneCallback: function () {
	            // Clear all tracks
	            this._tracks = {};
	            // Clear all clips
	            this._clipList.length = 0;
	
	            var doneList = this._doneList;
	            var len = doneList.length;
	            for (var i = 0; i < len; i++) {
	                doneList[i].call(this);
	            }
	        },
	        /**
	         * 开始执行动画
	         * @param  {string|Function} easing
	         *         动画缓动函数，详见{@link module:zrender/animation/easing}
	         * @return {module:zrender/animation/Animator}
	         */
	        start: function (easing) {
	
	            var self = this;
	            var clipCount = 0;
	
	            var oneTrackDone = function() {
	                clipCount--;
	                if (!clipCount) {
	                    self._doneCallback();
	                }
	            };
	
	            var lastClip;
	            for (var propName in this._tracks) {
	                if (!this._tracks.hasOwnProperty(propName)) {
	                    continue;
	                }
	                var clip = createTrackClip(
	                    this, easing, oneTrackDone,
	                    this._tracks[propName], propName
	                );
	                if (clip) {
	                    this._clipList.push(clip);
	                    clipCount++;
	
	                    // If start after added to animation
	                    if (this.animation) {
	                        this.animation.addClip(clip);
	                    }
	
	                    lastClip = clip;
	                }
	            }
	
	            // Add during callback on the last clip
	            if (lastClip) {
	                var oldOnFrame = lastClip.onframe;
	                lastClip.onframe = function (target, percent) {
	                    oldOnFrame(target, percent);
	
	                    for (var i = 0; i < self._onframeList.length; i++) {
	                        self._onframeList[i](target, percent);
	                    }
	                };
	            }
	
	            if (!clipCount) {
	                this._doneCallback();
	            }
	            return this;
	        },
	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stop: function (forwardToLast) {
	            var clipList = this._clipList;
	            var animation = this.animation;
	            for (var i = 0; i < clipList.length; i++) {
	                var clip = clipList[i];
	                if (forwardToLast) {
	                    // Move to last frame before stop
	                    clip.onframe(this._target, 1);
	                }
	                animation && animation.removeClip(clip);
	            }
	            clipList.length = 0;
	        },
	        /**
	         * 设置动画延迟开始的时间
	         * @param  {number} time 单位ms
	         * @return {module:zrender/animation/Animator}
	         */
	        delay: function (time) {
	            this._delay = time;
	            return this;
	        },
	        /**
	         * 添加动画结束的回调
	         * @param  {Function} cb
	         * @return {module:zrender/animation/Animator}
	         */
	        done: function(cb) {
	            if (cb) {
	                this._doneList.push(cb);
	            }
	            return this;
	        },
	
	        /**
	         * @return {Array.<module:zrender/animation/Clip>}
	         */
	        getClips: function () {
	            return this._clipList;
	        }
	    };
	
	    module.exports = Animator;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */
	
	
	    var easingFuncs = __webpack_require__(59);
	
	    function Clip(options) {
	
	        this._target = options.target;
	
	        // 生命周期
	        this._life = options.life || 1000;
	        // 延时
	        this._delay = options.delay || 0;
	        // 开始时间
	        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	        this._initialized = false;
	
	        // 是否循环
	        this.loop = options.loop == null ? false : options.loop;
	
	        this.gap = options.gap || 0;
	
	        this.easing = options.easing || 'Linear';
	
	        this.onframe = options.onframe;
	        this.ondestroy = options.ondestroy;
	        this.onrestart = options.onrestart;
	    }
	
	    Clip.prototype = {
	
	        constructor: Clip,
	
	        step: function (globalTime) {
	            // Set startTime on first step, or _startTime may has milleseconds different between clips
	            // PENDING
	            if (!this._initialized) {
	                this._startTime = globalTime + this._delay;
	                this._initialized = true;
	            }
	
	            var percent = (globalTime - this._startTime) / this._life;
	
	            // 还没开始
	            if (percent < 0) {
	                return;
	            }
	
	            percent = Math.min(percent, 1);
	
	            var easing = this.easing;
	            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	            var schedule = typeof easingFunc === 'function'
	                ? easingFunc(percent)
	                : percent;
	
	            this.fire('frame', schedule);
	
	            // 结束
	            if (percent == 1) {
	                if (this.loop) {
	                    this.restart (globalTime);
	                    // 重新开始周期
	                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                    return 'restart';
	                }
	
	                // 动画完成将这个控制器标识为待删除
	                // 在Animation.update中进行批量删除
	                this._needsRemove = true;
	                return 'destroy';
	            }
	
	            return null;
	        },
	
	        restart: function (globalTime) {
	            var remainder = (globalTime - this._startTime) % this._life;
	            this._startTime = globalTime - remainder + this.gap;
	
	            this._needsRemove = false;
	        },
	
	        fire: function(eventType, arg) {
	            eventType = 'on' + eventType;
	            if (this[eventType]) {
	                this[eventType](this._target, arg);
	            }
	        }
	    };
	
	    module.exports = Clip;
	


/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */
	
	    var easing = {
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        linear: function (k) {
	            return k;
	        },
	
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticIn: function (k) {
	            return k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticOut: function (k) {
	            return k * (2 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k;
	            }
	            return -0.5 * (--k * (k - 2) - 1);
	        },
	
	        // 三次方的缓动（t^3）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicIn: function (k) {
	            return k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicOut: function (k) {
	            return --k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k + 2);
	        },
	
	        // 四次方的缓动（t^4）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticIn: function (k) {
	            return k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticOut: function (k) {
	            return 1 - (--k * k * k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k;
	            }
	            return -0.5 * ((k -= 2) * k * k * k - 2);
	        },
	
	        // 五次方的缓动（t^5）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticIn: function (k) {
	            return k * k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticOut: function (k) {
	            return --k * k * k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k * k * k + 2);
	        },
	
	        // 正弦曲线的缓动（sin(t)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalIn: function (k) {
	            return 1 - Math.cos(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalOut: function (k) {
	            return Math.sin(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalInOut: function (k) {
	            return 0.5 * (1 - Math.cos(Math.PI * k));
	        },
	
	        // 指数曲线的缓动（2^t）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialIn: function (k) {
	            return k === 0 ? 0 : Math.pow(1024, k - 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialOut: function (k) {
	            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialInOut: function (k) {
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if ((k *= 2) < 1) {
	                return 0.5 * Math.pow(1024, k - 1);
	            }
	            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	        },
	
	        // 圆形曲线的缓动（sqrt(1-t^2)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularIn: function (k) {
	            return 1 - Math.sqrt(1 - k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularOut: function (k) {
	            return Math.sqrt(1 - (--k * k));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return -0.5 * (Math.sqrt(1 - k * k) - 1);
	            }
	            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	        },
	
	        // 创建类似于弹簧在停止前来回振荡的动画
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticIn: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return -(a * Math.pow(2, 10 * (k -= 1)) *
	                        Math.sin((k - s) * (2 * Math.PI) / p));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return (a * Math.pow(2, -10 * k) *
	                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticInOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            if ((k *= 2) < 1) {
	                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p));
	            }
	            return a * Math.pow(2, -10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	
	        },
	
	        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backIn: function (k) {
	            var s = 1.70158;
	            return k * k * ((s + 1) * k - s);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backOut: function (k) {
	            var s = 1.70158;
	            return --k * k * ((s + 1) * k + s) + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backInOut: function (k) {
	            var s = 1.70158 * 1.525;
	            if ((k *= 2) < 1) {
	                return 0.5 * (k * k * ((s + 1) * k - s));
	            }
	            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	        },
	
	        // 创建弹跳效果
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceIn: function (k) {
	            return 1 - easing.bounceOut(1 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceOut: function (k) {
	            if (k < (1 / 2.75)) {
	                return 7.5625 * k * k;
	            }
	            else if (k < (2 / 2.75)) {
	                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	            }
	            else if (k < (2.5 / 2.75)) {
	                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	            }
	            else {
	                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	            }
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceInOut: function (k) {
	            if (k < 0.5) {
	                return easing.bounceIn(k * 2) * 0.5;
	            }
	            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	        }
	    };
	
	    module.exports = easing;
	
	


/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * @module zrender/tool/color
	 */
	
	
	    var kCSSColorTable = {
	        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
	        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
	        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
	        'beige': [245,245,220,1], 'bisque': [255,228,196,1],
	        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
	        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
	        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
	        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
	        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
	        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
	        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
	        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
	        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
	        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
	        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
	        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
	        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
	        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
	        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
	        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
	        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
	        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
	        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
	        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
	        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
	        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
	        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
	        'gray': [128,128,128,1], 'green': [0,128,0,1],
	        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
	        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
	        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
	        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
	        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
	        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
	        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
	        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
	        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
	        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
	        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
	        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
	        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
	        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
	        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
	        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
	        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
	        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
	        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
	        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
	        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
	        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
	        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
	        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
	        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
	        'orange': [255,165,0,1], 'orangered': [255,69,0,1],
	        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
	        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
	        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
	        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
	        'pink': [255,192,203,1], 'plum': [221,160,221,1],
	        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
	        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
	        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
	        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
	        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
	        'sienna': [160,82,45,1], 'silver': [192,192,192,1],
	        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
	        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
	        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
	        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
	        'teal': [0,128,128,1], 'thistle': [216,191,216,1],
	        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
	        'violet': [238,130,238,1], 'wheat': [245,222,179,1],
	        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
	        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
	    };
	
	    function clampCssByte(i) {  // Clamp to integer 0 .. 255.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 255 ? 255 : i;
	    }
	
	    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 360 ? 360 : i;
	    }
	
	    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
	        return f < 0 ? 0 : f > 1 ? 1 : f;
	    }
	
	    function parseCssInt(str) {  // int or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssByte(parseFloat(str) / 100 * 255);
	        }
	        return clampCssByte(parseInt(str, 10));
	    }
	
	    function parseCssFloat(str) {  // float or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssFloat(parseFloat(str) / 100);
	        }
	        return clampCssFloat(parseFloat(str));
	    }
	
	    function cssHueToRgb(m1, m2, h) {
	        if (h < 0) {
	            h += 1;
	        }
	        else if (h > 1) {
	            h -= 1;
	        }
	
	        if (h * 6 < 1) {
	            return m1 + (m2 - m1) * h * 6;
	        }
	        if (h * 2 < 1) {
	            return m2;
	        }
	        if (h * 3 < 2) {
	            return m1 + (m2 - m1) * (2/3 - h) * 6;
	        }
	        return m1;
	    }
	
	    function lerp(a, b, p) {
	        return a + (b - a) * p;
	    }
	
	    /**
	     * @param {string} colorStr
	     * @return {Array.<number>}
	     * @memberOf module:zrender/util/color
	     */
	    function parse(colorStr) {
	        if (!colorStr) {
	            return;
	        }
	        // colorStr may be not string
	        colorStr = colorStr + '';
	        // Remove all whitespace, not compliant, but should just be more accepting.
	        var str = colorStr.replace(/ /g, '').toLowerCase();
	
	        // Color keywords (and transparent) lookup.
	        if (str in kCSSColorTable) {
	            return kCSSColorTable[str].slice();  // dup.
	        }
	
	        // #abc and #abc123 syntax.
	        if (str.charAt(0) === '#') {
	            if (str.length === 4) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xfff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
	                    (iv & 0xf0) | ((iv & 0xf0) >> 4),
	                    (iv & 0xf) | ((iv & 0xf) << 4),
	                    1
	                ];
	            }
	            else if (str.length === 7) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xffffff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    (iv & 0xff0000) >> 16,
	                    (iv & 0xff00) >> 8,
	                    iv & 0xff,
	                    1
	                ];
	            }
	
	            return;
	        }
	        var op = str.indexOf('('), ep = str.indexOf(')');
	        if (op !== -1 && ep + 1 === str.length) {
	            var fname = str.substr(0, op);
	            var params = str.substr(op + 1, ep - (op + 1)).split(',');
	            var alpha = 1;  // To allow case fallthrough.
	            switch (fname) {
	                case 'rgba':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    alpha = parseCssFloat(params.pop()); // jshint ignore:line
	                // Fall through.
	                case 'rgb':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return [
	                        parseCssInt(params[0]),
	                        parseCssInt(params[1]),
	                        parseCssInt(params[2]),
	                        alpha
	                    ];
	                case 'hsla':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    params[3] = parseCssFloat(params[3]);
	                    return hsla2rgba(params);
	                case 'hsl':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return hsla2rgba(params);
	                default:
	                    return;
	            }
	        }
	
	        return;
	    }
	
	    /**
	     * @param {Array.<number>} hsla
	     * @return {Array.<number>} rgba
	     */
	    function hsla2rgba(hsla) {
	        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parseCssFloat(hsla[1]);
	        var l = parseCssFloat(hsla[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;
	
	        var rgba = [
	            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)
	        ];
	
	        if (hsla.length === 4) {
	            rgba[3] = hsla[3];
	        }
	
	        return rgba;
	    }
	
	    /**
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} hsla
	     */
	    function rgba2hsla(rgba) {
	        if (!rgba) {
	            return;
	        }
	
	        // RGB from 0 to 255
	        var R = rgba[0] / 255;
	        var G = rgba[1] / 255;
	        var B = rgba[2] / 255;
	
	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value
	
	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }
	
	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;
	
	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }
	
	            if (H < 0) {
	                H += 1;
	            }
	
	            if (H > 1) {
	                H -= 1;
	            }
	        }
	
	        var hsla = [H * 360, S, L];
	
	        if (rgba[3] != null) {
	            hsla.push(rgba[3]);
	        }
	
	        return hsla;
	    }
	
	    /**
	     * @param {string} color
	     * @param {number} level
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function lift(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            for (var i = 0; i < 3; i++) {
	                if (level < 0) {
	                    colorArr[i] = colorArr[i] * (1 - level) | 0;
	                }
	                else {
	                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
	                }
	            }
	            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	        }
	    }
	
	    /**
	     * @param {string} color
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function toHex(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
	        }
	    }
	
	    /**
	     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<Array.<number>>} colors List of rgba color array
	     * @param {Array.<number>} [out] Mapped gba color array
	     * @return {Array.<number>}
	     */
	    function fastMapToColor(normalizedValue, colors, out) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }
	        out = out || [0, 0, 0, 0];
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = colors[leftIndex];
	        var rightColor = colors[rightIndex];
	        var dv = value - leftIndex;
	        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	        return out;
	    }
	    /**
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<string>} colors Color list.
	     * @param {boolean=} fullOutput Default false.
	     * @return {(string|Object)} Result color. If fullOutput,
	     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	     * @memberOf module:zrender/util/color
	     */
	    function mapToColor(normalizedValue, colors, fullOutput) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }
	
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = parse(colors[leftIndex]);
	        var rightColor = parse(colors[rightIndex]);
	        var dv = value - leftIndex;
	
	        var color = stringify(
	            [
	                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
	                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
	                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
	                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
	            ],
	            'rgba'
	        );
	
	        return fullOutput
	            ? {
	                color: color,
	                leftIndex: leftIndex,
	                rightIndex: rightIndex,
	                value: value
	            }
	            : color;
	    }
	
	    /**
	     * @param {string} color
	     * @param {number=} h 0 ~ 360, ignore when null.
	     * @param {number=} s 0 ~ 1, ignore when null.
	     * @param {number=} l 0 ~ 1, ignore when null.
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyHSL(color, h, s, l) {
	        color = parse(color);
	
	        if (color) {
	            color = rgba2hsla(color);
	            h != null && (color[0] = clampCssAngle(h));
	            s != null && (color[1] = parseCssFloat(s));
	            l != null && (color[2] = parseCssFloat(l));
	
	            return stringify(hsla2rgba(color), 'rgba');
	        }
	    }
	
	    /**
	     * @param {string} color
	     * @param {number=} alpha 0 ~ 1
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyAlpha(color, alpha) {
	        color = parse(color);
	
	        if (color && alpha != null) {
	            color[3] = clampCssFloat(alpha);
	            return stringify(color, 'rgba');
	        }
	    }
	
	    /**
	     * @param {Array.<string>} colors Color list.
	     * @param {string} type 'rgba', 'hsva', ...
	     * @return {string} Result color.
	     */
	    function stringify(arrColor, type) {
	        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	            colorStr += ',' + arrColor[3];
	        }
	        return type + '(' + colorStr + ')';
	    }
	
	    module.exports = {
	        parse: parse,
	        lift: lift,
	        toHex: toHex,
	        fastMapToColor: fastMapToColor,
	        mapToColor: mapToColor,
	        modifyHSL: modifyHSL,
	        modifyAlpha: modifyAlpha,
	        stringify: stringify
	    };
	
	


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	
	        var config = __webpack_require__(62);
	
	        /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	        module.exports = function() {
	            if (config.debugMode === 0) {
	                return;
	            }
	            else if (config.debugMode == 1) {
	                for (var k in arguments) {
	                    throw new Error(arguments[k]);
	                }
	            }
	            else if (config.debugMode > 1) {
	                for (var k in arguments) {
	                    console.log(arguments[k]);
	                }
	            }
	        };
	
	        /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>'
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	    


/***/ },
/* 62 */
/***/ function(module, exports) {

	
	    var dpr = 1;
	    // If in browser environment
	    if (typeof window !== 'undefined') {
	        dpr = Math.max(window.devicePixelRatio || 1, 1);
	    }
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	        /**
	         * debug日志选项：catchBrushException为true下有效
	         * 0 : 不生成debug数据，发布用
	         * 1 : 异常抛出，调试用
	         * 2 : 控制台输出，调试用
	         */
	        debugMode: 0,
	
	        // retina 屏幕优化
	        devicePixelRatio: dpr
	    };
	    module.exports = config;
	
	


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var Group = __webpack_require__(51);
	    var componentUtil = __webpack_require__(41);
	    var clazzUtil = __webpack_require__(34);
	    var modelUtil = __webpack_require__(26);
	    var zrUtil = __webpack_require__(25);
	
	    function Chart() {
	
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();
	
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewChart');
	    }
	
	    Chart.prototype = {
	
	        type: 'chart',
	
	        /**
	         * Init the chart
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        init: function (ecModel, api) {},
	
	        /**
	         * Render the chart
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        render: function (seriesModel, ecModel, api, payload) {},
	
	        /**
	         * Highlight series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        highlight: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	        },
	
	        /**
	         * Downplay series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        downplay: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'normal');
	        },
	
	        /**
	         * Remove self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        remove: function (ecModel, api) {
	            this.group.removeAll();
	        },
	
	        /**
	         * Dispose self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        dispose: function () {}
	
	        /**
	         * The view contains the given point.
	         * @interface
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        // containPoint: function () {}
	
	    };
	
	    var chartProto = Chart.prototype;
	    chartProto.updateView
	        = chartProto.updateLayout
	        = chartProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            this.render(seriesModel, ecModel, api, payload);
	        };
	
	    /**
	     * Set state of single element
	     * @param  {module:zrender/Element} el
	     * @param  {string} state
	     */
	    function elSetState(el, state) {
	        if (el) {
	            el.trigger(state);
	            if (el.type === 'group') {
	                for (var i = 0; i < el.childCount(); i++) {
	                    elSetState(el.childAt(i), state);
	                }
	            }
	        }
	    }
	    /**
	     * @param  {module:echarts/data/List} data
	     * @param  {Object} payload
	     * @param  {string} state 'normal'|'emphasis'
	     * @inner
	     */
	    function toggleHighlight(data, payload, state) {
	        var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	        if (dataIndex != null) {
	            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	                elSetState(data.getItemGraphicEl(dataIdx), state);
	            });
	        }
	        else {
	            data.eachItemGraphicEl(function (el) {
	                elSetState(el, state);
	            });
	        }
	    }
	
	    // Enable Chart.extend.
	    clazzUtil.enableClassExtend(Chart, ['dispose']);
	
	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});
	
	    module.exports = Chart;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var pathTool = __webpack_require__(65);
	    var round = Math.round;
	    var Path = __webpack_require__(66);
	    var colorTool = __webpack_require__(60);
	    var matrix = __webpack_require__(32);
	    var vector = __webpack_require__(31);
	
	    var graphic = {};
	
	    graphic.Group = __webpack_require__(51);
	
	    graphic.Image = __webpack_require__(82);
	
	    graphic.Text = __webpack_require__(84);
	
	    graphic.Circle = __webpack_require__(85);
	
	    graphic.Sector = __webpack_require__(86);
	
	    graphic.Ring = __webpack_require__(87);
	
	    graphic.Polygon = __webpack_require__(88);
	
	    graphic.Polyline = __webpack_require__(92);
	
	    graphic.Rect = __webpack_require__(93);
	
	    graphic.Line = __webpack_require__(95);
	
	    graphic.BezierCurve = __webpack_require__(96);
	
	    graphic.Arc = __webpack_require__(97);
	
	    graphic.CompoundPath = __webpack_require__(98);
	
	    graphic.LinearGradient = __webpack_require__(99);
	
	    graphic.RadialGradient = __webpack_require__(101);
	
	    graphic.BoundingRect = __webpack_require__(30);
	
	    /**
	     * Extend shape with parameters
	     */
	    graphic.extendShape = function (opts) {
	        return Path.extend(opts);
	    };
	
	    /**
	     * Extend path
	     */
	    graphic.extendPath = function (pathData, opts) {
	        return pathTool.extendFromString(pathData, opts);
	    };
	
	    /**
	     * Create a path element from path data string
	     * @param {string} pathData
	     * @param {Object} opts
	     * @param {module:zrender/core/BoundingRect} rect
	     * @param {string} [layout=cover] 'center' or 'cover'
	     */
	    graphic.makePath = function (pathData, opts, rect, layout) {
	        var path = pathTool.createFromString(pathData, opts);
	        var boundingRect = path.getBoundingRect();
	        if (rect) {
	            var aspect = boundingRect.width / boundingRect.height;
	
	            if (layout === 'center') {
	                // Set rect to center, keep width / height ratio.
	                var width = rect.height * aspect;
	                var height;
	                if (width <= rect.width) {
	                    height = rect.height;
	                }
	                else {
	                    width = rect.width;
	                    height = width / aspect;
	                }
	                var cx = rect.x + rect.width / 2;
	                var cy = rect.y + rect.height / 2;
	
	                rect.x = cx - width / 2;
	                rect.y = cy - height / 2;
	                rect.width = width;
	                rect.height = height;
	            }
	
	            graphic.resizePath(path, rect);
	        }
	        return path;
	    };
	
	    graphic.mergePath = pathTool.mergePath,
	
	    /**
	     * Resize a path to fit the rect
	     * @param {module:zrender/graphic/Path} path
	     * @param {Object} rect
	     */
	    graphic.resizePath = function (path, rect) {
	        if (!path.applyTransform) {
	            return;
	        }
	
	        var pathRect = path.getBoundingRect();
	
	        var m = pathRect.calculateTransform(rect);
	
	        path.applyTransform(m);
	    };
	
	    /**
	     * Sub pixel optimize line for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x1]
	     * @param {number} [param.shape.y1]
	     * @param {number} [param.shape.x2]
	     * @param {number} [param.shape.y2]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeLine = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	
	        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	        }
	        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	        }
	        return param;
	    };
	
	    /**
	     * Sub pixel optimize rect for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x]
	     * @param {number} [param.shape.y]
	     * @param {number} [param.shape.width]
	     * @param {number} [param.shape.height]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeRect = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	        var originX = shape.x;
	        var originY = shape.y;
	        var originWidth = shape.width;
	        var originHeight = shape.height;
	        shape.x = subPixelOptimize(shape.x, lineWidth, true);
	        shape.y = subPixelOptimize(shape.y, lineWidth, true);
	        shape.width = Math.max(
	            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,
	            originWidth === 0 ? 0 : 1
	        );
	        shape.height = Math.max(
	            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,
	            originHeight === 0 ? 0 : 1
	        );
	        return param;
	    };
	
	    /**
	     * Sub pixel optimize for canvas
	     *
	     * @param {number} position Coordinate, such as x, y
	     * @param {number} lineWidth Should be nonnegative integer.
	     * @param {boolean=} positiveOrNegative Default false (negative).
	     * @return {number} Optimized position.
	     */
	    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	        // Assure that (position + lineWidth / 2) is near integer edge,
	        // otherwise line will be fuzzy in canvas.
	        var doubledPosition = round(position * 2);
	        return (doubledPosition + round(lineWidth)) % 2 === 0
	            ? doubledPosition / 2
	            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	    };
	
	    function hasFillOrStroke(fillOrStroke) {
	        return fillOrStroke != null && fillOrStroke != 'none';
	    }
	
	    function liftColor(color) {
	        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	    }
	
	    /**
	     * @private
	     */
	    function cacheElementStl(el) {
	        if (el.__hoverStlDirty) {
	            var stroke = el.style.stroke;
	            var fill = el.style.fill;
	
	            // Create hoverStyle on mouseover
	            var hoverStyle = el.__hoverStl;
	            hoverStyle.fill = hoverStyle.fill
	                || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	            hoverStyle.stroke = hoverStyle.stroke
	                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);
	
	            var normalStyle = {};
	            for (var name in hoverStyle) {
	                if (hoverStyle.hasOwnProperty(name)) {
	                    normalStyle[name] = el.style[name];
	                }
	            }
	
	            el.__normalStl = normalStyle;
	
	            el.__hoverStlDirty = false;
	        }
	    }
	
	    /**
	     * @private
	     */
	    function doSingleEnterHover(el) {
	        if (el.__isHover) {
	            return;
	        }
	
	        cacheElementStl(el);
	
	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.addHover(el, el.__hoverStl);
	        }
	        else {
	            el.setStyle(el.__hoverStl);
	            el.z2 += 1;
	        }
	
	        el.__isHover = true;
	    }
	
	    /**
	     * @inner
	     */
	    function doSingleLeaveHover(el) {
	        if (!el.__isHover) {
	            return;
	        }
	
	        var normalStl = el.__normalStl;
	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.removeHover(el);
	        }
	        else {
	            normalStl && el.setStyle(normalStl);
	            el.z2 -= 1;
	        }
	
	        el.__isHover = false;
	    }
	
	    /**
	     * @inner
	     */
	    function doEnterHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleEnterHover(child);
	                }
	            })
	            : doSingleEnterHover(el);
	    }
	
	    function doLeaveHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleLeaveHover(child);
	                }
	            })
	            : doSingleLeaveHover(el);
	    }
	
	    /**
	     * @inner
	     */
	    function setElementHoverStl(el, hoverStl) {
	        // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	        // Often used when item group has a label element and it's hoverStyle is different
	        el.__hoverStl = el.hoverStyle || hoverStl || {};
	        el.__hoverStlDirty = true;
	
	        if (el.__isHover) {
	            cacheElementStl(el);
	        }
	    }
	
	    /**
	     * @inner
	     */
	    function onElementMouseOver(e) {
	        if (this.__hoverSilentOnTouch && e.zrByTouch) {
	            return;
	        }
	
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doEnterHover(this);
	    }
	
	    /**
	     * @inner
	     */
	    function onElementMouseOut(e) {
	        if (this.__hoverSilentOnTouch && e.zrByTouch) {
	            return;
	        }
	
	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doLeaveHover(this);
	    }
	
	    /**
	     * @inner
	     */
	    function enterEmphasis() {
	        this.__isEmphasis = true;
	        doEnterHover(this);
	    }
	
	    /**
	     * @inner
	     */
	    function leaveEmphasis() {
	        this.__isEmphasis = false;
	        doLeaveHover(this);
	    }
	
	    /**
	     * Set hover style of element
	     * @param {module:zrender/Element} el
	     * @param {Object} [hoverStyle]
	     * @param {Object} [opt]
	     * @param {boolean} [opt.hoverSilentOnTouch=false]
	     *        In touch device, mouseover event will be trigger on touchstart event
	     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	     *        conviniently use hoverStyle when tap on touch screen without additional
	     *        code for compatibility.
	     *        But if the chart/component has select feature, which usually also use
	     *        hoverStyle, there might be conflict between 'select-highlight' and
	     *        'hover-highlight' especially when roam is enabled (see geo for example).
	     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	     *        on touch device.
	     */
	    graphic.setHoverStyle = function (el, hoverStyle, opt) {
	        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;
	
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    setElementHoverStl(child, hoverStyle);
	                }
	            })
	            : setElementHoverStl(el, hoverStyle);
	
	        // Duplicated function will be auto-ignored, see Eventful.js.
	        el.on('mouseover', onElementMouseOver)
	          .on('mouseout', onElementMouseOut);
	
	        // Emphasis, normal can be triggered manually
	        el.on('emphasis', enterEmphasis)
	          .on('normal', leaveEmphasis);
	    };
	
	    /**
	     * Set text option in the style
	     * @param {Object} textStyle
	     * @param {module:echarts/model/Model} labelModel
	     * @param {string} color
	     */
	    graphic.setText = function (textStyle, labelModel, color) {
	        var labelPosition = labelModel.getShallow('position') || 'inside';
	        var labelOffset = labelModel.getShallow('offset');
	        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	        var textStyleModel = labelModel.getModel('textStyle');
	        zrUtil.extend(textStyle, {
	            textDistance: labelModel.getShallow('distance') || 5,
	            textFont: textStyleModel.getFont(),
	            textPosition: labelPosition,
	            textOffset: labelOffset,
	            textFill: textStyleModel.getTextColor() || labelColor
	        });
	    };
	
	    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	        if (typeof dataIndex === 'function') {
	            cb = dataIndex;
	            dataIndex = null;
	        }
	        // Do not check 'animation' property directly here. Consider this case:
	        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	        // but its parent model (`seriesModel`) does.
	        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();
	
	        if (animationEnabled) {
	            var postfix = isUpdate ? 'Update' : '';
	            var duration = animatableModel.getShallow('animationDuration' + postfix);
	            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);
	            if (typeof animationDelay === 'function') {
	                animationDelay = animationDelay(
	                    dataIndex,
	                    animatableModel.getAnimationDelayParams
	                        ? animatableModel.getAnimationDelayParams(el, dataIndex)
	                        : null
	                );
	            }
	            if (typeof duration === 'function') {
	                duration = duration(dataIndex);
	            }
	
	            duration > 0
	                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)
	                : (el.attr(props), cb && cb());
	        }
	        else {
	            el.attr(props);
	            cb && cb();
	        }
	    }
	
	    /**
	     * Update graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} [cb]
	     * @example
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	     *     // Or
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, function () { console.log('Animation done!'); });
	     */
	    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	    };
	
	    /**
	     * Init graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} cb
	     */
	    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	    };
	
	    /**
	     * Get transform matrix of target (param target),
	     * in coordinate of its ancestor (param ancestor)
	     *
	     * @param {module:zrender/mixin/Transformable} target
	     * @param {module:zrender/mixin/Transformable} [ancestor]
	     */
	    graphic.getTransform = function (target, ancestor) {
	        var mat = matrix.identity([]);
	
	        while (target && target !== ancestor) {
	            matrix.mul(mat, target.getLocalTransform(), mat);
	            target = target.parent;
	        }
	
	        return mat;
	    };
	
	    /**
	     * Apply transform to an vertex.
	     * @param {Array.<number>} vertex [x, y]
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {Array.<number>} [x, y]
	     */
	    graphic.applyTransform = function (vertex, transform, invert) {
	        if (invert) {
	            transform = matrix.invert([], transform);
	        }
	        return vector.applyTransform([], vertex, transform);
	    };
	
	    /**
	     * @param {string} direction 'left' 'right' 'top' 'bottom'
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	     */
	    graphic.transformDirection = function (direction, transform, invert) {
	
	        // Pick a base, ensure that transform result will not be (0, 0).
	        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[0]);
	        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[2]);
	
	        var vertex = [
	            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,
	            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0
	        ];
	
	        vertex = graphic.applyTransform(vertex, transform, invert);
	
	        return Math.abs(vertex[0]) > Math.abs(vertex[1])
	            ? (vertex[0] > 0 ? 'right' : 'left')
	            : (vertex[1] > 0 ? 'bottom' : 'top');
	    };
	
	    /**
	     * Apply group transition animation from g1 to g2
	     */
	    graphic.groupTransition = function (g1, g2, animatableModel, cb) {
	        if (!g1 || !g2) {
	            return;
	        }
	
	        function getElMap(g) {
	            var elMap = {};
	            g.traverse(function (el) {
	                if (!el.isGroup && el.anid) {
	                    elMap[el.anid] = el;
	                }
	            });
	            return elMap;
	        }
	        function getAnimatableProps(el) {
	            var obj = {
	                position: vector.clone(el.position),
	                rotation: el.rotation
	            };
	            if (el.shape) {
	                obj.shape = zrUtil.extend({}, el.shape);
	            }
	            return obj;
	        }
	        var elMap1 = getElMap(g1);
	
	        g2.traverse(function (el) {
	            if (!el.isGroup && el.anid) {
	                var oldEl = elMap1[el.anid];
	                if (oldEl) {
	                    var newProp = getAnimatableProps(el);
	                    el.attr(getAnimatableProps(oldEl));
	                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);
	                }
	                // else {
	                //     if (el.previousProps) {
	                //         graphic.updateProps
	                //     }
	                // }
	            }
	        });
	    };
	
	    module.exports = graphic;
	


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var Path = __webpack_require__(66);
	    var PathProxy = __webpack_require__(70);
	    var transformPath = __webpack_require__(81);
	    var matrix = __webpack_require__(32);
	
	    // command chars
	    var cc = [
	        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
	        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
	    ];
	
	    var mathSqrt = Math.sqrt;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	    var PI = Math.PI;
	
	    var vMag = function(v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	    };
	    var vRatio = function(u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	    };
	    var vAngle = function(u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)
	                * Math.acos(vRatio(u, v));
	    };
	
	    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	        var psi = psiDeg * (PI / 180.0);
	        var xp = mathCos(psi) * (x1 - x2) / 2.0
	                 + mathSin(psi) * (y1 - y2) / 2.0;
	        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0
	                 + mathCos(psi) * (y1 - y2) / 2.0;
	
	        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
	
	        if (lambda > 1) {
	            rx *= mathSqrt(lambda);
	            ry *= mathSqrt(lambda);
	        }
	
	        var f = (fa === fs ? -1 : 1)
	            * mathSqrt((((rx * rx) * (ry * ry))
	                    - ((rx * rx) * (yp * yp))
	                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)
	                    + (ry * ry) * (xp * xp))
	                ) || 0;
	
	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;
	
	        var cx = (x1 + x2) / 2.0
	                 + mathCos(psi) * cxp
	                 - mathSin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0
	                + mathSin(psi) * cxp
	                + mathCos(psi) * cyp;
	
	        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);
	        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];
	        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];
	        var dTheta = vAngle(u, v);
	
	        if (vRatio(u, v) <= -1) {
	            dTheta = PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * PI;
	        }
	
	        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	    }
	
	    function createPathProxyFromString(data) {
	        if (!data) {
	            return [];
	        }
	
	        // command string
	        var cs = data.replace(/-/g, ' -')
	            .replace(/  /g, ' ')
	            .replace(/ /g, ',')
	            .replace(/,,/g, ',');
	
	        var n;
	        // create pipes so that we can split the data
	        for (n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }
	
	        // create array
	        var arr = cs.split('|');
	        // init context point
	        var cpx = 0;
	        var cpy = 0;
	
	        var path = new PathProxy();
	        var CMD = PathProxy.CMD;
	
	        var prevCmd;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            var off = 0;
	            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	            var cmd;
	
	            if (p.length > 0 && p[0] === '') {
	                p.shift();
	            }
	
	            for (var i = 0; i < p.length; i++) {
	                p[i] = parseFloat(p[i]);
	            }
	            while (off < p.length && !isNaN(p[off])) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var ctlPtx;
	                var ctlPty;
	
	                var rx;
	                var ry;
	                var psi;
	                var fa;
	                var fs;
	
	                var x1 = cpx;
	                var y1 = cpy;
	
	                // convert l, H, h, V, and v to L
	                switch (c) {
	                    case 'l':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'L':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'm':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'l';
	                        break;
	                    case 'M':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'L';
	                        break;
	                    case 'h':
	                        cpx += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'H':
	                        cpx = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'v':
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'V':
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'C':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]
	                        );
	                        cpx = p[off - 2];
	                        cpy = p[off - 1];
	                        break;
	                    case 'c':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy
	                        );
	                        cpx += p[off - 2];
	                        cpy += p[off - 1];
	                        break;
	                    case 'S':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 's':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = cpx + p[off++];
	                        y1 = cpy + p[off++];
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 'Q':
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'q':
	                        x1 = p[off++] + cpx;
	                        y1 = p[off++] + cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'T':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 't':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 'A':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];
	
	                        x1 = cpx, y1 = cpy;
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                    case 'a':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];
	
	                        x1 = cpx, y1 = cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                }
	            }
	
	            if (c === 'z' || c === 'Z') {
	                cmd = CMD.Z;
	                path.addData(cmd);
	            }
	
	            prevCmd = cmd;
	        }
	
	        path.toStatic();
	
	        return path;
	    }
	
	    // TODO Optimize double memory cost problem
	    function createPathOptions(str, opts) {
	        var pathProxy = createPathProxyFromString(str);
	        var transform;
	        opts = opts || {};
	        opts.buildPath = function (path) {
	            path.setData(pathProxy.data);
	            transform && transformPath(path, transform);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };
	
	        opts.applyTransform = function (m) {
	            if (!transform) {
	                transform = matrix.create();
	            }
	            matrix.mul(transform, m, transform);
	            this.dirty(true);
	        };
	
	        return opts;
	    }
	
	    module.exports = {
	        /**
	         * Create a Path object from path string data
	         * http://www.w3.org/TR/SVG/paths.html#PathData
	         * @param  {Object} opts Other options
	         */
	        createFromString: function (str, opts) {
	            return new Path(createPathOptions(str, opts));
	        },
	
	        /**
	         * Create a Path class from path string data
	         * @param  {string} str
	         * @param  {Object} opts Other options
	         */
	        extendFromString: function (str, opts) {
	            return Path.extend(createPathOptions(str, opts));
	        },
	
	        /**
	         * Merge multiple paths
	         */
	        // TODO Apply transform
	        // TODO stroke dash
	        // TODO Optimize double memory cost problem
	        mergePath: function (pathEls, opts) {
	            var pathList = [];
	            var len = pathEls.length;
	            for (var i = 0; i < len; i++) {
	                var pathEl = pathEls[i];
	                if (pathEl.__dirty) {
	                    pathEl.buildPath(pathEl.path, pathEl.shape, true);
	                }
	                pathList.push(pathEl.path);
	            }
	
	            var pathBundle = new Path(opts);
	            pathBundle.buildPath = function (path) {
	                path.appendPath(pathList);
	                // Svg and vml renderer don't have context
	                var ctx = path.getContext();
	                if (ctx) {
	                    path.rebuildPath(ctx);
	                }
	            };
	
	            return pathBundle;
	        }
	    };


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Path element
	 * @module zrender/graphic/Path
	 */
	
	
	
	    var Displayable = __webpack_require__(67);
	    var zrUtil = __webpack_require__(25);
	    var PathProxy = __webpack_require__(70);
	    var pathContain = __webpack_require__(73);
	
	    var Pattern = __webpack_require__(80);
	    var getCanvasPattern = Pattern.prototype.getCanvasPattern;
	
	    var abs = Math.abs;
	
	    /**
	     * @alias module:zrender/graphic/Path
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function Path(opts) {
	        Displayable.call(this, opts);
	
	        /**
	         * @type {module:zrender/core/PathProxy}
	         * @readOnly
	         */
	        this.path = new PathProxy();
	    }
	
	    Path.prototype = {
	
	        constructor: Path,
	
	        type: 'path',
	
	        __dirtyPath: true,
	
	        strokeContainThreshold: 5,
	
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var path = this.path;
	            var hasStroke = style.hasStroke();
	            var hasFill = style.hasFill();
	            var fill = style.fill;
	            var stroke = style.stroke;
	            var hasFillGradient = hasFill && !!(fill.colorStops);
	            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);
	            var hasFillPattern = hasFill && !!(fill.image);
	            var hasStrokePattern = hasStroke && !!(stroke.image);
	
	            style.bind(ctx, this, prevEl);
	            this.setTransform(ctx);
	
	            if (this.__dirty) {
	                var rect = this.getBoundingRect();
	                // Update gradient because bounding rect may changed
	                if (hasFillGradient) {
	                    this._fillGradient = style.getGradient(ctx, fill, rect);
	                }
	                if (hasStrokeGradient) {
	                    this._strokeGradient = style.getGradient(ctx, stroke, rect);
	                }
	            }
	            // Use the gradient or pattern
	            if (hasFillGradient) {
	                // PENDING If may have affect the state
	                ctx.fillStyle = this._fillGradient;
	            }
	            else if (hasFillPattern) {
	                ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	            }
	            if (hasStrokeGradient) {
	                ctx.strokeStyle = this._strokeGradient;
	            }
	            else if (hasStrokePattern) {
	                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	            }
	
	            var lineDash = style.lineDash;
	            var lineDashOffset = style.lineDashOffset;
	
	            var ctxLineDash = !!ctx.setLineDash;
	
	            // Update path sx, sy
	            var scale = this.getGlobalScale();
	            path.setScale(scale[0], scale[1]);
	
	            // Proxy context
	            // Rebuild path in following 2 cases
	            // 1. Path is dirty
	            // 2. Path needs javascript implemented lineDash stroking.
	            //    In this case, lineDash information will not be saved in PathProxy
	            if (this.__dirtyPath || (
	                lineDash && !ctxLineDash && hasStroke
	            )) {
	                path = this.path.beginPath(ctx);
	
	                // Setting line dash before build path
	                if (lineDash && !ctxLineDash) {
	                    path.setLineDash(lineDash);
	                    path.setLineDashOffset(lineDashOffset);
	                }
	
	                this.buildPath(path, this.shape, false);
	
	                // Clear path dirty flag
	                this.__dirtyPath = false;
	            }
	            else {
	                // Replay path building
	                ctx.beginPath();
	                this.path.rebuildPath(ctx);
	            }
	
	            hasFill && path.fill(ctx);
	
	            if (lineDash && ctxLineDash) {
	                ctx.setLineDash(lineDash);
	                ctx.lineDashOffset = lineDashOffset;
	            }
	
	            hasStroke && path.stroke(ctx);
	
	            if (lineDash && ctxLineDash) {
	                // PENDING
	                // Remove lineDash
	                ctx.setLineDash([]);
	            }
	
	
	            this.restoreTransform(ctx);
	
	            // Draw rect text
	            if (style.text != null) {
	                // var rect = this.getBoundingRect();
	                this.drawRectText(ctx, this.getBoundingRect());
	            }
	        },
	
	        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	        // Like in circle
	        buildPath: function (ctx, shapeCfg, inBundle) {},
	
	        getBoundingRect: function () {
	            var rect = this._rect;
	            var style = this.style;
	            var needsUpdateRect = !rect;
	            if (needsUpdateRect) {
	                var path = this.path;
	                if (this.__dirtyPath) {
	                    path.beginPath();
	                    this.buildPath(path, this.shape, false);
	                }
	                rect = path.getBoundingRect();
	            }
	            this._rect = rect;
	
	            if (style.hasStroke()) {
	                // Needs update rect with stroke lineWidth when
	                // 1. Element changes scale or lineWidth
	                // 2. Shape is changed
	                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	                if (this.__dirty || needsUpdateRect) {
	                    rectWithStroke.copy(rect);
	                    // FIXME Must after updateTransform
	                    var w = style.lineWidth;
	                    // PENDING, Min line width is needed when line is horizontal or vertical
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	
	                    // Only add extra hover lineWidth when there are no fill
	                    if (!style.hasFill()) {
	                        w = Math.max(w, this.strokeContainThreshold || 4);
	                    }
	                    // Consider line width
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        rectWithStroke.width += w / lineScale;
	                        rectWithStroke.height += w / lineScale;
	                        rectWithStroke.x -= w / lineScale / 2;
	                        rectWithStroke.y -= w / lineScale / 2;
	                    }
	                }
	
	                // Return rect with stroke
	                return rectWithStroke;
	            }
	
	            return rect;
	        },
	
	        contain: function (x, y) {
	            var localPos = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            var style = this.style;
	            x = localPos[0];
	            y = localPos[1];
	
	            if (rect.contain(x, y)) {
	                var pathData = this.path.data;
	                if (style.hasStroke()) {
	                    var lineWidth = style.lineWidth;
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        // Only add extra hover lineWidth when there are no fill
	                        if (!style.hasFill()) {
	                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                        }
	                        if (pathContain.containStroke(
	                            pathData, lineWidth / lineScale, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                }
	                if (style.hasFill()) {
	                    return pathContain.contain(pathData, x, y);
	                }
	            }
	            return false;
	        },
	
	        /**
	         * @param  {boolean} dirtyPath
	         */
	        dirty: function (dirtyPath) {
	            if (dirtyPath == null) {
	                dirtyPath = true;
	            }
	            // Only mark dirty, not mark clean
	            if (dirtyPath) {
	                this.__dirtyPath = dirtyPath;
	                this._rect = null;
	            }
	
	            this.__dirty = true;
	
	            this.__zr && this.__zr.refresh();
	
	            // Used as a clipping path
	            if (this.__clipTarget) {
	                this.__clipTarget.dirty();
	            }
	        },
	
	        /**
	         * Alias for animate('shape')
	         * @param {boolean} loop
	         */
	        animateShape: function (loop) {
	            return this.animate('shape', loop);
	        },
	
	        // Overwrite attrKV
	        attrKV: function (key, value) {
	            // FIXME
	            if (key === 'shape') {
	                this.setShape(value);
	                this.__dirtyPath = true;
	                this._rect = null;
	            }
	            else {
	                Displayable.prototype.attrKV.call(this, key, value);
	            }
	        },
	
	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setShape: function (key, value) {
	            var shape = this.shape;
	            // Path from string may not have shape
	            if (shape) {
	                if (zrUtil.isObject(key)) {
	                    for (var name in key) {
	                        if (key.hasOwnProperty(name)) {
	                            shape[name] = key[name];
	                        }
	                    }
	                }
	                else {
	                    shape[key] = value;
	                }
	                this.dirty(true);
	            }
	            return this;
	        },
	
	        getLineScale: function () {
	            var m = this.transform;
	            // Get the line scale.
	            // Determinant of `m` means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10
	                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))
	                : 1;
	        }
	    };
	
	    /**
	     * 扩展一个 Path element, 比如星形，圆等。
	     * Extend a path element
	     * @param {Object} props
	     * @param {string} props.type Path type
	     * @param {Function} props.init Initialize
	     * @param {Function} props.buildPath Overwrite buildPath method
	     * @param {Object} [props.style] Extended default style config
	     * @param {Object} [props.shape] Extended default shape config
	     */
	    Path.extend = function (defaults) {
	        var Sub = function (opts) {
	            Path.call(this, opts);
	
	            if (defaults.style) {
	                // Extend default style
	                this.style.extendFrom(defaults.style, false);
	            }
	
	            // Extend default shape
	            var defaultShape = defaults.shape;
	            if (defaultShape) {
	                this.shape = this.shape || {};
	                var thisShape = this.shape;
	                for (var name in defaultShape) {
	                    if (
	                        ! thisShape.hasOwnProperty(name)
	                        && defaultShape.hasOwnProperty(name)
	                    ) {
	                        thisShape[name] = defaultShape[name];
	                    }
	                }
	            }
	
	            defaults.init && defaults.init.call(this, opts);
	        };
	
	        zrUtil.inherits(Sub, Path);
	
	        // FIXME 不能 extend position, rotation 等引用对象
	        for (var name in defaults) {
	            // Extending prototype values and methods
	            if (name !== 'style' && name !== 'shape') {
	                Sub.prototype[name] = defaults[name];
	            }
	        }
	
	        return Sub;
	    };
	
	    zrUtil.inherits(Path, Displayable);
	
	    module.exports = Path;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */
	
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var Style = __webpack_require__(68);
	
	    var Element = __webpack_require__(52);
	    var RectText = __webpack_require__(69);
	    // var Stateful = require('./mixin/Stateful');
	
	    /**
	     * @alias module:zrender/graphic/Displayable
	     * @extends module:zrender/Element
	     * @extends module:zrender/graphic/mixin/RectText
	     */
	    function Displayable(opts) {
	
	        opts = opts || {};
	
	        Element.call(this, opts);
	
	        // Extend properties
	        for (var name in opts) {
	            if (
	                opts.hasOwnProperty(name) &&
	                name !== 'style'
	            ) {
	                this[name] = opts[name];
	            }
	        }
	
	        /**
	         * @type {module:zrender/graphic/Style}
	         */
	        this.style = new Style(opts.style);
	
	        this._rect = null;
	        // Shapes for cascade clipping.
	        this.__clipPaths = [];
	
	        // FIXME Stateful must be mixined after style is setted
	        // Stateful.call(this, opts);
	    }
	
	    Displayable.prototype = {
	
	        constructor: Displayable,
	
	        type: 'displayable',
	
	        /**
	         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	         * Dirty flag. From which painter will determine if this displayable object needs brush
	         * @name module:zrender/graphic/Displayable#__dirty
	         * @type {boolean}
	         */
	        __dirty: true,
	
	        /**
	         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	         * If ignore drawing of the displayable object. Mouse event will still be triggered
	         * @name module:/zrender/graphic/Displayable#invisible
	         * @type {boolean}
	         * @default false
	         */
	        invisible: false,
	
	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z: 0,
	
	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z2: 0,
	
	        /**
	         * z层level，决定绘画在哪层canvas中
	         * @name module:/zrender/graphic/Displayable#zlevel
	         * @type {number}
	         * @default 0
	         */
	        zlevel: 0,
	
	        /**
	         * 是否可拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        draggable: false,
	
	        /**
	         * 是否正在拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        dragging: false,
	
	        /**
	         * 是否相应鼠标事件
	         * @name module:/zrender/graphic/Displayable#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,
	
	        /**
	         * If enable culling
	         * @type {boolean}
	         * @default false
	         */
	        culling: false,
	
	        /**
	         * Mouse cursor when hovered
	         * @name module:/zrender/graphic/Displayable#cursor
	         * @type {string}
	         */
	        cursor: 'pointer',
	
	        /**
	         * If hover area is bounding rect
	         * @name module:/zrender/graphic/Displayable#rectHover
	         * @type {string}
	         */
	        rectHover: false,
	
	        /**
	         * Render the element progressively when the value >= 0,
	         * usefull for large data.
	         * @type {number}
	         */
	        progressive: -1,
	
	        beforeBrush: function (ctx) {},
	
	        afterBrush: function (ctx) {},
	
	        /**
	         * 图形绘制方法
	         * @param {Canvas2DRenderingContext} ctx
	         */
	        // Interface
	        brush: function (ctx, prevEl) {},
	
	        /**
	         * 获取最小包围盒
	         * @return {module:zrender/core/BoundingRect}
	         */
	        // Interface
	        getBoundingRect: function () {},
	
	        /**
	         * 判断坐标 x, y 是否在图形上
	         * If displayable element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        contain: function (x, y) {
	            return this.rectContain(x, y);
	        },
	
	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            cb.call(context, this);
	        },
	
	        /**
	         * 判断坐标 x, y 是否在图形的包围盒上
	         * If bounding rect of element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        rectContain: function (x, y) {
	            var coord = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            return rect.contain(coord[0], coord[1]);
	        },
	
	        /**
	         * 标记图形元素为脏，并且在下一帧重绘
	         * Mark displayable element dirty and refresh next frame
	         */
	        dirty: function () {
	            this.__dirty = true;
	
	            this._rect = null;
	
	            this.__zr && this.__zr.refresh();
	        },
	
	        /**
	         * 图形是否会触发事件
	         * If displayable object binded any event
	         * @return {boolean}
	         */
	        // TODO, 通过 bind 绑定的事件
	        // isSilent: function () {
	        //     return !(
	        //         this.hoverable || this.draggable
	        //         || this.onmousemove || this.onmouseover || this.onmouseout
	        //         || this.onmousedown || this.onmouseup || this.onclick
	        //         || this.ondragenter || this.ondragover || this.ondragleave
	        //         || this.ondrop
	        //     );
	        // },
	        /**
	         * Alias for animate('style')
	         * @param {boolean} loop
	         */
	        animateStyle: function (loop) {
	            return this.animate('style', loop);
	        },
	
	        attrKV: function (key, value) {
	            if (key !== 'style') {
	                Element.prototype.attrKV.call(this, key, value);
	            }
	            else {
	                this.style.set(value);
	            }
	        },
	
	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setStyle: function (key, value) {
	            this.style.set(key, value);
	            this.dirty(false);
	            return this;
	        },
	
	        /**
	         * Use given style object
	         * @param  {Object} obj
	         */
	        useStyle: function (obj) {
	            this.style = new Style(obj);
	            this.dirty(false);
	            return this;
	        }
	    };
	
	    zrUtil.inherits(Displayable, Element);
	
	    zrUtil.mixin(Displayable, RectText);
	    // zrUtil.mixin(Displayable, Stateful);
	
	    module.exports = Displayable;


/***/ },
/* 68 */
/***/ function(module, exports) {

	/**
	 * @module zrender/graphic/Style
	 */
	
	
	    var STYLE_COMMON_PROPS = [
	        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],
	        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]
	    ];
	
	    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);
	
	    var Style = function (opts) {
	        this.extendFrom(opts);
	    };
	
	    function createLinearGradient(ctx, obj, rect) {
	        // var size =
	        var x = obj.x;
	        var x2 = obj.x2;
	        var y = obj.y;
	        var y2 = obj.y2;
	
	        if (!obj.global) {
	            x = x * rect.width + rect.x;
	            x2 = x2 * rect.width + rect.x;
	            y = y * rect.height + rect.y;
	            y2 = y2 * rect.height + rect.y;
	        }
	
	        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	
	        return canvasGradient;
	    }
	
	    function createRadialGradient(ctx, obj, rect) {
	        var width = rect.width;
	        var height = rect.height;
	        var min = Math.min(width, height);
	
	        var x = obj.x;
	        var y = obj.y;
	        var r = obj.r;
	        if (!obj.global) {
	            x = x * width + rect.x;
	            y = y * height + rect.y;
	            r = r * min;
	        }
	
	        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	
	        return canvasGradient;
	    }
	
	
	    Style.prototype = {
	
	        constructor: Style,
	
	        /**
	         * @type {string}
	         */
	        fill: '#000000',
	
	        /**
	         * @type {string}
	         */
	        stroke: null,
	
	        /**
	         * @type {number}
	         */
	        opacity: 1,
	
	        /**
	         * @type {Array.<number>}
	         */
	        lineDash: null,
	
	        /**
	         * @type {number}
	         */
	        lineDashOffset: 0,
	
	        /**
	         * @type {number}
	         */
	        shadowBlur: 0,
	
	        /**
	         * @type {number}
	         */
	        shadowOffsetX: 0,
	
	        /**
	         * @type {number}
	         */
	        shadowOffsetY: 0,
	
	        /**
	         * @type {number}
	         */
	        lineWidth: 1,
	
	        /**
	         * If stroke ignore scale
	         * @type {Boolean}
	         */
	        strokeNoScale: false,
	
	        // Bounding rect text configuration
	        // Not affected by element transform
	        /**
	         * @type {string}
	         */
	        text: null,
	
	        /**
	         * @type {string}
	         */
	        textFill: '#000',
	
	        /**
	         * @type {string}
	         */
	        textStroke: null,
	
	        /**
	         * 'inside', 'left', 'right', 'top', 'bottom'
	         * [x, y]
	         * @type {string|Array.<number>}
	         * @default 'inside'
	         */
	        textPosition: 'inside',
	
	        /**
	         * [x, y]
	         * @type {Array.<number>}
	         */
	        textOffset: null,
	
	        /**
	         * @type {string}
	         */
	        textBaseline: null,
	
	        /**
	         * @type {string}
	         */
	        textAlign: null,
	
	        /**
	         * @type {string}
	         */
	        textVerticalAlign: null,
	
	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textDistance: 5,
	
	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowBlur: 0,
	
	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowOffsetX: 0,
	
	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowOffsetY: 0,
	
	        /**
	         * If transform text
	         * Only useful in Path and Image element
	         * @type {boolean}
	         */
	        textTransform: false,
	
	        /**
	         * Text rotate around position of Path or Image
	         * Only useful in Path and Image element and textTransform is false.
	         */
	        textRotation: 0,
	
	        /**
	         * @type {string}
	         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	         */
	        blend: null,
	
	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         */
	        bind: function (ctx, el, prevEl) {
	            var style = this;
	            var prevStyle = prevEl && prevEl.style;
	            var firstDraw = !prevStyle;
	
	            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	                var prop = STYLE_COMMON_PROPS[i];
	                var styleName = prop[0];
	
	                if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	                    // FIXME Invalid property value will cause style leak from previous element.
	                    ctx[styleName] = style[styleName] || prop[1];
	                }
	            }
	
	            if ((firstDraw || style.fill !== prevStyle.fill)) {
	                ctx.fillStyle = style.fill;
	            }
	            if ((firstDraw || style.stroke !== prevStyle.stroke)) {
	                ctx.strokeStyle = style.stroke;
	            }
	            if ((firstDraw || style.opacity !== prevStyle.opacity)) {
	                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	            }
	
	            if ((firstDraw || style.blend !== prevStyle.blend)) {
	                ctx.globalCompositeOperation = style.blend || 'source-over';
	            }
	            if (this.hasStroke()) {
	                var lineWidth = style.lineWidth;
	                ctx.lineWidth = lineWidth / (
	                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1
	                );
	            }
	        },
	
	        hasFill: function () {
	            var fill = this.fill;
	            return fill != null && fill !== 'none';
	        },
	
	        hasStroke: function () {
	            var stroke = this.stroke;
	            return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	        },
	
	        /**
	         * Extend from other style
	         * @param {zrender/graphic/Style} otherStyle
	         * @param {boolean} overwrite
	         */
	        extendFrom: function (otherStyle, overwrite) {
	            if (otherStyle) {
	                var target = this;
	                for (var name in otherStyle) {
	                    if (otherStyle.hasOwnProperty(name)
	                        && (overwrite || ! target.hasOwnProperty(name))
	                    ) {
	                        target[name] = otherStyle[name];
	                    }
	                }
	            }
	        },
	
	        /**
	         * Batch setting style with a given object
	         * @param {Object|string} obj
	         * @param {*} [obj]
	         */
	        set: function (obj, value) {
	            if (typeof obj === 'string') {
	                this[obj] = value;
	            }
	            else {
	                this.extendFrom(obj, true);
	            }
	        },
	
	        /**
	         * Clone
	         * @return {zrender/graphic/Style} [description]
	         */
	        clone: function () {
	            var newStyle = new this.constructor();
	            newStyle.extendFrom(this, true);
	            return newStyle;
	        },
	
	        getGradient: function (ctx, obj, rect) {
	            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	            var canvasGradient = method(ctx, obj, rect);
	            var colorStops = obj.colorStops;
	            for (var i = 0; i < colorStops.length; i++) {
	                canvasGradient.addColorStop(
	                    colorStops[i].offset, colorStops[i].color
	                );
	            }
	            return canvasGradient;
	        }
	    };
	
	    var styleProto = Style.prototype;
	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	        var prop = STYLE_COMMON_PROPS[i];
	        if (!(prop[0] in styleProto)) {
	            styleProto[prop[0]] = prop[1];
	        }
	    }
	
	    // Provide for others
	    Style.getGradient = styleProto.getGradient;
	
	    module.exports = Style;


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */
	
	
	
	    var textContain = __webpack_require__(29);
	    var BoundingRect = __webpack_require__(30);
	
	    var tmpRect = new BoundingRect();
	
	    var RectText = function () {};
	
	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    }
	
	    RectText.prototype = {
	
	        constructor: RectText,
	
	        /**
	         * Draw text in a rect with specified position.
	         * @param  {CanvasRenderingContext} ctx
	         * @param  {Object} rect Displayable rect
	         * @return {Object} textRect Alternative precalculated text bounding rect
	         */
	        drawRectText: function (ctx, rect, textRect) {
	            var style = this.style;
	            var text = style.text;
	            // Convert to string
	            text != null && (text += '');
	            if (!text) {
	                return;
	            }
	
	            // FIXME
	            ctx.save();
	
	            var x;
	            var y;
	            var textPosition = style.textPosition;
	            var textOffset = style.textOffset;
	            var distance = style.textDistance;
	            var align = style.textAlign;
	            var font = style.textFont || style.font;
	            var baseline = style.textBaseline;
	            var verticalAlign = style.textVerticalAlign;
	
	            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	
	            // Transform rect to view space
	            var transform = this.transform;
	            if (!style.textTransform) {
	                if (transform) {
	                    tmpRect.copy(rect);
	                    tmpRect.applyTransform(transform);
	                    rect = tmpRect;
	                }
	            }
	            else {
	                this.setTransform(ctx);
	            }
	
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                // Percent
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	                align = align || 'left';
	                baseline = baseline || 'top';
	
	                if (verticalAlign) {
	                    switch (verticalAlign) {
	                        case 'middle':
	                            y -= textRect.height / 2 - textRect.lineHeight / 2;
	                            break;
	                        case 'bottom':
	                            y -= textRect.height - textRect.lineHeight / 2;
	                            break;
	                        default:
	                            y += textRect.lineHeight / 2;
	                    }
	                    // Force bseline to be middle
	                    baseline = 'middle';
	                }
	            }
	            else {
	                var res = textContain.adjustTextPositionOnRect(
	                    textPosition, rect, textRect, distance
	                );
	                x = res.x;
	                y = res.y;
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	
	            if (textOffset) {
	                x += textOffset[0];
	                y += textOffset[1];
	            }
	
	            // Use canvas default left textAlign. Giving invalid value will cause state not change
	            ctx.textAlign = align || 'left';
	            // Use canvas default alphabetic baseline
	            ctx.textBaseline = baseline || 'alphabetic';
	
	            var textFill = style.textFill;
	            var textStroke = style.textStroke;
	            textFill && (ctx.fillStyle = textFill);
	            textStroke && (ctx.strokeStyle = textStroke);
	
	            // TODO Invalid font
	            ctx.font = font || '12px sans-serif';
	
	            // Text shadow
	            // Always set shadowBlur and shadowOffset to avoid leak from displayable
	            ctx.shadowBlur = style.textShadowBlur;
	            ctx.shadowColor = style.textShadowColor || 'transparent';
	            ctx.shadowOffsetX = style.textShadowOffsetX;
	            ctx.shadowOffsetY = style.textShadowOffsetY;
	
	            var textLines = text.split('\n');
	
	            if (style.textRotation) {
	                transform && ctx.translate(transform[4], transform[5]);
	                ctx.rotate(style.textRotation);
	                transform && ctx.translate(-transform[4], -transform[5]);
	            }
	
	            for (var i = 0; i < textLines.length; i++) {
	                textFill && ctx.fillText(textLines[i], x, y);
	                textStroke && ctx.strokeText(textLines[i], x, y);
	                y += textRect.lineHeight;
	            }
	
	            ctx.restore();
	        }
	    };
	
	    module.exports = RectText;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */
	
	 // TODO getTotalLength, getPointAtLength
	
	
	    var curve = __webpack_require__(71);
	    var vec2 = __webpack_require__(31);
	    var bbox = __webpack_require__(72);
	    var BoundingRect = __webpack_require__(30);
	    var dpr = __webpack_require__(62).devicePixelRatio;
	
	    var CMD = {
	        M: 1,
	        L: 2,
	        C: 3,
	        Q: 4,
	        A: 5,
	        Z: 6,
	        // Rect
	        R: 7
	    };
	
	    var min = [];
	    var max = [];
	    var min2 = [];
	    var max2 = [];
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathCos = Math.cos;
	    var mathSin = Math.sin;
	    var mathSqrt = Math.sqrt;
	    var mathAbs = Math.abs;
	
	    var hasTypedArray = typeof Float32Array != 'undefined';
	
	    /**
	     * @alias module:zrender/core/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {
	
	        /**
	         * Path data. Stored as flat array
	         * @type {Array.<Object>}
	         */
	        this.data = [];
	
	        this._len = 0;
	
	        this._ctx = null;
	
	        this._xi = 0;
	        this._yi = 0;
	
	        this._x0 = 0;
	        this._y0 = 0;
	
	        // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	        this._ux = 0;
	        this._uy = 0;
	    };
	
	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype = {
	
	        constructor: PathProxy,
	
	        _lineDash: null,
	
	        _dashOffset: 0,
	
	        _dashIdx: 0,
	
	        _dashSum: 0,
	
	        /**
	         * @readOnly
	         */
	        setScale: function (sx, sy) {
	            this._ux = mathAbs(1 / dpr / sx) || 0;
	            this._uy = mathAbs(1 / dpr / sy) || 0;
	        },
	
	        getContext: function () {
	            return this._ctx;
	        },
	
	        /**
	         * @param  {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        beginPath: function (ctx) {
	
	            this._ctx = ctx;
	
	            ctx && ctx.beginPath();
	
	            ctx && (this.dpr = ctx.dpr);
	
	            // Reset
	            this._len = 0;
	
	            if (this._lineDash) {
	                this._lineDash = null;
	
	                this._dashOffset = 0;
	            }
	
	            return this;
	        },
	
	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        moveTo: function (x, y) {
	            this.addData(CMD.M, x, y);
	            this._ctx && this._ctx.moveTo(x, y);
	
	            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	            this._x0 = x;
	            this._y0 = y;
	
	            this._xi = x;
	            this._yi = y;
	
	            return this;
	        },
	
	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        lineTo: function (x, y) {
	            var exceedUnit = mathAbs(x - this._xi) > this._ux
	                || mathAbs(y - this._yi) > this._uy
	                // Force draw the first segment
	                || this._len < 5;
	
	            this.addData(CMD.L, x, y);
	
	            if (this._ctx && exceedUnit) {
	                this._needsDash() ? this._dashedLineTo(x, y)
	                    : this._ctx.lineTo(x, y);
	            }
	            if (exceedUnit) {
	                this._xi = x;
	                this._yi = y;
	            }
	
	            return this;
	        },
	
	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @param  {number} x3
	         * @param  {number} y3
	         * @return {module:zrender/core/PathProxy}
	         */
	        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)
	                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	            }
	            this._xi = x3;
	            this._yi = y3;
	            return this;
	        },
	
	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @return {module:zrender/core/PathProxy}
	         */
	        quadraticCurveTo: function (x1, y1, x2, y2) {
	            this.addData(CMD.Q, x1, y1, x2, y2);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)
	                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	            }
	            this._xi = x2;
	            this._yi = y2;
	            return this;
	        },
	
	        /**
	         * @param  {number} cx
	         * @param  {number} cy
	         * @param  {number} r
	         * @param  {number} startAngle
	         * @param  {number} endAngle
	         * @param  {boolean} anticlockwise
	         * @return {module:zrender/core/PathProxy}
	         */
	        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	            this.addData(
	                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1
	            );
	            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	
	            this._xi = mathCos(endAngle) * r + cx;
	            this._yi = mathSin(endAngle) * r + cx;
	            return this;
	        },
	
	        // TODO
	        arcTo: function (x1, y1, x2, y2, radius) {
	            if (this._ctx) {
	                this._ctx.arcTo(x1, y1, x2, y2, radius);
	            }
	            return this;
	        },
	
	        // TODO
	        rect: function (x, y, w, h) {
	            this._ctx && this._ctx.rect(x, y, w, h);
	            this.addData(CMD.R, x, y, w, h);
	            return this;
	        },
	
	        /**
	         * @return {module:zrender/core/PathProxy}
	         */
	        closePath: function () {
	            this.addData(CMD.Z);
	
	            var ctx = this._ctx;
	            var x0 = this._x0;
	            var y0 = this._y0;
	            if (ctx) {
	                this._needsDash() && this._dashedLineTo(x0, y0);
	                ctx.closePath();
	            }
	
	            this._xi = x0;
	            this._yi = y0;
	            return this;
	        },
	
	        /**
	         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	         * stroke 同样
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        fill: function (ctx) {
	            ctx && ctx.fill();
	            this.toStatic();
	        },
	
	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        stroke: function (ctx) {
	            ctx && ctx.stroke();
	            this.toStatic();
	        },
	
	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDash: function (lineDash) {
	            if (lineDash instanceof Array) {
	                this._lineDash = lineDash;
	
	                this._dashIdx = 0;
	
	                var lineDashSum = 0;
	                for (var i = 0; i < lineDash.length; i++) {
	                    lineDashSum += lineDash[i];
	                }
	                this._dashSum = lineDashSum;
	            }
	            return this;
	        },
	
	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDashOffset: function (offset) {
	            this._dashOffset = offset;
	            return this;
	        },
	
	        /**
	         *
	         * @return {boolean}
	         */
	        len: function () {
	            return this._len;
	        },
	
	        /**
	         * 直接设置 Path 数据
	         */
	        setData: function (data) {
	
	            var len = data.length;
	
	            if (! (this.data && this.data.length == len) && hasTypedArray) {
	                this.data = new Float32Array(len);
	            }
	
	            for (var i = 0; i < len; i++) {
	                this.data[i] = data[i];
	            }
	
	            this._len = len;
	        },
	
	        /**
	         * 添加子路径
	         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	         */
	        appendPath: function (path) {
	            if (!(path instanceof Array)) {
	                path = [path];
	            }
	            var len = path.length;
	            var appendSize = 0;
	            var offset = this._len;
	            for (var i = 0; i < len; i++) {
	                appendSize += path[i].len();
	            }
	            if (hasTypedArray && (this.data instanceof Float32Array)) {
	                this.data = new Float32Array(offset + appendSize);
	            }
	            for (var i = 0; i < len; i++) {
	                var appendPathData = path[i].data;
	                for (var k = 0; k < appendPathData.length; k++) {
	                    this.data[offset++] = appendPathData[k];
	                }
	            }
	            this._len = offset;
	        },
	
	        /**
	         * 填充 Path 数据。
	         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	         */
	        addData: function (cmd) {
	            var data = this.data;
	            if (this._len + arguments.length > data.length) {
	                // 因为之前的数组已经转换成静态的 Float32Array
	                // 所以不够用时需要扩展一个新的动态数组
	                this._expandData();
	                data = this.data;
	            }
	            for (var i = 0; i < arguments.length; i++) {
	                data[this._len++] = arguments[i];
	            }
	
	            this._prevCmd = cmd;
	        },
	
	        _expandData: function () {
	            // Only if data is Float32Array
	            if (!(this.data instanceof Array)) {
	                var newData = [];
	                for (var i = 0; i < this._len; i++) {
	                    newData[i] = this.data[i];
	                }
	                this.data = newData;
	            }
	        },
	
	        /**
	         * If needs js implemented dashed line
	         * @return {boolean}
	         * @private
	         */
	        _needsDash: function () {
	            return this._lineDash;
	        },
	
	        _dashedLineTo: function (x1, y1) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;
	
	            var x0 = this._xi;
	            var y0 = this._yi;
	            var dx = x1 - x0;
	            var dy = y1 - y0;
	            var dist = mathSqrt(dx * dx + dy * dy);
	            var x = x0;
	            var y = y0;
	            var dash;
	            var nDash = lineDash.length;
	            var idx;
	            dx /= dist;
	            dy /= dist;
	
	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            x -= offset * dx;
	            y -= offset * dy;
	
	            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)
	            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {
	                idx = this._dashIdx;
	                dash = lineDash[idx];
	                x += dx * dash;
	                y += dy * dash;
	                this._dashIdx = (idx + 1) % nDash;
	                // Skip positive offset
	                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {
	                    continue;
	                }
	                ctx[idx % 2 ? 'moveTo' : 'lineTo'](
	                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),
	                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)
	                );
	            }
	            // Offset for next lineTo
	            dx = x - x1;
	            dy = y - y1;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },
	
	        // Not accurate dashed line to
	        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;
	
	            var x0 = this._xi;
	            var y0 = this._yi;
	            var t;
	            var dx;
	            var dy;
	            var cubicAt = curve.cubicAt;
	            var bezierLen = 0;
	            var idx = this._dashIdx;
	            var nDash = lineDash.length;
	
	            var x;
	            var y;
	
	            var tmpLen = 0;
	
	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            // Bezier approx length
	            for (t = 0; t < 1; t += 0.1) {
	                dx = cubicAt(x0, x1, x2, x3, t + 0.1)
	                    - cubicAt(x0, x1, x2, x3, t);
	                dy = cubicAt(y0, y1, y2, y3, t + 0.1)
	                    - cubicAt(y0, y1, y2, y3, t);
	                bezierLen += mathSqrt(dx * dx + dy * dy);
	            }
	
	            // Find idx after add offset
	            for (; idx < nDash; idx++) {
	                tmpLen += lineDash[idx];
	                if (tmpLen > offset) {
	                    break;
	                }
	            }
	            t = (tmpLen - offset) / bezierLen;
	
	            while (t <= 1) {
	
	                x = cubicAt(x0, x1, x2, x3, t);
	                y = cubicAt(y0, y1, y2, y3, t);
	
	                // Use line to approximate dashed bezier
	                // Bad result if dash is long
	                idx % 2 ? ctx.moveTo(x, y)
	                    : ctx.lineTo(x, y);
	
	                t += lineDash[idx] / bezierLen;
	
	                idx = (idx + 1) % nDash;
	            }
	
	            // Finish the last segment and calculate the new offset
	            (idx % 2 !== 0) && ctx.lineTo(x3, y3);
	            dx = x3 - x;
	            dy = y3 - y;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },
	
	        _dashedQuadraticTo: function (x1, y1, x2, y2) {
	            // Convert quadratic to cubic using degree elevation
	            var x3 = x2;
	            var y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (this._xi + 2 * x1) / 3;
	            y1 = (this._yi + 2 * y1) / 3;
	
	            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	        },
	
	        /**
	         * 转成静态的 Float32Array 减少堆内存占用
	         * Convert dynamic array to static Float32Array
	         */
	        toStatic: function () {
	            var data = this.data;
	            if (data instanceof Array) {
	                data.length = this._len;
	                if (hasTypedArray) {
	                    this.data = new Float32Array(data);
	                }
	            }
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function () {
	            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	
	            var data = this.data;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;
	
	            for (var i = 0; i < data.length;) {
	                var cmd = data[i++];
	
	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = data[i];
	                    yi = data[i + 1];
	
	                    x0 = xi;
	                    y0 = yi;
	                }
	
	                switch (cmd) {
	                    case CMD.M:
	                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                        // 在 closePath 的时候使用
	                        x0 = data[i++];
	                        y0 = data[i++];
	                        xi = x0;
	                        yi = y0;
	                        min2[0] = x0;
	                        min2[1] = y0;
	                        max2[0] = x0;
	                        max2[1] = y0;
	                        break;
	                    case CMD.L:
	                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.C:
	                        bbox.fromCubic(
	                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.Q:
	                        bbox.fromQuadratic(
	                            xi, yi, data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.A:
	                        // TODO Arc 判断的开销比较大
	                        var cx = data[i++];
	                        var cy = data[i++];
	                        var rx = data[i++];
	                        var ry = data[i++];
	                        var startAngle = data[i++];
	                        var endAngle = data[i++] + startAngle;
	                        // TODO Arc 旋转
	                        var psi = data[i++];
	                        var anticlockwise = 1 - data[i++];
	
	                        if (i == 1) {
	                            // 直接使用 arc 命令
	                            // 第一个命令起点还未定义
	                            x0 = mathCos(startAngle) * rx + cx;
	                            y0 = mathSin(startAngle) * ry + cy;
	                        }
	
	                        bbox.fromArc(
	                            cx, cy, rx, ry, startAngle, endAngle,
	                            anticlockwise, min2, max2
	                        );
	
	                        xi = mathCos(endAngle) * rx + cx;
	                        yi = mathSin(endAngle) * ry + cy;
	                        break;
	                    case CMD.R:
	                        x0 = xi = data[i++];
	                        y0 = yi = data[i++];
	                        var width = data[i++];
	                        var height = data[i++];
	                        // Use fromLine
	                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                        break;
	                    case CMD.Z:
	                        xi = x0;
	                        yi = y0;
	                        break;
	                }
	
	                // Union
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }
	
	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }
	
	            return new BoundingRect(
	                min[0], min[1], max[0] - min[0], max[1] - min[1]
	            );
	        },
	
	        /**
	         * Rebuild path from current data
	         * Rebuild path will not consider javascript implemented line dash.
	         * @param {CanvasRenderingContext} ctx
	         */
	        rebuildPath: function (ctx) {
	            var d = this.data;
	            var x0, y0;
	            var xi, yi;
	            var x, y;
	            var ux = this._ux;
	            var uy = this._uy;
	            var len = this._len;
	            for (var i = 0; i < len;) {
	                var cmd = d[i++];
	
	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = d[i];
	                    yi = d[i + 1];
	
	                    x0 = xi;
	                    y0 = yi;
	                }
	                switch (cmd) {
	                    case CMD.M:
	                        x0 = xi = d[i++];
	                        y0 = yi = d[i++];
	                        ctx.moveTo(xi, yi);
	                        break;
	                    case CMD.L:
	                        x = d[i++];
	                        y = d[i++];
	                        // Not draw too small seg between
	                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	                            ctx.lineTo(x, y);
	                            xi = x;
	                            yi = y;
	                        }
	                        break;
	                    case CMD.C:
	                        ctx.bezierCurveTo(
	                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]
	                        );
	                        xi = d[i - 2];
	                        yi = d[i - 1];
	                        break;
	                    case CMD.Q:
	                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                        xi = d[i - 2];
	                        yi = d[i - 1];
	                        break;
	                    case CMD.A:
	                        var cx = d[i++];
	                        var cy = d[i++];
	                        var rx = d[i++];
	                        var ry = d[i++];
	                        var theta = d[i++];
	                        var dTheta = d[i++];
	                        var psi = d[i++];
	                        var fs = d[i++];
	                        var r = (rx > ry) ? rx : ry;
	                        var scaleX = (rx > ry) ? 1 : rx / ry;
	                        var scaleY = (rx > ry) ? ry / rx : 1;
	                        var isEllipse = Math.abs(rx - ry) > 1e-3;
	                        var endAngle = theta + dTheta;
	                        if (isEllipse) {
	                            ctx.translate(cx, cy);
	                            ctx.rotate(psi);
	                            ctx.scale(scaleX, scaleY);
	                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	                            ctx.scale(1 / scaleX, 1 / scaleY);
	                            ctx.rotate(-psi);
	                            ctx.translate(-cx, -cy);
	                        }
	                        else {
	                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	                        }
	
	                        if (i == 1) {
	                            // 直接使用 arc 命令
	                            // 第一个命令起点还未定义
	                            x0 = mathCos(theta) * rx + cx;
	                            y0 = mathSin(theta) * ry + cy;
	                        }
	                        xi = mathCos(endAngle) * rx + cx;
	                        yi = mathSin(endAngle) * ry + cy;
	                        break;
	                    case CMD.R:
	                        x0 = xi = d[i];
	                        y0 = yi = d[i + 1];
	                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                        break;
	                    case CMD.Z:
	                        ctx.closePath();
	                        xi = x0;
	                        yi = y0;
	                }
	            }
	        }
	    };
	
	    PathProxy.CMD = CMD;
	
	    module.exports = PathProxy;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	
	
	    var vec2 = __webpack_require__(31);
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var mathPow = Math.pow;
	    var mathSqrt = Math.sqrt;
	
	    var EPSILON = 1e-8;
	    var EPSILON_NUMERIC = 1e-4;
	
	    var THREE_SQRT = mathSqrt(3);
	    var ONE_THIRD = 1 / 3;
	
	    // 临时变量
	    var _v0 = v2Create();
	    var _v1 = v2Create();
	    var _v2 = v2Create();
	    // var _v3 = vec2.create();
	
	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /**
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1)
	             + t * t * (t * p3 + 3 * onet * p2);
	    }
	
	    /**
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (
	            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
	            + (p3 - p2) * t * t
	        );
	    }
	
	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1  - p0);
	        var d = p0 - val;
	
	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;
	
	        var n = 0;
	
	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            }
	            else {
	                var t1 = -c / b;  //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = B * B - 4 * A * C;
	
	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;  // t1, a is not zero
	                var t2 = -K / 2;  // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -mathPow(-Y1, ONE_THIRD);
	                }
	                else {
	                    Y1 = mathPow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -mathPow(-Y2, ONE_THIRD);
	                }
	                else {
	                    Y2 = mathPow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else {
	                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = mathSqrt(A);
	                var tmp = Math.cos(theta);
	
	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;
	
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <=1) {
	                    extrema[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;
	
	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;
	
	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }
	
	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(
	        x0, y0, x1, y1, x2, y2, x3, y3,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	        var prev;
	        var next;
	        var d1;
	        var d2;
	
	        _v0[0] = x;
	        _v0[1] = y;
	
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            prev = t - interval;
	            next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	
	            d1 = v2DistSquare(_v1, _v0);
	
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                d2 = v2DistSquare(_v2, _v0);
	
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }
	
	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }
	
	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }
	
	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;
	
	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }
	
	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2
	            return 0.5;
	        }
	        else {
	            return (p0 - p1) / divider;
	        }
	    }
	
	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;
	
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	
	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }
	
	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(
	        x0, y0, x1, y1, x2, y2,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	
	        _v0[0] = x;
	        _v0[1] = y;
	
	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;
	
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);
	
	            var d1 = v2DistSquare(_v1, _v0);
	
	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = v2DistSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }
	
	    module.exports = {
	
	        cubicAt: cubicAt,
	
	        cubicDerivativeAt: cubicDerivativeAt,
	
	        cubicRootAt: cubicRootAt,
	
	        cubicExtrema: cubicExtrema,
	
	        cubicSubdivide: cubicSubdivide,
	
	        cubicProjectPoint: cubicProjectPoint,
	
	        quadraticAt: quadraticAt,
	
	        quadraticDerivativeAt: quadraticDerivativeAt,
	
	        quadraticRootAt: quadraticRootAt,
	
	        quadraticExtremum: quadraticExtremum,
	
	        quadraticSubdivide: quadraticSubdivide,
	
	        quadraticProjectPoint: quadraticProjectPoint
	    };


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */
	
	
	    var vec2 = __webpack_require__(31);
	    var curve = __webpack_require__(71);
	
	    var bbox = {};
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	
	    var start = vec2.create();
	    var end = vec2.create();
	    var extremity = vec2.create();
	
	    var PI2 = Math.PI * 2;
	    /**
	     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	     * @module zrender/core/bbox
	     * @param {Array<Object>} points 顶点数组
	     * @param {number} min
	     * @param {number} max
	     */
	    bbox.fromPoints = function(points, min, max) {
	        if (points.length === 0) {
	            return;
	        }
	        var p = points[0];
	        var left = p[0];
	        var right = p[0];
	        var top = p[1];
	        var bottom = p[1];
	        var i;
	
	        for (i = 1; i < points.length; i++) {
	            p = points[i];
	            left = mathMin(left, p[0]);
	            right = mathMax(right, p[0]);
	            top = mathMin(top, p[1]);
	            bottom = mathMax(bottom, p[1]);
	        }
	
	        min[0] = left;
	        min[1] = top;
	        max[0] = right;
	        max[1] = bottom;
	    };
	
	    /**
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	        min[0] = mathMin(x0, x1);
	        min[1] = mathMin(y0, y1);
	        max[0] = mathMax(x0, x1);
	        max[1] = mathMax(y0, y1);
	    };
	
	    var xDim = [];
	    var yDim = [];
	    /**
	     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromCubic = function(
	        x0, y0, x1, y1, x2, y2, x3, y3, min, max
	    ) {
	        var cubicExtrema = curve.cubicExtrema;
	        var cubicAt = curve.cubicAt;
	        var i;
	        var n = cubicExtrema(x0, x1, x2, x3, xDim);
	        min[0] = Infinity;
	        min[1] = Infinity;
	        max[0] = -Infinity;
	        max[1] = -Infinity;
	
	        for (i = 0; i < n; i++) {
	            var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	            min[0] = mathMin(x, min[0]);
	            max[0] = mathMax(x, max[0]);
	        }
	        n = cubicExtrema(y0, y1, y2, y3, yDim);
	        for (i = 0; i < n; i++) {
	            var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	            min[1] = mathMin(y, min[1]);
	            max[1] = mathMax(y, max[1]);
	        }
	
	        min[0] = mathMin(x0, min[0]);
	        max[0] = mathMax(x0, max[0]);
	        min[0] = mathMin(x3, min[0]);
	        max[0] = mathMax(x3, max[0]);
	
	        min[1] = mathMin(y0, min[1]);
	        max[1] = mathMax(y0, max[1]);
	        min[1] = mathMin(y3, min[1]);
	        max[1] = mathMax(y3, max[1]);
	    };
	
	    /**
	     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {
	        var quadraticExtremum = curve.quadraticExtremum;
	        var quadraticAt = curve.quadraticAt;
	        // Find extremities, where derivative in x dim or y dim is zero
	        var tx =
	            mathMax(
	                mathMin(quadraticExtremum(x0, x1, x2), 1), 0
	            );
	        var ty =
	            mathMax(
	                mathMin(quadraticExtremum(y0, y1, y2), 1), 0
	            );
	
	        var x = quadraticAt(x0, x1, x2, tx);
	        var y = quadraticAt(y0, y1, y2, ty);
	
	        min[0] = mathMin(x0, x2, x);
	        min[1] = mathMin(y0, y2, y);
	        max[0] = mathMax(x0, x2, x);
	        max[1] = mathMax(y0, y2, y);
	    };
	
	    /**
	     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	     * @method
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x
	     * @param {number} y
	     * @param {number} rx
	     * @param {number} ry
	     * @param {number} startAngle
	     * @param {number} endAngle
	     * @param {number} anticlockwise
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromArc = function (
	        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max
	    ) {
	        var vec2Min = vec2.min;
	        var vec2Max = vec2.max;
	
	        var diff = Math.abs(startAngle - endAngle);
	
	
	        if (diff % PI2 < 1e-4 && diff > 1e-4) {
	            // Is a circle
	            min[0] = x - rx;
	            min[1] = y - ry;
	            max[0] = x + rx;
	            max[1] = y + ry;
	            return;
	        }
	
	        start[0] = mathCos(startAngle) * rx + x;
	        start[1] = mathSin(startAngle) * ry + y;
	
	        end[0] = mathCos(endAngle) * rx + x;
	        end[1] = mathSin(endAngle) * ry + y;
	
	        vec2Min(min, start, end);
	        vec2Max(max, start, end);
	
	        // Thresh to [0, Math.PI * 2]
	        startAngle = startAngle % (PI2);
	        if (startAngle < 0) {
	            startAngle = startAngle + PI2;
	        }
	        endAngle = endAngle % (PI2);
	        if (endAngle < 0) {
	            endAngle = endAngle + PI2;
	        }
	
	        if (startAngle > endAngle && !anticlockwise) {
	            endAngle += PI2;
	        }
	        else if (startAngle < endAngle && anticlockwise) {
	            startAngle += PI2;
	        }
	        if (anticlockwise) {
	            var tmp = endAngle;
	            endAngle = startAngle;
	            startAngle = tmp;
	        }
	
	        // var number = 0;
	        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	            if (angle > startAngle) {
	                extremity[0] = mathCos(angle) * rx + x;
	                extremity[1] = mathSin(angle) * ry + y;
	
	                vec2Min(min, extremity, min);
	                vec2Max(max, extremity, max);
	            }
	        }
	    };
	
	    module.exports = bbox;
	


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var CMD = __webpack_require__(70).CMD;
	    var line = __webpack_require__(74);
	    var cubic = __webpack_require__(75);
	    var quadratic = __webpack_require__(76);
	    var arc = __webpack_require__(77);
	    var normalizeRadian = __webpack_require__(78).normalizeRadian;
	    var curve = __webpack_require__(71);
	
	    var windingLine = __webpack_require__(79);
	
	    var containStroke = line.containStroke;
	
	    var PI2 = Math.PI * 2;
	
	    var EPSILON = 1e-4;
	
	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }
	
	    // 临时数组
	    var roots = [-1, -1, -1];
	    var extrema = [-1, -1];
	
	    function swapExtrema() {
	        var tmp = extrema[0];
	        extrema[0] = extrema[1];
	        extrema[1] = tmp;
	    }
	
	    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2 && y > y3)
	            || (y < y0 && y < y1 && y < y2 && y < y3)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var w = 0;
	            var nExtrema = -1;
	            var y0_, y1_;
	            for (var i = 0; i < nRoots; i++) {
	                var t = roots[i];
	
	                // Avoid winding error when intersection point is the connect point of two line of polygon
	                var unit = (t === 0 || t === 1) ? 0.5 : 1;
	
	                var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                if (x_ < x) { // Quick reject
	                    continue;
	                }
	                if (nExtrema < 0) {
	                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                    if (extrema[1] < extrema[0] && nExtrema > 1) {
	                        swapExtrema();
	                    }
	                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                    if (nExtrema > 1) {
	                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                    }
	                }
	                if (nExtrema == 2) {
	                    // 分成三段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    }
	                    else if (t < extrema[1]) {
	                        w += y1_ < y0_ ? unit : -unit;
	                    }
	                    else {
	                        w += y3 < y1_ ? unit : -unit;
	                    }
	                }
	                else {
	                    // 分成两段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    }
	                    else {
	                        w += y3 < y0_ ? unit : -unit;
	                    }
	                }
	            }
	            return w;
	        }
	    }
	
	    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2)
	            || (y < y0 && y < y1 && y < y2)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var t = curve.quadraticExtremum(y0, y1, y2);
	            if (t >= 0 && t <= 1) {
	                var w = 0;
	                var y_ = curve.quadraticAt(y0, y1, y2, t);
	                for (var i = 0; i < nRoots; i++) {
	                    // Remove one endpoint.
	                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;
	
	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                    if (x_ < x) {   // Quick reject
	                        continue;
	                    }
	                    if (roots[i] < t) {
	                        w += y_ < y0 ? unit : -unit;
	                    }
	                    else {
	                        w += y2 < y_ ? unit : -unit;
	                    }
	                }
	                return w;
	            }
	            else {
	                // Remove one endpoint.
	                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;
	
	                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                if (x_ < x) {   // Quick reject
	                    return 0;
	                }
	                return y2 < y0 ? unit : -unit;
	            }
	        }
	    }
	
	    // TODO
	    // Arc 旋转
	    function windingArc(
	        cx, cy, r, startAngle, endAngle, anticlockwise, x, y
	    ) {
	        y -= cy;
	        if (y > r || y < -r) {
	            return 0;
	        }
	        var tmp = Math.sqrt(r * r - y * y);
	        roots[0] = -tmp;
	        roots[1] = tmp;
	
	        var diff = Math.abs(startAngle - endAngle);
	        if (diff < 1e-4) {
	            return 0;
	        }
	        if (diff % PI2 < 1e-4) {
	            // Is a circle
	            startAngle = 0;
	            endAngle = PI2;
	            var dir = anticlockwise ? 1 : -1;
	            if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                return dir;
	            } else {
	                return 0;
	            }
	        }
	
	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        }
	        else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }
	
	        var w = 0;
	        for (var i = 0; i < 2; i++) {
	            var x_ = roots[i];
	            if (x_ + cx > x) {
	                var angle = Math.atan2(y, x_);
	                var dir = anticlockwise ? 1 : -1;
	                if (angle < 0) {
	                    angle = PI2 + angle;
	                }
	                if (
	                    (angle >= startAngle && angle <= endAngle)
	                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
	                ) {
	                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                        dir = -dir;
	                    }
	                    w += dir;
	                }
	            }
	        }
	        return w;
	    }
	
	    function containPath(data, lineWidth, isStroke, x, y) {
	        var w = 0;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;
	
	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];
	            // Begin a new subpath
	            if (cmd === CMD.M && i > 1) {
	                // Close previous subpath
	                if (!isStroke) {
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                }
	                // 如果被任何一个 subpath 包含
	                // if (w !== 0) {
	                //     return true;
	                // }
	            }
	
	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];
	
	                x0 = xi;
	                y0 = yi;
	            }
	
	            switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    break;
	                case CMD.L:
	                    if (isStroke) {
	                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    if (isStroke) {
	                        if (cubic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingCubic(
	                            xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    if (isStroke) {
	                        if (quadratic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingQuadratic(
	                            xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var theta = data[i++];
	                    var dTheta = data[i++];
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];
	                    var x1 = Math.cos(theta) * rx + cx;
	                    var y1 = Math.sin(theta) * ry + cy;
	                    // 不是直接使用 arc 命令
	                    if (i > 1) {
	                        w += windingLine(xi, yi, x1, y1, x, y);
	                    }
	                    else {
	                        // 第一个命令起点还未定义
	                        x0 = x1;
	                        y0 = y1;
	                    }
	                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                    var _x = (x - cx) * ry / rx + cx;
	                    if (isStroke) {
	                        if (arc.containStroke(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            lineWidth, _x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingArc(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            _x, y
	                        );
	                    }
	                    xi = Math.cos(theta + dTheta) * rx + cx;
	                    yi = Math.sin(theta + dTheta) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    var x1 = x0 + width;
	                    var y1 = y0 + height;
	                    if (isStroke) {
	                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)
	                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)
	                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)
	                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)
	                        ) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // FIXME Clockwise ?
	                        w += windingLine(x1, y0, x1, y1, x, y);
	                        w += windingLine(x0, y1, x0, y0, x, y);
	                    }
	                    break;
	                case CMD.Z:
	                    if (isStroke) {
	                        if (containStroke(
	                            xi, yi, x0, y0, lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // Close a subpath
	                        w += windingLine(xi, yi, x0, y0, x, y);
	                        // 如果被任何一个 subpath 包含
	                        // FIXME subpaths may overlap
	                        // if (w !== 0) {
	                        //     return true;
	                        // }
	                    }
	                    xi = x0;
	                    yi = y0;
	                    break;
	            }
	        }
	        if (!isStroke && !isAroundEqual(yi, y0)) {
	            w += windingLine(xi, yi, x0, y0, x, y) || 0;
	        }
	        return w !== 0;
	    }
	
	    module.exports = {
	        contain: function (pathData, x, y) {
	            return containPath(pathData, 0, false, x, y);
	        },
	
	        containStroke: function (pathData, lineWidth, x, y) {
	            return containPath(pathData, lineWidth, true, x, y);
	        }
	    };


/***/ },
/* 74 */
/***/ function(module, exports) {

	
	    module.exports = {
	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }
	
	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	    };


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var curve = __webpack_require__(71);
	
	    module.exports = {
	        /**
	         * 三次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  x3
	         * @param  {number}  y3
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.cubicProjectPoint(
	                x0, y0, x1, y1, x2, y2, x3, y3,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var curve = __webpack_require__(71);
	
	    module.exports = {
	        /**
	         * 二次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.quadraticProjectPoint(
	                x0, y0, x1, y1, x2, y2,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var normalizeRadian = __webpack_require__(78).normalizeRadian;
	    var PI2 = Math.PI * 2;
	
	    module.exports = {
	        /**
	         * 圆弧描边包含判断
	         * @param  {number}  cx
	         * @param  {number}  cy
	         * @param  {number}  r
	         * @param  {number}  startAngle
	         * @param  {number}  endAngle
	         * @param  {boolean}  anticlockwise
	         * @param  {number} lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {Boolean}
	         */
	        containStroke: function (
	            cx, cy, r, startAngle, endAngle, anticlockwise,
	            lineWidth, x, y
	        ) {
	
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	
	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);
	
	            if ((d - _l > r) || (d + _l < r)) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }
	
	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return (angle >= startAngle && angle <= endAngle)
	                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
	        }
	    };


/***/ },
/* 78 */
/***/ function(module, exports) {

	
	
	    var PI2 = Math.PI * 2;
	    module.exports = {
	        normalizeRadian: function(angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	    };


/***/ },
/* 79 */
/***/ function(module, exports) {

	
	    module.exports = function windingLine(x0, y0, x1, y1, x, y) {
	        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	            return 0;
	        }
	        // Ignore horizontal line
	        if (y1 === y0) {
	            return 0;
	        }
	        var dir = y1 < y0 ? 1 : -1;
	        var t = (y - y0) / (y1 - y0);
	
	        // Avoid winding error when intersection point is the connect point of two line of polygon
	        if (t === 1 || t === 0) {
	            dir = y1 < y0 ? 0.5 : -0.5;
	        }
	
	        var x_ = t * (x1 - x0) + x0;
	
	        return x_ > x ? dir : 0;
	    };


/***/ },
/* 80 */
/***/ function(module, exports) {

	
	
	    var Pattern = function (image, repeat) {
	        this.image = image;
	        this.repeat = repeat;
	
	        // Can be cloned
	        this.type = 'pattern';
	    };
	
	    Pattern.prototype.getCanvasPattern = function (ctx) {
	
	        return this._canvasPattern
	            || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));
	    };
	
	    module.exports = Pattern;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var CMD = __webpack_require__(70).CMD;
	    var vec2 = __webpack_require__(31);
	    var v2ApplyTransform = vec2.applyTransform;
	
	    var points = [[], [], []];
	    var mathSqrt = Math.sqrt;
	    var mathAtan2 = Math.atan2;
	    function transformPath(path, m) {
	        var data = path.data;
	        var cmd;
	        var nPoint;
	        var i;
	        var j;
	        var k;
	        var p;
	
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var R = CMD.R;
	        var A = CMD.A;
	        var Q = CMD.Q;
	
	        for (i = 0, j = 0; i < data.length;) {
	            cmd = data[i++];
	            j = i;
	            nPoint = 0;
	
	            switch (cmd) {
	                case M:
	                    nPoint = 1;
	                    break;
	                case L:
	                    nPoint = 1;
	                    break;
	                case C:
	                    nPoint = 3;
	                    break;
	                case Q:
	                    nPoint = 2;
	                    break;
	                case A:
	                    var x = m[4];
	                    var y = m[5];
	                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                    // cx
	                    data[i++] += x;
	                    // cy
	                    data[i++] += y;
	                    // Scale rx and ry
	                    // FIXME Assume psi is 0 here
	                    data[i++] *= sx;
	                    data[i++] *= sy;
	
	                    // Start angle
	                    data[i++] += angle;
	                    // end angle
	                    data[i++] += angle;
	                    // FIXME psi
	                    i += 2;
	                    j = i;
	                    break;
	                case R:
	                    // x0, y0
	                    p[0] = data[i++];
	                    p[1] = data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	                    // x1, y1
	                    p[0] += data[i++];
	                    p[1] += data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	            }
	
	            for (k = 0; k < nPoint; k++) {
	                var p = points[k];
	                p[0] = data[i++];
	                p[1] = data[i++];
	
	                v2ApplyTransform(p, p, m);
	                // Write back
	                data[j++] = p[0];
	                data[j++] = p[1];
	            }
	        }
	    }
	
	    module.exports = transformPath;


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Image element
	 * @module zrender/graphic/Image
	 */
	
	
	
	    var Displayable = __webpack_require__(67);
	    var BoundingRect = __webpack_require__(30);
	    var zrUtil = __webpack_require__(25);
	
	    var LRU = __webpack_require__(83);
	    var globalImageCache = new LRU(50);
	    /**
	     * @alias zrender/graphic/Image
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function ZImage(opts) {
	        Displayable.call(this, opts);
	    }
	
	    ZImage.prototype = {
	
	        constructor: ZImage,
	
	        type: 'image',
	
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var src = style.image;
	            var image;
	
	            // Must bind each time
	            style.bind(ctx, this, prevEl);
	            // style.image is a url string
	            if (typeof src === 'string') {
	                image = this._image;
	            }
	            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	            else {
	                image = src;
	            }
	            // FIXME Case create many images with src
	            if (!image && src) {
	                // Try get from global image cache
	                var cachedImgObj = globalImageCache.get(src);
	                if (!cachedImgObj) {
	                    // Create a new image
	                    image = new Image();
	                    image.onload = function () {
	                        image.onload = null;
	                        for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                            cachedImgObj.pending[i].dirty();
	                        }
	                    };
	                    cachedImgObj = {
	                        image: image,
	                        pending: [this]
	                    };
	                    image.src = src;
	                    globalImageCache.put(src, cachedImgObj);
	                    this._image = image;
	                    return;
	                }
	                else {
	                    image = cachedImgObj.image;
	                    this._image = image;
	                    // Image is not complete finish, add to pending list
	                    if (!image.width || !image.height) {
	                        cachedImgObj.pending.push(this);
	                        return;
	                    }
	                }
	            }
	
	            if (image) {
	                // 图片已经加载完成
	                // if (image.nodeName.toUpperCase() == 'IMG') {
	                //     if (!image.complete) {
	                //         return;
	                //     }
	                // }
	                // Else is canvas
	
	                var width = style.width || image.width;
	                var height = style.height || image.height;
	                var x = style.x || 0;
	                var y = style.y || 0;
	                // 图片加载失败
	                if (!image.width || !image.height) {
	                    return;
	                }
	
	                // 设置transform
	                this.setTransform(ctx);
	
	
	                if (style.sWidth && style.sHeight) {
	                    var sx = style.sx || 0;
	                    var sy = style.sy || 0;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, style.sWidth, style.sHeight,
	                        x, y, width, height
	                    );
	                }
	                else if (style.sx && style.sy) {
	                    var sx = style.sx;
	                    var sy = style.sy;
	                    var sWidth = width - sx;
	                    var sHeight = height - sy;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, sWidth, sHeight,
	                        x, y, width, height
	                    );
	                }
	                else {
	                    ctx.drawImage(image, x, y, width, height);
	                }
	
	                // 如果没设置宽和高的话自动根据图片宽高设置
	                if (style.width == null) {
	                    style.width = width;
	                }
	                if (style.height == null) {
	                    style.height = height;
	                }
	
	                this.restoreTransform(ctx);
	
	                // Draw rect text
	                if (style.text != null) {
	                    this.drawRectText(ctx, this.getBoundingRect());
	                }
	
	            }
	        },
	
	        getBoundingRect: function () {
	            var style = this.style;
	            if (! this._rect) {
	                this._rect = new BoundingRect(
	                    style.x || 0, style.y || 0, style.width || 0, style.height || 0
	                );
	            }
	            return this._rect;
	        }
	    };
	
	    zrUtil.inherits(ZImage, Displayable);
	
	    module.exports = ZImage;


/***/ },
/* 83 */
/***/ function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU
	
	
	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     */
	    var LinkedList = function() {
	
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.head = null;
	
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.tail = null;
	
	        this._len = 0;
	    };
	
	    var linkedListProto = LinkedList.prototype;
	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {module:zrender/core/LRU~Entry}
	     */
	    linkedListProto.insert = function(val) {
	        var entry = new Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };
	
	    /**
	     * Insert an entry at the tail
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.insertEntry = function(entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        }
	        else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            this.tail = entry;
	        }
	        this._len++;
	    };
	
	    /**
	     * Remove entry.
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.remove = function(entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        }
	        else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._len--;
	    };
	
	    /**
	     * @return {number}
	     */
	    linkedListProto.len = function() {
	        return this._len;
	    };
	
	    /**
	     * @constructor
	     * @param {} val
	     */
	    var Entry = function(val) {
	        /**
	         * @type {}
	         */
	        this.value = val;
	
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.next;
	
	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.prev;
	    };
	
	    /**
	     * LRU Cache
	     * @constructor
	     * @alias module:zrender/core/LRU
	     */
	    var LRU = function(maxSize) {
	
	        this._list = new LinkedList();
	
	        this._map = {};
	
	        this._maxSize = maxSize || 10;
	    };
	
	    var LRUProto = LRU.prototype;
	
	    /**
	     * @param  {string} key
	     * @param  {} value
	     */
	    LRUProto.put = function(key, value) {
	        var list = this._list;
	        var map = this._map;
	        if (map[key] == null) {
	            var len = list.len();
	            if (len >= this._maxSize && len > 0) {
	                // Remove the least recently used
	                var leastUsedEntry = list.head;
	                list.remove(leastUsedEntry);
	                delete map[leastUsedEntry.key];
	            }
	
	            var entry = list.insert(value);
	            entry.key = key;
	            map[key] = entry;
	        }
	    };
	
	    /**
	     * @param  {string} key
	     * @return {}
	     */
	    LRUProto.get = function(key) {
	        var entry = this._map[key];
	        var list = this._list;
	        if (entry != null) {
	            // Put the latest used entry in the tail
	            if (entry !== list.tail) {
	                list.remove(entry);
	                list.insertEntry(entry);
	            }
	
	            return entry.value;
	        }
	    };
	
	    /**
	     * Clear the cache
	     */
	    LRUProto.clear = function() {
	        this._list.clear();
	        this._map = {};
	    };
	
	    module.exports = LRU;


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Text element
	 * @module zrender/graphic/Text
	 *
	 * TODO Wrapping
	 *
	 * Text not support gradient
	 */
	
	
	
	    var Displayable = __webpack_require__(67);
	    var zrUtil = __webpack_require__(25);
	    var textContain = __webpack_require__(29);
	
	    /**
	     * @alias zrender/graphic/Text
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    var Text = function (opts) {
	        Displayable.call(this, opts);
	    };
	
	    Text.prototype = {
	
	        constructor: Text,
	
	        type: 'text',
	
	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // Convert to string
	            var text = style.text;
	
	            // Convert to string
	            text != null && (text += '');
	
	            // Always bind style
	            style.bind(ctx, this, prevEl);
	
	            if (text) {
	
	                this.setTransform(ctx);
	
	                var textBaseline;
	                var textAlign = style.textAlign;
	                var font = style.textFont || style.font;
	                if (style.textVerticalAlign) {
	                    var rect = textContain.getBoundingRect(
	                        text, font, style.textAlign, 'top'
	                    );
	                    // Ignore textBaseline
	                    textBaseline = 'middle';
	                    switch (style.textVerticalAlign) {
	                        case 'middle':
	                            y -= rect.height / 2 - rect.lineHeight / 2;
	                            break;
	                        case 'bottom':
	                            y -= rect.height - rect.lineHeight / 2;
	                            break;
	                        default:
	                            y += rect.lineHeight / 2;
	                    }
	                }
	                else {
	                    textBaseline = style.textBaseline;
	                }
	
	                // TODO Invalid font
	                ctx.font = font || '12px sans-serif';
	                ctx.textAlign = textAlign || 'left';
	                // Use canvas default left textAlign. Giving invalid value will cause state not change
	                if (ctx.textAlign !== textAlign) {
	                    ctx.textAlign = 'left';
	                }
	                ctx.textBaseline = textBaseline || 'alphabetic';
	                // Use canvas default alphabetic baseline
	                if (ctx.textBaseline !== textBaseline) {
	                    ctx.textBaseline = 'alphabetic';
	                }
	
	                var lineHeight = textContain.measureText('国', ctx.font).width;
	
	                var textLines = text.split('\n');
	                for (var i = 0; i < textLines.length; i++) {
	                    style.hasFill() && ctx.fillText(textLines[i], x, y);
	                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);
	                    y += lineHeight;
	                }
	
	                this.restoreTransform(ctx);
	            }
	        },
	
	        getBoundingRect: function () {
	            if (!this._rect) {
	                var style = this.style;
	                var textVerticalAlign = style.textVerticalAlign;
	                var rect = textContain.getBoundingRect(
	                    style.text + '', style.textFont || style.font, style.textAlign,
	                    textVerticalAlign ? 'top' : style.textBaseline
	                );
	                switch (textVerticalAlign) {
	                    case 'middle':
	                        rect.y -= rect.height / 2;
	                        break;
	                    case 'bottom':
	                        rect.y -= rect.height;
	                        break;
	                }
	                rect.x += style.x || 0;
	                rect.y += style.y || 0;
	                this._rect = rect;
	            }
	            return this._rect;
	        }
	    };
	
	    zrUtil.inherits(Text, Displayable);
	
	    module.exports = Text;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */
	
	
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'circle',
	
	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0
	        },
	
	
	        buildPath : function (ctx, shape, inBundle) {
	            // Better stroking in ShapeBundle
	            // Always do it may have performence issue ( fill may be 2x more cost)
	            if (inBundle) {
	                ctx.moveTo(shape.cx + shape.r, shape.cy);
	            }
	            // Better stroking in ShapeBundle
	            // ctx.moveTo(shape.cx + shape.r, shape.cy);
	            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	        }
	    });
	


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */
	
	
	
	    var env = __webpack_require__(23);
	    var Path = __webpack_require__(66);
	
	    var shadowTemp = [
	        ['shadowBlur', 0],
	        ['shadowColor', '#000'],
	        ['shadowOffsetX', 0],
	        ['shadowOffsetY', 0]
	    ];
	
	    module.exports = Path.extend({
	
	        type: 'sector',
	
	        shape: {
	
	            cx: 0,
	
	            cy: 0,
	
	            r0: 0,
	
	            r: 0,
	
	            startAngle: 0,
	
	            endAngle: Math.PI * 2,
	
	            clockwise: true
	        },
	
	        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'
	            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),
	            // where exception "unexpected call to method or property access"
	            // might be thrown when calling ctx.fill after a path whose area size
	            // is zero is drawn and ctx.clip() is called and shadowBlur is set.
	            // (e.g.,
	            //  ctx.moveTo(10, 10);
	            //  ctx.lineTo(20, 10);
	            //  ctx.closePath();
	            //  ctx.clip();
	            //  ctx.shadowBlur = 10;
	            //  ...
	            //  ctx.fill();
	            // )
	            ? function () {
	                var clipPaths = this.__clipPaths;
	                var style = this.style;
	                var modified;
	
	                if (clipPaths) {
	                    for (var i = 0; i < clipPaths.length; i++) {
	                        var shape = clipPaths[i] && clipPaths[i].shape;
	                        if (shape && shape.startAngle === shape.endAngle) {
	                            for (var j = 0; j < shadowTemp.length; j++) {
	                                shadowTemp[j][2] = style[shadowTemp[j][0]];
	                                style[shadowTemp[j][0]] = shadowTemp[j][1];
	                            }
	                            modified = true;
	                            break;
	                        }
	                    }
	                }
	
	                Path.prototype.brush.apply(this, arguments);
	
	                if (modified) {
	                    for (var j = 0; j < shadowTemp.length; j++) {
	                        style[shadowTemp[j][0]] = shadowTemp[j][2];
	                    }
	                }
	            }
	            : Path.prototype.brush,
	
	        buildPath: function (ctx, shape) {
	
	            var x = shape.cx;
	            var y = shape.cy;
	            var r0 = Math.max(shape.r0 || 0, 0);
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;
	
	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);
	
	            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	
	            ctx.lineTo(unitX * r + x, unitY * r + y);
	
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	
	            ctx.lineTo(
	                Math.cos(endAngle) * r0 + x,
	                Math.sin(endAngle) * r0 + y
	            );
	
	            if (r0 !== 0) {
	                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	            }
	
	            ctx.closePath();
	        }
	    });
	


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */
	
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'ring',
	
	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0,
	            r0: 0
	        },
	
	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var PI2 = Math.PI * 2;
	            ctx.moveTo(x + shape.r, y);
	            ctx.arc(x, y, shape.r, 0, PI2, false);
	            ctx.moveTo(x + shape.r0, y);
	            ctx.arc(x, y, shape.r0, 0, PI2, true);
	        }
	    });
	


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */
	
	
	    var polyHelper = __webpack_require__(89);
	
	    module.exports = __webpack_require__(66).extend({
	        
	        type: 'polygon',
	
	        shape: {
	            points: null,
	
	            smooth: false,
	
	            smoothConstraint: null
	        },
	
	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, true);
	        }
	    });


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var smoothSpline = __webpack_require__(90);
	    var smoothBezier = __webpack_require__(91);
	
	    module.exports = {
	        buildPath: function (ctx, shape, closePath) {
	            var points = shape.points;
	            var smooth = shape.smooth;
	            if (points && points.length >= 2) {
	                if (smooth && smooth !== 'spline') {
	                    var controlPoints = smoothBezier(
	                        points, smooth, closePath, shape.smoothConstraint
	                    );
	
	                    ctx.moveTo(points[0][0], points[0][1]);
	                    var len = points.length;
	                    for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                        var cp1 = controlPoints[i * 2];
	                        var cp2 = controlPoints[i * 2 + 1];
	                        var p = points[(i + 1) % len];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                }
	                else {
	                    if (smooth === 'spline') {
	                        points = smoothSpline(points, closePath);
	                    }
	
	                    ctx.moveTo(points[0][0], points[0][1]);
	                    for (var i = 1, l = points.length; i < l; i++) {
	                        ctx.lineTo(points[i][0], points[i][1]);
	                    }
	                }
	
	                closePath && ctx.closePath();
	            }
	        }
	    };


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	    var vec2 = __webpack_require__(31);
	
	    /**
	     * @inner
	     */
	    function interpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }
	
	    /**
	     * @alias module:zrender/shape/util/smoothSpline
	     * @param {Array} points 线段顶点数组
	     * @param {boolean} isLoop
	     * @return {Array}
	     */
	    module.exports = function (points, isLoop) {
	        var len = points.length;
	        var ret = [];
	
	        var distance = 0;
	        for (var i = 1; i < len; i++) {
	            distance += vec2.distance(points[i - 1], points[i]);
	        }
	
	        var segs = distance / 2;
	        segs = segs < len ? len : segs;
	        for (var i = 0; i < segs; i++) {
	            var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	            var idx = Math.floor(pos);
	
	            var w = pos - idx;
	
	            var p0;
	            var p1 = points[idx % len];
	            var p2;
	            var p3;
	            if (!isLoop) {
	                p0 = points[idx === 0 ? idx : idx - 1];
	                p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	            }
	            else {
	                p0 = points[(idx - 1 + len) % len];
	                p2 = points[(idx + 1) % len];
	                p3 = points[(idx + 2) % len];
	            }
	
	            var w2 = w * w;
	            var w3 = w * w2;
	
	            ret.push([
	                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	            ]);
	        }
	        return ret;
	    };
	


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	
	    var vec2 = __webpack_require__(31);
	    var v2Min = vec2.min;
	    var v2Max = vec2.max;
	    var v2Scale = vec2.scale;
	    var v2Distance = vec2.distance;
	    var v2Add = vec2.add;
	
	    /**
	     * 贝塞尔平滑曲线
	     * @alias module:zrender/shape/util/smoothBezier
	     * @param {Array} points 线段顶点数组
	     * @param {number} smooth 平滑等级, 0-1
	     * @param {boolean} isLoop
	     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	     *                           整个折线的包围盒做一个并集用来约束控制点。
	     * @param {Array} 计算出来的控制点数组
	     */
	    module.exports = function (points, smooth, isLoop, constraint) {
	        var cps = [];
	
	        var v = [];
	        var v1 = [];
	        var v2 = [];
	        var prevPoint;
	        var nextPoint;
	
	        var min, max;
	        if (constraint) {
	            min = [Infinity, Infinity];
	            max = [-Infinity, -Infinity];
	            for (var i = 0, len = points.length; i < len; i++) {
	                v2Min(min, min, points[i]);
	                v2Max(max, max, points[i]);
	            }
	            // 与指定的包围盒做并集
	            v2Min(min, min, constraint[0]);
	            v2Max(max, max, constraint[1]);
	        }
	
	        for (var i = 0, len = points.length; i < len; i++) {
	            var point = points[i];
	
	            if (isLoop) {
	                prevPoint = points[i ? i - 1 : len - 1];
	                nextPoint = points[(i + 1) % len];
	            }
	            else {
	                if (i === 0 || i === len - 1) {
	                    cps.push(vec2.clone(points[i]));
	                    continue;
	                }
	                else {
	                    prevPoint = points[i - 1];
	                    nextPoint = points[i + 1];
	                }
	            }
	
	            vec2.sub(v, nextPoint, prevPoint);
	
	            // use degree to scale the handle length
	            v2Scale(v, v, smooth);
	
	            var d0 = v2Distance(point, prevPoint);
	            var d1 = v2Distance(point, nextPoint);
	            var sum = d0 + d1;
	            if (sum !== 0) {
	                d0 /= sum;
	                d1 /= sum;
	            }
	
	            v2Scale(v1, v, -d0);
	            v2Scale(v2, v, d1);
	            var cp0 = v2Add([], point, v1);
	            var cp1 = v2Add([], point, v2);
	            if (constraint) {
	                v2Max(cp0, cp0, min);
	                v2Min(cp0, cp0, max);
	                v2Max(cp1, cp1, min);
	                v2Min(cp1, cp1, max);
	            }
	            cps.push(cp0);
	            cps.push(cp1);
	        }
	
	        if (isLoop) {
	            cps.push(cps.shift());
	        }
	
	        return cps;
	    };
	


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/graphic/shape/Polyline
	 */
	
	
	    var polyHelper = __webpack_require__(89);
	
	    module.exports = __webpack_require__(66).extend({
	        
	        type: 'polyline',
	
	        shape: {
	            points: null,
	
	            smooth: false,
	
	            smoothConstraint: null
	        },
	
	        style: {
	            stroke: '#000',
	
	            fill: null
	        },
	
	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, false);
	        }
	    });


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */
	
	
	    var roundRectHelper = __webpack_require__(94);
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'rect',
	
	        shape: {
	            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	            // r缩写为1         相当于 [1, 1, 1, 1]
	            // r缩写为[1]       相当于 [1, 1, 1, 1]
	            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	            r: 0,
	
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },
	
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            if (!shape.r) {
	                ctx.rect(x, y, width, height);
	            }
	            else {
	                roundRectHelper.buildPath(ctx, shape);
	            }
	            ctx.closePath();
	            return;
	        }
	    });
	


/***/ },
/* 94 */
/***/ function(module, exports) {

	
	
	    module.exports = {
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            var r = shape.r;
	            var r1;
	            var r2;
	            var r3;
	            var r4;
	
	            // Convert width and height to positive for better borderRadius
	            if (width < 0) {
	                x = x + width;
	                width = -width;
	            }
	            if (height < 0) {
	                y = y + height;
	                height = -height;
	            }
	
	            if (typeof r === 'number') {
	                r1 = r2 = r3 = r4 = r;
	            }
	            else if (r instanceof Array) {
	                if (r.length === 1) {
	                    r1 = r2 = r3 = r4 = r[0];
	                }
	                else if (r.length === 2) {
	                    r1 = r3 = r[0];
	                    r2 = r4 = r[1];
	                }
	                else if (r.length === 3) {
	                    r1 = r[0];
	                    r2 = r4 = r[1];
	                    r3 = r[2];
	                }
	                else {
	                    r1 = r[0];
	                    r2 = r[1];
	                    r3 = r[2];
	                    r4 = r[3];
	                }
	            }
	            else {
	                r1 = r2 = r3 = r4 = 0;
	            }
	
	            var total;
	            if (r1 + r2 > width) {
	                total = r1 + r2;
	                r1 *= width / total;
	                r2 *= width / total;
	            }
	            if (r3 + r4 > width) {
	                total = r3 + r4;
	                r3 *= width / total;
	                r4 *= width / total;
	            }
	            if (r2 + r3 > height) {
	                total = r2 + r3;
	                r2 *= height / total;
	                r3 *= height / total;
	            }
	            if (r1 + r4 > height) {
	                total = r1 + r4;
	                r1 *= height / total;
	                r4 *= height / total;
	            }
	            ctx.moveTo(x + r1, y);
	            ctx.lineTo(x + width - r2, y);
	            r2 !== 0 && ctx.quadraticCurveTo(
	                x + width, y, x + width, y + r2
	            );
	            ctx.lineTo(x + width, y + height - r3);
	            r3 !== 0 && ctx.quadraticCurveTo(
	                x + width, y + height, x + width - r3, y + height
	            );
	            ctx.lineTo(x + r4, y + height);
	            r4 !== 0 && ctx.quadraticCurveTo(
	                x, y + height, x, y + height - r4
	            );
	            ctx.lineTo(x, y + r1);
	            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	        }
	    };


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'line',
	
	        shape: {
	            // Start point
	            x1: 0,
	            y1: 0,
	            // End point
	            x2: 0,
	            y2: 0,
	
	            percent: 1
	        },
	
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	
	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var percent = shape.percent;
	
	            if (percent === 0) {
	                return;
	            }
	
	            ctx.moveTo(x1, y1);
	
	            if (percent < 1) {
	                x2 = x1 * (1 - percent) + x2 * percent;
	                y2 = y1 * (1 - percent) + y2 * percent;
	            }
	            ctx.lineTo(x2, y2);
	        },
	
	        /**
	         * Get point at percent
	         * @param  {number} percent
	         * @return {Array.<number>}
	         */
	        pointAt: function (p) {
	            var shape = this.shape;
	            return [
	                shape.x1 * (1 - p) + shape.x2 * p,
	                shape.y1 * (1 - p) + shape.y2 * p
	            ];
	        }
	    });
	


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */
	
	
	    var curveTool = __webpack_require__(71);
	    var vec2 = __webpack_require__(31);
	    var quadraticSubdivide = curveTool.quadraticSubdivide;
	    var cubicSubdivide = curveTool.cubicSubdivide;
	    var quadraticAt = curveTool.quadraticAt;
	    var cubicAt = curveTool.cubicAt;
	    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	    var cubicDerivativeAt = curveTool.cubicDerivativeAt;
	
	    var out = [];
	
	    function someVectorAt(shape, t, isTangent) {
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        if (cpx2 === null || cpy2 === null) {
	            return [
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)
	            ];
	        }
	        else {
	            return [
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)
	            ];
	        }
	    }
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'bezier-curve',
	
	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            cpx1: 0,
	            cpy1: 0,
	            // cpx2: 0,
	            // cpy2: 0
	
	            // Curve show percent, for animating
	            percent: 1
	        },
	
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	
	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var cpx1 = shape.cpx1;
	            var cpy1 = shape.cpy1;
	            var cpx2 = shape.cpx2;
	            var cpy2 = shape.cpy2;
	            var percent = shape.percent;
	            if (percent === 0) {
	                return;
	            }
	
	            ctx.moveTo(x1, y1);
	
	            if (cpx2 == null || cpy2 == null) {
	                if (percent < 1) {
	                    quadraticSubdivide(
	                        x1, cpx1, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    x2 = out[2];
	                    quadraticSubdivide(
	                        y1, cpy1, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    y2 = out[2];
	                }
	
	                ctx.quadraticCurveTo(
	                    cpx1, cpy1,
	                    x2, y2
	                );
	            }
	            else {
	                if (percent < 1) {
	                    cubicSubdivide(
	                        x1, cpx1, cpx2, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    cpx2 = out[2];
	                    x2 = out[3];
	                    cubicSubdivide(
	                        y1, cpy1, cpy2, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    cpy2 = out[2];
	                    y2 = out[3];
	                }
	                ctx.bezierCurveTo(
	                    cpx1, cpy1,
	                    cpx2, cpy2,
	                    x2, y2
	                );
	            }
	        },
	
	        /**
	         * Get point at percent
	         * @param  {number} t
	         * @return {Array.<number>}
	         */
	        pointAt: function (t) {
	            return someVectorAt(this.shape, t, false);
	        },
	
	        /**
	         * Get tangent at percent
	         * @param  {number} t
	         * @return {Array.<number>}
	         */
	        tangentAt: function (t) {
	            var p = someVectorAt(this.shape, t, true);
	            return vec2.normalize(p, p);
	        }
	    });
	


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	 
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'arc',
	
	        shape: {
	
	            cx: 0,
	
	            cy: 0,
	
	            r: 0,
	
	            startAngle: 0,
	
	            endAngle: Math.PI * 2,
	
	            clockwise: true
	        },
	
	        style: {
	
	            stroke: '#000',
	
	            fill: null
	        },
	
	        buildPath: function (ctx, shape) {
	
	            var x = shape.cx;
	            var y = shape.cy;
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;
	
	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);
	
	            ctx.moveTo(unitX * r + x, unitY * r + y);
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	        }
	    });


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	// CompoundPath to improve performance
	
	
	    var Path = __webpack_require__(66);
	    module.exports = Path.extend({
	
	        type: 'compound',
	
	        shape: {
	
	            paths: null
	        },
	
	        _updatePathDirty: function () {
	            var dirtyPath = this.__dirtyPath;
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                // Mark as dirty if any subpath is dirty
	                dirtyPath = dirtyPath || paths[i].__dirtyPath;
	            }
	            this.__dirtyPath = dirtyPath;
	            this.__dirty = this.__dirty || dirtyPath;
	        },
	
	        beforeBrush: function () {
	            this._updatePathDirty();
	            var paths = this.shape.paths || [];
	            var scale = this.getGlobalScale();
	            // Update path scale
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].path.setScale(scale[0], scale[1]);
	            }
	        },
	
	        buildPath: function (ctx, shape) {
	            var paths = shape.paths || [];
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].buildPath(ctx, paths[i].shape, true);
	            }
	        },
	
	        afterBrush: function () {
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].__dirtyPath = false;
	            }
	        },
	
	        getBoundingRect: function () {
	            this._updatePathDirty();
	            return Path.prototype.getBoundingRect.call(this);
	        }
	    });


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var Gradient = __webpack_require__(100);
	
	    /**
	     * x, y, x2, y2 are all percent from 0 to 1
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @param {number} [x2=1]
	     * @param {number} [y2=0]
	     * @param {Array.<Object>} colorStops
	     * @param {boolean} [globalCoord=false]
	     */
	    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	        this.x = x == null ? 0 : x;
	
	        this.y = y == null ? 0 : y;
	
	        this.x2 = x2 == null ? 1 : x2;
	
	        this.y2 = y2 == null ? 0 : y2;
	
	        // Can be cloned
	        this.type = 'linear';
	
	        // If use global coord
	        this.global = globalCoord || false;
	
	        Gradient.call(this, colorStops);
	    };
	
	    LinearGradient.prototype = {
	
	        constructor: LinearGradient
	    };
	
	    zrUtil.inherits(LinearGradient, Gradient);
	
	    module.exports = LinearGradient;


/***/ },
/* 100 */
/***/ function(module, exports) {

	
	
	    /**
	     * @param {Array.<Object>} colorStops
	     */
	    var Gradient = function (colorStops) {
	
	        this.colorStops = colorStops || [];
	    };
	
	    Gradient.prototype = {
	
	        constructor: Gradient,
	
	        addColorStop: function (offset, color) {
	            this.colorStops.push({
	
	                offset: offset,
	
	                color: color
	            });
	        }
	    };
	
	    module.exports = Gradient;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var Gradient = __webpack_require__(100);
	
	    /**
	     * x, y, r are all percent from 0 to 1
	     * @param {number} [x=0.5]
	     * @param {number} [y=0.5]
	     * @param {number} [r=0.5]
	     * @param {Array.<Object>} [colorStops]
	     * @param {boolean} [globalCoord=false]
	     */
	    var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	        this.x = x == null ? 0.5 : x;
	
	        this.y = y == null ? 0.5 : y;
	
	        this.r = r == null ? 0.5 : r;
	
	        // Can be cloned
	        this.type = 'radial';
	
	        // If use global coord
	        this.global = globalCoord || false;
	
	        Gradient.call(this, colorStops);
	    };
	
	    RadialGradient.prototype = {
	
	        constructor: RadialGradient
	    };
	
	    zrUtil.inherits(RadialGradient, Gradient);
	
	    module.exports = RadialGradient;


/***/ },
/* 102 */
/***/ function(module, exports) {

	
	
	    var lib = {};
	
	    var ORIGIN_METHOD = '\0__throttleOriginMethod';
	    var RATE = '\0__throttleRate';
	    var THROTTLE_TYPE = '\0__throttleType';
	
	    /**
	     * @public
	     * @param {(Function)} fn
	     * @param {number} [delay=0] Unit: ms.
	     * @param {boolean} [debounce=false]
	     *        true: If call interval less than `delay`, only the last call works.
	     *        false: If call interval less than `delay, call works on fixed rate.
	     * @return {(Function)} throttled fn.
	     */
	    lib.throttle = function (fn, delay, debounce) {
	
	        var currCall;
	        var lastCall = 0;
	        var lastExec = 0;
	        var timer = null;
	        var diff;
	        var scope;
	        var args;
	
	        delay = delay || 0;
	
	        function exec() {
	            lastExec = (new Date()).getTime();
	            timer = null;
	            fn.apply(scope, args || []);
	        }
	
	        var cb = function () {
	            currCall = (new Date()).getTime();
	            scope = this;
	            args = arguments;
	            diff = currCall - (debounce ? lastCall : lastExec) - delay;
	
	            clearTimeout(timer);
	
	            if (debounce) {
	                timer = setTimeout(exec, delay);
	            }
	            else {
	                if (diff >= 0) {
	                    exec();
	                }
	                else {
	                    timer = setTimeout(exec, -diff);
	                }
	            }
	
	            lastCall = currCall;
	        };
	
	        /**
	         * Clear throttle.
	         * @public
	         */
	        cb.clear = function () {
	            if (timer) {
	                clearTimeout(timer);
	                timer = null;
	            }
	        };
	
	        return cb;
	    };
	
	    /**
	     * Create throttle method or update throttle rate.
	     *
	     * @example
	     * ComponentView.prototype.render = function () {
	     *     ...
	     *     throttle.createOrUpdate(
	     *         this,
	     *         '_dispatchAction',
	     *         this.model.get('throttle'),
	     *         'fixRate'
	     *     );
	     * };
	     * ComponentView.prototype.remove = function () {
	     *     throttle.clear(this, '_dispatchAction');
	     * };
	     * ComponentView.prototype.dispose = function () {
	     *     throttle.clear(this, '_dispatchAction');
	     * };
	     *
	     * @public
	     * @param {Object} obj
	     * @param {string} fnAttr
	     * @param {number} [rate]
	     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	     * @return {Function} throttled function.
	     */
	    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {
	        var fn = obj[fnAttr];
	
	        if (!fn) {
	            return;
	        }
	
	        var originFn = fn[ORIGIN_METHOD] || fn;
	        var lastThrottleType = fn[THROTTLE_TYPE];
	        var lastRate = fn[RATE];
	
	        if (lastRate !== rate || lastThrottleType !== throttleType) {
	            if (rate == null || !throttleType) {
	                return (obj[fnAttr] = originFn);
	            }
	
	            fn = obj[fnAttr] = lib.throttle(
	                originFn, rate, throttleType === 'debounce'
	            );
	            fn[ORIGIN_METHOD] = originFn;
	            fn[THROTTLE_TYPE] = throttleType;
	            fn[RATE] = rate;
	        }
	
	        return fn;
	    };
	
	    /**
	     * Clear throttle. Example see throttle.createOrUpdate.
	     *
	     * @public
	     * @param {Object} obj
	     * @param {string} fnAttr
	     */
	    lib.clear = function (obj, fnAttr) {
	        var fn = obj[fnAttr];
	        if (fn && fn[ORIGIN_METHOD]) {
	            obj[fnAttr] = fn[ORIGIN_METHOD];
	        }
	    };
	
	    module.exports = lib;
	


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * ZRender, a high performance 2d drawing library.
	 *
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	// Global defines
	
	    var guid = __webpack_require__(53);
	    var env = __webpack_require__(23);
	    var zrUtil = __webpack_require__(25);
	
	    var Handler = __webpack_require__(104);
	    var Storage = __webpack_require__(106);
	    var Animation = __webpack_require__(108);
	    var HandlerProxy = __webpack_require__(111);
	
	    var useVML = !env.canvasSupported;
	
	    var painterCtors = {
	        canvas: __webpack_require__(113)
	    };
	
	    var instances = {};    // ZRender实例map索引
	
	    var zrender = {};
	
	    /**
	     * @type {string}
	     */
	    zrender.version = '3.3.0';
	
	    /**
	     * Initializing a zrender instance
	     * @param {HTMLElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	     * @return {module:zrender/ZRender}
	     */
	    zrender.init = function(dom, opts) {
	        var zr = new ZRender(guid(), dom, opts);
	        instances[zr.id] = zr;
	        return zr;
	    };
	
	    /**
	     * Dispose zrender instance
	     * @param {module:zrender/ZRender} zr
	     */
	    zrender.dispose = function (zr) {
	        if (zr) {
	            zr.dispose();
	        }
	        else {
	            for (var key in instances) {
	                if (instances.hasOwnProperty(key)) {
	                    instances[key].dispose();
	                }
	            }
	            instances = {};
	        }
	
	        return zrender;
	    };
	
	    /**
	     * Get zrender instance by id
	     * @param {string} id zrender instance id
	     * @return {module:zrender/ZRender}
	     */
	    zrender.getInstance = function (id) {
	        return instances[id];
	    };
	
	    zrender.registerPainter = function (name, Ctor) {
	        painterCtors[name] = Ctor;
	    };
	
	    function delInstance(id) {
	        delete instances[id];
	    }
	
	    /**
	     * @module zrender/ZRender
	     */
	    /**
	     * @constructor
	     * @alias module:zrender/ZRender
	     * @param {string} id
	     * @param {HTMLDomElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	     */
	    var ZRender = function(id, dom, opts) {
	
	        opts = opts || {};
	
	        /**
	         * @type {HTMLDomElement}
	         */
	        this.dom = dom;
	
	        /**
	         * @type {string}
	         */
	        this.id = id;
	
	        var self = this;
	        var storage = new Storage();
	
	        var rendererType = opts.renderer;
	        if (useVML) {
	            if (!painterCtors.vml) {
	                throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	            }
	            rendererType = 'vml';
	        }
	        else if (!rendererType || !painterCtors[rendererType]) {
	            rendererType = 'canvas';
	        }
	        var painter = new painterCtors[rendererType](dom, storage, opts);
	
	        this.storage = storage;
	        this.painter = painter;
	
	        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;
	        this.handler = new Handler(storage, painter, handerProxy, painter.root);
	
	        /**
	         * @type {module:zrender/animation/Animation}
	         */
	        this.animation = new Animation({
	            stage: {
	                update: zrUtil.bind(this.flush, this)
	            }
	        });
	        this.animation.start();
	
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._needsRefresh;
	
	        // 修改 storage.delFromMap, 每次删除元素之前删除动画
	        // FIXME 有点ugly
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;
	
	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);
	
	            oldDelFromMap.call(storage, elId);
	
	            el && el.removeSelfFromZr(self);
	        };
	
	        storage.addToMap = function (el) {
	            oldAddToMap.call(storage, el);
	
	            el.addSelfToZr(self);
	        };
	    };
	
	    ZRender.prototype = {
	
	        constructor: ZRender,
	        /**
	         * 获取实例唯一标识
	         * @return {string}
	         */
	        getId: function () {
	            return this.id;
	        },
	
	        /**
	         * 添加元素
	         * @param  {module:zrender/Element} el
	         */
	        add: function (el) {
	            this.storage.addRoot(el);
	            this._needsRefresh = true;
	        },
	
	        /**
	         * 删除元素
	         * @param  {module:zrender/Element} el
	         */
	        remove: function (el) {
	            this.storage.delRoot(el);
	            this._needsRefresh = true;
	        },
	
	        /**
	         * Change configuration of layer
	         * @param {string} zLevel
	         * @param {Object} config
	         * @param {string} [config.clearColor=0] Clear color
	         * @param {string} [config.motionBlur=false] If enable motion blur
	         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	        */
	        configLayer: function (zLevel, config) {
	            this.painter.configLayer(zLevel, config);
	            this._needsRefresh = true;
	        },
	
	        /**
	         * Repaint the canvas immediately
	         */
	        refreshImmediately: function () {
	            // Clear needsRefresh ahead to avoid something wrong happens in refresh
	            // Or it will cause zrender refreshes again and again.
	            this._needsRefresh = false;
	            this.painter.refresh();
	            /**
	             * Avoid trigger zr.refresh in Element#beforeUpdate hook
	             */
	            this._needsRefresh = false;
	        },
	
	        /**
	         * Mark and repaint the canvas in the next frame of browser
	         */
	        refresh: function() {
	            this._needsRefresh = true;
	        },
	
	        /**
	         * Perform all refresh
	         */
	        flush: function () {
	            if (this._needsRefresh) {
	                this.refreshImmediately();
	            }
	            if (this._needsRefreshHover) {
	                this.refreshHoverImmediately();
	            }
	        },
	
	        /**
	         * Add element to hover layer
	         * @param  {module:zrender/Element} el
	         * @param {Object} style
	         */
	        addHover: function (el, style) {
	            if (this.painter.addHover) {
	                this.painter.addHover(el, style);
	                this.refreshHover();
	            }
	        },
	
	        /**
	         * Add element from hover layer
	         * @param  {module:zrender/Element} el
	         */
	        removeHover: function (el) {
	            if (this.painter.removeHover) {
	                this.painter.removeHover(el);
	                this.refreshHover();
	            }
	        },
	
	        /**
	         * Clear all hover elements in hover layer
	         * @param  {module:zrender/Element} el
	         */
	        clearHover: function () {
	            if (this.painter.clearHover) {
	                this.painter.clearHover();
	                this.refreshHover();
	            }
	        },
	
	        /**
	         * Refresh hover in next frame
	         */
	        refreshHover: function () {
	            this._needsRefreshHover = true;
	        },
	
	        /**
	         * Refresh hover immediately
	         */
	        refreshHoverImmediately: function () {
	            this._needsRefreshHover = false;
	            this.painter.refreshHover && this.painter.refreshHover();
	        },
	
	        /**
	         * Resize the canvas.
	         * Should be invoked when container size is changed
	         * @param {Object} [opts]
	         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	         */
	        resize: function(opts) {
	            opts = opts || {};
	            this.painter.resize(opts.width, opts.height);
	            this.handler.resize();
	        },
	
	        /**
	         * Stop and clear all animation immediately
	         */
	        clearAnimation: function () {
	            this.animation.clear();
	        },
	
	        /**
	         * Get container width
	         */
	        getWidth: function() {
	            return this.painter.getWidth();
	        },
	
	        /**
	         * Get container height
	         */
	        getHeight: function() {
	            return this.painter.getHeight();
	        },
	
	        /**
	         * Export the canvas as Base64 URL
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff']
	         * @return {string} Base64 URL
	         */
	        // toDataURL: function(type, backgroundColor) {
	        //     return this.painter.getRenderedCanvas({
	        //         backgroundColor: backgroundColor
	        //     }).toDataURL(type);
	        // },
	
	        /**
	         * Converting a path to image.
	         * It has much better performance of drawing image rather than drawing a vector path.
	         * @param {module:zrender/graphic/Path} e
	         * @param {number} width
	         * @param {number} height
	         */
	        pathToImage: function(e, width, height) {
	            var id = guid();
	            return this.painter.pathToImage(id, e, width, height);
	        },
	
	        /**
	         * Set default cursor
	         * @param {string} [cursorStyle='default'] 例如 crosshair
	         */
	        setCursorStyle: function (cursorStyle) {
	            this.handler.setCursorStyle(cursorStyle);
	        },
	
	        /**
	         * Bind event
	         *
	         * @param {string} eventName Event name
	         * @param {Function} eventHandler Handler function
	         * @param {Object} [context] Context object
	         */
	        on: function(eventName, eventHandler, context) {
	            this.handler.on(eventName, eventHandler, context);
	        },
	
	        /**
	         * Unbind event
	         * @param {string} eventName Event name
	         * @param {Function} [eventHandler] Handler function
	         */
	        off: function(eventName, eventHandler) {
	            this.handler.off(eventName, eventHandler);
	        },
	
	        /**
	         * Trigger event manually
	         *
	         * @param {string} eventName Event name
	         * @param {event=} event Event object
	         */
	        trigger: function (eventName, event) {
	            this.handler.trigger(eventName, event);
	        },
	
	
	        /**
	         * Clear all objects and the canvas.
	         */
	        clear: function () {
	            this.storage.delRoot();
	            this.painter.clear();
	        },
	
	        /**
	         * Dispose self.
	         */
	        dispose: function () {
	            this.animation.stop();
	
	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler.dispose();
	
	            this.animation =
	            this.storage =
	            this.painter =
	            this.handler = null;
	
	            delInstance(this.id);
	        }
	    };
	
	    module.exports = zrender;
	


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Handler
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */
	
	
	    var util = __webpack_require__(25);
	    var Draggable = __webpack_require__(105);
	
	    var Eventful = __webpack_require__(54);
	
	    function makeEventPacket(eveType, target, event) {
	        return {
	            type: eveType,
	            event: event,
	            target: target,
	            cancelBubble: false,
	            offsetX: event.zrX,
	            offsetY: event.zrY,
	            gestureEvent: event.gestureEvent,
	            pinchX: event.pinchX,
	            pinchY: event.pinchY,
	            pinchScale: event.pinchScale,
	            wheelDelta: event.zrDelta,
	            zrByTouch: event.zrByTouch
	        };
	    }
	
	    function EmptyProxy () {}
	    EmptyProxy.prototype.dispose = function () {};
	
	    var handlerNames = [
	        'click', 'dblclick', 'mousewheel', 'mouseout',
	        'mouseup', 'mousedown', 'mousemove', 'contextmenu'
	    ];
	    /**
	     * @alias module:zrender/Handler
	     * @constructor
	     * @extends module:zrender/mixin/Eventful
	     * @param {module:zrender/Storage} storage Storage instance.
	     * @param {module:zrender/Painter} painter Painter instance.
	     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	     */
	    var Handler = function(storage, painter, proxy, painterRoot) {
	        Eventful.call(this);
	
	        this.storage = storage;
	
	        this.painter = painter;
	
	        this.painterRoot = painterRoot;
	
	        proxy = proxy || new EmptyProxy();
	
	        /**
	         * Proxy of event. can be Dom, WebGLSurface, etc.
	         */
	        this.proxy = proxy;
	
	        // Attach handler
	        proxy.handler = this;
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._hovered;
	
	        /**
	         * @private
	         * @type {Date}
	         */
	        this._lastTouchMoment;
	
	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastX;
	
	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastY;
	
	
	        Draggable.call(this);
	
	        util.each(handlerNames, function (name) {
	            proxy.on && proxy.on(name, this[name], this);
	        }, this);
	    };
	
	    Handler.prototype = {
	
	        constructor: Handler,
	
	        mousemove: function (event) {
	            var x = event.zrX;
	            var y = event.zrY;
	
	            var hovered = this.findHover(x, y, null);
	            var lastHovered = this._hovered;
	            var proxy = this.proxy;
	
	            this._hovered = hovered;
	
	            proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');
	
	            // Mouse out on previous hovered element
	            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	                this.dispatchToElement(lastHovered, 'mouseout', event);
	            }
	
	            // Mouse moving on one element
	            this.dispatchToElement(hovered, 'mousemove', event);
	
	            // Mouse over on a new element
	            if (hovered && hovered !== lastHovered) {
	                this.dispatchToElement(hovered, 'mouseover', event);
	            }
	        },
	
	        mouseout: function (event) {
	            this.dispatchToElement(this._hovered, 'mouseout', event);
	
	            // There might be some doms created by upper layer application
	            // at the same level of painter.getViewportRoot() (e.g., tooltip
	            // dom created by echarts), where 'globalout' event should not
	            // be triggered when mouse enters these doms. (But 'mouseout'
	            // should be triggered at the original hovered element as usual).
	            var element = event.toElement || event.relatedTarget;
	            var innerDom;
	            do {
	                element = element && element.parentNode;
	            }
	            while (element && element.nodeType != 9 && !(
	                innerDom = element === this.painterRoot
	            ));
	
	            !innerDom && this.trigger('globalout', {event: event});
	        },
	
	        /**
	         * Resize
	         */
	        resize: function (event) {
	            this._hovered = null;
	        },
	
	        /**
	         * Dispatch event
	         * @param {string} eventName
	         * @param {event=} eventArgs
	         */
	        dispatch: function (eventName, eventArgs) {
	            var handler = this[eventName];
	            handler && handler.call(this, eventArgs);
	        },
	
	        /**
	         * Dispose
	         */
	        dispose: function () {
	
	            this.proxy.dispose();
	
	            this.storage =
	            this.proxy =
	            this.painter = null;
	        },
	
	        /**
	         * 设置默认的cursor style
	         * @param {string} [cursorStyle='default'] 例如 crosshair
	         */
	        setCursorStyle: function (cursorStyle) {
	            var proxy = this.proxy;
	            proxy.setCursor && proxy.setCursor(cursorStyle);
	        },
	
	        /**
	         * 事件分发代理
	         *
	         * @private
	         * @param {Object} targetEl 目标图形元素
	         * @param {string} eventName 事件名称
	         * @param {Object} event 事件对象
	         */
	        dispatchToElement: function (targetEl, eventName, event) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = makeEventPacket(eventName, targetEl, event);
	
	            var el = targetEl;
	
	            while (el) {
	                el[eventHandler]
	                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	
	                el.trigger(eventName, eventPacket);
	
	                el = el.parent;
	
	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }
	
	            if (!eventPacket.cancelBubble) {
	                // 冒泡到顶级 zrender 对象
	                this.trigger(eventName, eventPacket);
	                // 分发事件到用户自定义层
	                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	                this.painter && this.painter.eachOtherLayer(function (layer) {
	                    if (typeof(layer[eventHandler]) == 'function') {
	                        layer[eventHandler].call(layer, eventPacket);
	                    }
	                    if (layer.trigger) {
	                        layer.trigger(eventName, eventPacket);
	                    }
	                });
	            }
	        },
	
	        /**
	         * @private
	         * @param {number} x
	         * @param {number} y
	         * @param {module:zrender/graphic/Displayable} exclude
	         * @method
	         */
	        findHover: function(x, y, exclude) {
	            var list = this.storage.getDisplayList();
	            for (var i = list.length - 1; i >= 0 ; i--) {
	                if (!list[i].silent
	                 && list[i] !== exclude
	                 // getDisplayList may include ignored item in VML mode
	                 && !list[i].ignore
	                 && isHover(list[i], x, y)) {
	                    return list[i];
	                }
	            }
	        }
	    };
	
	    // Common handlers
	    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	        Handler.prototype[name] = function (event) {
	            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	            var hovered = this.findHover(event.zrX, event.zrY, null);
	
	            if (name === 'mousedown') {
	                this._downel = hovered;
	                // In case click triggered before mouseup
	                this._upel = hovered;
	            }
	            else if (name === 'mosueup') {
	                this._upel = hovered;
	            }
	            else if (name === 'click') {
	                if (this._downel !== this._upel) {
	                    return;
	                }
	            }
	
	            this.dispatchToElement(hovered, name, event);
	        };
	    });
	
	    function isHover(displayable, x, y) {
	        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	            var el = displayable;
	            while (el) {
	                // If ancestor is silent or clipped by ancestor
	                if (el.silent || (el.clipPath && !el.clipPath.contain(x, y)))  {
	                    return false;
	                }
	                el = el.parent;
	            }
	            return true;
	        }
	
	        return false;
	    }
	
	    util.mixin(Handler, Eventful);
	    util.mixin(Handler, Draggable);
	
	    module.exports = Handler;


/***/ },
/* 105 */
/***/ function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale
	
	    function Draggable() {
	
	        this.on('mousedown', this._dragStart, this);
	        this.on('mousemove', this._drag, this);
	        this.on('mouseup', this._dragEnd, this);
	        this.on('globalout', this._dragEnd, this);
	        // this._dropTarget = null;
	        // this._draggingTarget = null;
	
	        // this._x = 0;
	        // this._y = 0;
	    }
	
	    Draggable.prototype = {
	
	        constructor: Draggable,
	
	        _dragStart: function (e) {
	            var draggingTarget = e.target;
	            if (draggingTarget && draggingTarget.draggable) {
	                this._draggingTarget = draggingTarget;
	                draggingTarget.dragging = true;
	                this._x = e.offsetX;
	                this._y = e.offsetY;
	
	                this.dispatchToElement(draggingTarget, 'dragstart', e.event);
	            }
	        },
	
	        _drag: function (e) {
	            var draggingTarget = this._draggingTarget;
	            if (draggingTarget) {
	
	                var x = e.offsetX;
	                var y = e.offsetY;
	
	                var dx = x - this._x;
	                var dy = y - this._y;
	                this._x = x;
	                this._y = y;
	
	                draggingTarget.drift(dx, dy, e);
	                this.dispatchToElement(draggingTarget, 'drag', e.event);
	
	                var dropTarget = this.findHover(x, y, draggingTarget);
	                var lastDropTarget = this._dropTarget;
	                this._dropTarget = dropTarget;
	
	                if (draggingTarget !== dropTarget) {
	                    if (lastDropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(lastDropTarget, 'dragleave', e.event);
	                    }
	                    if (dropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(dropTarget, 'dragenter', e.event);
	                    }
	                }
	            }
	        },
	
	        _dragEnd: function (e) {
	            var draggingTarget = this._draggingTarget;
	
	            if (draggingTarget) {
	                draggingTarget.dragging = false;
	            }
	
	            this.dispatchToElement(draggingTarget, 'dragend', e.event);
	
	            if (this._dropTarget) {
	                this.dispatchToElement(this._dropTarget, 'drop', e.event);
	            }
	
	            this._draggingTarget = null;
	            this._dropTarget = null;
	        }
	
	    };
	
	    module.exports = Draggable;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */
	
	
	    var util = __webpack_require__(25);
	    var env = __webpack_require__(23);
	
	    var Group = __webpack_require__(51);
	
	    // Use timsort because in most case elements are partially sorted
	    // https://jsfiddle.net/pissang/jr4x7mdm/8/
	    var timsort = __webpack_require__(107);
	
	    function shapeCompareFunc(a, b) {
	        if (a.zlevel === b.zlevel) {
	            if (a.z === b.z) {
	                // if (a.z2 === b.z2) {
	                //     // FIXME Slow has renderidx compare
	                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	                //     return a.__renderidx - b.__renderidx;
	                // }
	                return a.z2 - b.z2;
	            }
	            return a.z - b.z;
	        }
	        return a.zlevel - b.zlevel;
	    }
	    /**
	     * 内容仓库 (M)
	     * @alias module:zrender/Storage
	     * @constructor
	     */
	    var Storage = function () {
	        // 所有常规形状，id索引的map
	        this._elements = {};
	
	        this._roots = [];
	
	        this._displayList = [];
	
	        this._displayListLen = 0;
	    };
	
	    Storage.prototype = {
	
	        constructor: Storage,
	
	        /**
	         * @param  {Function} cb
	         *
	         */
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._roots.length; i++) {
	                this._roots[i].traverse(cb, context);
	            }
	        },
	
	        /**
	         * 返回所有图形的绘制队列
	         * @param {boolean} [update=false] 是否在返回前更新该数组
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	         *
	         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	         * @return {Array.<module:zrender/graphic/Displayable>}
	         */
	        getDisplayList: function (update, includeIgnore) {
	            includeIgnore = includeIgnore || false;
	            if (update) {
	                this.updateDisplayList(includeIgnore);
	            }
	            return this._displayList;
	        },
	
	        /**
	         * 更新图形的绘制队列。
	         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	         */
	        updateDisplayList: function (includeIgnore) {
	            this._displayListLen = 0;
	            var roots = this._roots;
	            var displayList = this._displayList;
	            for (var i = 0, len = roots.length; i < len; i++) {
	                this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	            }
	            displayList.length = this._displayListLen;
	
	            // for (var i = 0, len = displayList.length; i < len; i++) {
	            //     displayList[i].__renderidx = i;
	            // }
	
	            // displayList.sort(shapeCompareFunc);
	            env.canvasSupported && timsort(displayList, shapeCompareFunc);
	        },
	
	        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {
	
	            if (el.ignore && !includeIgnore) {
	                return;
	            }
	
	            el.beforeUpdate();
	
	            if (el.__dirty) {
	
	                el.update();
	
	            }
	
	            el.afterUpdate();
	
	            var userSetClipPath = el.clipPath;
	            if (userSetClipPath) {
	
	                // FIXME 效率影响
	                if (clipPaths) {
	                    clipPaths = clipPaths.slice();
	                }
	                else {
	                    clipPaths = [];
	                }
	
	                var currentClipPath = userSetClipPath;
	                var parentClipPath = el;
	                // Recursively add clip path
	                while (currentClipPath) {
	                    // clipPath 的变换是基于使用这个 clipPath 的元素
	                    currentClipPath.parent = parentClipPath;
	                    currentClipPath.updateTransform();
	
	                    clipPaths.push(currentClipPath);
	
	                    parentClipPath = currentClipPath;
	                    currentClipPath = currentClipPath.clipPath;
	                }
	            }
	
	            if (el.isGroup) {
	                var children = el._children;
	
	                for (var i = 0; i < children.length; i++) {
	                    var child = children[i];
	
	                    // Force to mark as dirty if group is dirty
	                    // FIXME __dirtyPath ?
	                    if (el.__dirty) {
	                        child.__dirty = true;
	                    }
	
	                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	                }
	
	                // Mark group clean here
	                el.__dirty = false;
	
	            }
	            else {
	                el.__clipPaths = clipPaths;
	
	                this._displayList[this._displayListLen++] = el;
	            }
	        },
	
	        /**
	         * 添加图形(Shape)或者组(Group)到根节点
	         * @param {module:zrender/Element} el
	         */
	        addRoot: function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }
	
	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }
	
	            this.addToMap(el);
	            this._roots.push(el);
	        },
	
	        /**
	         * 删除指定的图形(Shape)或者组(Group)
	         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	         */
	        delRoot: function (elId) {
	            if (elId == null) {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }
	
	                this._elements = {};
	                this._roots = [];
	                this._displayList = [];
	                this._displayListLen = 0;
	
	                return;
	            }
	
	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }
	
	            var el;
	            if (typeof(elId) == 'string') {
	                el = this._elements[elId];
	            }
	            else {
	                el = elId;
	            }
	
	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        },
	
	        addToMap: function (el) {
	            if (el instanceof Group) {
	                el.__storage = this;
	            }
	            el.dirty(false);
	
	            this._elements[el.id] = el;
	
	            return this;
	        },
	
	        get: function (elId) {
	            return this._elements[elId];
	        },
	
	        delFromMap: function (elId) {
	            var elements = this._elements;
	            var el = elements[elId];
	            if (el) {
	                delete elements[elId];
	                if (el instanceof Group) {
	                    el.__storage = null;
	                }
	            }
	
	            return this;
	        },
	
	        /**
	         * 清空并且释放Storage
	         */
	        dispose: function () {
	            this._elements =
	            this._renderList =
	            this._roots = null;
	        },
	
	        displayableSortFunc: shapeCompareFunc
	    };
	
	    module.exports = Storage;
	


/***/ },
/* 107 */
/***/ function(module, exports) {

	// https://github.com/mziccard/node-timsort
	
	    var DEFAULT_MIN_MERGE = 32;
	
	    var DEFAULT_MIN_GALLOPING = 7;
	
	    var DEFAULT_TMP_STORAGE_LENGTH = 256;
	
	    function minRunLength(n) {
	        var r = 0;
	
	        while (n >= DEFAULT_MIN_MERGE) {
	            r |= n & 1;
	            n >>= 1;
	        }
	
	        return n + r;
	    }
	
	    function makeAscendingRun(array, lo, hi, compare) {
	        var runHi = lo + 1;
	
	        if (runHi === hi) {
	            return 1;
	        }
	
	        if (compare(array[runHi++], array[lo]) < 0) {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	                runHi++;
	            }
	
	            reverseRun(array, lo, runHi);
	        }
	        else {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	                runHi++;
	            }
	        }
	
	        return runHi - lo;
	    }
	
	    function reverseRun(array, lo, hi) {
	        hi--;
	
	        while (lo < hi) {
	            var t = array[lo];
	            array[lo++] = array[hi];
	            array[hi--] = t;
	        }
	    }
	
	    function binaryInsertionSort(array, lo, hi, start, compare) {
	        if (start === lo) {
	            start++;
	        }
	
	        for (; start < hi; start++) {
	            var pivot = array[start];
	
	            var left = lo;
	            var right = start;
	            var mid;
	
	            while (left < right) {
	                mid = left + right >>> 1;
	
	                if (compare(pivot, array[mid]) < 0) {
	                    right = mid;
	                }
	                else {
	                    left = mid + 1;
	                }
	            }
	
	            var n = start - left;
	
	            switch (n) {
	                case 3:
	                    array[left + 3] = array[left + 2];
	
	                case 2:
	                    array[left + 2] = array[left + 1];
	
	                case 1:
	                    array[left + 1] = array[left];
	                    break;
	                default:
	                    while (n > 0) {
	                        array[left + n] = array[left + n - 1];
	                        n--;
	                    }
	            }
	
	            array[left] = pivot;
	        }
	    }
	
	    function gallopLeft(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;
	
	        if (compare(value, array[start + hint]) > 0) {
	            maxOffset = length - hint;
	
	            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	
	            lastOffset += hint;
	            offset += hint;
	        }
	        else {
	            maxOffset = hint + 1;
	            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	
	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        }
	
	        lastOffset++;
	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);
	
	            if (compare(value, array[start + m]) > 0) {
	                lastOffset = m + 1;
	            }
	            else {
	                offset = m;
	            }
	        }
	        return offset;
	    }
	
	    function gallopRight(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;
	
	        if (compare(value, array[start + hint]) < 0) {
	            maxOffset = hint + 1;
	
	            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	
	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        }
	        else {
	            maxOffset = length - hint;
	
	            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;
	
	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }
	
	            lastOffset += hint;
	            offset += hint;
	        }
	
	        lastOffset++;
	
	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);
	
	            if (compare(value, array[start + m]) < 0) {
	                offset = m;
	            }
	            else {
	                lastOffset = m + 1;
	            }
	        }
	
	        return offset;
	    }
	
	    function TimSort(array, compare) {
	        var minGallop = DEFAULT_MIN_GALLOPING;
	        var length = 0;
	        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	        var stackLength = 0;
	        var runStart;
	        var runLength;
	        var stackSize = 0;
	
	        length = array.length;
	
	        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	            tmpStorageLength = length >>> 1;
	        }
	
	        var tmp = [];
	
	        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;
	
	        runStart = [];
	        runLength = [];
	
	        function pushRun(_runStart, _runLength) {
	            runStart[stackSize] = _runStart;
	            runLength[stackSize] = _runLength;
	            stackSize += 1;
	        }
	
	        function mergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;
	
	                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	                    if (runLength[n - 1] < runLength[n + 1]) {
	                        n--;
	                    }
	                }
	                else if (runLength[n] > runLength[n + 1]) {
	                    break;
	                }
	                mergeAt(n);
	            }
	        }
	
	        function forceMergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;
	
	                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	                    n--;
	                }
	
	                mergeAt(n);
	            }
	        }
	
	        function mergeAt(i) {
	            var start1 = runStart[i];
	            var length1 = runLength[i];
	            var start2 = runStart[i + 1];
	            var length2 = runLength[i + 1];
	
	            runLength[i] = length1 + length2;
	
	            if (i === stackSize - 3) {
	                runStart[i + 1] = runStart[i + 2];
	                runLength[i + 1] = runLength[i + 2];
	            }
	
	            stackSize--;
	
	            var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	            start1 += k;
	            length1 -= k;
	
	            if (length1 === 0) {
	                return;
	            }
	
	            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
	
	            if (length2 === 0) {
	                return;
	            }
	
	            if (length1 <= length2) {
	                mergeLow(start1, length1, start2, length2);
	            }
	            else {
	                mergeHigh(start1, length1, start2, length2);
	            }
	        }
	
	        function mergeLow(start1, length1, start2, length2) {
	            var i = 0;
	
	            for (i = 0; i < length1; i++) {
	                tmp[i] = array[start1 + i];
	            }
	
	            var cursor1 = 0;
	            var cursor2 = start2;
	            var dest = start1;
	
	            array[dest++] = array[cursor2++];
	
	            if (--length2 === 0) {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	                return;
	            }
	
	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	                return;
	            }
	
	            var _minGallop = minGallop;
	            var count1, count2, exit;
	
	            while (1) {
	                count1 = 0;
	                count2 = 0;
	                exit = false;
	
	                do {
	                    if (compare(array[cursor2], tmp[cursor1]) < 0) {
	                        array[dest++] = array[cursor2++];
	                        count2++;
	                        count1 = 0;
	
	                        if (--length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    else {
	                        array[dest++] = tmp[cursor1++];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);
	
	                if (exit) {
	                    break;
	                }
	
	                do {
	                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
	
	                    if (count1 !== 0) {
	                        for (i = 0; i < count1; i++) {
	                            array[dest + i] = tmp[cursor1 + i];
	                        }
	
	                        dest += count1;
	                        cursor1 += count1;
	                        length1 -= count1;
	                        if (length1 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	
	                    array[dest++] = array[cursor2++];
	
	                    if (--length2 === 0) {
	                        exit = true;
	                        break;
	                    }
	
	                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
	
	                    if (count2 !== 0) {
	                        for (i = 0; i < count2; i++) {
	                            array[dest + i] = array[cursor2 + i];
	                        }
	
	                        dest += count2;
	                        cursor2 += count2;
	                        length2 -= count2;
	
	                        if (length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest++] = tmp[cursor1++];
	
	                    if (--length1 === 1) {
	                        exit = true;
	                        break;
	                    }
	
	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	                if (exit) {
	                    break;
	                }
	
	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }
	
	                _minGallop += 2;
	            }
	
	            minGallop = _minGallop;
	
	            minGallop < 1 && (minGallop = 1);
	
	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	            }
	            else if (length1 === 0) {
	                throw new Error();
	                // throw new Error('mergeLow preconditions were not respected');
	            }
	            else {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	            }
	        }
	
	        function mergeHigh (start1, length1, start2, length2) {
	            var i = 0;
	
	            for (i = 0; i < length2; i++) {
	                tmp[i] = array[start2 + i];
	            }
	
	            var cursor1 = start1 + length1 - 1;
	            var cursor2 = length2 - 1;
	            var dest = start2 + length2 - 1;
	            var customCursor = 0;
	            var customDest = 0;
	
	            array[dest--] = array[cursor1--];
	
	            if (--length1 === 0) {
	                customCursor = dest - (length2 - 1);
	
	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }
	
	                return;
	            }
	
	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;
	
	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }
	
	                array[dest] = tmp[cursor2];
	                return;
	            }
	
	            var _minGallop = minGallop;
	
	            while (true) {
	                var count1 = 0;
	                var count2 = 0;
	                var exit = false;
	
	                do {
	                    if (compare(tmp[cursor2], array[cursor1]) < 0) {
	                        array[dest--] = array[cursor1--];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    else {
	                        array[dest--] = tmp[cursor2--];
	                        count2++;
	                        count1 = 0;
	                        if (--length2 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);
	
	                if (exit) {
	                    break;
	                }
	
	                do {
	                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
	
	                    if (count1 !== 0) {
	                        dest -= count1;
	                        cursor1 -= count1;
	                        length1 -= count1;
	                        customDest = dest + 1;
	                        customCursor = cursor1 + 1;
	
	                        for (i = count1 - 1; i >= 0; i--) {
	                            array[customDest + i] = array[customCursor + i];
	                        }
	
	                        if (length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	
	                    array[dest--] = tmp[cursor2--];
	
	                    if (--length2 === 1) {
	                        exit = true;
	                        break;
	                    }
	
	                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
	
	                    if (count2 !== 0) {
	                        dest -= count2;
	                        cursor2 -= count2;
	                        length2 -= count2;
	                        customDest = dest + 1;
	                        customCursor = cursor2 + 1;
	
	                        for (i = 0; i < count2; i++) {
	                            array[customDest + i] = tmp[customCursor + i];
	                        }
	
	                        if (length2 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	
	                    array[dest--] = array[cursor1--];
	
	                    if (--length1 === 0) {
	                        exit = true;
	                        break;
	                    }
	
	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	                if (exit) {
	                    break;
	                }
	
	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }
	
	                _minGallop += 2;
	            }
	
	            minGallop = _minGallop;
	
	            if (minGallop < 1) {
	                minGallop = 1;
	            }
	
	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;
	
	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }
	
	                array[dest] = tmp[cursor2];
	            }
	            else if (length2 === 0) {
	                throw new Error();
	                // throw new Error('mergeHigh preconditions were not respected');
	            }
	            else {
	                customCursor = dest - (length2 - 1);
	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }
	            }
	        }
	
	        this.mergeRuns = mergeRuns;
	        this.forceMergeRuns = forceMergeRuns;
	        this.pushRun = pushRun;
	    }
	
	    function sort(array, compare, lo, hi) {
	        if (!lo) {
	            lo = 0;
	        }
	        if (!hi) {
	            hi = array.length;
	        }
	
	        var remaining = hi - lo;
	
	        if (remaining < 2) {
	            return;
	        }
	
	        var runLength = 0;
	
	        if (remaining < DEFAULT_MIN_MERGE) {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	            return;
	        }
	
	        var ts = new TimSort(array, compare);
	
	        var minRun = minRunLength(remaining);
	
	        do {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            if (runLength < minRun) {
	                var force = remaining;
	                if (force > minRun) {
	                    force = minRun;
	                }
	
	                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	                runLength = force;
	            }
	
	            ts.pushRun(lo, runLength);
	            ts.mergeRuns();
	
	            remaining -= runLength;
	            lo += runLength;
	        } while (remaining !== 0);
	
	        ts.forceMergeRuns();
	    }
	
	    module.exports = sort;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236
	
	
	    var util = __webpack_require__(25);
	    var Dispatcher = __webpack_require__(109).Dispatcher;
	
	    var requestAnimationFrame = __webpack_require__(110);
	
	    var Animator = __webpack_require__(57);
	    /**
	     * @typedef {Object} IZRenderStage
	     * @property {Function} update
	     */
	
	    /**
	     * @alias module:zrender/animation/Animation
	     * @constructor
	     * @param {Object} [options]
	     * @param {Function} [options.onframe]
	     * @param {IZRenderStage} [options.stage]
	     * @example
	     *     var animation = new Animation();
	     *     var obj = {
	     *         x: 100,
	     *         y: 100
	     *     };
	     *     animation.animate(node.position)
	     *         .when(1000, {
	     *             x: 500,
	     *             y: 500
	     *         })
	     *         .when(2000, {
	     *             x: 100,
	     *             y: 100
	     *         })
	     *         .start('spline');
	     */
	    var Animation = function (options) {
	
	        options = options || {};
	
	        this.stage = options.stage || {};
	
	        this.onframe = options.onframe || function() {};
	
	        // private properties
	        this._clips = [];
	
	        this._running = false;
	
	        this._time;
	
	        this._pausedTime;
	
	        this._pauseStart;
	
	        this._paused = false;
	
	        Dispatcher.call(this);
	    };
	
	    Animation.prototype = {
	
	        constructor: Animation,
	        /**
	         * 添加 clip
	         * @param {module:zrender/animation/Clip} clip
	         */
	        addClip: function (clip) {
	            this._clips.push(clip);
	        },
	        /**
	         * 添加 animator
	         * @param {module:zrender/animation/Animator} animator
	         */
	        addAnimator: function (animator) {
	            animator.animation = this;
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.addClip(clips[i]);
	            }
	        },
	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Clip} clip
	         */
	        removeClip: function(clip) {
	            var idx = util.indexOf(this._clips, clip);
	            if (idx >= 0) {
	                this._clips.splice(idx, 1);
	            }
	        },
	
	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Animator} animator
	         */
	        removeAnimator: function (animator) {
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.removeClip(clips[i]);
	            }
	            animator.animation = null;
	        },
	
	        _update: function() {
	
	            var time = new Date().getTime() - this._pausedTime;
	            var delta = time - this._time;
	            var clips = this._clips;
	            var len = clips.length;
	
	            var deferredEvents = [];
	            var deferredClips = [];
	            for (var i = 0; i < len; i++) {
	                var clip = clips[i];
	                var e = clip.step(time);
	                // Throw out the events need to be called after
	                // stage.update, like destroy
	                if (e) {
	                    deferredEvents.push(e);
	                    deferredClips.push(clip);
	                }
	            }
	
	            // Remove the finished clip
	            for (var i = 0; i < len;) {
	                if (clips[i]._needsRemove) {
	                    clips[i] = clips[len - 1];
	                    clips.pop();
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }
	
	            len = deferredEvents.length;
	            for (var i = 0; i < len; i++) {
	                deferredClips[i].fire(deferredEvents[i]);
	            }
	
	            this._time = time;
	
	            this.onframe(delta);
	
	            this.trigger('frame', delta);
	
	            if (this.stage.update) {
	                this.stage.update();
	            }
	        },
	
	        _startLoop: function () {
	            var self = this;
	
	            this._running = true;
	
	            function step() {
	                if (self._running) {
	
	                    requestAnimationFrame(step);
	
	                    !self._paused && self._update();
	                }
	            }
	
	            requestAnimationFrame(step);
	        },
	
	        /**
	         * 开始运行动画
	         */
	        start: function () {
	
	            this._time = new Date().getTime();
	            this._pausedTime = 0;
	
	            this._startLoop();
	        },
	        /**
	         * 停止运行动画
	         */
	        stop: function () {
	            this._running = false;
	        },
	
	        /**
	         * Pause
	         */
	        pause: function () {
	            if (!this._paused) {
	                this._pauseStart = new Date().getTime();
	                this._paused = true;
	            }
	        },
	
	        /**
	         * Resume
	         */
	        resume: function () {
	            if (this._paused) {
	                this._pausedTime += (new Date().getTime()) - this._pauseStart;
	                this._paused = false;
	            }
	        },
	
	        /**
	         * 清除所有动画片段
	         */
	        clear: function () {
	            this._clips = [];
	        },
	        /**
	         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	         * @param  {Object} target
	         * @param  {Object} options
	         * @param  {boolean} [options.loop=false] 是否循环播放动画
	         * @param  {Function} [options.getter=null]
	         *         如果指定getter函数，会通过getter函数取属性值
	         * @param  {Function} [options.setter=null]
	         *         如果指定setter函数，会通过setter函数设置属性值
	         * @return {module:zrender/animation/Animation~Animator}
	         */
	        // TODO Gap
	        animate: function (target, options) {
	            options = options || {};
	
	            var animator = new Animator(
	                target,
	                options.loop,
	                options.getter,
	                options.setter
	            );
	
	            this.addAnimator(animator);
	
	            return animator;
	        }
	    };
	
	    util.mixin(Animation, Dispatcher);
	
	    module.exports = Animation;
	


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	
	
	    var Eventful = __webpack_require__(54);
	    var env = __webpack_require__(23);
	
	    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;
	
	    function getBoundingClientRect(el) {
	        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};
	    }
	
	    // `calculate` is optional, default false
	    function clientToLocal(el, e, out, calculate) {
	        out = out || {};
	
	        // According to the W3C Working Draft, offsetX and offsetY should be relative
	        // to the padding edge of the target element. The only browser using this convention
	        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	        // not support the properties.
	        // (see http://www.jacklmoore.com/notes/mouse-position/)
	        // In zr painter.dom, padding edge equals to border edge.
	
	        // FIXME
	        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	        // is too complex. So css-transfrom dont support in this case temporarily.
	        if (calculate || !env.canvasSupported) {
	            defaultGetZrXY(el, e, out);
	        }
	        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	        // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	        // zoom-factor, overflow / opacity layers, transforms ...)
	        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	        // <https://bugs.jquery.com/ticket/8523#comment:14>
	        // BTW3, In ff, offsetX/offsetY is always 0.
	        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	            out.zrX = e.layerX;
	            out.zrY = e.layerY;
	        }
	        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	        else if (e.offsetX != null) {
	            out.zrX = e.offsetX;
	            out.zrY = e.offsetY;
	        }
	        // For some other device, e.g., IOS safari.
	        else {
	            defaultGetZrXY(el, e, out);
	        }
	
	        return out;
	    }
	
	    function defaultGetZrXY(el, e, out) {
	        // This well-known method below does not support css transform.
	        var box = getBoundingClientRect(el);
	        out.zrX = e.clientX - box.left;
	        out.zrY = e.clientY - box.top;
	    }
	
	    /**
	     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	     * `calculate` is optional, default false.
	     */
	    function normalizeEvent(el, e, calculate) {
	
	        e = e || window.event;
	
	        if (e.zrX != null) {
	            return e;
	        }
	
	        var eventType = e.type;
	        var isTouch = eventType && eventType.indexOf('touch') >= 0;
	
	        if (!isTouch) {
	            clientToLocal(el, e, e, calculate);
	            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	        }
	        else {
	            var touch = eventType != 'touchend'
	                ? e.targetTouches[0]
	                : e.changedTouches[0];
	            touch && clientToLocal(el, touch, e, calculate);
	        }
	
	        return e;
	    }
	
	    function addEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.addEventListener(name, handler);
	        }
	        else {
	            el.attachEvent('on' + name, handler);
	        }
	    }
	
	    function removeEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.removeEventListener(name, handler);
	        }
	        else {
	            el.detachEvent('on' + name, handler);
	        }
	    }
	
	    /**
	     * preventDefault and stopPropagation.
	     * Notice: do not do that in zrender. Upper application
	     * do that if necessary.
	     *
	     * @memberOf module:zrender/core/event
	     * @method
	     * @param {Event} e : event对象
	     */
	    var stop = isDomLevel2
	        ? function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	            e.cancelBubble = true;
	        }
	        : function (e) {
	            e.returnValue = false;
	            e.cancelBubble = true;
	        };
	
	    module.exports = {
	        clientToLocal: clientToLocal,
	        normalizeEvent: normalizeEvent,
	        addEventListener: addEventListener,
	        removeEventListener: removeEventListener,
	
	        stop: stop,
	        // 做向上兼容
	        Dispatcher: Eventful
	    };
	


/***/ },
/* 110 */
/***/ function(module, exports) {

	
	
	    module.exports = (typeof window !== 'undefined' &&
	                                    (window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame))
	                                || function (func) {
	                                    setTimeout(func, 16);
	                                };
	


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var eventTool = __webpack_require__(109);
	    var zrUtil = __webpack_require__(25);
	    var Eventful = __webpack_require__(54);
	    var env = __webpack_require__(23);
	    var GestureMgr = __webpack_require__(112);
	
	    var addEventListener = eventTool.addEventListener;
	    var removeEventListener = eventTool.removeEventListener;
	    var normalizeEvent = eventTool.normalizeEvent;
	
	    var TOUCH_CLICK_DELAY = 300;
	
	    var mouseHandlerNames = [
	        'click', 'dblclick', 'mousewheel', 'mouseout',
	        'mouseup', 'mousedown', 'mousemove', 'contextmenu'
	    ];
	
	    var touchHandlerNames = [
	        'touchstart', 'touchend', 'touchmove'
	    ];
	
	    var pointerEventNames = {
	        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1
	    };
	
	    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	        var nm = name.replace('mouse', 'pointer');
	        return pointerEventNames[nm] ? nm : name;
	    });
	
	    function eventNameFix(name) {
	        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;
	    }
	
	    function processGesture(proxy, event, stage) {
	        var gestureMgr = proxy._gestureMgr;
	
	        stage === 'start' && gestureMgr.clear();
	
	        var gestureInfo = gestureMgr.recognize(
	            event,
	            proxy.handler.findHover(event.zrX, event.zrY, null),
	            proxy.dom
	        );
	
	        stage === 'end' && gestureMgr.clear();
	
	        // Do not do any preventDefault here. Upper application do that if necessary.
	        if (gestureInfo) {
	            var type = gestureInfo.type;
	            event.gestureEvent = type;
	
	            proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);
	        }
	    }
	
	    // function onMSGestureChange(proxy, event) {
	    //     if (event.translationX || event.translationY) {
	    //         // mousemove is carried by MSGesture to reduce the sensitivity.
	    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	    //     }
	    //     if (event.scale !== 1) {
	    //         event.pinchX = event.offsetX;
	    //         event.pinchY = event.offsetY;
	    //         event.pinchScale = event.scale;
	    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	    //     }
	    // }
	
	    /**
	     * Prevent mouse event from being dispatched after Touch Events action
	     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	     * Result: Blocking Mouse Events for 700ms.
	     */
	    function setTouchTimer(instance) {
	        instance._touching = true;
	        clearTimeout(instance._touchTimer);
	        instance._touchTimer = setTimeout(function () {
	            instance._touching = false;
	        }, 700);
	    }
	
	
	    var domHandlers = {
	        /**
	         * Mouse move handler
	         * @inner
	         * @param {Event} event
	         */
	        mousemove: function (event) {
	            event = normalizeEvent(this.dom, event);
	
	            this.trigger('mousemove', event);
	        },
	
	        /**
	         * Mouse out handler
	         * @inner
	         * @param {Event} event
	         */
	        mouseout: function (event) {
	            event = normalizeEvent(this.dom, event);
	
	            var element = event.toElement || event.relatedTarget;
	            if (element != this.dom) {
	                while (element && element.nodeType != 9) {
	                    // 忽略包含在root中的dom引起的mouseOut
	                    if (element === this.dom) {
	                        return;
	                    }
	
	                    element = element.parentNode;
	                }
	            }
	
	            this.trigger('mouseout', event);
	        },
	
	        /**
	         * Touch开始响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchstart: function (event) {
	            // Default mouse behaviour should not be disabled here.
	            // For example, page may needs to be slided.
	            event = normalizeEvent(this.dom, event);
	
	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;
	
	            this._lastTouchMoment = new Date();
	
	            processGesture(this, event, 'start');
	
	            // In touch device, trigger `mousemove`(`mouseover`) should
	            // be triggered, and must before `mousedown` triggered.
	            domHandlers.mousemove.call(this, event);
	
	            domHandlers.mousedown.call(this, event);
	
	            setTouchTimer(this);
	        },
	
	        /**
	         * Touch移动响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchmove: function (event) {
	
	            event = normalizeEvent(this.dom, event);
	
	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;
	
	            processGesture(this, event, 'change');
	
	            // Mouse move should always be triggered no matter whether
	            // there is gestrue event, because mouse move and pinch may
	            // be used at the same time.
	            domHandlers.mousemove.call(this, event);
	
	            setTouchTimer(this);
	        },
	
	        /**
	         * Touch结束响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchend: function (event) {
	
	            event = normalizeEvent(this.dom, event);
	
	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;
	
	            processGesture(this, event, 'end');
	
	            domHandlers.mouseup.call(this, event);
	
	            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	            // we can conveniently implement "hover style" in both PC and touch device just
	            // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	            // to remove "hover style" on an element, without any additional code for
	            // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	            // style" will remain for user view)
	
	            // click event should always be triggered no matter whether
	            // there is gestrue event. System click can not be prevented.
	            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	                domHandlers.click.call(this, event);
	            }
	
	            setTouchTimer(this);
	        },
	
	        pointerdown: function (event) {
	            domHandlers.mousedown.call(this, event);
	
	            // if (useMSGuesture(this, event)) {
	            //     this._msGesture.addPointer(event.pointerId);
	            // }
	        },
	
	        pointermove: function (event) {
	            // FIXME
	            // pointermove is so sensitive that it always triggered when
	            // tap(click) on touch screen, which affect some judgement in
	            // upper application. So, we dont support mousemove on MS touch
	            // device yet.
	            if (!isPointerFromTouch(event)) {
	                domHandlers.mousemove.call(this, event);
	            }
	        },
	
	        pointerup: function (event) {
	            domHandlers.mouseup.call(this, event);
	        },
	
	        pointerout: function (event) {
	            // pointerout will be triggered when tap on touch screen
	            // (IE11+/Edge on MS Surface) after click event triggered,
	            // which is inconsistent with the mousout behavior we defined
	            // in touchend. So we unify them.
	            // (check domHandlers.touchend for detailed explanation)
	            if (!isPointerFromTouch(event)) {
	                domHandlers.mouseout.call(this, event);
	            }
	        }
	    };
	
	    function isPointerFromTouch(event) {
	        var pointerType = event.pointerType;
	        return pointerType === 'pen' || pointerType === 'touch';
	    }
	
	    // function useMSGuesture(handlerProxy, event) {
	    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	    // }
	
	    // Common handlers
	    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	        domHandlers[name] = function (event) {
	            event = normalizeEvent(this.dom, event);
	            this.trigger(name, event);
	        };
	    });
	
	    /**
	     * 为控制类实例初始化dom 事件处理函数
	     *
	     * @inner
	     * @param {module:zrender/Handler} instance 控制类实例
	     */
	    function initDomHandler(instance) {
	        zrUtil.each(touchHandlerNames, function (name) {
	            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	        });
	
	        zrUtil.each(pointerHandlerNames, function (name) {
	            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	        });
	
	        zrUtil.each(mouseHandlerNames, function (name) {
	            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	        });
	
	        function makeMouseHandler(fn, instance) {
	            return function () {
	                if (instance._touching) {
	                    return;
	                }
	                return fn.apply(instance, arguments);
	            };
	        }
	    }
	
	
	    function HandlerDomProxy(dom) {
	        Eventful.call(this);
	
	        this.dom = dom;
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._touching = false;
	
	        /**
	         * @private
	         * @type {number}
	         */
	        this._touchTimer;
	
	        /**
	         * @private
	         * @type {module:zrender/core/GestureMgr}
	         */
	        this._gestureMgr = new GestureMgr();
	
	        this._handlers = {};
	
	        initDomHandler(this);
	
	        if (env.pointerEventsSupported) { // Only IE11+/Edge
	            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	            // at the same time.
	            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	            // screen, which do not occurs in pointer event.
	            // So we use pointer event to both detect touch gesture and mouse behavior.
	            mountHandlers(pointerHandlerNames, this);
	
	            // FIXME
	            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	            // which does not prevent defuault behavior occasionally (which may cause view port
	            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	            // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	            // touch screen. And we only support click behavior on MS touch screen now.
	
	            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	            // We dont support touch on IE on win7.
	            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	            // if (typeof MSGesture === 'function') {
	            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	            //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	            // }
	        }
	        else {
	            if (env.touchEventsSupported) {
	                mountHandlers(touchHandlerNames, this);
	                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	                // addEventListener(root, 'mouseout', this._mouseoutHandler);
	            }
	
	            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	            // mouse event can not be handle in those devices.
	            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	            // mouseevent after touch event triggered, see `setTouchTimer`.
	            mountHandlers(mouseHandlerNames, this);
	        }
	
	        function mountHandlers(handlerNames, instance) {
	            zrUtil.each(handlerNames, function (name) {
	                addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	            }, instance);
	        }
	    }
	
	    var handlerDomProxyProto = HandlerDomProxy.prototype;
	    handlerDomProxyProto.dispose = function () {
	        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);
	
	        for (var i = 0; i < handlerNames.length; i++) {
	            var name = handlerNames[i];
	            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	        }
	    };
	
	    handlerDomProxyProto.setCursor = function (cursorStyle) {
	        this.dom.style.cursor = cursorStyle || 'default';
	    };
	
	    zrUtil.mixin(HandlerDomProxy, Eventful);
	
	    module.exports = HandlerDomProxy;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Only implements needed gestures for mobile.
	 */
	
	
	    var eventUtil = __webpack_require__(109);
	
	    var GestureMgr = function () {
	
	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._track = [];
	    };
	
	    GestureMgr.prototype = {
	
	        constructor: GestureMgr,
	
	        recognize: function (event, target, root) {
	            this._doTrack(event, target, root);
	            return this._recognize(event);
	        },
	
	        clear: function () {
	            this._track.length = 0;
	            return this;
	        },
	
	        _doTrack: function (event, target, root) {
	            var touches = event.touches;
	
	            if (!touches) {
	                return;
	            }
	
	            var trackItem = {
	                points: [],
	                touches: [],
	                target: target,
	                event: event
	            };
	
	            for (var i = 0, len = touches.length; i < len; i++) {
	                var touch = touches[i];
	                var pos = eventUtil.clientToLocal(root, touch, {});
	                trackItem.points.push([pos.zrX, pos.zrY]);
	                trackItem.touches.push(touch);
	            }
	
	            this._track.push(trackItem);
	        },
	
	        _recognize: function (event) {
	            for (var eventName in recognizers) {
	                if (recognizers.hasOwnProperty(eventName)) {
	                    var gestureInfo = recognizers[eventName](this._track, event);
	                    if (gestureInfo) {
	                        return gestureInfo;
	                    }
	                }
	            }
	        }
	    };
	
	    function dist(pointPair) {
	        var dx = pointPair[1][0] - pointPair[0][0];
	        var dy = pointPair[1][1] - pointPair[0][1];
	
	        return Math.sqrt(dx * dx + dy * dy);
	    }
	
	    function center(pointPair) {
	        return [
	            (pointPair[0][0] + pointPair[1][0]) / 2,
	            (pointPair[0][1] + pointPair[1][1]) / 2
	        ];
	    }
	
	    var recognizers = {
	
	        pinch: function (track, event) {
	            var trackLen = track.length;
	
	            if (!trackLen) {
	                return;
	            }
	
	            var pinchEnd = (track[trackLen - 1] || {}).points;
	            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;
	
	            if (pinchPre
	                && pinchPre.length > 1
	                && pinchEnd
	                && pinchEnd.length > 1
	            ) {
	                var pinchScale = dist(pinchEnd) / dist(pinchPre);
	                !isFinite(pinchScale) && (pinchScale = 1);
	
	                event.pinchScale = pinchScale;
	
	                var pinchCenter = center(pinchEnd);
	                event.pinchX = pinchCenter[0];
	                event.pinchY = pinchCenter[1];
	
	                return {
	                    type: 'pinch',
	                    target: track[0].target,
	                    event: event
	                };
	            }
	        }
	
	        // Only pinch currently.
	    };
	
	    module.exports = GestureMgr;
	


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	 
	
	    var config = __webpack_require__(62);
	    var util = __webpack_require__(25);
	    var log = __webpack_require__(61);
	    var BoundingRect = __webpack_require__(30);
	    var timsort = __webpack_require__(107);
	
	    var Layer = __webpack_require__(114);
	
	    var requestAnimationFrame = __webpack_require__(110);
	
	    // PENDIGN
	    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.
	    //
	    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.
	    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;
	
	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }
	
	    function isLayerValid(layer) {
	        if (!layer) {
	            return false;
	        }
	
	        if (layer.isBuildin) {
	            return true;
	        }
	
	        if (typeof(layer.resize) !== 'function'
	            || typeof(layer.refresh) !== 'function'
	        ) {
	            return false;
	        }
	
	        return true;
	    }
	
	    function preProcessLayer(layer) {
	        layer.__unusedCount++;
	    }
	
	    function postProcessLayer(layer) {
	        if (layer.__unusedCount == 1) {
	            layer.clear();
	        }
	    }
	
	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var viewRect = new BoundingRect(0, 0, 0, 0);
	    function isDisplayableCulled(el, width, height) {
	        tmpRect.copy(el.getBoundingRect());
	        if (el.transform) {
	            tmpRect.applyTransform(el.transform);
	        }
	        viewRect.width = width;
	        viewRect.height = height;
	        return !tmpRect.intersect(viewRect);
	    }
	
	    function isClipPathChanged(clipPaths, prevClipPaths) {
	        if (clipPaths == prevClipPaths) { // Can both be null or undefined
	            return false;
	        }
	
	        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {
	            return true;
	        }
	        for (var i = 0; i < clipPaths.length; i++) {
	            if (clipPaths[i] !== prevClipPaths[i]) {
	                return true;
	            }
	        }
	    }
	
	    function doClip(clipPaths, ctx) {
	        for (var i = 0; i < clipPaths.length; i++) {
	            var clipPath = clipPaths[i];
	            var path = clipPath.path;
	
	            clipPath.setTransform(ctx);
	            path.beginPath(ctx);
	            clipPath.buildPath(path, clipPath.shape);
	            ctx.clip();
	            // Transform back
	            clipPath.restoreTransform(ctx);
	        }
	    }
	
	    function createRoot(width, height) {
	        var domRoot = document.createElement('div');
	
	        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domRoot.style.cssText = [
	            'position:relative',
	            'overflow:hidden',
	            'width:' + width + 'px',
	            'height:' + height + 'px',
	            'padding:0',
	            'margin:0',
	            'border-width:0'
	        ].join(';') + ';';
	
	        return domRoot;
	    }
	
	    /**
	     * @alias module:zrender/Painter
	     * @constructor
	     * @param {HTMLElement} root 绘图容器
	     * @param {module:zrender/Storage} storage
	     * @param {Ojbect} opts
	     */
	    var Painter = function (root, storage, opts) {
	        // In node environment using node-canvas
	        var singleCanvas = !root.nodeName // In node ?
	            || root.nodeName.toUpperCase() === 'CANVAS';
	
	        this._opts = opts = util.extend({}, opts || {});
	
	        /**
	         * @type {number}
	         */
	        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._singleCanvas = singleCanvas;
	        /**
	         * 绘图容器
	         * @type {HTMLElement}
	         */
	        this.root = root;
	
	        var rootStyle = root.style;
	
	        if (rootStyle) {
	            rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	            rootStyle['-webkit-user-select'] =
	            rootStyle['user-select'] =
	            rootStyle['-webkit-touch-callout'] = 'none';
	
	            root.innerHTML = '';
	        }
	
	        /**
	         * @type {module:zrender/Storage}
	         */
	        this.storage = storage;
	
	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        var zlevelList = this._zlevelList = [];
	
	        /**
	         * @type {Object.<string, module:zrender/Layer>}
	         * @private
	         */
	        var layers = this._layers = {};
	
	        /**
	         * @type {Object.<string, Object>}
	         * @type {private}
	         */
	        this._layerConfig = {};
	
	        if (!singleCanvas) {
	            this._width = this._getSize(0);
	            this._height = this._getSize(1);
	
	            var domRoot = this._domRoot = createRoot(
	                this._width, this._height
	            );
	            root.appendChild(domRoot);
	        }
	        else {
	            // Use canvas width and height directly
	            var width = root.width;
	            var height = root.height;
	            this._width = width;
	            this._height = height;
	
	            // Create layer if only one given canvas
	            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	            var mainLayer = new Layer(root, this, 1);
	            mainLayer.initContext();
	            // FIXME Use canvas width and height
	            // mainLayer.resize(width, height);
	            layers[0] = mainLayer;
	            zlevelList.push(0);
	
	            this._domRoot = root;
	        }
	
	        this.pathToImage = this._createPathToImage();
	
	        // Layers for progressive rendering
	        this._progressiveLayers = [];
	
	        /**
	         * @type {module:zrender/Layer}
	         * @private
	         */
	        this._hoverlayer;
	
	        this._hoverElements = [];
	    };
	
	    Painter.prototype = {
	
	        constructor: Painter,
	
	        /**
	         * If painter use a single canvas
	         * @return {boolean}
	         */
	        isSingleCanvas: function () {
	            return this._singleCanvas;
	        },
	        /**
	         * @return {HTMLDivElement}
	         */
	        getViewportRoot: function () {
	            return this._domRoot;
	        },
	
	        /**
	         * 刷新
	         * @param {boolean} [paintAll=false] 强制绘制所有displayable
	         */
	        refresh: function (paintAll) {
	
	            var list = this.storage.getDisplayList(true);
	
	            var zlevelList = this._zlevelList;
	
	            this._paintList(list, paintAll);
	
	            // Paint custum layers
	            for (var i = 0; i < zlevelList.length; i++) {
	                var z = zlevelList[i];
	                var layer = this._layers[z];
	                if (!layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }
	
	            this.refreshHover();
	
	            if (this._progressiveLayers.length) {
	                this._startProgessive();
	            }
	
	            return this;
	        },
	
	        addHover: function (el, hoverStyle) {
	            if (el.__hoverMir) {
	                return;
	            }
	            var elMirror = new el.constructor({
	                style: el.style,
	                shape: el.shape
	            });
	            elMirror.__from = el;
	            el.__hoverMir = elMirror;
	            elMirror.setStyle(hoverStyle);
	            this._hoverElements.push(elMirror);
	        },
	
	        removeHover: function (el) {
	            var elMirror = el.__hoverMir;
	            var hoverElements = this._hoverElements;
	            var idx = util.indexOf(hoverElements, elMirror);
	            if (idx >= 0) {
	                hoverElements.splice(idx, 1);
	            }
	            el.__hoverMir = null;
	        },
	
	        clearHover: function (el) {
	            var hoverElements = this._hoverElements;
	            for (var i = 0; i < hoverElements.length; i++) {
	                var from = hoverElements[i].__from;
	                if (from) {
	                    from.__hoverMir = null;
	                }
	            }
	            hoverElements.length = 0;
	        },
	
	        refreshHover: function () {
	            var hoverElements = this._hoverElements;
	            var len = hoverElements.length;
	            var hoverLayer = this._hoverlayer;
	            hoverLayer && hoverLayer.clear();
	
	            if (!len) {
	                return;
	            }
	            timsort(hoverElements, this.storage.displayableSortFunc);
	
	            // Use a extream large zlevel
	            // FIXME?
	            if (!hoverLayer) {
	                hoverLayer = this._hoverlayer = this.getLayer(1e5);
	            }
	
	            var scope = {};
	            hoverLayer.ctx.save();
	            for (var i = 0; i < len;) {
	                var el = hoverElements[i];
	                var originalEl = el.__from;
	                // Original el is removed
	                // PENDING
	                if (!(originalEl && originalEl.__zr)) {
	                    hoverElements.splice(i, 1);
	                    originalEl.__hoverMir = null;
	                    len--;
	                    continue;
	                }
	                i++;
	
	                // Use transform
	                // FIXME style and shape ?
	                if (!originalEl.invisible) {
	                    el.transform = originalEl.transform;
	                    el.invTransform = originalEl.invTransform;
	                    el.__clipPaths = originalEl.__clipPaths;
	                    // el.
	                    this._doPaintEl(el, hoverLayer, true, scope);
	                }
	            }
	            hoverLayer.ctx.restore();
	        },
	
	        _startProgessive: function () {
	            var self = this;
	
	            if (!self._furtherProgressive) {
	                return;
	            }
	
	            // Use a token to stop progress steps triggered by
	            // previous zr.refresh calling.
	            var token = self._progressiveToken = +new Date();
	
	            self._progress++;
	            requestAnimationFrame(step);
	
	            function step() {
	                // In case refreshed or disposed
	                if (token === self._progressiveToken && self.storage) {
	
	                    self._doPaintList(self.storage.getDisplayList());
	
	                    if (self._furtherProgressive) {
	                        self._progress++;
	                        requestAnimationFrame(step);
	                    }
	                    else {
	                        self._progressiveToken = -1;
	                    }
	                }
	            }
	        },
	
	        _clearProgressive: function () {
	            this._progressiveToken = -1;
	            this._progress = 0;
	            util.each(this._progressiveLayers, function (layer) {
	                layer.__dirty && layer.clear();
	            });
	        },
	
	        _paintList: function (list, paintAll) {
	
	            if (paintAll == null) {
	                paintAll = false;
	            }
	
	            this._updateLayerStatus(list);
	
	            this._clearProgressive();
	
	            this.eachBuildinLayer(preProcessLayer);
	
	            this._doPaintList(list, paintAll);
	
	            this.eachBuildinLayer(postProcessLayer);
	        },
	
	        _doPaintList: function (list, paintAll) {
	            var currentLayer;
	            var currentZLevel;
	            var ctx;
	
	            // var invTransform = [];
	            var scope;
	
	            var progressiveLayerIdx = 0;
	            var currentProgressiveLayer;
	
	            var width = this._width;
	            var height = this._height;
	            var layerProgress;
	            var frame = this._progress;
	            function flushProgressiveLayer(layer) {
	                var dpr = ctx.dpr || 1;
	                ctx.save();
	                ctx.globalAlpha = 1;
	                ctx.shadowBlur = 0;
	                // Avoid layer don't clear in next progressive frame
	                currentLayer.__dirty = true;
	                ctx.setTransform(1, 0, 0, 1, 0, 0);
	                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);
	                ctx.restore();
	            }
	
	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var elZLevel = this._singleCanvas ? 0 : el.zlevel;
	
	                var elFrame = el.__frame;
	
	                // Flush at current context
	                // PENDING
	                if (elFrame < 0 && currentProgressiveLayer) {
	                    flushProgressiveLayer(currentProgressiveLayer);
	                    currentProgressiveLayer = null;
	                }
	
	                // Change draw layer
	                if (currentZLevel !== elZLevel) {
	                    if (ctx) {
	                        ctx.restore();
	                    }
	
	                    // Reset scope
	                    scope = {};
	
	                    // Only 0 zlevel if only has one canvas
	                    currentZLevel = elZLevel;
	                    currentLayer = this.getLayer(currentZLevel);
	
	                    if (!currentLayer.isBuildin) {
	                        log(
	                            'ZLevel ' + currentZLevel
	                            + ' has been used by unkown layer ' + currentLayer.id
	                        );
	                    }
	
	                    ctx = currentLayer.ctx;
	                    ctx.save();
	
	                    // Reset the count
	                    currentLayer.__unusedCount = 0;
	
	                    if (currentLayer.__dirty || paintAll) {
	                        currentLayer.clear();
	                    }
	                }
	
	                if (!(currentLayer.__dirty || paintAll)) {
	                    continue;
	                }
	
	                if (elFrame >= 0) {
	                    // Progressive layer changed
	                    if (!currentProgressiveLayer) {
	                        currentProgressiveLayer = this._progressiveLayers[
	                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)
	                        ];
	
	                        currentProgressiveLayer.ctx.save();
	                        currentProgressiveLayer.renderScope = {};
	
	                        if (currentProgressiveLayer
	                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)
	                        ) {
	                            // flushProgressiveLayer(currentProgressiveLayer);
	                            // Quick jump all progressive elements
	                            // All progressive element are not dirty, jump over and flush directly
	                            i = currentProgressiveLayer.__nextIdxNotProg - 1;
	                            // currentProgressiveLayer = null;
	                            continue;
	                        }
	
	                        layerProgress = currentProgressiveLayer.__progress;
	
	                        if (!currentProgressiveLayer.__dirty) {
	                            // Keep rendering
	                            frame = layerProgress;
	                        }
	
	                        currentProgressiveLayer.__progress = frame + 1;
	                    }
	
	                    if (elFrame === frame) {
	                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);
	                    }
	                }
	                else {
	                    this._doPaintEl(el, currentLayer, paintAll, scope);
	                }
	
	                el.__dirty = false;
	            }
	
	            if (currentProgressiveLayer) {
	                flushProgressiveLayer(currentProgressiveLayer);
	            }
	
	            // Restore the lastLayer ctx
	            ctx && ctx.restore();
	            // If still has clipping state
	            // if (scope.prevElClipPaths) {
	            //     ctx.restore();
	            // }
	
	            this._furtherProgressive = false;
	            util.each(this._progressiveLayers, function (layer) {
	                if (layer.__maxProgress >= layer.__progress) {
	                    this._furtherProgressive = true;
	                }
	            }, this);
	        },
	
	        _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	            var ctx = currentLayer.ctx;
	            var m = el.transform;
	            if (
	                (currentLayer.__dirty || forcePaint)
	                // Ignore invisible element
	                && !el.invisible
	                // Ignore transparent element
	                && el.style.opacity !== 0
	                // Ignore scale 0 element, in some environment like node-canvas
	                // Draw a scale 0 element can cause all following draw wrong
	                // And setTransform with scale 0 will cause set back transform failed.
	                && !(m && !m[0] && !m[3])
	                // Ignore culled element
	                && !(el.culling && isDisplayableCulled(el, this._width, this._height))
	            ) {
	
	                var clipPaths = el.__clipPaths;
	
	                // Optimize when clipping on group with several elements
	                if (scope.prevClipLayer !== currentLayer
	                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)
	                ) {
	                    // If has previous clipping state, restore from it
	                    if (scope.prevElClipPaths) {
	                        scope.prevClipLayer.ctx.restore();
	                        scope.prevClipLayer = scope.prevElClipPaths = null;
	
	                        // Reset prevEl since context has been restored
	                        scope.prevEl = null;
	                    }
	                    // New clipping state
	                    if (clipPaths) {
	                        ctx.save();
	                        doClip(clipPaths, ctx);
	                        scope.prevClipLayer = currentLayer;
	                        scope.prevElClipPaths = clipPaths;
	                    }
	                }
	                el.beforeBrush && el.beforeBrush(ctx);
	
	                el.brush(ctx, scope.prevEl || null);
	                scope.prevEl = el;
	
	                el.afterBrush && el.afterBrush(ctx);
	            }
	        },
	
	        /**
	         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	         * @param {number} zlevel
	         * @return {module:zrender/Layer}
	         */
	        getLayer: function (zlevel) {
	            if (this._singleCanvas) {
	                return this._layers[0];
	            }
	
	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer('zr_' + zlevel, this, this.dpr);
	                layer.isBuildin = true;
	
	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }
	
	                this.insertLayer(zlevel, layer);
	
	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }
	
	            return layer;
	        },
	
	        insertLayer: function (zlevel, layer) {
	
	            var layersMap = this._layers;
	            var zlevelList = this._zlevelList;
	            var len = zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            var domRoot = this._domRoot;
	
	            if (layersMap[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }
	
	            if (len > 0 && zlevel > zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (
	                        zlevelList[i] < zlevel
	                        && zlevelList[i + 1] > zlevel
	                    ) {
	                        break;
	                    }
	                }
	                prevLayer = layersMap[zlevelList[i]];
	            }
	            zlevelList.splice(i + 1, 0, zlevel);
	
	            if (prevLayer) {
	                var prevDom = prevLayer.dom;
	                if (prevDom.nextSibling) {
	                    domRoot.insertBefore(
	                        layer.dom,
	                        prevDom.nextSibling
	                    );
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }
	            else {
	                if (domRoot.firstChild) {
	                    domRoot.insertBefore(layer.dom, domRoot.firstChild);
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }
	
	            layersMap[zlevel] = layer;
	        },
	
	        // Iterate each layer
	        eachLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        },
	
	        // Iterate each buildin layer
	        eachBuildinLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },
	
	        // Iterate each other layer except buildin layer
	        eachOtherLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (! layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },
	
	        /**
	         * 获取所有已创建的层
	         * @param {Array.<module:zrender/Layer>} [prevLayer]
	         */
	        getLayers: function () {
	            return this._layers;
	        },
	
	        _updateLayerStatus: function (list) {
	
	            var layers = this._layers;
	            var progressiveLayers = this._progressiveLayers;
	
	            var elCountsLastFrame = {};
	            var progressiveElCountsLastFrame = {};
	
	            this.eachBuildinLayer(function (layer, z) {
	                elCountsLastFrame[z] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });
	
	            util.each(progressiveLayers, function (layer, idx) {
	                progressiveElCountsLastFrame[idx] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });
	
	            var progressiveLayerCount = 0;
	            var currentProgressiveLayer;
	            var lastProgressiveKey;
	            var frameCount = 0;
	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var zlevel = this._singleCanvas ? 0 : el.zlevel;
	                var layer = layers[zlevel];
	                var elProgress = el.progressive;
	                if (layer) {
	                    layer.elCount++;
	                    layer.__dirty = layer.__dirty || el.__dirty;
	                }
	
	                /////// Update progressive
	                if (elProgress >= 0) {
	                    // Fix wrong progressive sequence problem.
	                    if (lastProgressiveKey !== elProgress) {
	                        lastProgressiveKey = elProgress;
	                        frameCount++;
	                    }
	                    var elFrame = el.__frame = frameCount - 1;
	                    if (!currentProgressiveLayer) {
	                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);
	                        currentProgressiveLayer = progressiveLayers[idx];
	                        if (!currentProgressiveLayer) {
	                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(
	                                'progressive', this, this.dpr
	                            );
	                            currentProgressiveLayer.initContext();
	                        }
	                        currentProgressiveLayer.__maxProgress = 0;
	                    }
	                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;
	                    currentProgressiveLayer.elCount++;
	
	                    currentProgressiveLayer.__maxProgress = Math.max(
	                        currentProgressiveLayer.__maxProgress, elFrame
	                    );
	
	                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {
	                        // Should keep rendering this  layer because progressive rendering is not finished yet
	                        layer.__dirty = true;
	                    }
	                }
	                else {
	                    el.__frame = -1;
	
	                    if (currentProgressiveLayer) {
	                        currentProgressiveLayer.__nextIdxNotProg = i;
	                        progressiveLayerCount++;
	                        currentProgressiveLayer = null;
	                    }
	                }
	            }
	
	            if (currentProgressiveLayer) {
	                progressiveLayerCount++;
	                currentProgressiveLayer.__nextIdxNotProg = i;
	            }
	
	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCountsLastFrame[z] !== layer.elCount) {
	                    layer.__dirty = true;
	                }
	            });
	
	            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);
	            util.each(progressiveLayers, function (layer, idx) {
	                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {
	                    el.__dirty = true;
	                }
	                if (layer.__dirty) {
	                    layer.__progress = 0;
	                }
	            });
	        },
	
	        /**
	         * 清除hover层外所有内容
	         */
	        clear: function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        },
	
	        _clearLayer: function (layer) {
	            layer.clear();
	        },
	
	        /**
	         * 修改指定zlevel的绘制参数
	         *
	         * @param {string} zlevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         */
	        configLayer: function (zlevel, config) {
	            if (config) {
	                var layerConfig = this._layerConfig;
	                if (!layerConfig[zlevel]) {
	                    layerConfig[zlevel] = config;
	                }
	                else {
	                    util.merge(layerConfig[zlevel], config, true);
	                }
	
	                var layer = this._layers[zlevel];
	
	                if (layer) {
	                    util.merge(layer, layerConfig[zlevel], true);
	                }
	            }
	        },
	
	        /**
	         * 删除指定层
	         * @param {number} zlevel 层所在的zlevel
	         */
	        delLayer: function (zlevel) {
	            var layers = this._layers;
	            var zlevelList = this._zlevelList;
	            var layer = layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete layers[zlevel];
	
	            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	        },
	
	        /**
	         * 区域大小变化后重绘
	         */
	        resize: function (width, height) {
	            var domRoot = this._domRoot;
	            // FIXME Why ?
	            domRoot.style.display = 'none';
	
	            // Save input w/h
	            var opts = this._opts;
	            width != null && (opts.width = width);
	            height != null && (opts.height = height);
	
	            width = this._getSize(0);
	            height = this._getSize(1);
	
	            domRoot.style.display = '';
	
	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';
	
	                for (var id in this._layers) {
	                    if (this._layers.hasOwnProperty(id)) {
	                        this._layers[id].resize(width, height);
	                    }
	                }
	                util.each(this._progressiveLayers, function (layer) {
	                    layer.resize(width, height);
	                });
	
	                this.refresh(true);
	            }
	
	            this._width = width;
	            this._height = height;
	
	            return this;
	        },
	
	        /**
	         * 清除单独的一个层
	         * @param {number} zlevel
	         */
	        clearLayer: function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (layer) {
	                layer.clear();
	            }
	        },
	
	        /**
	         * 释放
	         */
	        dispose: function () {
	            this.root.innerHTML = '';
	
	            this.root =
	            this.storage =
	
	            this._domRoot =
	            this._layers = null;
	        },
	
	        /**
	         * Get canvas which has all thing rendered
	         * @param {Object} opts
	         * @param {string} [opts.backgroundColor]
	         */
	        getRenderedCanvas: function (opts) {
	            opts = opts || {};
	            if (this._singleCanvas) {
	                return this._layers[0].dom;
	            }
	
	            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	            imageLayer.initContext();
	
	            imageLayer.clearColor = opts.backgroundColor;
	            imageLayer.clear();
	
	            var displayList = this.storage.getDisplayList(true);
	
	            var scope = {};
	            for (var i = 0; i < displayList.length; i++) {
	                var el = displayList[i];
	                this._doPaintEl(el, imageLayer, true, scope);
	            }
	
	            return imageLayer.dom;
	        },
	        /**
	         * 获取绘图区域宽度
	         */
	        getWidth: function () {
	            return this._width;
	        },
	
	        /**
	         * 获取绘图区域高度
	         */
	        getHeight: function () {
	            return this._height;
	        },
	
	        _getSize: function (whIdx) {
	            var opts = this._opts;
	            var wh = ['width', 'height'][whIdx];
	            var cwh = ['clientWidth', 'clientHeight'][whIdx];
	            var plt = ['paddingLeft', 'paddingTop'][whIdx];
	            var prb = ['paddingRight', 'paddingBottom'][whIdx];
	
	            if (opts[wh] != null && opts[wh] !== 'auto') {
	                return parseFloat(opts[wh]);
	            }
	
	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);
	
	            return (
	                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))
	                - (parseInt10(stl[plt]) || 0)
	                - (parseInt10(stl[prb]) || 0)
	            ) | 0;
	        },
	
	        _pathToImage: function (id, path, width, height, dpr) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');
	
	            canvas.width = width * dpr;
	            canvas.height = height * dpr;
	
	            ctx.clearRect(0, 0, width * dpr, height * dpr);
	
	            var pathTransform = {
	                position: path.position,
	                rotation: path.rotation,
	                scale: path.scale
	            };
	            path.position = [0, 0, 0];
	            path.rotation = 0;
	            path.scale = [1, 1];
	            if (path) {
	                path.brush(ctx);
	            }
	
	            var ImageShape = __webpack_require__(82);
	            var imgShape = new ImageShape({
	                id: id,
	                style: {
	                    x: 0,
	                    y: 0,
	                    image: canvas
	                }
	            });
	
	            if (pathTransform.position != null) {
	                imgShape.position = path.position = pathTransform.position;
	            }
	
	            if (pathTransform.rotation != null) {
	                imgShape.rotation = path.rotation = pathTransform.rotation;
	            }
	
	            if (pathTransform.scale != null) {
	                imgShape.scale = path.scale = pathTransform.scale;
	            }
	
	            return imgShape;
	        },
	
	        _createPathToImage: function () {
	            var me = this;
	
	            return function (id, e, width, height) {
	                return me._pathToImage(
	                    id, e, width, height, me.dpr
	                );
	            };
	        }
	    };
	
	    module.exports = Painter;
	


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	
	
	    var util = __webpack_require__(25);
	    var config = __webpack_require__(62);
	    var Style = __webpack_require__(68);
	    var Pattern = __webpack_require__(80);
	
	    function returnFalse() {
	        return false;
	    }
	
	    /**
	     * 创建dom
	     *
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     * @param {number} number
	     */
	    function createDom(id, type, painter, dpr) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();
	
	        var newDomStyle = newDom.style;
	        // 没append呢，请原谅我这样写，清晰~
	        newDomStyle.position = 'absolute';
	        newDomStyle.left = 0;
	        newDomStyle.top = 0;
	        newDomStyle.width = width + 'px';
	        newDomStyle.height = height + 'px';
	        newDom.width = width * dpr;
	        newDom.height = height * dpr;
	
	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }
	
	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     * @param {number} [dpr]
	     */
	    var Layer = function(id, painter, dpr) {
	        var dom;
	        dpr = dpr || config.devicePixelRatio;
	        if (typeof id === 'string') {
	            dom = createDom(id, 'canvas', painter, dpr);
	        }
	        // Not using isDom because in node it will return false
	        else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	        this.id = id;
	        this.dom = dom;
	
	        var domStyle = dom.style;
	        if (domStyle) { // Not in node
	            dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domStyle['-webkit-user-select'] = 'none';
	            domStyle['user-select'] = 'none';
	            domStyle['-webkit-touch-callout'] = 'none';
	            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	            domStyle['padding'] = 0;
	            domStyle['margin'] = 0;
	            domStyle['border-width'] = 0;
	        }
	
	        this.domBack = null;
	        this.ctxBack = null;
	
	        this.painter = painter;
	
	        this.config = null;
	
	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;
	
	        /**
	         * Layer dpr
	         * @type {number}
	         */
	        this.dpr = dpr;
	    };
	
	    Layer.prototype = {
	
	        constructor: Layer,
	
	        elCount: 0,
	
	        __dirty: true,
	
	        initContext: function () {
	            this.ctx = this.dom.getContext('2d');
	
	            this.ctx.dpr = this.dpr;
	        },
	
	        createBackBuffer: function () {
	            var dpr = this.dpr;
	
	            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	            this.ctxBack = this.domBack.getContext('2d');
	
	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        },
	
	        /**
	         * @param  {number} width
	         * @param  {number} height
	         */
	        resize: function (width, height) {
	            var dpr = this.dpr;
	
	            var dom = this.dom;
	            var domStyle = dom.style;
	            var domBack = this.domBack;
	
	            domStyle.width = width + 'px';
	            domStyle.height = height + 'px';
	
	            dom.width = width * dpr;
	            dom.height = height * dpr;
	
	            if (domBack) {
	                domBack.width = width * dpr;
	                domBack.height = height * dpr;
	
	                if (dpr != 1) {
	                    this.ctxBack.scale(dpr, dpr);
	                }
	            }
	        },
	
	        /**
	         * 清空该层画布
	         * @param {boolean} clearAll Clear all with out motion blur
	         */
	        clear: function (clearAll) {
	            var dom = this.dom;
	            var ctx = this.ctx;
	            var width = dom.width;
	            var height = dom.height;
	
	            var clearColor = this.clearColor;
	            var haveMotionBLur = this.motionBlur && !clearAll;
	            var lastFrameAlpha = this.lastFrameAlpha;
	
	            var dpr = this.dpr;
	
	            if (haveMotionBLur) {
	                if (!this.domBack) {
	                    this.createBackBuffer();
	                }
	
	                this.ctxBack.globalCompositeOperation = 'copy';
	                this.ctxBack.drawImage(
	                    dom, 0, 0,
	                    width / dpr,
	                    height / dpr
	                );
	            }
	
	            ctx.clearRect(0, 0, width, height);
	            if (clearColor) {
	                var clearColorGradientOrPattern;
	                // Gradient
	                if (clearColor.colorStops) {
	                    // Cache canvas gradient
	                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	                        x: 0,
	                        y: 0,
	                        width: width,
	                        height: height
	                    });
	
	                    clearColor.__canvasGradient = clearColorGradientOrPattern;
	                }
	                // Pattern
	                else if (clearColor.image) {
	                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	                }
	                ctx.save();
	                ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	                ctx.fillRect(0, 0, width, height);
	                ctx.restore();
	            }
	
	            if (haveMotionBLur) {
	                var domBack = this.domBack;
	                ctx.save();
	                ctx.globalAlpha = lastFrameAlpha;
	                ctx.drawImage(domBack, 0, 0, width, height);
	                ctx.restore();
	            }
	        }
	    };
	
	    module.exports = Layer;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	
	    var Gradient = __webpack_require__(100);
	    module.exports = function (ecModel) {
	        function encodeColor(seriesModel) {
	            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');
	            var data = seriesModel.getData();
	            var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color
	
	            // FIXME Set color function or use the platte color
	            data.setVisual('color', color);
	
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof color === 'function' && !(color instanceof Gradient)) {
	                    data.each(function (idx) {
	                        data.setItemVisual(
	                            idx, 'color', color(seriesModel.getDataParams(idx))
	                        );
	                    });
	                }
	
	                // itemStyle in each data item
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var color = itemModel.get(colorAccessPath, true);
	                    if (color != null) {
	                        data.setItemVisual(idx, 'color', color);
	                    }
	                });
	            }
	        }
	        ecModel.eachRawSeries(encodeColor);
	    };


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	// Compatitable with 2.0
	
	
	    var zrUtil = __webpack_require__(25);
	    var compatStyle = __webpack_require__(117);
	
	    function get(opt, path) {
	        path = path.split(',');
	        var obj = opt;
	        for (var i = 0; i < path.length; i++) {
	            obj = obj && obj[path[i]];
	            if (obj == null) {
	                break;
	            }
	        }
	        return obj;
	    }
	
	    function set(opt, path, val, overwrite) {
	        path = path.split(',');
	        var obj = opt;
	        var key;
	        for (var i = 0; i < path.length - 1; i++) {
	            key = path[i];
	            if (obj[key] == null) {
	                obj[key] = {};
	            }
	            obj = obj[key];
	        }
	        if (overwrite || obj[path[i]] == null) {
	            obj[path[i]] = val;
	        }
	    }
	
	    function compatLayoutProperties(option) {
	        each(LAYOUT_PROPERTIES, function (prop) {
	            if (prop[0] in option && !(prop[1] in option)) {
	                option[prop[1]] = option[prop[0]];
	            }
	        });
	    }
	
	    var LAYOUT_PROPERTIES = [
	        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']
	    ];
	
	    var COMPATITABLE_COMPONENTS = [
	        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'
	    ];
	
	    var COMPATITABLE_SERIES = [
	        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',
	        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',
	        'pie', 'radar', 'sankey', 'scatter', 'treemap'
	    ];
	
	    var each = zrUtil.each;
	
	    module.exports = function (option) {
	        each(option.series, function (seriesOpt) {
	            if (!zrUtil.isObject(seriesOpt)) {
	                return;
	            }
	
	            var seriesType = seriesOpt.type;
	
	            compatStyle(seriesOpt);
	
	            if (seriesType === 'pie' || seriesType === 'gauge') {
	                if (seriesOpt.clockWise != null) {
	                    seriesOpt.clockwise = seriesOpt.clockWise;
	                }
	            }
	            if (seriesType === 'gauge') {
	                var pointerColor = get(seriesOpt, 'pointer.color');
	                pointerColor != null
	                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	            }
	
	            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                    compatLayoutProperties(seriesOpt);
	                    break;
	                }
	            }
	        });
	
	        // dataRange has changed to visualMap
	        if (option.dataRange) {
	            option.visualMap = option.dataRange;
	        }
	
	        each(COMPATITABLE_COMPONENTS, function (componentName) {
	            var options = option[componentName];
	            if (options) {
	                if (!zrUtil.isArray(options)) {
	                    options = [options];
	                }
	                each(options, function (option) {
	                    compatLayoutProperties(option);
	                });
	            }
	        });
	    };


/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var POSSIBLE_STYLES = [
	        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',
	        'chordStyle', 'label', 'labelLine'
	    ];
	
	    function compatItemStyle(opt) {
	        var itemStyleOpt = opt && opt.itemStyle;
	        if (itemStyleOpt) {
	            zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	                var normalItemStyleOpt = itemStyleOpt.normal;
	                var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].normal) {
	                        opt[styleName].normal = normalItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                    }
	                    normalItemStyleOpt[styleName] = null;
	                }
	                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].emphasis) {
	                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                    }
	                    emphasisItemStyleOpt[styleName] = null;
	                }
	            });
	        }
	    }
	
	    module.exports = function (seriesOpt) {
	        if (!seriesOpt) {
	            return;
	        }
	        compatItemStyle(seriesOpt);
	        compatItemStyle(seriesOpt.markPoint);
	        compatItemStyle(seriesOpt.markLine);
	        var data = seriesOpt.data;
	        if (data) {
	            for (var i = 0; i < data.length; i++) {
	                compatItemStyle(data[i]);
	            }
	            // mark point data
	            var markPoint = seriesOpt.markPoint;
	            if (markPoint && markPoint.data) {
	                var mpData = markPoint.data;
	                for (var i = 0; i < mpData.length; i++) {
	                    compatItemStyle(mpData[i]);
	                }
	            }
	            // mark line data
	            var markLine = seriesOpt.markLine;
	            if (markLine && markLine.data) {
	                var mlData = markLine.data;
	                for (var i = 0; i < mlData.length; i++) {
	                    if (zrUtil.isArray(mlData[i])) {
	                        compatItemStyle(mlData[i][0]);
	                        compatItemStyle(mlData[i][1]);
	                    }
	                    else {
	                        compatItemStyle(mlData[i]);
	                    }
	                }
	            }
	        }
	    };


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var PI = Math.PI;
	    /**
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} [opts]
	     * @param {string} [opts.text]
	     * @param {string} [opts.color]
	     * @param {string} [opts.textColor]
	     * @return {module:zrender/Element}
	     */
	    module.exports = function (api, opts) {
	        opts = opts || {};
	        zrUtil.defaults(opts, {
	            text: 'loading',
	            color: '#c23531',
	            textColor: '#000',
	            maskColor: 'rgba(255, 255, 255, 0.8)',
	            zlevel: 0
	        });
	        var mask = new graphic.Rect({
	            style: {
	                fill: opts.maskColor
	            },
	            zlevel: opts.zlevel,
	            z: 10000
	        });
	        var arc = new graphic.Arc({
	            shape: {
	                startAngle: -PI / 2,
	                endAngle: -PI / 2 + 0.1,
	                r: 10
	            },
	            style: {
	                stroke: opts.color,
	                lineCap: 'round',
	                lineWidth: 5
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });
	        var labelRect = new graphic.Rect({
	            style: {
	                fill: 'none',
	                text: opts.text,
	                textPosition: 'right',
	                textDistance: 10,
	                textFill: opts.textColor
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });
	
	        arc.animateShape(true)
	            .when(1000, {
	                endAngle: PI * 3 / 2
	            })
	            .start('circularInOut');
	        arc.animateShape(true)
	            .when(1000, {
	                startAngle: PI * 3 / 2
	            })
	            .delay(300)
	            .start('circularInOut');
	
	        var group = new graphic.Group();
	        group.add(arc);
	        group.add(labelRect);
	        group.add(mask);
	        // Inject resize
	        group.resize = function () {
	            var cx = api.getWidth() / 2;
	            var cy = api.getHeight() / 2;
	            arc.setShape({
	                cx: cx,
	                cy: cy
	            });
	            var r = arc.shape.r;
	            labelRect.setShape({
	                x: cx - r,
	                y: cy - r,
	                width: r * 2,
	                height: r * 2
	            });
	
	            mask.setShape({
	                x: 0,
	                y: 0,
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	        };
	        group.resize();
	        return group;
	    };


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * List for data storage
	 * @module echarts/data/List
	 */
	
	
	    var UNDEFINED = 'undefined';
	    var globalObj = typeof window === 'undefined' ? global : window;
	    var Float64Array = typeof globalObj.Float64Array === UNDEFINED
	        ? Array : globalObj.Float64Array;
	    var Int32Array = typeof globalObj.Int32Array === UNDEFINED
	        ? Array : globalObj.Int32Array;
	
	    var dataCtors = {
	        'float': Float64Array,
	        'int': Int32Array,
	        // Ordinal data type can be string or int
	        'ordinal': Array,
	        'number': Array,
	        'time': Array
	    };
	
	    var Model = __webpack_require__(33);
	    var DataDiffer = __webpack_require__(120);
	
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var isObject = zrUtil.isObject;
	
	    var TRANSFERABLE_PROPERTIES = [
	        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'
	    ];
	
	    var transferProperties = function (a, b) {
	        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {
	            if (b.hasOwnProperty(propName)) {
	                a[propName] = b[propName];
	            }
	        });
	
	        a.__wrappedMethods = b.__wrappedMethods;
	    };
	
	    /**
	     * @constructor
	     * @alias module:echarts/data/List
	     *
	     * @param {Array.<string>} dimensions
	     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	     * @param {module:echarts/model/Model} hostModel
	     */
	    var List = function (dimensions, hostModel) {
	
	        dimensions = dimensions || ['x', 'y'];
	
	        var dimensionInfos = {};
	        var dimensionNames = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimensionName;
	            var dimensionInfo = {};
	            if (typeof dimensions[i] === 'string') {
	                dimensionName = dimensions[i];
	                dimensionInfo = {
	                    name: dimensionName,
	                    stackable: false,
	                    // Type can be 'float', 'int', 'number'
	                    // Default is number, Precision of float may not enough
	                    type: 'number'
	                };
	            }
	            else {
	                dimensionInfo = dimensions[i];
	                dimensionName = dimensionInfo.name;
	                dimensionInfo.type = dimensionInfo.type || 'number';
	            }
	            dimensionNames.push(dimensionName);
	            dimensionInfos[dimensionName] = dimensionInfo;
	        }
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        this.dimensions = dimensionNames;
	
	        /**
	         * Infomation of each data dimension, like data type.
	         * @type {Object}
	         */
	        this._dimensionInfos = dimensionInfos;
	
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;
	
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.dataType;
	
	        /**
	         * Indices stores the indices of data subset after filtered.
	         * This data subset will be used in chart.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        this.indices = [];
	
	        /**
	         * Data storage
	         * @type {Object.<key, TypedArray|Array>}
	         * @private
	         */
	        this._storage = {};
	
	        /**
	         * @type {Array.<string>}
	         */
	        this._nameList = [];
	        /**
	         * @type {Array.<string>}
	         */
	        this._idList = [];
	        /**
	         * Models of data option is stored sparse for optimizing memory cost
	         * @type {Array.<module:echarts/model/Model>}
	         * @private
	         */
	        this._optionModels = [];
	
	        /**
	         * @param {module:echarts/data/List}
	         */
	        this.stackedOn = null;
	
	        /**
	         * Global visual properties after visual coding
	         * @type {Object}
	         * @private
	         */
	        this._visual = {};
	
	        /**
	         * Globel layout properties.
	         * @type {Object}
	         * @private
	         */
	        this._layout = {};
	
	        /**
	         * Item visual properties after visual coding
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemVisuals = [];
	
	        /**
	         * Item layout properties after layout
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemLayouts = [];
	
	        /**
	         * Graphic elemnents
	         * @type {Array.<module:zrender/Element>}
	         * @private
	         */
	        this._graphicEls = [];
	
	        /**
	         * @type {Array.<Array|Object>}
	         * @private
	         */
	        this._rawData;
	
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._extent;
	    };
	
	    var listProto = List.prototype;
	
	    listProto.type = 'list';
	    /**
	     * If each data item has it's own option
	     * @type {boolean}
	     */
	    listProto.hasItemOption = true;
	
	    /**
	     * Get dimension name
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     * @return {string} Concrete dim name.
	     */
	    listProto.getDimension = function (dim) {
	        if (!isNaN(dim)) {
	            dim = this.dimensions[dim] || dim;
	        }
	        return dim;
	    };
	    /**
	     * Get type and stackable info of particular dimension
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     */
	    listProto.getDimensionInfo = function (dim) {
	        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	    };
	
	    /**
	     * Initialize from data
	     * @param {Array.<Object|number|Array>} data
	     * @param {Array.<string>} [nameList]
	     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	     */
	    listProto.initData = function (data, nameList, dimValueGetter) {
	        data = data || [];
	
	        if (__DEV__) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }
	
	        this._rawData = data;
	
	        // Clear
	        var storage = this._storage = {};
	        var indices = this.indices = [];
	
	        var dimensions = this.dimensions;
	        var size = data.length;
	        var dimensionInfoMap = this._dimensionInfos;
	
	        var idList = [];
	        var nameRepeatCount = {};
	
	        nameList = nameList || [];
	
	        // Init storage
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimInfo = dimensionInfoMap[dimensions[i]];
	            var DataCtor = dataCtors[dimInfo.type];
	            storage[dimensions[i]] = new DataCtor(size);
	        }
	
	        var self = this;
	        if (!dimValueGetter) {
	            self.hasItemOption = false;
	        }
	        // Default dim value getter
	        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	            var value = modelUtil.getDataItemValue(dataItem);
	            // If any dataItem is like { value: 10 }
	            if (modelUtil.isDataItemOption(dataItem)) {
	                self.hasItemOption = true;
	            }
	            return modelUtil.converDataValue(
	                (value instanceof Array)
	                    ? value[dimIndex]
	                    // If value is a single number or something else not array.
	                    : value,
	                dimensionInfoMap[dimName]
	            );
	        };
	
	        for (var idx = 0; idx < data.length; idx++) {
	            var dataItem = data[idx];
	            // Each data item is value
	            // [1, 2]
	            // 2
	            // Bar chart, line chart which uses category axis
	            // only gives the 'y' value. 'x' value is the indices of cateogry
	            // Use a tempValue to normalize the value to be a (x, y) value
	
	            // Store the data by dimensions
	            for (var k = 0; k < dimensions.length; k++) {
	                var dim = dimensions[k];
	                var dimStorage = storage[dim];
	                // PENDING NULL is empty or zero
	                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	            }
	
	            indices.push(idx);
	        }
	
	        // Use the name in option and create id
	        for (var i = 0; i < data.length; i++) {
	            if (!nameList[i]) {
	                if (data[i] && data[i].name != null) {
	                    nameList[i] = data[i].name;
	                }
	            }
	            var name = nameList[i] || '';
	            // Try using the id in option
	            var id = data[i] && data[i].id;
	
	            if (!id && name) {
	                // Use name as id and add counter to avoid same name
	                nameRepeatCount[name] = nameRepeatCount[name] || 0;
	                id = name;
	                if (nameRepeatCount[name] > 0) {
	                    id += '__ec__' + nameRepeatCount[name];
	                }
	                nameRepeatCount[name]++;
	            }
	            id && (idList[i] = id);
	        }
	
	        this._nameList = nameList;
	        this._idList = idList;
	    };
	
	    /**
	     * @return {number}
	     */
	    listProto.count = function () {
	        return this.indices.length;
	    };
	
	    /**
	     * Get value. Return NaN if idx is out of range.
	     * @param {string} dim Dim must be concrete name.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.get = function (dim, idx, stack) {
	        var storage = this._storage;
	        var dataIndex = this.indices[idx];
	
	        // If value not exists
	        if (dataIndex == null) {
	            return NaN;
	        }
	
	        var value = storage[dim] && storage[dim][dataIndex];
	        // FIXME ordinal data type is not stackable
	        if (stack) {
	            var dimensionInfo = this._dimensionInfos[dim];
	            if (dimensionInfo && dimensionInfo.stackable) {
	                var stackedOn = this.stackedOn;
	                while (stackedOn) {
	                    // Get no stacked data of stacked on
	                    var stackedValue = stackedOn.get(dim, idx);
	                    // Considering positive stack, negative stack and empty data
	                    if ((value >= 0 && stackedValue > 0)  // Positive stack
	                        || (value <= 0 && stackedValue < 0) // Negative stack
	                    ) {
	                        value += stackedValue;
	                    }
	                    stackedOn = stackedOn.stackedOn;
	                }
	            }
	        }
	        return value;
	    };
	
	    /**
	     * Get value for multi dimensions.
	     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.getValues = function (dimensions, idx, stack) {
	        var values = [];
	
	        if (!zrUtil.isArray(dimensions)) {
	            stack = idx;
	            idx = dimensions;
	            dimensions = this.dimensions;
	        }
	
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            values.push(this.get(dimensions[i], idx, stack));
	        }
	
	        return values;
	    };
	
	    /**
	     * If value is NaN. Inlcuding '-'
	     * @param {string} dim
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.hasValue = function (idx) {
	        var dimensions = this.dimensions;
	        var dimensionInfos = this._dimensionInfos;
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            if (
	                // Ordinal type can be string or number
	                dimensionInfos[dimensions[i]].type !== 'ordinal'
	                && isNaN(this.get(dimensions[i], idx))
	            ) {
	                return false;
	            }
	        }
	        return true;
	    };
	
	    /**
	     * Get extent of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     * @param {Function} filter
	     */
	    listProto.getDataExtent = function (dim, stack, filter) {
	        dim = this.getDimension(dim);
	        var dimData = this._storage[dim];
	        var dimInfo = this.getDimensionInfo(dim);
	        stack = (dimInfo && dimInfo.stackable) && stack;
	        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];
	        var value;
	        if (dimExtent) {
	            return dimExtent;
	        }
	        // var dimInfo = this._dimensionInfos[dim];
	        if (dimData) {
	            var min = Infinity;
	            var max = -Infinity;
	            // var isOrdinal = dimInfo.type === 'ordinal';
	            for (var i = 0, len = this.count(); i < len; i++) {
	                value = this.get(dim, i, stack);
	                // FIXME
	                // if (isOrdinal && typeof value === 'string') {
	                //     value = zrUtil.indexOf(dimData, value);
	                // }
	                if (!filter || filter(value, dim, i)) {
	                    value < min && (min = value);
	                    value > max && (max = value);
	                }
	            }
	            return (this._extent[dim + !!stack] = [min, max]);
	        }
	        else {
	            return [Infinity, -Infinity];
	        }
	    };
	
	    /**
	     * Get sum of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getSum = function (dim, stack) {
	        var dimData = this._storage[dim];
	        var sum = 0;
	        if (dimData) {
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var value = this.get(dim, i, stack);
	                if (!isNaN(value)) {
	                    sum += value;
	                }
	            }
	        }
	        return sum;
	    };
	
	    /**
	     * Retreive the index with given value
	     * @param {number} idx
	     * @param {number} value
	     * @return {number}
	     */
	    // FIXME Precision of float value
	    listProto.indexOf = function (dim, value) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	        var indices = this.indices;
	
	        if (dimData) {
	            for (var i = 0, len = indices.length; i < len; i++) {
	                var rawIndex = indices[i];
	                if (dimData[rawIndex] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    };
	
	    /**
	     * Retreive the index with given name
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfName = function (name) {
	        var indices = this.indices;
	        var nameList = this._nameList;
	
	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (nameList[rawIndex] === name) {
	                return i;
	            }
	        }
	
	        return -1;
	    };
	
	    /**
	     * Retreive the index with given raw data index
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfRawIndex = function (rawIndex) {
	        // Indices are ascending
	        var indices = this.indices;
	
	        // If rawIndex === dataIndex
	        var rawDataIndex = indices[rawIndex];
	        if (rawDataIndex != null && rawDataIndex === rawIndex) {
	            return rawIndex;
	        }
	
	        var left = 0;
	        var right = indices.length - 1;
	        while (left <= right) {
	            var mid = (left + right) / 2 | 0;
	            if (indices[mid] < rawIndex) {
	                left = mid + 1;
	            }
	            else if (indices[mid] > rawIndex) {
	                right = mid - 1;
	            }
	            else {
	                return mid;
	            }
	        }
	        return -1;
	    };
	
	    /**
	     * Retreive the index of nearest value
	     * @param {string} dim
	     * @param {number} value
	     * @param {boolean} stack If given value is after stacked
	     * @param {number} [maxDistance=Infinity]
	     * @return {number}
	     */
	    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	
	        if (maxDistance == null) {
	            maxDistance = Infinity;
	        }
	
	        var nearestIdx = -1;
	        if (dimData) {
	            var minDist = Number.MAX_VALUE;
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var diff = value - this.get(dim, i, stack);
	                var dist = Math.abs(diff);
	                if (
	                    diff <= maxDistance
	                    && (dist < minDist
	                        // For the case of two data are same on xAxis, which has sequence data.
	                        // Show the nearest index
	                        // https://github.com/ecomfe/echarts/issues/2869
	                        || (dist === minDist && diff > 0)
	                    )
	                ) {
	                    minDist = dist;
	                    nearestIdx = i;
	                }
	            }
	        }
	        return nearestIdx;
	    };
	
	    /**
	     * Get raw data index
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawIndex = function (idx) {
	        var rawIdx = this.indices[idx];
	        return rawIdx == null ? -1 : rawIdx;
	    };
	
	    /**
	     * Get raw data item
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawDataItem = function (idx) {
	        return this._rawData[this.getRawIndex(idx)];
	    };
	
	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getName = function (idx) {
	        return this._nameList[this.indices[idx]] || '';
	    };
	
	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getId = function (idx) {
	        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');
	    };
	
	
	    function normalizeDimensions(dimensions) {
	        if (!zrUtil.isArray(dimensions)) {
	            dimensions = [dimensions];
	        }
	        return dimensions;
	    }
	
	    /**
	     * Data iteration
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     *
	     * @example
	     *  list.each('x', function (x, idx) {});
	     *  list.each(['x', 'y'], function (x, y, idx) {});
	     *  list.each(function (idx) {})
	     */
	    listProto.each = function (dims, cb, stack, context) {
	        if (typeof dims === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dims;
	            dims = [];
	        }
	
	        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);
	
	        var value = [];
	        var dimSize = dims.length;
	        var indices = this.indices;
	
	        context = context || this;
	
	        for (var i = 0; i < indices.length; i++) {
	            // Simple optimization
	            switch (dimSize) {
	                case 0:
	                    cb.call(context, i);
	                    break;
	                case 1:
	                    cb.call(context, this.get(dims[0], i, stack), i);
	                    break;
	                case 2:
	                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);
	                    break;
	                default:
	                    for (var k = 0; k < dimSize; k++) {
	                        value[k] = this.get(dims[k], i, stack);
	                    }
	                    // Index
	                    value[k] = i;
	                    cb.apply(context, value);
	            }
	        }
	    };
	
	    /**
	     * Data filter
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     */
	    listProto.filterSelf = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }
	
	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );
	
	        var newIndices = [];
	        var value = [];
	        var dimSize = dimensions.length;
	        var indices = this.indices;
	
	        context = context || this;
	
	        for (var i = 0; i < indices.length; i++) {
	            var keep;
	            // Simple optimization
	            if (dimSize === 1) {
	                keep = cb.call(
	                    context, this.get(dimensions[0], i, stack), i
	                );
	            }
	            else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                value[k] = i;
	                keep = cb.apply(context, value);
	            }
	            if (keep) {
	                newIndices.push(indices[i]);
	            }
	        }
	
	        this.indices = newIndices;
	
	        // Reset data extent
	        this._extent = {};
	
	        return this;
	    };
	
	    /**
	     * Data mapping to a plain array
	     * @param {string|Array.<string>} [dimensions]
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.mapArray = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }
	
	        var result = [];
	        this.each(dimensions, function () {
	            result.push(cb && cb.apply(this, arguments));
	        }, stack, context);
	        return result;
	    };
	
	    function cloneListForMapAndSample(original, excludeDimensions) {
	        var allDimensions = original.dimensions;
	        var list = new List(
	            zrUtil.map(allDimensions, original.getDimensionInfo, original),
	            original.hostModel
	        );
	        // FIXME If needs stackedOn, value may already been stacked
	        transferProperties(list, original);
	
	        var storage = list._storage = {};
	        var originalStorage = original._storage;
	        // Init storage
	        for (var i = 0; i < allDimensions.length; i++) {
	            var dim = allDimensions[i];
	            var dimStore = originalStorage[dim];
	            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	                storage[dim] = new dimStore.constructor(
	                    originalStorage[dim].length
	                );
	            }
	            else {
	                // Direct reference for other dimensions
	                storage[dim] = originalStorage[dim];
	            }
	        }
	        return list;
	    }
	
	    /**
	     * Data mapping to a new List with given dimensions
	     * @param {string|Array.<string>} dimensions
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.map = function (dimensions, cb, stack, context) {
	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );
	
	        var list = cloneListForMapAndSample(this, dimensions);
	        // Following properties are all immutable.
	        // So we can reference to the same value
	        var indices = list.indices = this.indices;
	
	        var storage = list._storage;
	
	        var tmpRetValue = [];
	        this.each(dimensions, function () {
	            var idx = arguments[arguments.length - 1];
	            var retValue = cb && cb.apply(this, arguments);
	            if (retValue != null) {
	                // a number
	                if (typeof retValue === 'number') {
	                    tmpRetValue[0] = retValue;
	                    retValue = tmpRetValue;
	                }
	                for (var i = 0; i < retValue.length; i++) {
	                    var dim = dimensions[i];
	                    var dimStore = storage[dim];
	                    var rawIdx = indices[idx];
	                    if (dimStore) {
	                        dimStore[rawIdx] = retValue[i];
	                    }
	                }
	            }
	        }, stack, context);
	
	        return list;
	    };
	
	    /**
	     * Large data down sampling on given dimension
	     * @param {string} dimension
	     * @param {number} rate
	     * @param {Function} sampleValue
	     * @param {Function} sampleIndex Sample index for name and id
	     */
	    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	        var list = cloneListForMapAndSample(this, [dimension]);
	        var storage = this._storage;
	        var targetStorage = list._storage;
	
	        var originalIndices = this.indices;
	        var indices = list.indices = [];
	
	        var frameValues = [];
	        var frameIndices = [];
	        var frameSize = Math.floor(1 / rate);
	
	        var dimStore = targetStorage[dimension];
	        var len = this.count();
	        // Copy data from original data
	        for (var i = 0; i < storage[dimension].length; i++) {
	            targetStorage[dimension][i] = storage[dimension][i];
	        }
	        for (var i = 0; i < len; i += frameSize) {
	            // Last frame
	            if (frameSize > len - i) {
	                frameSize = len - i;
	                frameValues.length = frameSize;
	            }
	            for (var k = 0; k < frameSize; k++) {
	                var idx = originalIndices[i + k];
	                frameValues[k] = dimStore[idx];
	                frameIndices[k] = idx;
	            }
	            var value = sampleValue(frameValues);
	            var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	            // Only write value on the filtered data
	            dimStore[idx] = value;
	            indices.push(idx);
	        }
	
	        return list;
	    };
	
	    /**
	     * Get model of one data item.
	     *
	     * @param {number} idx
	     */
	    // FIXME Model proxy ?
	    listProto.getItemModel = function (idx) {
	        var hostModel = this.hostModel;
	        idx = this.indices[idx];
	        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);
	    };
	
	    /**
	     * Create a data differ
	     * @param {module:echarts/data/List} otherList
	     * @return {module:echarts/data/DataDiffer}
	     */
	    listProto.diff = function (otherList) {
	        var idList = this._idList;
	        var otherIdList = otherList && otherList._idList;
	        var val;
	        // Use prefix to avoid index to be the same as otherIdList[idx],
	        // which will cause weird udpate animation.
	        var prefix = 'e\0\0';
	
	        return new DataDiffer(
	            otherList ? otherList.indices : [],
	            this.indices,
	            function (idx) {
	                return (val = otherIdList[idx]) != null ? val : prefix + idx;
	            },
	            function (idx) {
	                return (val = idList[idx]) != null ? val : prefix + idx;
	            }
	        );
	    };
	    /**
	     * Get visual property.
	     * @param {string} key
	     */
	    listProto.getVisual = function (key) {
	        var visual = this._visual;
	        return visual && visual[key];
	    };
	
	    /**
	     * Set visual property
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setVisual('color', color);
	     *  setVisual({
	     *      'color': color
	     *  });
	     */
	    listProto.setVisual = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setVisual(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._visual = this._visual || {};
	        this._visual[key] = val;
	    };
	
	    /**
	     * Set layout property.
	     * @param {string} key
	     * @param {*} [val]
	     */
	    listProto.setLayout = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setLayout(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._layout[key] = val;
	    };
	
	    /**
	     * Get layout property.
	     * @param  {string} key.
	     * @return {*}
	     */
	    listProto.getLayout = function (key) {
	        return this._layout[key];
	    };
	
	    /**
	     * Get layout of single data item
	     * @param {number} idx
	     */
	    listProto.getItemLayout = function (idx) {
	        return this._itemLayouts[idx];
	    };
	
	    /**
	     * Set layout of single data item
	     * @param {number} idx
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    listProto.setItemLayout = function (idx, layout, merge) {
	        this._itemLayouts[idx] = merge
	            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)
	            : layout;
	    };
	
	    /**
	     * Clear all layout of single data item
	     */
	    listProto.clearItemLayouts = function () {
	        this._itemLayouts.length = 0;
	    };
	
	    /**
	     * Get visual property of single data item
	     * @param {number} idx
	     * @param {string} key
	     * @param {boolean} ignoreParent
	     */
	    listProto.getItemVisual = function (idx, key, ignoreParent) {
	        var itemVisual = this._itemVisuals[idx];
	        var val = itemVisual && itemVisual[key];
	        if (val == null && !ignoreParent) {
	            // Use global visual property
	            return this.getVisual(key);
	        }
	        return val;
	    };
	
	    /**
	     * Set visual property of single data item
	     *
	     * @param {number} idx
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setItemVisual(0, 'color', color);
	     *  setItemVisual(0, {
	     *      'color': color
	     *  });
	     */
	    listProto.setItemVisual = function (idx, key, value) {
	        var itemVisual = this._itemVisuals[idx] || {};
	        this._itemVisuals[idx] = itemVisual;
	
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    itemVisual[name] = key[name];
	                }
	            }
	            return;
	        }
	        itemVisual[key] = value;
	    };
	
	    /**
	     * Clear itemVisuals and list visual.
	     */
	    listProto.clearAllVisual = function () {
	        this._visual = {};
	        this._itemVisuals = [];
	    };
	
	    var setItemDataAndSeriesIndex = function (child) {
	        child.seriesIndex = this.seriesIndex;
	        child.dataIndex = this.dataIndex;
	        child.dataType = this.dataType;
	    };
	    /**
	     * Set graphic element relative to data. It can be set as null
	     * @param {number} idx
	     * @param {module:zrender/Element} [el]
	     */
	    listProto.setItemGraphicEl = function (idx, el) {
	        var hostModel = this.hostModel;
	
	        if (el) {
	            // Add data index and series index for indexing the data by element
	            // Useful in tooltip
	            el.dataIndex = idx;
	            el.dataType = this.dataType;
	            el.seriesIndex = hostModel && hostModel.seriesIndex;
	            if (el.type === 'group') {
	                el.traverse(setItemDataAndSeriesIndex, el);
	            }
	        }
	
	        this._graphicEls[idx] = el;
	    };
	
	    /**
	     * @param {number} idx
	     * @return {module:zrender/Element}
	     */
	    listProto.getItemGraphicEl = function (idx) {
	        return this._graphicEls[idx];
	    };
	
	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    listProto.eachItemGraphicEl = function (cb, context) {
	        zrUtil.each(this._graphicEls, function (el, idx) {
	            if (el) {
	                cb && cb.call(context, el, idx);
	            }
	        });
	    };
	
	    /**
	     * Shallow clone a new list except visual and layout properties, and graph elements.
	     * New list only change the indices.
	     */
	    listProto.cloneShallow = function () {
	        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	        var list = new List(dimensionInfoList, this.hostModel);
	
	        // FIXME
	        list._storage = this._storage;
	
	        transferProperties(list, this);
	
	
	        // Clone will not change the data extent and indices
	        list.indices = this.indices.slice();
	
	        if (this._extent) {
	            list._extent = zrUtil.extend({}, this._extent);
	        }
	
	        return list;
	    };
	
	    /**
	     * Wrap some method to add more feature
	     * @param {string} methodName
	     * @param {Function} injectFunction
	     */
	    listProto.wrapMethod = function (methodName, injectFunction) {
	        var originalMethod = this[methodName];
	        if (typeof originalMethod !== 'function') {
	            return;
	        }
	        this.__wrappedMethods = this.__wrappedMethods || [];
	        this.__wrappedMethods.push(methodName);
	        this[methodName] = function () {
	            var res = originalMethod.apply(this, arguments);
	            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	        };
	    };
	
	    // Methods that create a new list based on this list should be listed here.
	    // Notice that those method should `RETURN` the new list.
	    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];
	    // Methods that change indices of this list should be listed here.
	    listProto.CHANGABLE_METHODS = ['filterSelf'];
	
	    module.exports = List;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';
	
	
	    function defaultKeyGetter(item) {
	        return item;
	    }
	
	    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	        this._old = oldArr;
	        this._new = newArr;
	
	        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	        this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	    }
	
	    DataDiffer.prototype = {
	
	        constructor: DataDiffer,
	
	        /**
	         * Callback function when add a data
	         */
	        add: function (func) {
	            this._add = func;
	            return this;
	        },
	
	        /**
	         * Callback function when update a data
	         */
	        update: function (func) {
	            this._update = func;
	            return this;
	        },
	
	        /**
	         * Callback function when remove a data
	         */
	        remove: function (func) {
	            this._remove = func;
	            return this;
	        },
	
	        execute: function () {
	            var oldArr = this._old;
	            var newArr = this._new;
	            var oldKeyGetter = this._oldKeyGetter;
	            var newKeyGetter = this._newKeyGetter;
	
	            var oldDataIndexMap = {};
	            var newDataIndexMap = {};
	            var oldDataKeyArr = [];
	            var newDataKeyArr = [];
	            var i;
	
	            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);
	            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);
	
	            // Travel by inverted order to make sure order consistency
	            // when duplicate keys exists (consider newDataIndex.pop() below).
	            // For performance consideration, these code below do not look neat.
	            for (i = 0; i < oldArr.length; i++) {
	                var key = oldDataKeyArr[i];
	                var idx = newDataIndexMap[key];
	
	                // idx can never be empty array here. see 'set null' logic below.
	                if (idx != null) {
	                    // Consider there is duplicate key (for example, use dataItem.name as key).
	                    // We should make sure every item in newArr and oldArr can be visited.
	                    var len = idx.length;
	                    if (len) {
	                        len === 1 && (newDataIndexMap[key] = null);
	                        idx = idx.unshift();
	                    }
	                    else {
	                        newDataIndexMap[key] = null;
	                    }
	                    this._update && this._update(idx, i);
	                }
	                else {
	                    this._remove && this._remove(i);
	                }
	            }
	
	            for (var i = 0; i < newDataKeyArr.length; i++) {
	                var key = newDataKeyArr[i];
	                if (newDataIndexMap.hasOwnProperty(key)) {
	                    var idx = newDataIndexMap[key];
	                    if (idx == null) {
	                        continue;
	                    }
	                    // idx can never be empty array here. see 'set null' logic above.
	                    if (!idx.length) {
	                        this._add && this._add(idx);
	                    }
	                    else {
	                        for (var j = 0, len = idx.length; j < len; j++) {
	                            this._add && this._add(idx[j]);
	                        }
	                    }
	                }
	            }
	        }
	    };
	
	    function initIndexMap(arr, map, keyArr, keyGetter) {
	        for (var i = 0; i < arr.length; i++) {
	            var key = keyGetter(arr[i], i);
	            var existence = map[key];
	            if (existence == null) {
	                keyArr.push(key);
	                map[key] = i;
	            }
	            else {
	                if (!existence.length) {
	                    map[key] = existence = [existence];
	                }
	                existence.push(i);
	            }
	        }
	    }
	
	    module.exports = DataDiffer;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	    var PRIORITY = echarts.PRIORITY;
	
	    __webpack_require__(122);
	    __webpack_require__(125);
	
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'line', 'circle', 'line'
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(132), 'line'
	    ));
	
	    // Down sample after filter
	    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(
	        __webpack_require__(133), 'line'
	    ));
	
	    // In case developer forget to include grid component
	    __webpack_require__(134);


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var createListFromArray = __webpack_require__(123);
	    var SeriesModel = __webpack_require__(49);
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.line',
	
	        dependencies: ['grid', 'polar'],
	
	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {
	                    throw new Error('Line not support coordinateSystem besides cartesian and polar');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },
	
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	            // stack: null
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            // polarIndex: 0,
	
	            // If clip the overflow value
	            clipOverflow: true,
	
	            label: {
	                normal: {
	                    position: 'top'
	                }
	            },
	            // itemStyle: {
	            //     normal: {},
	            //     emphasis: {}
	            // },
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            // areaStyle: {},
	            // false, 'start', 'end', 'middle'
	            step: false,
	
	            // Disabled if step is true
	            smooth: false,
	            smoothMonotone: null,
	            // 拐点图形类型
	            symbol: 'emptyCircle',
	            // 拐点图形大小
	            symbolSize: 4,
	            // 拐点图形旋转控制
	            symbolRotate: null,
	
	            // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	            showSymbol: true,
	            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	            showAllSymbol: false,
	
	            // 是否连接断点
	            connectNulls: false,
	
	            // 数据过滤，'average', 'max', 'min', 'sum'
	            sampling: 'none',
	
	            animationEasing: 'linear',
	
	            // Disable progressive
	            progressive: 0,
	            hoverLayerThreshold: Infinity
	        }
	    });


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var List = __webpack_require__(119);
	    var completeDimensions = __webpack_require__(124);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var CoordinateSystem = __webpack_require__(47);
	    var getDataItemValue = modelUtil.getDataItemValue;
	    var converDataValue = modelUtil.converDataValue;
	
	    function firstDataNotNull(data) {
	        var i = 0;
	        while (i < data.length && data[i] == null) {
	            i++;
	        }
	        return data[i];
	    }
	    function ifNeedCompleteOrdinalData(data) {
	        var sampleItem = firstDataNotNull(data);
	        return sampleItem != null
	            && !zrUtil.isArray(getDataItemValue(sampleItem));
	    }
	
	    /**
	     * Helper function to create a list from option data
	     */
	    function createListFromArray(data, seriesModel, ecModel) {
	        // If data is undefined
	        data = data || [];
	
	        if (__DEV__) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }
	
	        var coordSysName = seriesModel.get('coordinateSystem');
	        var creator = creators[coordSysName];
	        var registeredCoordSys = CoordinateSystem.get(coordSysName);
	        // FIXME
	        var axesInfo = creator && creator(data, seriesModel, ecModel);
	        var dimensions = axesInfo && axesInfo.dimensions;
	        if (!dimensions) {
	            // Get dimensions from registered coordinate system
	            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];
	            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	        }
	        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;
	
	        var list = new List(dimensions, seriesModel);
	
	        var nameList = createNameList(axesInfo, data);
	
	        var categories = {};
	        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))
	            ? function (itemOpt, dimName, dataIndex, dimIndex) {
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }
	
	                // Use dataIndex as ordinal value in categoryAxis
	                return dimIndex === categoryIndex
	                    ? dataIndex
	                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	            }
	            : function (itemOpt, dimName, dataIndex, dimIndex) {
	                var value = getDataItemValue(itemOpt);
	                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }
	
	                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;
	                if (categoryAxesModels && categoryAxesModels[dimName]) {
	                    // If given value is a category string
	                    if (typeof val === 'string') {
	                        // Lazy get categories
	                        categories[dimName] = categories[dimName]
	                            || categoryAxesModels[dimName].getCategories();
	                        val = zrUtil.indexOf(categories[dimName], val);
	                        if (val < 0 && !isNaN(val)) {
	                            // In case some one write '1', '2' istead of 1, 2
	                            val = +val;
	                        }
	                    }
	                }
	                return val;
	            };
	
	        list.hasItemOption = false;
	        list.initData(data, nameList, dimValueGetter);
	
	        return list;
	    }
	
	    function isStackable(axisType) {
	        return axisType !== 'category' && axisType !== 'time';
	    }
	
	    function getDimTypeByAxis(axisType) {
	        return axisType === 'category'
	            ? 'ordinal'
	            : axisType === 'time'
	            ? 'time'
	            : 'float';
	    }
	
	    /**
	     * Creaters for each coord system.
	     */
	    var creators = {
	
	        cartesian2d: function (data, seriesModel, ecModel) {
	
	            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {
	                return ecModel.queryComponents({
	                    mainType: name,
	                    index: seriesModel.get(name + 'Index'),
	                    id: seriesModel.get(name + 'Id')
	                })[0];
	            });
	            var xAxisModel = axesModels[0];
	            var yAxisModel = axesModels[1];
	
	            if (__DEV__) {
	                if (!xAxisModel) {
	                    throw new Error('xAxis "' + zrUtil.retrieve(
	                        seriesModel.get('xAxisIndex'),
	                        seriesModel.get('xAxisId'),
	                        0
	                    ) + '" not found');
	                }
	                if (!yAxisModel) {
	                    throw new Error('yAxis "' + zrUtil.retrieve(
	                        seriesModel.get('xAxisIndex'),
	                        seriesModel.get('yAxisId'),
	                        0
	                    ) + '" not found');
	                }
	            }
	
	            var xAxisType = xAxisModel.get('type');
	            var yAxisType = yAxisModel.get('type');
	
	            var dimensions = [
	                {
	                    name: 'x',
	                    type: getDimTypeByAxis(xAxisType),
	                    stackable: isStackable(xAxisType)
	                },
	                {
	                    name: 'y',
	                    // If two category axes
	                    type: getDimTypeByAxis(yAxisType),
	                    stackable: isStackable(yAxisType)
	                }
	            ];
	
	            var isXAxisCateogry = xAxisType === 'category';
	            var isYAxisCategory = yAxisType === 'category';
	
	            completeDimensions(dimensions, data, ['x', 'y', 'z']);
	
	            var categoryAxesModels = {};
	            if (isXAxisCateogry) {
	                categoryAxesModels.x = xAxisModel;
	            }
	            if (isYAxisCategory) {
	                categoryAxesModels.y = yAxisModel;
	            }
	            return {
	                dimensions: dimensions,
	                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),
	                categoryAxesModels: categoryAxesModels
	            };
	        },
	
	        singleAxis: function (data, seriesModel, ecModel) {
	
	            var singleAxisModel = ecModel.queryComponents({
	                mainType: 'singleAxis',
	                index: seriesModel.get('singleAxisIndex'),
	                id: seriesModel.get('singleAxisId')
	            })[0];
	
	            if (__DEV__) {
	                if (!singleAxisModel) {
	                    throw new Error('singleAxis should be specified.');
	                }
	            }
	
	            var singleAxisType = singleAxisModel.get('type');
	            var isCategory = singleAxisType === 'category';
	
	            var dimensions = [{
	                name: 'single',
	                type: getDimTypeByAxis(singleAxisType),
	                stackable: isStackable(singleAxisType)
	            }];
	
	            completeDimensions(dimensions, data);
	
	            var categoryAxesModels = {};
	            if (isCategory) {
	                categoryAxesModels.single = singleAxisModel;
	            }
	
	            return {
	                dimensions: dimensions,
	                categoryIndex: isCategory ? 0 : -1,
	                categoryAxesModels: categoryAxesModels
	            };
	        },
	
	        polar: function (data, seriesModel, ecModel) {
	            var polarModel = ecModel.queryComponents({
	                mainType: 'polar',
	                index: seriesModel.get('polarIndex'),
	                id: seriesModel.get('polarId')
	            })[0];
	
	            var angleAxisModel = polarModel.findAxisModel('angleAxis');
	            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	
	            if (__DEV__) {
	                if (!angleAxisModel) {
	                    throw new Error('angleAxis option not found');
	                }
	                if (!radiusAxisModel) {
	                    throw new Error('radiusAxis option not found');
	                }
	            }
	
	            var radiusAxisType = radiusAxisModel.get('type');
	            var angleAxisType = angleAxisModel.get('type');
	
	            var dimensions = [
	                {
	                    name: 'radius',
	                    type: getDimTypeByAxis(radiusAxisType),
	                    stackable: isStackable(radiusAxisType)
	                },
	                {
	                    name: 'angle',
	                    type: getDimTypeByAxis(angleAxisType),
	                    stackable: isStackable(angleAxisType)
	                }
	            ];
	            var isAngleAxisCateogry = angleAxisType === 'category';
	            var isRadiusAxisCateogry = radiusAxisType === 'category';
	
	            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);
	
	            var categoryAxesModels = {};
	            if (isRadiusAxisCateogry) {
	                categoryAxesModels.radius = radiusAxisModel;
	            }
	            if (isAngleAxisCateogry) {
	                categoryAxesModels.angle = angleAxisModel;
	            }
	            return {
	                dimensions: dimensions,
	                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),
	                categoryAxesModels: categoryAxesModels
	            };
	        },
	
	        geo: function (data, seriesModel, ecModel) {
	            // TODO Region
	            // 多个散点图系列在同一个地区的时候
	            return {
	                dimensions: completeDimensions([
	                    {name: 'lng'},
	                    {name: 'lat'}
	                ], data, ['lng', 'lat', 'value'])
	            };
	        }
	    };
	
	    function createNameList(result, data) {
	        var nameList = [];
	
	        var categoryDim = result && result.dimensions[result.categoryIndex];
	        var categoryAxisModel;
	        if (categoryDim) {
	            categoryAxisModel = result.categoryAxesModels[categoryDim.name];
	        }
	
	        if (categoryAxisModel) {
	            // FIXME Two category axis
	            var categories = categoryAxisModel.getCategories();
	            if (categories) {
	                var dataLen = data.length;
	                // Ordered data is given explicitly like
	                // [[3, 0.2], [1, 0.3], [2, 0.15]]
	                // or given scatter data,
	                // pick the category
	                if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                    nameList = [];
	                    for (var i = 0; i < dataLen; i++) {
	                        nameList[i] = categories[data[i][result.categoryIndex || 0]];
	                    }
	                }
	                else {
	                    nameList = categories.slice(0);
	                }
	            }
	        }
	
	        return nameList;
	    }
	
	    module.exports = createListFromArray;
	


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Complete dimensions by data (guess dimension).
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * Complete the dimensions array guessed from the data structure.
	     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	     * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']
	     * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.
	     * @return {Array.<string>}
	     */
	    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	        if (!data) {
	            return dimensions;
	        }
	
	        var value0 = retrieveValue(data[0]);
	        var dimSize = zrUtil.isArray(value0) && value0.length || 1;
	
	        defaultNames = defaultNames || [];
	        extraPrefix = extraPrefix || 'extra';
	        for (var i = 0; i < dimSize; i++) {
	            if (!dimensions[i]) {
	                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));
	                dimensions[i] = guessOrdinal(data, i)
	                    ? {type: 'ordinal', name: name}
	                    : name;
	            }
	        }
	
	        return dimensions;
	    }
	
	    // The rule should not be complex, otherwise user might not
	    // be able to known where the data is wrong.
	    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {
	        for (var i = 0, len = data.length; i < len; i++) {
	            var value = retrieveValue(data[i]);
	
	            if (!zrUtil.isArray(value)) {
	                return false;
	            }
	
	            var value = value[dimIndex];
	            if (value != null && isFinite(value)) {
	                return false;
	            }
	            else if (zrUtil.isString(value) && value !== '-') {
	                return true;
	            }
	        }
	        return false;
	    };
	
	    function retrieveValue(o) {
	        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;
	    }
	
	    module.exports = completeDimensions;
	


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME step not support polar
	
	
	    var zrUtil = __webpack_require__(25);
	    var SymbolDraw = __webpack_require__(126);
	    var Symbol = __webpack_require__(127);
	    var lineAnimationDiff = __webpack_require__(129);
	    var graphic = __webpack_require__(64);
	    var modelUtil = __webpack_require__(26);
	    var polyHelper = __webpack_require__(130);
	    var ChartView = __webpack_require__(63);
	
	    function isPointsSame(points1, points2) {
	        if (points1.length !== points2.length) {
	            return;
	        }
	        for (var i = 0; i < points1.length; i++) {
	            var p1 = points1[i];
	            var p2 = points2[i];
	            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	                return;
	            }
	        }
	        return true;
	    }
	
	    function getSmooth(smooth) {
	        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);
	    }
	
	    function getAxisExtentWithGap(axis) {
	        var extent = axis.getGlobalExtent();
	        if (axis.onBand) {
	            // Remove extra 1px to avoid line miter in clipped edge
	            var halfBandWidth = axis.getBandWidth() / 2 - 1;
	            var dir = extent[1] > extent[0] ? 1 : -1;
	            extent[0] += dir * halfBandWidth;
	            extent[1] -= dir * halfBandWidth;
	        }
	        return extent;
	    }
	
	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	    /**
	     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	     * @param {module:echarts/data/List} data
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    function getStackedOnPoints(coordSys, data) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];
	
	        var valueDim = valueAxis.dim;
	
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	
	        return data.mapArray([valueDim], function (val, idx) {
	            var stackedOnSameSign;
	            var stackedOn = data.stackedOn;
	            // Find first stacked value with same sign
	            while (stackedOn &&
	                sign(stackedOn.get(valueDim, idx)) === sign(val)
	            ) {
	                stackedOnSameSign = stackedOn;
	                break;
	            }
	            var stackedData = [];
	            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	            stackedData[1 - baseDataOffset] = stackedOnSameSign
	                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	
	            return coordSys.dataToPoint(stackedData);
	        }, true);
	    }
	
	    function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	        var isHorizontal = cartesian.getBaseAxis().isHorizontal();
	
	        var x = Math.min(xExtent[0], xExtent[1]);
	        var y = Math.min(yExtent[0], yExtent[1]);
	        var width = Math.max(xExtent[0], xExtent[1]) - x;
	        var height = Math.max(yExtent[0], yExtent[1]) - y;
	        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;
	        // Expand clip shape to avoid clipping when line value exceeds axis
	        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);
	        if (isHorizontal) {
	            y -= expandSize;
	            height += expandSize * 2;
	        }
	        else {
	            x -= expandSize;
	            width += expandSize * 2;
	        }
	
	        var clipPath = new graphic.Rect({
	            shape: {
	                x: x,
	                y: y,
	                width: width,
	                height: height
	            }
	        });
	
	        if (hasAnimation) {
	            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	            graphic.initProps(clipPath, {
	                shape: {
	                    width: width,
	                    height: height
	                }
	            }, seriesModel);
	        }
	
	        return clipPath;
	    }
	
	    function createPolarClipShape(polar, hasAnimation, seriesModel) {
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();
	
	        var radiusExtent = radiusAxis.getExtent();
	        var angleExtent = angleAxis.getExtent();
	
	        var RADIAN = Math.PI / 180;
	
	        var clipPath = new graphic.Sector({
	            shape: {
	                cx: polar.cx,
	                cy: polar.cy,
	                r0: radiusExtent[0],
	                r: radiusExtent[1],
	                startAngle: -angleExtent[0] * RADIAN,
	                endAngle: -angleExtent[1] * RADIAN,
	                clockwise: angleAxis.inverse
	            }
	        });
	
	        if (hasAnimation) {
	            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: -angleExtent[1] * RADIAN
	                }
	            }, seriesModel);
	        }
	
	        return clipPath;
	    }
	
	    function createClipShape(coordSys, hasAnimation, seriesModel) {
	        return coordSys.type === 'polar'
	            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)
	            : createGridClipShape(coordSys, hasAnimation, seriesModel);
	    }
	
	    function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	        var baseAxis = coordSys.getBaseAxis();
	        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;
	
	        var stepPoints = [];
	        for (var i = 0; i < points.length - 1; i++) {
	            var nextPt = points[i + 1];
	            var pt = points[i];
	            stepPoints.push(pt);
	
	            var stepPt = [];
	            switch (stepTurnAt) {
	                case 'end':
	                    stepPt[baseIndex] = nextPt[baseIndex];
	                    stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                    // default is start
	                    stepPoints.push(stepPt);
	                    break;
	                case 'middle':
	                    // default is start
	                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	                    var stepPt2 = [];
	                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	                    stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	                    stepPoints.push(stepPt);
	                    stepPoints.push(stepPt2);
	                    break;
	                default:
	                    stepPt[baseIndex] = pt[baseIndex];
	                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
	                    // default is start
	                    stepPoints.push(stepPt);
	            }
	        }
	        // Last points
	        points[i] && stepPoints.push(points[i]);
	        return stepPoints;
	    }
	
	    function getVisualGradient(data, coordSys) {
	        var visualMetaList = data.getVisual('visualMeta');
	        if (!visualMetaList || !visualMetaList.length || !data.count()) {
	            // When data.count() is 0, gradient range can not be calculated.
	            return;
	        }
	
	        var visualMeta;
	        for (var i = visualMetaList.length - 1; i >= 0; i--) {
	            // Can only be x or y
	            if (visualMetaList[i].dimension < 2) {
	                visualMeta = visualMetaList[i];
	                break;
	            }
	        }
	        if (!visualMeta || coordSys.type !== 'cartesian2d') {
	            if (__DEV__) {
	                console.warn('Visual map on line style only support x or y dimension.');
	            }
	            return;
	        }
	
	        // If the area to be rendered is bigger than area defined by LinearGradient,
	        // the canvas spec prescribes that the color of the first stop and the last
	        // stop should be used. But if two stops are added at offset 0, in effect
	        // browsers use the color of the second stop to render area outside
	        // LinearGradient. So we can only infinitesimally extend area defined in
	        // LinearGradient to render `outerColors`.
	
	        var dimension = visualMeta.dimension;
	        var dimName = data.dimensions[dimension];
	        var axis = coordSys.getAxis(dimName);
	
	        // dataToCoor mapping may not be linear, but must be monotonic.
	        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {
	            return {
	                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
	                color: stop.color
	            };
	        });
	        var stopLen = colorStops.length;
	        var outerColors = visualMeta.outerColors.slice();
	
	        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
	            colorStops.reverse();
	            outerColors.reverse();
	        }
	
	        var tinyExtent = 10; // Arbitrary value: 10px
	        var minCoord = colorStops[0].coord - tinyExtent;
	        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
	        var coordSpan = maxCoord - minCoord;
	
	        if (coordSpan < 1e-3) {
	            return 'transparent';
	        }
	
	        zrUtil.each(colorStops, function (stop) {
	            stop.offset = (stop.coord - minCoord) / coordSpan;
	        });
	        colorStops.push({
	            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
	            color: outerColors[1] || 'transparent'
	        });
	        colorStops.unshift({ // notice colorStops.length have been changed.
	            offset: stopLen ? colorStops[0].offset : 0.5,
	            color: outerColors[0] || 'transparent'
	        });
	
	        // zrUtil.each(colorStops, function (colorStop) {
	        //     // Make sure each offset has rounded px to avoid not sharp edge
	        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	        // });
	
	        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	        gradient[dimName] = minCoord;
	        gradient[dimName + '2'] = maxCoord;
	
	        return gradient;
	    }
	
	    module.exports = ChartView.extend({
	
	        type: 'line',
	
	        init: function () {
	            var lineGroup = new graphic.Group();
	
	            var symbolDraw = new SymbolDraw();
	            this.group.add(symbolDraw.group);
	
	            this._symbolDraw = symbolDraw;
	            this._lineGroup = lineGroup;
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var group = this.group;
	            var data = seriesModel.getData();
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var areaStyleModel = seriesModel.getModel('areaStyle.normal');
	
	            var points = data.mapArray(data.getItemLayout, true);
	
	            var isCoordSysPolar = coordSys.type === 'polar';
	            var prevCoordSys = this._coordSys;
	
	            var symbolDraw = this._symbolDraw;
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	
	            var lineGroup = this._lineGroup;
	
	            var hasAnimation = seriesModel.get('animation');
	
	            var isAreaChart = !areaStyleModel.isEmpty();
	            var stackedOnPoints = getStackedOnPoints(coordSys, data);
	
	            var showSymbol = seriesModel.get('showSymbol');
	
	            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')
	                && this._getSymbolIgnoreFunc(data, coordSys);
	
	            // Remove temporary symbols
	            var oldData = this._data;
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });
	
	            // Remove previous created symbols if showSymbol changed to false
	            if (!showSymbol) {
	                symbolDraw.remove();
	            }
	
	            group.add(lineGroup);
	
	            // FIXME step not support polar
	            var step = !isCoordSysPolar && seriesModel.get('step');
	            // Initialization animation or coordinate system changed
	            if (
	                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)
	            ) {
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	
	                if (step) {
	                    // TODO If stacked series is not step
	                    points = turnPointsIntoStep(points, coordSys, step);
	                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                }
	
	                polyline = this._newPolyline(points, coordSys, hasAnimation);
	                if (isAreaChart) {
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	            }
	            else {
	                if (isAreaChart && !polygon) {
	                    // If areaStyle is added
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                else if (polygon && !isAreaChart) {
	                    // If areaStyle is removed
	                    lineGroup.remove(polygon);
	                    polygon = this._polygon = null;
	                }
	
	                // Update clipPath
	                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));
	
	                // Always update, or it is wrong in the case turning on legend
	                // because points are not changed
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	
	                // Stop symbol animation and sync with line points
	                // FIXME performance?
	                data.eachItemGraphicEl(function (el) {
	                    el.stopAnimation(true);
	                });
	
	                // In the case data zoom triggerred refreshing frequently
	                // Data may not change if line has a category axis. So it should animate nothing
	                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)
	                    || !isPointsSame(this._points, points)
	                ) {
	                    if (hasAnimation) {
	                        this._updateAnimation(
	                            data, stackedOnPoints, coordSys, api, step
	                        );
	                    }
	                    else {
	                        // Not do it in update with animation
	                        if (step) {
	                            // TODO If stacked series is not step
	                            points = turnPointsIntoStep(points, coordSys, step);
	                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                        }
	
	                        polyline.setShape({
	                            points: points
	                        });
	                        polygon && polygon.setShape({
	                            points: points,
	                            stackedOnPoints: stackedOnPoints
	                        });
	                    }
	                }
	            }
	
	            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');
	
	            polyline.useStyle(zrUtil.defaults(
	                // Use color in lineStyle first
	                lineStyleModel.getLineStyle(),
	                {
	                    fill: 'none',
	                    stroke: visualColor,
	                    lineJoin: 'bevel'
	                }
	            ));
	
	            var smooth = seriesModel.get('smooth');
	            smooth = getSmooth(seriesModel.get('smooth'));
	            polyline.setShape({
	                smooth: smooth,
	                smoothMonotone: seriesModel.get('smoothMonotone'),
	                connectNulls: seriesModel.get('connectNulls')
	            });
	
	            if (polygon) {
	                var stackedOn = data.stackedOn;
	                var stackedOnSmooth = 0;
	
	                polygon.useStyle(zrUtil.defaults(
	                    areaStyleModel.getAreaStyle(),
	                    {
	                        fill: visualColor,
	                        opacity: 0.7,
	                        lineJoin: 'bevel'
	                    }
	                ));
	
	                if (stackedOn) {
	                    var stackedOnSeries = stackedOn.hostModel;
	                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	                }
	
	                polygon.setShape({
	                    smooth: smooth,
	                    stackedOnSmooth: stackedOnSmooth,
	                    smoothMonotone: seriesModel.get('smoothMonotone'),
	                    connectNulls: seriesModel.get('connectNulls')
	                });
	            }
	
	            this._data = data;
	            // Save the coordinate system for transition animation when data changed
	            this._coordSys = coordSys;
	            this._stackedOnPoints = stackedOnPoints;
	            this._points = points;
	            this._step = step;
	        },
	
	        dispose: function () {},
	
	        highlight: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (!symbol) {
	                    // Create a temporary symbol if it is not exists
	                    var pt = data.getItemLayout(dataIndex);
	                    if (!pt) {
	                        // Null data
	                        return;
	                    }
	                    symbol = new Symbol(data, dataIndex);
	                    symbol.position = pt;
	                    symbol.setZ(
	                        seriesModel.get('zlevel'),
	                        seriesModel.get('z')
	                    );
	                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                    symbol.__temp = true;
	                    data.setItemGraphicEl(dataIndex, symbol);
	
	                    // Stop scale animation
	                    symbol.stopSymbolAnimation(true);
	
	                    this.group.add(symbol);
	                }
	                symbol.highlight();
	            }
	            else {
	                // Highlight whole series
	                ChartView.prototype.highlight.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },
	
	        downplay: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = modelUtil.queryDataIndex(data, payload);
	            if (dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (symbol) {
	                    if (symbol.__temp) {
	                        data.setItemGraphicEl(dataIndex, null);
	                        this.group.remove(symbol);
	                    }
	                    else {
	                        symbol.downplay();
	                    }
	                }
	            }
	            else {
	                // Downplay whole series
	                ChartView.prototype.downplay.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },
	
	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolyline: function (points) {
	            var polyline = this._polyline;
	            // Remove previous created polyline
	            if (polyline) {
	                this._lineGroup.remove(polyline);
	            }
	
	            polyline = new polyHelper.Polyline({
	                shape: {
	                    points: points
	                },
	                silent: true,
	                z2: 10
	            });
	
	            this._lineGroup.add(polyline);
	
	            this._polyline = polyline;
	
	            return polyline;
	        },
	
	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} stackedOnPoints
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolygon: function (points, stackedOnPoints) {
	            var polygon = this._polygon;
	            // Remove previous created polygon
	            if (polygon) {
	                this._lineGroup.remove(polygon);
	            }
	
	            polygon = new polyHelper.Polygon({
	                shape: {
	                    points: points,
	                    stackedOnPoints: stackedOnPoints
	                },
	                silent: true
	            });
	
	            this._lineGroup.add(polygon);
	
	            this._polygon = polygon;
	            return polygon;
	        },
	        /**
	         * @private
	         */
	        _getSymbolIgnoreFunc: function (data, coordSys) {
	            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	            // `getLabelInterval` is provided by echarts/component/axis
	            if (categoryAxis && categoryAxis.isLabelIgnored) {
	                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	            }
	        },
	
	        /**
	         * @private
	         */
	        // FIXME Two value axis
	        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	            var seriesModel = data.hostModel;
	
	            var diff = lineAnimationDiff(
	                this._data, data,
	                this._stackedOnPoints, stackedOnPoints,
	                this._coordSys, coordSys
	            );
	
	            var current = diff.current;
	            var stackedOnCurrent = diff.stackedOnCurrent;
	            var next = diff.next;
	            var stackedOnNext = diff.stackedOnNext;
	            if (step) {
	                // TODO If stacked series is not step
	                current = turnPointsIntoStep(diff.current, coordSys, step);
	                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	                next = turnPointsIntoStep(diff.next, coordSys, step);
	                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	            }
	            // `diff.current` is subset of `current` (which should be ensured by
	            // turnPointsIntoStep), so points in `__points` can be updated when
	            // points in `current` are update during animation.
	            polyline.shape.__points = diff.current;
	            polyline.shape.points = current;
	
	            graphic.updateProps(polyline, {
	                shape: {
	                    points: next
	                }
	            }, seriesModel);
	
	            if (polygon) {
	                polygon.setShape({
	                    points: current,
	                    stackedOnPoints: stackedOnCurrent
	                });
	                graphic.updateProps(polygon, {
	                    shape: {
	                        points: next,
	                        stackedOnPoints: stackedOnNext
	                    }
	                }, seriesModel);
	            }
	
	            var updatedDataInfo = [];
	            var diffStatus = diff.status;
	
	            for (var i = 0; i < diffStatus.length; i++) {
	                var cmd = diffStatus[i].cmd;
	                if (cmd === '=') {
	                    var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                    if (el) {
	                        updatedDataInfo.push({
	                            el: el,
	                            ptIdx: i    // Index of points
	                        });
	                    }
	                }
	            }
	
	            if (polyline.animators && polyline.animators.length) {
	                polyline.animators[0].during(function () {
	                    for (var i = 0; i < updatedDataInfo.length; i++) {
	                        var el = updatedDataInfo[i].el;
	                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	                    }
	                });
	            }
	        },
	
	        remove: function (ecModel) {
	            var group = this.group;
	            var oldData = this._data;
	            this._lineGroup.removeAll();
	            this._symbolDraw.remove(true);
	            // Remove temporary created elements when highlighting
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });
	
	            this._polyline =
	            this._polygon =
	            this._coordSys =
	            this._points =
	            this._stackedOnPoints =
	            this._data = null;
	        }
	    });


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */
	
	
	    var graphic = __webpack_require__(64);
	    var Symbol = __webpack_require__(127);
	
	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/SymbolDraw
	     * @param {module:zrender/graphic/Group} [symbolCtor]
	     */
	    function SymbolDraw(symbolCtor) {
	        this.group = new graphic.Group();
	
	        this._symbolCtor = symbolCtor || Symbol;
	    }
	
	    var symbolDrawProto = SymbolDraw.prototype;
	
	    function symbolNeedsDraw(data, idx, isIgnore) {
	        var point = data.getItemLayout(idx);
	        // Is an object
	        // if (point && point.hasOwnProperty('point')) {
	        //     point = point.point;
	        // }
	        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))
	                    && data.getItemVisual(idx, 'symbol') !== 'none';
	    }
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     * @param {Array.<boolean>} [isIgnore]
	     */
	    symbolDrawProto.updateData = function (data, isIgnore) {
	        var group = this.group;
	        var seriesModel = data.hostModel;
	        var oldData = this._data;
	
	        var SymbolCtor = this._symbolCtor;
	
	        var seriesScope = {
	            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),
	            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),
	            symbolRotate: seriesModel.get('symbolRotate'),
	            symbolOffset: seriesModel.get('symbolOffset'),
	            hoverAnimation: seriesModel.get('hoverAnimation'),
	
	            labelModel: seriesModel.getModel('label.normal'),
	            hoverLabelModel: seriesModel.getModel('label.emphasis')
	        };
	
	        data.diff(oldData)
	            .add(function (newIdx) {
	                var point = data.getItemLayout(newIdx);
	                if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	                    symbolEl.attr('position', point);
	                    data.setItemGraphicEl(newIdx, symbolEl);
	                    group.add(symbolEl);
	                }
	            })
	            .update(function (newIdx, oldIdx) {
	                var symbolEl = oldData.getItemGraphicEl(oldIdx);
	                var point = data.getItemLayout(newIdx);
	                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    group.remove(symbolEl);
	                    return;
	                }
	                if (!symbolEl) {
	                    symbolEl = new SymbolCtor(data, newIdx);
	                    symbolEl.attr('position', point);
	                }
	                else {
	                    symbolEl.updateData(data, newIdx, seriesScope);
	                    graphic.updateProps(symbolEl, {
	                        position: point
	                    }, seriesModel);
	                }
	
	                // Add back
	                group.add(symbolEl);
	
	                data.setItemGraphicEl(newIdx, symbolEl);
	            })
	            .remove(function (oldIdx) {
	                var el = oldData.getItemGraphicEl(oldIdx);
	                el && el.fadeOut(function () {
	                    group.remove(el);
	                });
	            })
	            .execute();
	
	        this._data = data;
	    };
	
	    symbolDrawProto.updateLayout = function () {
	        var data = this._data;
	        if (data) {
	            // Not use animation
	            data.eachItemGraphicEl(function (el, idx) {
	                var point = data.getItemLayout(idx);
	                el.attr('position', point);
	            });
	        }
	    };
	
	    symbolDrawProto.remove = function (enableAnimation) {
	        var group = this.group;
	        var data = this._data;
	        if (data) {
	            if (enableAnimation) {
	                data.eachItemGraphicEl(function (el) {
	                    el.fadeOut(function () {
	                        group.remove(el);
	                    });
	                });
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    };
	
	    module.exports = SymbolDraw;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Symbol
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var symbolUtil = __webpack_require__(128);
	    var graphic = __webpack_require__(64);
	    var numberUtil = __webpack_require__(28);
	
	    function getSymbolSize(data, idx) {
	        var symbolSize = data.getItemVisual(idx, 'symbolSize');
	        return symbolSize instanceof Array
	            ? symbolSize.slice()
	            : [+symbolSize, +symbolSize];
	    }
	
	    function getScale(symbolSize) {
	        return [symbolSize[0] / 2, symbolSize[1] / 2];
	    }
	
	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/Symbol}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function Symbol(data, idx, seriesScope) {
	        graphic.Group.call(this);
	
	        this.updateData(data, idx, seriesScope);
	    }
	
	    var symbolProto = Symbol.prototype;
	
	    function driftSymbol(dx, dy) {
	        this.parent.drift(dx, dy);
	    }
	
	    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {
	        // Remove paths created before
	        this.removeAll();
	
	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');
	
	        // var symbolPath = symbolUtil.createSymbol(
	        //     symbolType, -0.5, -0.5, 1, 1, color
	        // );
	        // If width/height are set too small (e.g., set to 1) on ios10
	        // and macOS Sierra, a circle stroke become a rect, no matter what
	        // the scale is set. So we set width/height as 2. See #4150.
	        var symbolPath = symbolUtil.createSymbol(
	            symbolType, -1, -1, 2, 2, color
	        );
	
	        symbolPath.attr({
	            z2: 100,
	            culling: true,
	            scale: [0, 0]
	        });
	        // Rewrite drift method
	        symbolPath.drift = driftSymbol;
	
	        graphic.initProps(symbolPath, {
	            scale: getScale(symbolSize)
	        }, seriesModel, idx);
	        this._symbolType = symbolType;
	
	        this.add(symbolPath);
	    };
	
	    /**
	     * Stop animation
	     * @param {boolean} toLastFrame
	     */
	    symbolProto.stopSymbolAnimation = function (toLastFrame) {
	        this.childAt(0).stopAnimation(toLastFrame);
	    };
	
	    /**
	     * Get symbol path element
	     */
	    symbolProto.getSymbolPath = function () {
	        return this.childAt(0);
	    };
	
	    /**
	     * Get scale(aka, current symbol size).
	     * Including the change caused by animation
	     */
	    symbolProto.getScale = function () {
	        return this.childAt(0).scale;
	    };
	
	    /**
	     * Highlight symbol
	     */
	    symbolProto.highlight = function () {
	        this.childAt(0).trigger('emphasis');
	    };
	
	    /**
	     * Downplay symbol
	     */
	    symbolProto.downplay = function () {
	        this.childAt(0).trigger('normal');
	    };
	
	    /**
	     * @param {number} zlevel
	     * @param {number} z
	     */
	    symbolProto.setZ = function (zlevel, z) {
	        var symbolPath = this.childAt(0);
	        symbolPath.zlevel = zlevel;
	        symbolPath.z = z;
	    };
	
	    symbolProto.setDraggable = function (draggable) {
	        var symbolPath = this.childAt(0);
	        symbolPath.draggable = draggable;
	        symbolPath.cursor = draggable ? 'move' : 'pointer';
	    };
	
	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    symbolProto.updateData = function (data, idx, seriesScope) {
	        this.silent = false;
	
	        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	        var seriesModel = data.hostModel;
	        var symbolSize = getSymbolSize(data, idx);
	
	        if (symbolType !== this._symbolType) {
	            this._createSymbol(symbolType, data, idx, symbolSize);
	        }
	        else {
	            var symbolPath = this.childAt(0);
	            graphic.updateProps(symbolPath, {
	                scale: getScale(symbolSize)
	            }, seriesModel, idx);
	        }
	        this._updateCommon(data, idx, symbolSize, seriesScope);
	        this._seriesModel = seriesModel;
	    };
	
	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	    var normalLabelAccessPath = ['label', 'normal'];
	    var emphasisLabelAccessPath = ['label', 'emphasis'];
	
	    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	        var symbolPath = this.childAt(0);
	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');
	
	        // Reset style
	        if (symbolPath.type !== 'image') {
	            symbolPath.useStyle({
	                strokeNoScale: true
	            });
	        }
	
	        seriesScope = seriesScope || null;
	
	        var itemStyle = seriesScope && seriesScope.itemStyle;
	        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	        var symbolRotate = seriesScope && seriesScope.symbolRotate;
	        var symbolOffset = seriesScope && seriesScope.symbolOffset;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;
	
	        if (!seriesScope || data.hasItemOption) {
	            var itemModel = data.getItemModel(idx);
	
	            // Color must be excluded.
	            // Because symbol provide setColor individually to set fill and stroke
	            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	
	            symbolRotate = itemModel.getShallow('symbolRotate');
	            symbolOffset = itemModel.getShallow('symbolOffset');
	
	            labelModel = itemModel.getModel(normalLabelAccessPath);
	            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	            hoverAnimation = itemModel.getShallow('hoverAnimation');
	        }
	        else {
	            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	        }
	
	        var elStyle = symbolPath.style;
	
	        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);
	
	        if (symbolOffset) {
	            symbolPath.attr('position', [
	                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),
	                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])
	            ]);
	        }
	
	        // PENDING setColor before setStyle!!!
	        symbolPath.setColor(color);
	
	        symbolPath.setStyle(itemStyle);
	
	        var opacity = data.getItemVisual(idx, 'opacity');
	        if (opacity != null) {
	            elStyle.opacity = opacity;
	        }
	
	        // Get last value dim
	        var dimensions = data.dimensions.slice();
	        var valueDim;
	        var dataType;
	        while (dimensions.length && (
	            valueDim = dimensions.pop(),
	            dataType = data.getDimensionInfo(valueDim).type,
	            dataType === 'ordinal' || dataType === 'time'
	        )) {} // jshint ignore:line
	
	        if (valueDim != null && labelModel.getShallow('show')) {
	            graphic.setText(elStyle, labelModel, color);
	            elStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'normal'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            elStyle.text = '';
	        }
	
	        if (valueDim != null && hoverLabelModel.getShallow('show')) {
	            graphic.setText(hoverItemStyle, hoverLabelModel, color);
	            hoverItemStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'emphasis'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            hoverItemStyle.text = '';
	        }
	
	        symbolPath.off('mouseover')
	            .off('mouseout')
	            .off('emphasis')
	            .off('normal');
	
	        symbolPath.hoverStyle = hoverItemStyle;
	
	        graphic.setHoverStyle(symbolPath);
	
	        var scale = getScale(symbolSize);
	
	        if (hoverAnimation && seriesModel.isAnimationEnabled()) {
	            var onEmphasis = function() {
	                var ratio = scale[1] / scale[0];
	                this.animateTo({
	                    scale: [
	                        Math.max(scale[0] * 1.1, scale[0] + 3),
	                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)
	                    ]
	                }, 400, 'elasticOut');
	            };
	            var onNormal = function() {
	                this.animateTo({
	                    scale: scale
	                }, 400, 'elasticOut');
	            };
	            symbolPath.on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }
	    };
	
	    symbolProto.fadeOut = function (cb) {
	        var symbolPath = this.childAt(0);
	        // Avoid mistaken hover when fading out
	        this.silent = true;
	        // Not show text when animating
	        symbolPath.style.text = '';
	        graphic.updateProps(symbolPath, {
	            scale: [0, 0]
	        }, this._seriesModel, this.dataIndex, cb);
	    };
	
	    zrUtil.inherits(Symbol, graphic.Group);
	
	    module.exports = Symbol;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Symbol factory
	
	
	    var graphic = __webpack_require__(64);
	    var BoundingRect = __webpack_require__(30);
	
	    /**
	     * Triangle shape
	     * @inner
	     */
	    var Triangle = graphic.extendShape({
	        type: 'triangle',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy + height);
	            path.lineTo(cx - width, cy + height);
	            path.closePath();
	        }
	    });
	    /**
	     * Diamond shape
	     * @inner
	     */
	    var Diamond = graphic.extendShape({
	        type: 'diamond',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy);
	            path.lineTo(cx, cy + height);
	            path.lineTo(cx - width, cy);
	            path.closePath();
	        }
	    });
	
	    /**
	     * Pin shape
	     * @inner
	     */
	    var Pin = graphic.extendShape({
	        type: 'pin',
	        shape: {
	            // x, y on the cusp
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },
	
	        buildPath: function (path, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var w = shape.width / 5 * 3;
	            // Height must be larger than width
	            var h = Math.max(w, shape.height);
	            var r = w / 2;
	
	            // Dist on y with tangent point and circle center
	            var dy = r * r / (h - r);
	            var cy = y - h + r + dy;
	            var angle = Math.asin(dy / r);
	            // Dist on x with tangent point and circle center
	            var dx = Math.cos(angle) * r;
	
	            var tanX = Math.sin(angle);
	            var tanY = Math.cos(angle);
	
	            path.arc(
	                x, cy, r,
	                Math.PI - angle,
	                Math.PI * 2 + angle
	            );
	
	            var cpLen = r * 0.6;
	            var cpLen2 = r * 0.7;
	            path.bezierCurveTo(
	                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,
	                x, y - cpLen2,
	                x, y
	            );
	            path.bezierCurveTo(
	                x, y - cpLen2,
	                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,
	                x - dx, cy + dy
	            );
	            path.closePath();
	        }
	    });
	
	    /**
	     * Arrow shape
	     * @inner
	     */
	    var Arrow = graphic.extendShape({
	
	        type: 'arrow',
	
	        shape: {
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },
	
	        buildPath: function (ctx, shape) {
	            var height = shape.height;
	            var width = shape.width;
	            var x = shape.x;
	            var y = shape.y;
	            var dx = width / 3 * 2;
	            ctx.moveTo(x, y);
	            ctx.lineTo(x + dx, y + height);
	            ctx.lineTo(x, y + height / 4 * 3);
	            ctx.lineTo(x - dx, y + height);
	            ctx.lineTo(x, y);
	            ctx.closePath();
	        }
	    });
	
	    /**
	     * Map of path contructors
	     * @type {Object.<string, module:zrender/graphic/Path>}
	     */
	    var symbolCtors = {
	        line: graphic.Line,
	
	        rect: graphic.Rect,
	
	        roundRect: graphic.Rect,
	
	        square: graphic.Rect,
	
	        circle: graphic.Circle,
	
	        diamond: Diamond,
	
	        pin: Pin,
	
	        arrow: Arrow,
	
	        triangle: Triangle
	    };
	
	    var symbolShapeMakers = {
	
	        line: function (x, y, w, h, shape) {
	            // FIXME
	            shape.x1 = x;
	            shape.y1 = y + h / 2;
	            shape.x2 = x + w;
	            shape.y2 = y + h / 2;
	        },
	
	        rect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	        },
	
	        roundRect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	            shape.r = Math.min(w, h) / 4;
	        },
	
	        square: function (x, y, w, h, shape) {
	            var size = Math.min(w, h);
	            shape.x = x;
	            shape.y = y;
	            shape.width = size;
	            shape.height = size;
	        },
	
	        circle: function (x, y, w, h, shape) {
	            // Put circle in the center of square
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.r = Math.min(w, h) / 2;
	        },
	
	        diamond: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },
	
	        pin: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },
	
	        arrow: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },
	
	        triangle: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        }
	    };
	
	    var symbolBuildProxies = {};
	    for (var name in symbolCtors) {
	        if (symbolCtors.hasOwnProperty(name)) {
	            symbolBuildProxies[name] = new symbolCtors[name]();
	        }
	    }
	
	    var Symbol = graphic.extendShape({
	
	        type: 'symbol',
	
	        shape: {
	            symbolType: '',
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },
	
	        beforeBrush: function () {
	            var style = this.style;
	            var shape = this.shape;
	            // FIXME
	            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	                style.textPosition = ['50%', '40%'];
	                style.textAlign = 'center';
	                style.textVerticalAlign = 'middle';
	            }
	        },
	
	        buildPath: function (ctx, shape, inBundle) {
	            var symbolType = shape.symbolType;
	            var proxySymbol = symbolBuildProxies[symbolType];
	            if (shape.symbolType !== 'none') {
	                if (!proxySymbol) {
	                    // Default rect
	                    symbolType = 'rect';
	                    proxySymbol = symbolBuildProxies[symbolType];
	                }
	                symbolShapeMakers[symbolType](
	                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape
	                );
	                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	            }
	        }
	    });
	
	    // Provide setColor helper method to avoid determine if set the fill or stroke outside
	    var symbolPathSetColor = function (color) {
	        if (this.type !== 'image') {
	            var symbolStyle = this.style;
	            var symbolShape = this.shape;
	            if (symbolShape && symbolShape.symbolType === 'line') {
	                symbolStyle.stroke = color;
	            }
	            else if (this.__isEmptyBrush) {
	                symbolStyle.stroke = color;
	                symbolStyle.fill = '#fff';
	            }
	            else {
	                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	                symbolStyle.fill && (symbolStyle.fill = color);
	                symbolStyle.stroke && (symbolStyle.stroke = color);
	            }
	            this.dirty(false);
	        }
	    };
	
	    var symbolUtil = {
	        /**
	         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	         * @param {string} symbolType
	         * @param {number} x
	         * @param {number} y
	         * @param {number} w
	         * @param {number} h
	         * @param {string} color
	         */
	        createSymbol: function (symbolType, x, y, w, h, color) {
	            var isEmpty = symbolType.indexOf('empty') === 0;
	            if (isEmpty) {
	                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	            }
	            var symbolPath;
	
	            if (symbolType.indexOf('image://') === 0) {
	                symbolPath = new graphic.Image({
	                    style: {
	                        image: symbolType.slice(8),
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }
	            else if (symbolType.indexOf('path://') === 0) {
	                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	            }
	            else {
	                symbolPath = new Symbol({
	                    shape: {
	                        symbolType: symbolType,
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }
	
	            symbolPath.__isEmptyBrush = isEmpty;
	
	            symbolPath.setColor = symbolPathSetColor;
	
	            symbolPath.setColor(color);
	
	            return symbolPath;
	        }
	    };
	
	    module.exports = symbolUtil;


/***/ },
/* 129 */
/***/ function(module, exports) {

	
	
	    // var arrayDiff = require('zrender/lib/core/arrayDiff');
	    // 'zrender/core/arrayDiff' has been used before, but it did
	    // not do well in performance when roam with fixed dataZoom window.
	
	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	
	    function getStackedOnPoint(coordSys, data, idx) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];
	
	        var valueDim = valueAxis.dim;
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	
	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        var val = data.get(valueDim, idx);
	        // Find first stacked value with same sign
	        while (stackedOn &&
	            sign(stackedOn.get(valueDim, idx)) === sign(val)
	        ) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign
	            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	
	        return coordSys.dataToPoint(stackedData);
	    }
	
	    // function convertToIntId(newIdList, oldIdList) {
	    //     // Generate int id instead of string id.
	    //     // Compare string maybe slow in score function of arrDiff
	
	    //     // Assume id in idList are all unique
	    //     var idIndicesMap = {};
	    //     var idx = 0;
	    //     for (var i = 0; i < newIdList.length; i++) {
	    //         idIndicesMap[newIdList[i]] = idx;
	    //         newIdList[i] = idx++;
	    //     }
	    //     for (var i = 0; i < oldIdList.length; i++) {
	    //         var oldId = oldIdList[i];
	    //         // Same with newIdList
	    //         if (idIndicesMap[oldId]) {
	    //             oldIdList[i] = idIndicesMap[oldId];
	    //         }
	    //         else {
	    //             oldIdList[i] = idx++;
	    //         }
	    //     }
	    // }
	
	    function diffData(oldData, newData) {
	        var diffResult = [];
	
	        newData.diff(oldData)
	            .add(function (idx) {
	                diffResult.push({cmd: '+', idx: idx});
	            })
	            .update(function (newIdx, oldIdx) {
	                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});
	            })
	            .remove(function (idx) {
	                diffResult.push({cmd: '-', idx: idx});
	            })
	            .execute();
	
	        return diffResult;
	    }
	
	    module.exports = function (
	        oldData, newData,
	        oldStackedOnPoints, newStackedOnPoints,
	        oldCoordSys, newCoordSys
	    ) {
	        var diff = diffData(oldData, newData);
	
	        // var newIdList = newData.mapArray(newData.getId);
	        // var oldIdList = oldData.mapArray(oldData.getId);
	
	        // convertToIntId(newIdList, oldIdList);
	
	        // // FIXME One data ?
	        // diff = arrayDiff(oldIdList, newIdList);
	
	        var currPoints = [];
	        var nextPoints = [];
	        // Points for stacking base line
	        var currStackedPoints = [];
	        var nextStackedPoints = [];
	
	        var status = [];
	        var sortedIndices = [];
	        var rawIndices = [];
	        var dims = newCoordSys.dimensions;
	        for (var i = 0; i < diff.length; i++) {
	            var diffItem = diff[i];
	            var pointAdded = true;
	
	            // FIXME, animation is not so perfect when dataZoom window moves fast
	            // Which is in case remvoing or add more than one data in the tail or head
	            switch (diffItem.cmd) {
	                case '=':
	                    var currentPt = oldData.getItemLayout(diffItem.idx);
	                    var nextPt = newData.getItemLayout(diffItem.idx1);
	                    // If previous data is NaN, use next point directly
	                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                        currentPt = nextPt.slice();
	                    }
	                    currPoints.push(currentPt);
	                    nextPoints.push(nextPt);
	
	                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
	
	                    rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                    break;
	                case '+':
	                    var idx = diffItem.idx;
	                    currPoints.push(
	                        oldCoordSys.dataToPoint([
	                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)
	                        ])
	                    );
	
	                    nextPoints.push(newData.getItemLayout(idx).slice());
	
	                    currStackedPoints.push(
	                        getStackedOnPoint(oldCoordSys, newData, idx)
	                    );
	                    nextStackedPoints.push(newStackedOnPoints[idx]);
	
	                    rawIndices.push(newData.getRawIndex(idx));
	                    break;
	                case '-':
	                    var idx = diffItem.idx;
	                    var rawIndex = oldData.getRawIndex(idx);
	                    // Data is replaced. In the case of dynamic data queue
	                    // FIXME FIXME FIXME
	                    if (rawIndex !== idx) {
	                        currPoints.push(oldData.getItemLayout(idx));
	                        nextPoints.push(newCoordSys.dataToPoint([
	                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)
	                        ]));
	
	                        currStackedPoints.push(oldStackedOnPoints[idx]);
	                        nextStackedPoints.push(
	                            getStackedOnPoint(
	                                newCoordSys, oldData, idx
	                            )
	                        );
	
	                        rawIndices.push(rawIndex);
	                    }
	                    else {
	                        pointAdded = false;
	                    }
	            }
	
	            // Original indices
	            if (pointAdded) {
	                status.push(diffItem);
	                sortedIndices.push(sortedIndices.length);
	            }
	        }
	
	        // Diff result may be crossed if all items are changed
	        // Sort by data index
	        sortedIndices.sort(function (a, b) {
	            return rawIndices[a] - rawIndices[b];
	        });
	
	        var sortedCurrPoints = [];
	        var sortedNextPoints = [];
	
	        var sortedCurrStackedPoints = [];
	        var sortedNextStackedPoints = [];
	
	        var sortedStatus = [];
	        for (var i = 0; i < sortedIndices.length; i++) {
	            var idx = sortedIndices[i];
	            sortedCurrPoints[i] = currPoints[idx];
	            sortedNextPoints[i] = nextPoints[idx];
	
	            sortedCurrStackedPoints[i] = currStackedPoints[idx];
	            sortedNextStackedPoints[i] = nextStackedPoints[idx];
	
	            sortedStatus[i] = status[idx];
	        }
	
	        return {
	            current: sortedCurrPoints,
	            next: sortedNextPoints,
	
	            stackedOnCurrent: sortedCurrStackedPoints,
	            stackedOnNext: sortedNextStackedPoints,
	
	            status: sortedStatus
	        };
	    };


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	// Poly path support NaN point
	
	
	    var Path = __webpack_require__(66);
	    var vec2 = __webpack_require__(31);
	
	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;
	
	    var scaleAndAdd = vec2.scaleAndAdd;
	    var v2Copy = vec2.copy;
	
	    // Temporary variable
	    var v = [];
	    var cp0 = [];
	    var cp1 = [];
	
	    function isPointNull(p) {
	        return isNaN(p[0]) || isNaN(p[1]);
	    }
	
	    function drawSegment(
	        ctx, points, start, segLen, allLen,
	        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls
	    ) {
	        var prevIdx = 0;
	        var idx = start;
	        for (var k = 0; k < segLen; k++) {
	            var p = points[idx];
	            if (idx >= allLen || idx < 0) {
	                break;
	            }
	            if (isPointNull(p)) {
	                if (connectNulls) {
	                    idx += dir;
	                    continue;
	                }
	                break;
	            }
	
	            if (idx === start) {
	                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	                v2Copy(cp0, p);
	            }
	            else {
	                if (smooth > 0) {
	                    var nextIdx = idx + dir;
	                    var nextP = points[nextIdx];
	                    if (connectNulls) {
	                        // Find next point not null
	                        while (nextP && isPointNull(points[nextIdx])) {
	                            nextIdx += dir;
	                            nextP = points[nextIdx];
	                        }
	                    }
	
	                    var ratioNextSeg = 0.5;
	                    var prevP = points[prevIdx];
	                    var nextP = points[nextIdx];
	                    // Last point
	                    if (!nextP || isPointNull(nextP)) {
	                        v2Copy(cp1, p);
	                    }
	                    else {
	                        // If next data is null in not connect case
	                        if (isPointNull(nextP) && !connectNulls) {
	                            nextP = p;
	                        }
	
	                        vec2.sub(v, nextP, prevP);
	
	                        var lenPrevSeg;
	                        var lenNextSeg;
	                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                            var dim = smoothMonotone === 'x' ? 0 : 1;
	                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                        }
	                        else {
	                            lenPrevSeg = vec2.dist(p, prevP);
	                            lenNextSeg = vec2.dist(p, nextP);
	                        }
	
	                        // Use ratio of seg length
	                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
	
	                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                    }
	                    // Smooth constraint
	                    vec2Min(cp0, cp0, smoothMax);
	                    vec2Max(cp0, cp0, smoothMin);
	                    vec2Min(cp1, cp1, smoothMax);
	                    vec2Max(cp1, cp1, smoothMin);
	
	                    ctx.bezierCurveTo(
	                        cp0[0], cp0[1],
	                        cp1[0], cp1[1],
	                        p[0], p[1]
	                    );
	                    // cp0 of next segment
	                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	                }
	                else {
	                    ctx.lineTo(p[0], p[1]);
	                }
	            }
	
	            prevIdx = idx;
	            idx += dir;
	        }
	
	        return k;
	    }
	
	    function getBoundingBox(points, smoothConstraint) {
	        var ptMin = [Infinity, Infinity];
	        var ptMax = [-Infinity, -Infinity];
	        if (smoothConstraint) {
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }
	                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }
	                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }
	                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }
	            }
	        }
	        return {
	            min: smoothConstraint ? ptMin : ptMax,
	            max: smoothConstraint ? ptMax : ptMin
	        };
	    }
	
	    module.exports = {
	
	        Polyline: Path.extend({
	
	            type: 'ec-polyline',
	
	            shape: {
	                points: [],
	
	                smooth: 0,
	
	                smoothConstraint: true,
	
	                smoothMonotone: null,
	
	                connectNulls: false
	            },
	
	            style: {
	                fill: null,
	
	                stroke: '#000'
	            },
	
	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	
	                var i = 0;
	                var len = points.length;
	
	                var result = getBoundingBox(points, shape.smoothConstraint);
	
	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    i += drawSegment(
	                        ctx, points, i, len, len,
	                        1, result.min, result.max, shape.smooth,
	                        shape.smoothMonotone, shape.connectNulls
	                    ) + 1;
	                }
	            }
	        }),
	
	        Polygon: Path.extend({
	
	            type: 'ec-polygon',
	
	            shape: {
	                points: [],
	
	                // Offset between stacked base points and points
	                stackedOnPoints: [],
	
	                smooth: 0,
	
	                stackedOnSmooth: 0,
	
	                smoothConstraint: true,
	
	                smoothMonotone: null,
	
	                connectNulls: false
	            },
	
	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	                var stackedOnPoints = shape.stackedOnPoints;
	
	                var i = 0;
	                var len = points.length;
	                var smoothMonotone = shape.smoothMonotone;
	                var bbox = getBoundingBox(points, shape.smoothConstraint);
	                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
	
	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    var k = drawSegment(
	                        ctx, points, i, len, len,
	                        1, bbox.min, bbox.max, shape.smooth,
	                        smoothMonotone, shape.connectNulls
	                    );
	                    drawSegment(
	                        ctx, stackedOnPoints, i + k - 1, k, len,
	                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,
	                        smoothMonotone, shape.connectNulls
	                    );
	                    i += k + 1;
	
	                    ctx.closePath();
	                }
	            }
	        })
	    };


/***/ },
/* 131 */
/***/ function(module, exports) {

	
	
	    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {
	
	        // Encoding visual for all series include which is filtered for legend drawing
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	
	            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	            var symbolSize = seriesModel.get('symbolSize');
	
	            data.setVisual({
	                legendSymbol: legendSymbol || symbolType,
	                symbol: symbolType,
	                symbolSize: symbolSize
	            });
	
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof symbolSize === 'function') {
	                    data.each(function (idx) {
	                        var rawValue = seriesModel.getRawValue(idx);
	                        // FIXME
	                        var params = seriesModel.getDataParams(idx);
	                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                    });
	                }
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var itemSymbolType = itemModel.getShallow('symbol', true);
	                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	                    // If has item symbol
	                    if (itemSymbolType != null) {
	                        data.setItemVisual(idx, 'symbol', itemSymbolType);
	                    }
	                    if (itemSymbolSize != null) {
	                        // PENDING Transform symbolSize ?
	                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 132 */
/***/ function(module, exports) {

	
	
	    module.exports = function (seriesType, ecModel) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var coordSys = seriesModel.coordinateSystem;
	
	            if (coordSys) {
	                var dims = coordSys.dimensions;
	
	                if (coordSys.type === 'singleAxis') {
	                    data.each(dims[0], function (x, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));
	                    });
	                }
	                else {
	                    data.each(dims, function (x, y, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(
	                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])
	                        );
	                    }, true);
	                }
	            }
	        });
	    };


/***/ },
/* 133 */
/***/ function(module, exports) {

	
	    var samplers = {
	        average: function (frame) {
	            var sum = 0;
	            var count = 0;
	            for (var i = 0; i < frame.length; i++) {
	                if (!isNaN(frame[i])) {
	                    sum += frame[i];
	                    count++;
	                }
	            }
	            // Return NaN if count is 0
	            return count === 0 ? NaN : sum / count;
	        },
	        sum: function (frame) {
	            var sum = 0;
	            for (var i = 0; i < frame.length; i++) {
	                // Ignore NaN
	                sum += frame[i] || 0;
	            }
	            return sum;
	        },
	        max: function (frame) {
	            var max = -Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] > max && (max = frame[i]);
	            }
	            return max;
	        },
	        min: function (frame) {
	            var min = Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] < min && (min = frame[i]);
	            }
	            return min;
	        },
	        // TODO
	        // Median
	        nearest: function (frame) {
	            return frame[0];
	        }
	    };
	
	    var indexSampler = function (frame, value) {
	        return Math.round(frame.length / 2);
	    };
	    module.exports = function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var sampling = seriesModel.get('sampling');
	            var coordSys = seriesModel.coordinateSystem;
	            // Only cartesian2d support down sampling
	            if (coordSys.type === 'cartesian2d' && sampling) {
	                var baseAxis = coordSys.getBaseAxis();
	                var valueAxis = coordSys.getOtherAxis(baseAxis);
	                var extent = baseAxis.getExtent();
	                // Coordinste system has been resized
	                var size = extent[1] - extent[0];
	                var rate = Math.round(data.count() / size);
	                if (rate > 1) {
	                    var sampler;
	                    if (typeof sampling === 'string') {
	                        sampler = samplers[sampling];
	                    }
	                    else if (typeof sampling === 'function') {
	                        sampler = sampling;
	                    }
	                    if (sampler) {
	                        data = data.downSample(
	                            valueAxis.dim, 1 / rate, sampler, indexSampler
	                        );
	                        seriesModel.setData(data);
	                    }
	                }
	            }
	        }, this);
	    };


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(135);
	
	    __webpack_require__(152);
	
	    // Grid view
	    echarts.extendComponentView({
	
	        type: 'grid',
	
	        render: function (gridModel, ecModel) {
	            this.group.removeAll();
	            if (gridModel.get('show')) {
	                this.group.add(new graphic.Rect({
	                    shape: gridModel.coordinateSystem.getRect(),
	                    style: zrUtil.defaults({
	                        fill: gridModel.get('backgroundColor')
	                    }, gridModel.getItemStyle()),
	                    silent: true,
	                    z2: -1
	                }));
	            }
	        }
	
	    });
	
	    echarts.registerPreprocessor(function (option) {
	        // Only create grid when need
	        if (option.xAxis && option.yAxis && !option.grid) {
	            option.grid = {};
	        }
	    });


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	var factory = exports;
	
	    var layout = __webpack_require__(42);
	    var axisHelper = __webpack_require__(136);
	
	    var zrUtil = __webpack_require__(25);
	    var Cartesian2D = __webpack_require__(142);
	    var Axis2D = __webpack_require__(144);
	
	    var each = zrUtil.each;
	
	    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	    var niceScaleExtent = axisHelper.niceScaleExtent;
	
	    // 依赖 GridModel, AxisModel 做预处理
	    __webpack_require__(147);
	
	    /**
	     * Check if the axis is used in the specified grid
	     * @inner
	     */
	    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	        return axisModel.getCoordSysModel() === gridModel;
	    }
	
	    function getLabelUnionRect(axis) {
	        var axisModel = axis.model;
	        var labels = axisModel.getFormattedLabels();
	        var textStyleModel = axisModel.getModel('axisLabel.textStyle');
	        var rect;
	        var step = 1;
	        var labelCount = labels.length;
	        if (labelCount > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.ceil(labelCount / 40);
	        }
	        for (var i = 0; i < labelCount; i += step) {
	            if (!axis.isLabelIgnored(i)) {
	                var singleRect = textStyleModel.getTextRect(labels[i]);
	                // FIXME consider label rotate
	                rect ? rect.union(singleRect) : (rect = singleRect);
	            }
	        }
	        return rect;
	    }
	
	    function Grid(gridModel, ecModel, api) {
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	         * @private
	         */
	        this._coordsMap = {};
	
	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	         * @private
	         */
	        this._coordsList = [];
	
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesMap = {};
	
	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesList = [];
	
	        this._initCartesian(gridModel, ecModel, api);
	
	        this._model = gridModel;
	    }
	
	    var gridProto = Grid.prototype;
	
	    gridProto.type = 'grid';
	
	    gridProto.getRect = function () {
	        return this._rect;
	    };
	
	    gridProto.update = function (ecModel, api) {
	
	        var axesMap = this._axesMap;
	
	        this._updateScale(ecModel, this._model);
	
	        function ifAxisCanNotOnZero(otherAxisDim) {
	            var axes = axesMap[otherAxisDim];
	            for (var idx in axes) {
	                if (axes.hasOwnProperty(idx)) {
	                    var axis = axes[idx];
	                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }
	
	        each(axesMap.x, function (xAxis) {
	            niceScaleExtent(xAxis, xAxis.model);
	        });
	        each(axesMap.y, function (yAxis) {
	            niceScaleExtent(yAxis, yAxis.model);
	        });
	        // Fix configuration
	        each(axesMap.x, function (xAxis) {
	            // onZero can not be enabled in these two situations
	            // 1. When any other axis is a category axis
	            // 2. When any other axis not across 0 point
	            if (ifAxisCanNotOnZero('y')) {
	                xAxis.onZero = false;
	            }
	        });
	        each(axesMap.y, function (yAxis) {
	            if (ifAxisCanNotOnZero('x')) {
	                yAxis.onZero = false;
	            }
	        });
	
	        // Resize again if containLabel is enabled
	        // FIXME It may cause getting wrong grid size in data processing stage
	        this.resize(this._model, api);
	    };
	
	    /**
	     * Resize the grid
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    gridProto.resize = function (gridModel, api) {
	
	        var gridRect = layout.getLayoutRect(
	            gridModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	
	        this._rect = gridRect;
	
	        var axesList = this._axesList;
	
	        adjustAxes();
	
	        // Minus label size
	        if (gridModel.get('containLabel')) {
	            each(axesList, function (axis) {
	                if (!axis.model.get('axisLabel.inside')) {
	                    var labelUnionRect = getLabelUnionRect(axis);
	                    if (labelUnionRect) {
	                        var dim = axis.isHorizontal() ? 'height' : 'width';
	                        var margin = axis.model.get('axisLabel.margin');
	                        gridRect[dim] -= labelUnionRect[dim] + margin;
	                        if (axis.position === 'top') {
	                            gridRect.y += labelUnionRect.height + margin;
	                        }
	                        else if (axis.position === 'left')  {
	                            gridRect.x += labelUnionRect.width + margin;
	                        }
	                    }
	                }
	            });
	
	            adjustAxes();
	        }
	
	        function adjustAxes() {
	            each(axesList, function (axis) {
	                var isHorizontal = axis.isHorizontal();
	                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(extent[idx], extent[1 - idx]);
	                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	            });
	        }
	    };
	
	    /**
	     * @param {string} axisType
	     * @param {ndumber} [axisIndex]
	     */
	    gridProto.getAxis = function (axisType, axisIndex) {
	        var axesMapOnDim = this._axesMap[axisType];
	        if (axesMapOnDim != null) {
	            if (axisIndex == null) {
	                // Find first axis
	                for (var name in axesMapOnDim) {
	                    if (axesMapOnDim.hasOwnProperty(name)) {
	                        return axesMapOnDim[name];
	                    }
	                }
	            }
	            return axesMapOnDim[axisIndex];
	        }
	    };
	
	    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	        if (xAxisIndex != null && yAxisIndex != null) {
	            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	            return this._coordsMap[key];
	        }
	        else {
	            // When only xAxisIndex or yAxisIndex given, find its first cartesian.
	            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	                if (coordList[i].getAxis('x').index === xAxisIndex
	                    || coordList[i].getAxis('y').index === yAxisIndex
	                ) {
	                    return coordList[i];
	                }
	            }
	        }
	    };
	
	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.convertToPixel = function (ecModel, finder, value) {
	        var target = this._findConvertTarget(ecModel, finder);
	
	        return target.cartesian
	            ? target.cartesian.dataToPoint(value)
	            : target.axis
	            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))
	            : null;
	    };
	
	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.convertFromPixel = function (ecModel, finder, value) {
	        var target = this._findConvertTarget(ecModel, finder);
	
	        return target.cartesian
	            ? target.cartesian.pointToData(value)
	            : target.axis
	            ? target.axis.coordToData(target.axis.toLocalCoord(value))
	            : null;
	    };
	
	    /**
	     * @inner
	     */
	    gridProto._findConvertTarget = function (ecModel, finder) {
	        var seriesModel = finder.seriesModel;
	        var xAxisModel = finder.xAxisModel
	            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);
	        var yAxisModel = finder.yAxisModel
	            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);
	        var gridModel = finder.gridModel;
	        var coordsList = this._coordsList;
	        var cartesian;
	        var axis;
	
	        if (seriesModel) {
	            cartesian = seriesModel.coordinateSystem;
	            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	        }
	        else if (xAxisModel && yAxisModel) {
	            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	        }
	        else if (xAxisModel) {
	            axis = this.getAxis('x', xAxisModel.componentIndex);
	        }
	        else if (yAxisModel) {
	            axis = this.getAxis('y', yAxisModel.componentIndex);
	        }
	        // Lowest priority.
	        else if (gridModel) {
	            var grid = gridModel.coordinateSystem;
	            if (grid === this) {
	                cartesian = this._coordsList[0];
	            }
	        }
	
	        return {cartesian: cartesian, axis: axis};
	    };
	
	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.containPoint = function (point) {
	        var coord = this._coordsList[0];
	        if (coord) {
	            return coord.containPoint(point);
	        }
	    };
	
	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    gridProto._initCartesian = function (gridModel, ecModel, api) {
	        var axisPositionUsed = {
	            left: false,
	            right: false,
	            top: false,
	            bottom: false
	        };
	
	        var axesMap = {
	            x: {},
	            y: {}
	        };
	        var axesCount = {
	            x: 0,
	            y: 0
	        };
	
	        /// Create axis
	        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);
	
	        if (!axesCount.x || !axesCount.y) {
	            // Roll back when there no either x or y axis
	            this._axesMap = {};
	            this._axesList = [];
	            return;
	        }
	
	        this._axesMap = axesMap;
	
	        /// Create cartesian2d
	        each(axesMap.x, function (xAxis, xAxisIndex) {
	            each(axesMap.y, function (yAxis, yAxisIndex) {
	                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	                var cartesian = new Cartesian2D(key);
	
	                cartesian.grid = this;
	
	                this._coordsMap[key] = cartesian;
	                this._coordsList.push(cartesian);
	
	                cartesian.addAxis(xAxis);
	                cartesian.addAxis(yAxis);
	            }, this);
	        }, this);
	
	        function createAxisCreator(axisType) {
	            return function (axisModel, idx) {
	                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                    return;
	                }
	
	                var axisPosition = axisModel.get('position');
	                if (axisType === 'x') {
	                    // Fix position
	                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                        // Default bottom of X
	                        axisPosition = 'bottom';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                        }
	                    }
	                }
	                else {
	                    // Fix position
	                    if (axisPosition !== 'left' && axisPosition !== 'right') {
	                        // Default left of Y
	                        axisPosition = 'left';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                        }
	                    }
	                }
	                axisPositionUsed[axisPosition] = true;
	
	                var axis = new Axis2D(
	                    axisType, axisHelper.createScaleByModel(axisModel),
	                    [0, 0],
	                    axisModel.get('type'),
	                    axisPosition
	                );
	
	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');
	
	                axis.onZero = axisModel.get('axisLine.onZero');
	
	                // Inject axis into axisModel
	                axisModel.axis = axis;
	
	                // Inject axisModel into axis
	                axis.model = axisModel;
	
	                // Inject grid info axis
	                axis.grid = this;
	
	                // Index of axis, can be used as key
	                axis.index = idx;
	
	                this._axesList.push(axis);
	
	                axesMap[axisType][idx] = axis;
	                axesCount[axisType]++;
	            };
	        }
	    };
	
	    /**
	     * Update cartesian properties from series
	     * @param  {module:echarts/model/Option} option
	     * @private
	     */
	    gridProto._updateScale = function (ecModel, gridModel) {
	        // Reset scale
	        zrUtil.each(this._axesList, function (axis) {
	            axis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (isCartesian2D(seriesModel)) {
	                var axesModels = findAxesModels(seriesModel, ecModel);
	                var xAxisModel = axesModels[0];
	                var yAxisModel = axesModels[1];
	
	                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)
	                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)
	                 ) {
	                    return;
	                }
	
	                var cartesian = this.getCartesian(
	                    xAxisModel.componentIndex, yAxisModel.componentIndex
	                );
	                var data = seriesModel.getData();
	                var xAxis = cartesian.getAxis('x');
	                var yAxis = cartesian.getAxis('y');
	
	                if (data.type === 'list') {
	                    unionExtent(data, xAxis, seriesModel);
	                    unionExtent(data, yAxis, seriesModel);
	                }
	            }
	        }, this);
	
	        function unionExtent(data, axis, seriesModel) {
	            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	                axis.scale.unionExtentFromData(data, dim);
	            });
	        }
	    };
	
	    /**
	     * @inner
	     */
	    function updateAxisTransfrom(axis, coordBase) {
	        var axisExtent = axis.getExtent();
	        var axisExtentSum = axisExtent[0] + axisExtent[1];
	
	        // Fast transform
	        axis.toGlobalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord + coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	        axis.toLocalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord - coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	    }
	
	    var axesTypes = ['xAxis', 'yAxis'];
	    /**
	     * @inner
	     */
	    function findAxesModels(seriesModel, ecModel) {
	        return zrUtil.map(axesTypes, function (axisType) {
	            var axisModel = seriesModel.getReferringComponents(axisType)[0];
	
	            if (__DEV__) {
	                if (!axisModel) {
	                    throw new Error(axisType + ' "' + zrUtil.retrieve(
	                        seriesModel.get(axisType + 'Index'),
	                        seriesModel.get(axisType + 'Id'),
	                        0
	                    ) + '" not found');
	                }
	            }
	            return axisModel;
	        });
	    }
	
	    /**
	     * @inner
	     */
	    function isCartesian2D(seriesModel) {
	        return seriesModel.get('coordinateSystem') === 'cartesian2d';
	    }
	
	    Grid.create = function (ecModel, api) {
	        var grids = [];
	        ecModel.eachComponent('grid', function (gridModel, idx) {
	            var grid = new Grid(gridModel, ecModel, api);
	            grid.name = 'grid_' + idx;
	            grid.resize(gridModel, api);
	
	            gridModel.coordinateSystem = grid;
	
	            grids.push(grid);
	        });
	
	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (!isCartesian2D(seriesModel)) {
	                return;
	            }
	
	            var axesModels = findAxesModels(seriesModel, ecModel);
	            var xAxisModel = axesModels[0];
	            var yAxisModel = axesModels[1];
	
	            var gridModel = xAxisModel.getCoordSysModel();
	
	            if (__DEV__) {
	                if (!gridModel) {
	                    throw new Error(
	                        'Grid "' + zrUtil.retrieve(
	                            xAxisModel.get('gridIndex'),
	                            xAxisModel.get('gridId'),
	                            0
	                        ) + '" not found'
	                    );
	                }
	                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {
	                    throw new Error('xAxis and yAxis must use the same grid');
	                }
	            }
	
	            var grid = gridModel.coordinateSystem;
	
	            seriesModel.coordinateSystem = grid.getCartesian(
	                xAxisModel.componentIndex, yAxisModel.componentIndex
	            );
	        });
	
	        return grids;
	    };
	
	    // For deciding which dimensions to use when creating list data
	    Grid.dimensions = Cartesian2D.prototype.dimensions;
	
	    __webpack_require__(47).register('cartesian2d', Grid);
	
	    module.exports = Grid;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var OrdinalScale = __webpack_require__(137);
	    var IntervalScale = __webpack_require__(139);
	    __webpack_require__(140);
	    __webpack_require__(141);
	    var Scale = __webpack_require__(138);
	
	    var numberUtil = __webpack_require__(28);
	    var zrUtil = __webpack_require__(25);
	    var textContain = __webpack_require__(29);
	    var axisHelper = {};
	
	    /**
	     * Get axis scale extent before niced.
	     * Item of returned array can only be number (including Infinity and NaN).
	     */
	    axisHelper.getScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var scaleType = scale.type;
	
	        var min = model.getMin();
	        var max = model.getMax();
	        var fixMin = min != null;
	        var fixMax = max != null;
	        var originalExtent = scale.getExtent();
	
	        var axisDataLen;
	        var boundaryGap;
	        var span;
	        if (scaleType === 'ordinal') {
	            axisDataLen = (model.get('data') || []).length;
	        }
	        else {
	            boundaryGap = model.get('boundaryGap');
	            if (!zrUtil.isArray(boundaryGap)) {
	                boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	            }
	            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	            span = originalExtent[1] - originalExtent[0];
	        }
	
	        if (min == null) {
	            min = scaleType === 'ordinal'
	                ? (axisDataLen ? 0 : NaN)
	                : originalExtent[0] - boundaryGap[0] * span;
	        }
	        if (max == null) {
	            max = scaleType === 'ordinal'
	                ? (axisDataLen ? axisDataLen - 1 : NaN)
	                : originalExtent[1] + boundaryGap[1] * span;
	        }
	
	        if (min === 'dataMin') {
	            min = originalExtent[0];
	        }
	        if (max === 'dataMax') {
	            max = originalExtent[1];
	        }
	
	        (min == null || !isFinite(min)) && (min = NaN);
	        (max == null || !isFinite(max)) && (max = NaN);
	
	        axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));
	
	        // Evaluate if axis needs cross zero
	        if (model.getNeedCrossZero()) {
	            // Axis is over zero and min is not set
	            if (min > 0 && max > 0 && !fixMin) {
	                min = 0;
	            }
	            // Axis is under zero and max is not set
	            if (min < 0 && max < 0 && !fixMax) {
	                max = 0;
	            }
	        }
	
	        return [min, max];
	    };
	
	    axisHelper.niceScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var extent = axisHelper.getScaleExtent(axis, model);
	        var fixMin = model.getMin() != null;
	        var fixMax = model.getMax() != null;
	        var splitNumber = model.get('splitNumber');
	
	        if (scale.type === 'log') {
	            scale.base = model.get('logBase');
	        }
	
	        scale.setExtent(extent[0], extent[1]);
	        scale.niceExtent(splitNumber, fixMin, fixMax);
	
	        // Use minInterval to constraint the calculated interval.
	        // If calculated interval is less than minInterval. increase the interval quantity until
	        // it is larger than minInterval.
	        // For example:
	        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get
	        //  an integer axis.
	        var minInterval = model.get('minInterval');
	        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {
	            var interval = scale.getInterval();
	            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;
	            // while (interval < minInterval) {
	            //     var quantity = numberUtil.quantity(interval);
	            //     interval = quantity * 10;
	            //     scaleQuantity *= 10;
	            // }
	            extent = scale.getExtent();
	            var origin = (extent[1] + extent[0]) / 2;
	            scale.setExtent(
	                intervalScale * (extent[0] - origin) + origin,
	                intervalScale * (extent[1] - origin) + origin
	            );
	            scale.niceExtent(splitNumber);
	        }
	
	        // If some one specified the min, max. And the default calculated interval
	        // is not good enough. He can specify the interval. It is often appeared
	        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	        // to be 60.
	        // FIXME
	        var interval = model.get('interval');
	        if (interval != null) {
	            scale.setInterval && scale.setInterval(interval);
	        }
	    };
	
	    /**
	     * @param {module:echarts/model/Model} model
	     * @param {string} [axisType] Default retrieve from model.type
	     * @return {module:echarts/scale/*}
	     */
	    axisHelper.createScaleByModel = function(model, axisType) {
	        axisType = axisType || model.get('type');
	        if (axisType) {
	            switch (axisType) {
	                // Buildin scale
	                case 'category':
	                    return new OrdinalScale(
	                        model.getCategories(), [Infinity, -Infinity]
	                    );
	                case 'value':
	                    return new IntervalScale();
	                // Extended scale, like time and log
	                default:
	                    return (Scale.getClass(axisType) || IntervalScale).create(model);
	            }
	        }
	    };
	
	    /**
	     * Check if the axis corss 0
	     */
	    axisHelper.ifAxisCrossZero = function (axis) {
	        var dataExtent = axis.scale.getExtent();
	        var min = dataExtent[0];
	        var max = dataExtent[1];
	        return !((min > 0 && max > 0) || (min < 0 && max < 0));
	    };
	
	    /**
	     * @param {Array.<number>} tickCoords In axis self coordinate.
	     * @param {Array.<string>} labels
	     * @param {string} font
	     * @param {boolean} isAxisHorizontal
	     * @return {number}
	     */
	    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	        // FIXME
	        // 不同角的axis和label，不只是horizontal和vertical.
	
	        var textSpaceTakenRect;
	        var autoLabelInterval = 0;
	        var accumulatedLabelInterval = 0;
	
	        var step = 1;
	        if (labels.length > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.floor(labels.length / 40);
	        }
	
	        for (var i = 0; i < tickCoords.length; i += step) {
	            var tickCoord = tickCoords[i];
	            var rect = textContain.getBoundingRect(
	                labels[i], font, 'center', 'top'
	            );
	            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	            // FIXME Magic number 1.5
	            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;
	            if (!textSpaceTakenRect) {
	                textSpaceTakenRect = rect.clone();
	            }
	            // There is no space for current label;
	            else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            }
	            else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	        }
	        if (autoLabelInterval === 0 && step > 1) {
	            return step;
	        }
	        return (autoLabelInterval + 1) * step - 1;
	    };
	
	    /**
	     * @param {Object} axis
	     * @param {Function} labelFormatter
	     * @return {Array.<string>}
	     */
	    axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	        var scale = axis.scale;
	        var labels = scale.getTicksLabels();
	        var ticks = scale.getTicks();
	        if (typeof labelFormatter === 'string') {
	            labelFormatter = (function (tpl) {
	                return function (val) {
	                    return tpl.replace('{value}', val != null ? val : '');
	                };
	            })(labelFormatter);
	            // Consider empty array
	            return zrUtil.map(labels, labelFormatter);
	        }
	        else if (typeof labelFormatter === 'function') {
	            return zrUtil.map(ticks, function (tick, idx) {
	                return labelFormatter(
	                    axis.type === 'category' ? scale.getLabel(tick) : tick,
	                    idx
	                );
	            }, this);
	        }
	        else {
	            return labels;
	        }
	    };
	
	    module.exports = axisHelper;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */
	
	// FIXME only one data
	
	
	    var zrUtil = __webpack_require__(25);
	    var Scale = __webpack_require__(138);
	
	    var scaleProto = Scale.prototype;
	
	    var OrdinalScale = Scale.extend({
	
	        type: 'ordinal',
	
	        init: function (data, extent) {
	            this._data = data;
	            this._extent = extent || [0, data.length - 1];
	        },
	
	        parse: function (val) {
	            return typeof val === 'string'
	                ? zrUtil.indexOf(this._data, val)
	                // val might be float.
	                : Math.round(val);
	        },
	
	        contain: function (rank) {
	            rank = this.parse(rank);
	            return scaleProto.contain.call(this, rank)
	                && this._data[rank] != null;
	        },
	
	        /**
	         * Normalize given rank or name to linear [0, 1]
	         * @param {number|string} [val]
	         * @return {number}
	         */
	        normalize: function (val) {
	            return scaleProto.normalize.call(this, this.parse(val));
	        },
	
	        scale: function (val) {
	            return Math.round(scaleProto.scale.call(this, val));
	        },
	
	        /**
	         * @return {Array}
	         */
	        getTicks: function () {
	            var ticks = [];
	            var extent = this._extent;
	            var rank = extent[0];
	
	            while (rank <= extent[1]) {
	                ticks.push(rank);
	                rank++;
	            }
	
	            return ticks;
	        },
	
	        /**
	         * Get item on rank n
	         * @param {number} n
	         * @return {string}
	         */
	        getLabel: function (n) {
	            return this._data[n];
	        },
	
	        /**
	         * @return {number}
	         */
	        count: function () {
	            return this._extent[1] - this._extent[0] + 1;
	        },
	
	        /**
	         * @override
	         */
	        unionExtentFromData: function (data, dim) {
	            this.unionExtent(data.getDataExtent(dim, false));
	        },
	
	        niceTicks: zrUtil.noop,
	        niceExtent: zrUtil.noop
	    });
	
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    OrdinalScale.create = function () {
	        return new OrdinalScale();
	    };
	
	    module.exports = OrdinalScale;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */
	
	
	    var clazzUtil = __webpack_require__(34);
	
	    function Scale() {
	        /**
	         * Extent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._extent = [Infinity, -Infinity];
	
	        /**
	         * Step is calculated in adjustExtent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._interval = 0;
	
	        this.init && this.init.apply(this, arguments);
	    }
	
	    var scaleProto = Scale.prototype;
	
	    /**
	     * Parse input val to valid inner number.
	     * @param {*} val
	     * @return {number}
	     */
	    scaleProto.parse = function (val) {
	        // Notice: This would be a trap here, If the implementation
	        // of this method depends on extent, and this method is used
	        // before extent set (like in dataZoom), it would be wrong.
	        // Nevertheless, parse does not depend on extent generally.
	        return val;
	    };
	
	    scaleProto.contain = function (val) {
	        var extent = this._extent;
	        return val >= extent[0] && val <= extent[1];
	    };
	
	    /**
	     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.normalize = function (val) {
	        var extent = this._extent;
	        if (extent[1] === extent[0]) {
	            return 0.5;
	        }
	        return (val - extent[0]) / (extent[1] - extent[0]);
	    };
	
	    /**
	     * Scale normalized value
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.scale = function (val) {
	        var extent = this._extent;
	        return val * (extent[1] - extent[0]) + extent[0];
	    };
	
	    /**
	     * Set extent from data
	     * @param {Array.<number>} other
	     */
	    scaleProto.unionExtent = function (other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);
	        // not setExtent because in log axis it may transformed to power
	        // this.setExtent(extent[0], extent[1]);
	    };
	
	    /**
	     * Set extent from data
	     * @param {module:echarts/data/List} data
	     * @param {string} dim
	     */
	    scaleProto.unionExtentFromData = function (data, dim) {
	        this.unionExtent(data.getDataExtent(dim, true));
	    };
	
	    /**
	     * Get extent
	     * @return {Array.<number>}
	     */
	    scaleProto.getExtent = function () {
	        return this._extent.slice();
	    };
	
	    /**
	     * Set extent
	     * @param {number} start
	     * @param {number} end
	     */
	    scaleProto.setExtent = function (start, end) {
	        var thisExtent = this._extent;
	        if (!isNaN(start)) {
	            thisExtent[0] = start;
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = end;
	        }
	    };
	
	    /**
	     * @return {Array.<string>}
	     */
	    scaleProto.getTicksLabels = function () {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    };
	
	    clazzUtil.enableClassExtend(Scale);
	    clazzUtil.enableClassManagement(Scale, {
	        registerWhenExtend: true
	    });
	
	    module.exports = Scale;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */
	
	
	
	    var numberUtil = __webpack_require__(28);
	    var formatUtil = __webpack_require__(27);
	    var Scale = __webpack_require__(138);
	
	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	
	    var getPrecisionSafe = numberUtil.getPrecisionSafe;
	    var roundingErrorFix = numberUtil.round;
	    /**
	     * @alias module:echarts/coord/scale/Interval
	     * @constructor
	     */
	    var IntervalScale = Scale.extend({
	
	        type: 'interval',
	
	        _interval: 0,
	
	        setExtent: function (start, end) {
	            var thisExtent = this._extent;
	            //start,end may be a Number like '25',so...
	            if (!isNaN(start)) {
	                thisExtent[0] = parseFloat(start);
	            }
	            if (!isNaN(end)) {
	                thisExtent[1] = parseFloat(end);
	            }
	        },
	
	        unionExtent: function (other) {
	            var extent = this._extent;
	            other[0] < extent[0] && (extent[0] = other[0]);
	            other[1] > extent[1] && (extent[1] = other[1]);
	
	            // unionExtent may called by it's sub classes
	            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	        },
	        /**
	         * Get interval
	         */
	        getInterval: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            return this._interval;
	        },
	
	        /**
	         * Set interval
	         */
	        setInterval: function (interval) {
	            this._interval = interval;
	            // Dropped auto calculated niceExtent and use user setted extent
	            // We assume user wan't to set both interval, min, max to get a better result
	            this._niceExtent = this._extent.slice();
	        },
	
	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            var interval = this._interval;
	            var extent = this._extent;
	            var ticks = [];
	
	            // Consider this case: using dataZoom toolbox, zoom and zoom.
	            var safeLimit = 10000;
	
	            if (interval) {
	                var niceExtent = this._niceExtent;
	                var precision = getPrecisionSafe(interval) + 2;
	
	                if (extent[0] < niceExtent[0]) {
	                    ticks.push(extent[0]);
	                }
	                var tick = niceExtent[0];
	
	                while (tick <= niceExtent[1]) {
	                    ticks.push(tick);
	                    // Avoid rounding error
	                    tick = roundingErrorFix(tick + interval, precision);
	                    if (ticks.length > safeLimit) {
	                        return [];
	                    }
	                }
	                // Consider this case: the last item of ticks is smaller
	                // than niceExtent[1] and niceExtent[1] === extent[1].
	                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {
	                    ticks.push(extent[1]);
	                }
	            }
	
	            return ticks;
	        },
	
	        /**
	         * @return {Array.<string>}
	         */
	        getTicksLabels: function () {
	            var labels = [];
	            var ticks = this.getTicks();
	            for (var i = 0; i < ticks.length; i++) {
	                labels.push(this.getLabel(ticks[i]));
	            }
	            return labels;
	        },
	
	        /**
	         * @param {number} n
	         * @return {number}
	         */
	        getLabel: function (data) {
	            return formatUtil.addCommas(data);
	        },
	
	        /**
	         * Update interval and extent of intervals for nice ticks
	         *
	         * @param {number} [splitNumber = 5] Desired number of ticks
	         */
	        niceTicks: function (splitNumber) {
	            splitNumber = splitNumber || 5;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (!isFinite(span)) {
	                return;
	            }
	            // User may set axis min 0 and data are all negative
	            // FIXME If it needs to reverse ?
	            if (span < 0) {
	                span = -span;
	                extent.reverse();
	            }
	
	            // From "Nice Numbers for Graph Labels" of Graphic Gems
	            // var niceSpan = numberUtil.nice(span, false);
	            var step = roundingErrorFix(
	                numberUtil.nice(span / splitNumber, true),
	                Math.max(
	                    getPrecisionSafe(extent[0]),
	                    getPrecisionSafe(extent[1])
	                // extent may be [0, 1], and step should have 1 more digits.
	                // To make it safe we add 2 more digits
	                ) + 2
	            );
	
	            var precision = getPrecisionSafe(step) + 2;
	            // Niced extent inside original extent
	            var niceExtent = [
	                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),
	                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)
	            ];
	
	            this._interval = step;
	            this._niceExtent = niceExtent;
	        },
	
	        /**
	         * Nice extent.
	         * @param {number} [splitNumber = 5] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: function (splitNumber, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                if (extent[0] !== 0) {
	                    // Expand extent
	                    var expandSize = extent[0];
	                    // In the fowllowing case
	                    //      Axis has been fixed max 100
	                    //      Plus data are all 100 and axis extent are [100, 100].
	                    // Extend to the both side will cause expanded max is larger than fixed max.
	                    // So only expand to the smaller side.
	                    if (!fixMax) {
	                        extent[1] += expandSize / 2;
	                        extent[0] -= expandSize / 2;
	                    }
	                    else {
	                        extent[0] -= expandSize / 2;
	                    }
	                }
	                else {
	                    extent[1] = 1;
	                }
	            }
	            var span = extent[1] - extent[0];
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (!isFinite(span)) {
	                extent[0] = 0;
	                extent[1] = 1;
	            }
	
	            this.niceTicks(splitNumber);
	
	            // var extent = this._extent;
	            var interval = this._interval;
	
	            if (!fixMin) {
	                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);
	            }
	        }
	    });
	
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    IntervalScale.create = function () {
	        return new IntervalScale();
	    };
	
	    module.exports = IntervalScale;
	


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/coord/scale/Time
	 */
	
	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var formatUtil = __webpack_require__(27);
	
	    var IntervalScale = __webpack_require__(139);
	
	    var intervalScaleProto = IntervalScale.prototype;
	
	    var mathCeil = Math.ceil;
	    var mathFloor = Math.floor;
	    var ONE_SECOND = 1000;
	    var ONE_MINUTE = ONE_SECOND * 60;
	    var ONE_HOUR = ONE_MINUTE * 60;
	    var ONE_DAY = ONE_HOUR * 24;
	
	    // FIXME 公用？
	    var bisect = function (a, x, lo, hi) {
	        while (lo < hi) {
	            var mid = lo + hi >>> 1;
	            if (a[mid][2] < x) {
	                lo = mid + 1;
	            }
	            else {
	                hi  = mid;
	            }
	        }
	        return lo;
	    };
	
	    /**
	     * @alias module:echarts/coord/scale/Time
	     * @constructor
	     */
	    var TimeScale = IntervalScale.extend({
	        type: 'time',
	
	        // Overwrite
	        getLabel: function (val) {
	            var stepLvl = this._stepLvl;
	
	            var date = new Date(val);
	
	            return formatUtil.formatTime(stepLvl[0], date);
	        },
	
	        // Overwrite
	        niceExtent: function (approxTickNum, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                // Expand extent
	                extent[0] -= ONE_DAY;
	                extent[1] += ONE_DAY;
	            }
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (extent[1] === -Infinity && extent[0] === Infinity) {
	                var d = new Date();
	                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	                extent[0] = extent[1] - ONE_DAY;
	            }
	
	            this.niceTicks(approxTickNum);
	
	            // var extent = this._extent;
	            var interval = this._interval;
	
	            if (!fixMin) {
	                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	            }
	        },
	
	        // Overwrite
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;
	
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            var approxInterval = span / approxTickNum;
	            var scaleLevelsLen = scaleLevels.length;
	            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	
	            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	            var interval = level[2];
	            // Same with interval scale if span is much larger than 1 year
	            if (level[0] === 'year') {
	                var yearSpan = span / interval;
	
	                // From "Nice Numbers for Graph Labels" of Graphic Gems
	                // var niceYearSpan = numberUtil.nice(yearSpan, false);
	                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	
	                interval *= yearStep;
	            }
	
	            var niceExtent = [
	                mathCeil(extent[0] / interval) * interval,
	                mathFloor(extent[1] / interval) * interval
	            ];
	
	            this._stepLvl = level;
	            // Interval will be used in getTicks
	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },
	
	        parse: function (val) {
	            // val might be float.
	            return +numberUtil.parseDate(val);
	        }
	    });
	
	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        TimeScale.prototype[methodName] = function (val) {
	            return intervalScaleProto[methodName].call(this, this.parse(val));
	        };
	    });
	
	    // Steps from d3
	    var scaleLevels = [
	        // Format       step    interval
	        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s
	        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s
	        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s
	        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s
	        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s
	        ['hh:mm\nMM-dd',1,      ONE_MINUTE],          // 1m
	        ['hh:mm\nMM-dd',5,      ONE_MINUTE * 5],      // 5m
	        ['hh:mm\nMM-dd',10,     ONE_MINUTE * 10],     // 10m
	        ['hh:mm\nMM-dd',15,     ONE_MINUTE * 15],     // 15m
	        ['hh:mm\nMM-dd',30,     ONE_MINUTE * 30],     // 30m
	        ['hh:mm\nMM-dd',1,      ONE_HOUR],        // 1h
	        ['hh:mm\nMM-dd',2,      ONE_HOUR * 2],    // 2h
	        ['hh:mm\nMM-dd',6,      ONE_HOUR * 6],    // 6h
	        ['hh:mm\nMM-dd',12,     ONE_HOUR * 12],   // 12h
	        ['MM-dd\nyyyy', 1,      ONE_DAY],   // 1d
	        ['week',        7,      ONE_DAY * 7],        // 7d
	        ['month',       1,      ONE_DAY * 31],       // 1M
	        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M
	        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M
	        ['year',        1,      ONE_DAY * 380]       // 1Y
	    ];
	
	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    TimeScale.create = function () {
	        return new TimeScale();
	    };
	
	    module.exports = TimeScale;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var Scale = __webpack_require__(138);
	    var numberUtil = __webpack_require__(28);
	
	    // Use some method of IntervalScale
	    var IntervalScale = __webpack_require__(139);
	
	    var scaleProto = Scale.prototype;
	    var intervalScaleProto = IntervalScale.prototype;
	
	    var getPrecisionSafe = numberUtil.getPrecisionSafe;
	    var roundingErrorFix = numberUtil.round;
	
	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    var mathPow = Math.pow;
	
	    var mathLog = Math.log;
	
	    var LogScale = Scale.extend({
	
	        type: 'log',
	
	        base: 10,
	
	        $constructor: function () {
	            Scale.apply(this, arguments);
	            this._originalScale = new IntervalScale();
	        },
	
	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            var originalScale = this._originalScale;
	            var extent = this._extent;
	            var originalExtent = originalScale.getExtent();
	
	            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	                var powVal = numberUtil.round(mathPow(this.base, val));
	
	                // Fix #4158
	                powVal = (val === extent[0] && originalScale.__fixMin)
	                    ? fixRoundingError(powVal, originalExtent[0])
	                    : powVal;
	                powVal = (val === extent[1] && originalScale.__fixMax)
	                    ? fixRoundingError(powVal, originalExtent[1])
	                    : powVal;
	
	                return powVal;
	            }, this);
	        },
	
	        /**
	         * @param {number} val
	         * @return {string}
	         */
	        getLabel: intervalScaleProto.getLabel,
	
	        /**
	         * @param  {number} val
	         * @return {number}
	         */
	        scale: function (val) {
	            val = scaleProto.scale.call(this, val);
	            return mathPow(this.base, val);
	        },
	
	        /**
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            var base = this.base;
	            start = mathLog(start) / mathLog(base);
	            end = mathLog(end) / mathLog(base);
	            intervalScaleProto.setExtent.call(this, start, end);
	        },
	
	        /**
	         * @return {number} end
	         */
	        getExtent: function () {
	            var base = this.base;
	            var extent = scaleProto.getExtent.call(this);
	            extent[0] = mathPow(base, extent[0]);
	            extent[1] = mathPow(base, extent[1]);
	
	            // Fix #4158
	            var originalScale = this._originalScale;
	            var originalExtent = originalScale.getExtent();
	            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));
	
	            return extent;
	        },
	
	        /**
	         * @param  {Array.<number>} extent
	         */
	        unionExtent: function (extent) {
	            this._originalScale.unionExtent(extent);
	
	            var base = this.base;
	            extent[0] = mathLog(extent[0]) / mathLog(base);
	            extent[1] = mathLog(extent[1]) / mathLog(base);
	            scaleProto.unionExtent.call(this, extent);
	        },
	
	        /**
	         * @override
	         */
	        unionExtentFromData: function (data, dim) {
	            this.unionExtent(data.getDataExtent(dim, true, function (val) {
	                return val > 0;
	            }));
	        },
	
	        /**
	         * Update interval and extent of intervals for nice ticks
	         * @param  {number} [approxTickNum = 10] Given approx tick number
	         */
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (span === Infinity || span <= 0) {
	                return;
	            }
	
	            var interval = numberUtil.quantity(span);
	            var err = approxTickNum / span * interval;
	
	            // Filter ticks to get closer to the desired count.
	            if (err <= 0.5) {
	                interval *= 10;
	            }
	
	            // Interval should be integer
	            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	                interval *= 10;
	            }
	
	            var niceExtent = [
	                numberUtil.round(mathCeil(extent[0] / interval) * interval),
	                numberUtil.round(mathFloor(extent[1] / interval) * interval)
	            ];
	
	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },
	
	        /**
	         * Nice extent.
	         * @param {number} [approxTickNum = 10] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: function (splitNumber, fixMin, fixMax) {
	            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);
	
	            var originalScale = this._originalScale;
	            originalScale.__fixMin = fixMin;
	            originalScale.__fixMax = fixMax;
	        }
	
	    });
	
	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        LogScale.prototype[methodName] = function (val) {
	            val = mathLog(val) / mathLog(this.base);
	            return scaleProto[methodName].call(this, val);
	        };
	    });
	
	    LogScale.create = function () {
	        return new LogScale();
	    };
	
	    function fixRoundingError(val, originalVal) {
	        return roundingErrorFix(val, getPrecisionSafe(originalVal));
	    }
	
	    module.exports = LogScale;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var Cartesian = __webpack_require__(143);
	
	    function Cartesian2D(name) {
	
	        Cartesian.call(this, name);
	    }
	
	    Cartesian2D.prototype = {
	
	        constructor: Cartesian2D,
	
	        type: 'cartesian2d',
	
	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['x', 'y'],
	
	        /**
	         * Base axis will be used on stacking.
	         *
	         * @return {module:echarts/coord/cartesian/Axis2D}
	         */
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0]
	                || this.getAxesByScale('time')[0]
	                || this.getAxis('x');
	        },
	
	        /**
	         * If contain point
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var axisX = this.getAxis('x');
	            var axisY = this.getAxis('y');
	            return axisX.contain(axisX.toLocalCoord(point[0]))
	                && axisY.contain(axisY.toLocalCoord(point[1]));
	        },
	
	        /**
	         * If contain data
	         * @param {Array.<number>} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.getAxis('x').containData(data[0])
	                && this.getAxis('y').containData(data[1]);
	        },
	
	        /**
	         * Convert series data to an array of points
	         * @param {module:echarts/data/List} data
	         * @param {boolean} stack
	         * @return {Array}
	         *  Return array of points. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data, stack) {
	            return data.mapArray(['x', 'y'], function (x, y) {
	                return this.dataToPoint([x, y]);
	            }, stack, this);
	        },
	
	        /**
	         * @param {Array.<number>} data
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),
	                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))
	            ];
	        },
	
	        /**
	         * @param {Array.<number>} point
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        pointToData: function (point, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),
	                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)
	            ];
	        },
	
	        /**
	         * Get other axis
	         * @param {module:echarts/coord/cartesian/Axis2D} axis
	         */
	        getOtherAxis: function (axis) {
	            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	        }
	    };
	
	    zrUtil.inherits(Cartesian2D, Cartesian);
	
	    module.exports = Cartesian2D;


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    function dimAxisMapper(dim) {
	        return this._axes[dim];
	    }
	
	    /**
	     * @alias module:echarts/coord/Cartesian
	     * @constructor
	     */
	    var Cartesian = function (name) {
	        this._axes = {};
	
	        this._dimList = [];
	
	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	    };
	
	    Cartesian.prototype = {
	
	        constructor: Cartesian,
	
	        type: 'cartesian',
	
	        /**
	         * Get axis
	         * @param  {number|string} dim
	         * @return {module:echarts/coord/Cartesian~Axis}
	         */
	        getAxis: function (dim) {
	            return this._axes[dim];
	        },
	
	        /**
	         * Get axes list
	         * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	         */
	        getAxes: function () {
	            return zrUtil.map(this._dimList, dimAxisMapper, this);
	        },
	
	        /**
	         * Get axes list by given scale type
	         */
	        getAxesByScale: function (scaleType) {
	            scaleType = scaleType.toLowerCase();
	            return zrUtil.filter(
	                this.getAxes(),
	                function (axis) {
	                    return axis.scale.type === scaleType;
	                }
	            );
	        },
	
	        /**
	         * Add axis
	         * @param {module:echarts/coord/Cartesian.Axis}
	         */
	        addAxis: function (axis) {
	            var dim = axis.dim;
	
	            this._axes[dim] = axis;
	
	            this._dimList.push(dim);
	        },
	
	        /**
	         * Convert data to coord in nd space
	         * @param {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        dataToCoord: function (val) {
	            return this._dataCoordConvert(val, 'dataToCoord');
	        },
	
	        /**
	         * Convert coord in nd space to data
	         * @param  {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        coordToData: function (val) {
	            return this._dataCoordConvert(val, 'coordToData');
	        },
	
	        _dataCoordConvert: function (input, method) {
	            var dimList = this._dimList;
	
	            var output = input instanceof Array ? [] : {};
	
	            for (var i = 0; i < dimList.length; i++) {
	                var dim = dimList[i];
	                var axis = this._axes[dim];
	
	                output[dim] = axis[method](input[dim]);
	            }
	
	            return output;
	        }
	    };
	
	    module.exports = Cartesian;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	    var axisLabelInterval = __webpack_require__(146);
	
	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	        Axis.call(this, dim, scale, coordExtent);
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';
	
	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         */
	        this.position = position || 'bottom';
	    };
	
	    Axis2D.prototype = {
	
	        constructor: Axis2D,
	
	        /**
	         * Index of axis, can be used as key
	         */
	        index: 0,
	        /**
	         * If axis is on the zero position of the other axis
	         * @type {boolean}
	         */
	        onZero: false,
	
	        /**
	         * Axis model
	         * @param {module:echarts/coord/cartesian/AxisModel}
	         */
	        model: null,
	
	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';
	        },
	
	        getGlobalExtent: function () {
	            var ret = this.getExtent();
	            ret[0] = this.toGlobalCoord(ret[0]);
	            ret[1] = this.toGlobalCoord(ret[1]);
	            return ret;
	        },
	
	        /**
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                labelInterval = this._labelInterval = axisLabelInterval(this);
	            }
	            return labelInterval;
	        },
	
	        /**
	         * If label is ignored.
	         * Automatically used when axis is category and label can not be all shown
	         * @param  {number}  idx
	         * @return {boolean}
	         */
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return ((typeof labelInterval === 'function')
	                    && !labelInterval(idx, this.scale.getLabel(idx)))
	                    || idx % (labelInterval + 1);
	            }
	        },
	
	        /**
	         * Transform global coord to local coord,
	         * i.e. var localCoord = axis.toLocalCoord(80);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toLocalCoord: null,
	
	        /**
	         * Transform global coord to local coord,
	         * i.e. var globalCoord = axis.toLocalCoord(40);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toGlobalCoord: null
	
	    };
	    zrUtil.inherits(Axis2D, Axis);
	
	    module.exports = Axis2D;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var numberUtil = __webpack_require__(28);
	    var linearMap = numberUtil.linearMap;
	    var zrUtil = __webpack_require__(25);
	
	    function fixExtentWithBands(extent, nTick) {
	        var size = extent[1] - extent[0];
	        var len = nTick;
	        var margin = size / len / 2;
	        extent[0] += margin;
	        extent[1] -= margin;
	    }
	
	    var normalizedExtent = [0, 1];
	    /**
	     * @name module:echarts/coord/CartesianAxis
	     * @constructor
	     */
	    var Axis = function (dim, scale, extent) {
	
	        /**
	         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	         * @type {string}
	         */
	        this.dim = dim;
	
	        /**
	         * Axis scale
	         * @type {module:echarts/coord/scale/*}
	         */
	        this.scale = scale;
	
	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        this._extent = extent || [0, 0];
	
	        /**
	         * @type {boolean}
	         */
	        this.inverse = false;
	
	        /**
	         * Usually true when axis has a ordinal scale
	         * @type {boolean}
	         */
	        this.onBand = false;
	    };
	
	    Axis.prototype = {
	
	        constructor: Axis,
	
	        /**
	         * If axis extent contain given coord
	         * @param {number} coord
	         * @return {boolean}
	         */
	        contain: function (coord) {
	            var extent = this._extent;
	            var min = Math.min(extent[0], extent[1]);
	            var max = Math.max(extent[0], extent[1]);
	            return coord >= min && coord <= max;
	        },
	
	        /**
	         * If axis extent contain given data
	         * @param {number} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.contain(this.dataToCoord(data));
	        },
	
	        /**
	         * Get coord extent.
	         * @return {Array.<number>}
	         */
	        getExtent: function () {
	            var ret = this._extent.slice();
	            return ret;
	        },
	
	        /**
	         * Get precision used for formatting
	         * @param {Array.<number>} [dataExtent]
	         * @return {number}
	         */
	        getPixelPrecision: function (dataExtent) {
	            return numberUtil.getPixelPrecision(
	                dataExtent || this.scale.getExtent(),
	                this._extent
	            );
	        },
	
	        /**
	         * Set coord extent
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            var extent = this._extent;
	            extent[0] = start;
	            extent[1] = end;
	        },
	
	        /**
	         * Convert data to coord. Data is the rank if it has a ordinal scale
	         * @param {number} data
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        dataToCoord: function (data, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	            data = scale.normalize(data);
	
	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }
	
	            return linearMap(data, normalizedExtent, extent, clamp);
	        },
	
	        /**
	         * Convert coord to data. Data is the rank if it has a ordinal scale
	         * @param {number} coord
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        coordToData: function (coord, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	
	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }
	
	            var t = linearMap(coord, extent, normalizedExtent, clamp);
	
	            return this.scale.scale(t);
	        },
	        /**
	         * @return {Array.<number>}
	         */
	        getTicksCoords: function (alignWithLabel) {
	            if (this.onBand && !alignWithLabel) {
	                var bands = this.getBands();
	                var coords = [];
	                for (var i = 0; i < bands.length; i++) {
	                    coords.push(bands[i][0]);
	                }
	                if (bands[i - 1]) {
	                    coords.push(bands[i - 1][1]);
	                }
	                return coords;
	            }
	            else {
	                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	            }
	        },
	
	        /**
	         * Coords of labels are on the ticks or on the middle of bands
	         * @return {Array.<number>}
	         */
	        getLabelsCoords: function () {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        },
	
	        /**
	         * Get bands.
	         *
	         * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	         * |---1---|---2---|---3---|---4---|.
	         *
	         * @return {Array}
	         */
	         // FIXME Situation when labels is on ticks
	        getBands: function () {
	            var extent = this.getExtent();
	            var bands = [];
	            var len = this.scale.count();
	            var start = extent[0];
	            var end = extent[1];
	            var span = end - start;
	
	            for (var i = 0; i < len; i++) {
	                bands.push([
	                    span * i / len + start,
	                    span * (i + 1) / len + start
	                ]);
	            }
	            return bands;
	        },
	
	        /**
	         * Get width of band
	         * @return {number}
	         */
	        getBandWidth: function () {
	            var axisExtent = this._extent;
	            var dataExtent = this.scale.getExtent();
	
	            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	            // Fix #2728, avoid NaN when only one data.
	            len === 0 && (len = 1);
	
	            var size = Math.abs(axisExtent[1] - axisExtent[0]);
	
	            return Math.abs(size) / len;
	        },
	
	        /**
	         * When axis extent depends on data and no data exists,
	         * axis ticks should not be drawn, which is named 'blank'.
	         */
	        isBlank: function () {
	            return this._isBlank;
	        },
	
	        /**
	         * When axis extent depends on data and no data exists,
	         * axis ticks should not be drawn, which is named 'blank'.
	         */
	        setBlank: function (isBlank) {
	            this._isBlank = isBlank;
	        }
	
	    };
	
	    module.exports = Axis;


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Helper function for axisLabelInterval calculation
	 */
	
	
	
	    var zrUtil = __webpack_require__(25);
	    var axisHelper = __webpack_require__(136);
	
	    module.exports = function (axis) {
	        var axisModel = axis.model;
	        var labelModel = axisModel.getModel('axisLabel');
	        var labelInterval = labelModel.get('interval');
	        if (!(axis.type === 'category' && labelInterval === 'auto')) {
	            return labelInterval === 'auto' ? 0 : labelInterval;
	        }
	
	        return axisHelper.getAxisLabelInterval(
	            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),
	            axisModel.getFormattedLabels(),
	            labelModel.getModel('textStyle').getFont(),
	            axis.isHorizontal()
	        );
	    };


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖
	
	
	    __webpack_require__(148);
	    var ComponentModel = __webpack_require__(40);
	
	    module.exports = ComponentModel.extend({
	
	        type: 'grid',
	
	        dependencies: ['xAxis', 'yAxis'],
	
	        layoutMode: 'box',
	
	        /**
	         * @type {module:echarts/coord/cartesian/Grid}
	         */
	        coordinateSystem: null,
	
	        defaultOption: {
	            show: false,
	            zlevel: 0,
	            z: 0,
	            left: '10%',
	            top: 60,
	            right: '10%',
	            bottom: 60,
	            // If grid size contain label
	            containLabel: false,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 1,
	            borderColor: '#ccc'
	        }
	    });


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var ComponentModel = __webpack_require__(40);
	    var zrUtil = __webpack_require__(25);
	    var axisModelCreator = __webpack_require__(149);
	
	    var AxisModel = ComponentModel.extend({
	
	        type: 'cartesian2dAxis',
	
	        /**
	         * @type {module:echarts/coord/cartesian/Axis2D}
	         */
	        axis: null,
	
	        /**
	         * @override
	         */
	        init: function () {
	            AxisModel.superApply(this, 'init', arguments);
	            this.resetRange();
	        },
	
	        /**
	         * @override
	         */
	        mergeOption: function () {
	            AxisModel.superApply(this, 'mergeOption', arguments);
	            this.resetRange();
	        },
	
	        /**
	         * @override
	         */
	        restoreData: function () {
	            AxisModel.superApply(this, 'restoreData', arguments);
	            this.resetRange();
	        },
	
	        /**
	         * @override
	         * @return {module:echarts/model/Component}
	         */
	        getCoordSysModel: function () {
	            return this.ecModel.queryComponents({
	                mainType: 'grid',
	                index: this.option.gridIndex,
	                id: this.option.gridId
	            })[0];
	        }
	
	    });
	
	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }
	
	    zrUtil.merge(AxisModel.prototype, __webpack_require__(151));
	
	    var extraOption = {
	        // gridIndex: 0,
	        // gridId: '',
	
	        // Offset is for multiple axis on the same position
	        offset: 0
	    };
	
	    axisModelCreator('x', AxisModel, getAxisType, extraOption);
	    axisModelCreator('y', AxisModel, getAxisType, extraOption);
	
	    module.exports = AxisModel;


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var axisDefault = __webpack_require__(150);
	    var zrUtil = __webpack_require__(25);
	    var ComponentModel = __webpack_require__(40);
	    var layout = __webpack_require__(42);
	
	    // FIXME axisType is fixed ?
	    var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	
	    /**
	     * Generate sub axis model class
	     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	     * @param {module:echarts/model/Component} BaseAxisModelClass
	     * @param {Function} axisTypeDefaulter
	     * @param {Object} [extraDefaultOption]
	     */
	    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	
	        zrUtil.each(AXIS_TYPES, function (axisType) {
	
	            BaseAxisModelClass.extend({
	
	                type: axisName + 'Axis.' + axisType,
	
	                mergeDefaultAndTheme: function (option, ecModel) {
	                    var layoutMode = this.layoutMode;
	                    var inputPositionParams = layoutMode
	                        ? layout.getLayoutParams(option) : {};
	
	                    var themeModel = ecModel.getTheme();
	                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                    zrUtil.merge(option, this.getDefaultOption());
	
	                    option.type = axisTypeDefaulter(axisName, option);
	
	                    if (layoutMode) {
	                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                    }
	                },
	
	                defaultOption: zrUtil.mergeAll(
	                    [
	                        {},
	                        axisDefault[axisType + 'Axis'],
	                        extraDefaultOption
	                    ],
	                    true
	                )
	            });
	        });
	
	        ComponentModel.registerSubTypeDefaulter(
	            axisName + 'Axis',
	            zrUtil.curry(axisTypeDefaulter, axisName)
	        );
	    };


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var defaultOption = {
	        show: true,
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        // 反向坐标轴
	        inverse: false,
	
	        // 坐标轴名字，默认为空
	        name: '',
	        // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	        nameLocation: 'end',
	        // 坐标轴名字旋转，degree。
	        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.
	        nameTruncate: {
	            maxWidth: null,
	            ellipsis: '...',
	            placeholder: '.'
	        },
	        // 坐标轴文字样式，默认取全局样式
	        nameTextStyle: {},
	        // 文字与轴线距离
	        nameGap: 15,
	
	        silent: false, // Default false to support tooltip.
	        triggerEvent: false, // Default false to avoid legacy user event listener fail.
	
	        tooltip: {
	            show: false
	        },
	
	        // 坐标轴线
	        axisLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            onZero: true,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#333',
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // 属性show控制显示与否，默认显示
	            show: true,
	            // 控制小标记是否在grid里
	            inside: false,
	            // 属性length控制线长
	            length: 5,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                width: 1
	            }
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            show: true,
	            // 控制文本标签是否在grid里
	            inside: false,
	            rotate: 0,
	            margin: 8,
	            // formatter: null,
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                fontSize: 12
	            }
	        },
	        // 分隔线
	        splitLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            // 属性lineStyle（详见lineStyle）控制线条样式
	            lineStyle: {
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 分隔区域
	        splitArea: {
	            // 默认不显示，属性show控制显示与否
	            show: false,
	            // 属性areaStyle（详见areaStyle）控制区域样式
	            areaStyle: {
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };
	
	    var categoryAxis = zrUtil.merge({
	        // 类目起始和结束两端空白策略
	        boundaryGap: true,
	        // splitArea: {
	            // show: false
	        // },
	        splitLine: {
	            show: false
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // If tick is align with label when boundaryGap is true
	            // Default with axisTick
	            alignWithLabel: false,
	            interval: 'auto'
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            interval: 'auto'
	        }
	    }, defaultOption);
	
	    var valueAxis = zrUtil.merge({
	        // 数值起始和结束两端空白策略
	        boundaryGap: [0, 0],
	        // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	        // min: null,
	        // 最大值，设置成 'dataMax' 则从数据中计算最大值
	        // max: null,
	        // Readonly prop, specifies start value of the range when using data zoom.
	        // rangeStart: null
	        // Readonly prop, specifies end value of the range when using data zoom.
	        // rangeEnd: null
	        // 脱离0值比例，放大聚焦到最终_min，_max区间
	        // scale: false,
	        // 分割段数，默认为5
	        splitNumber: 5
	        // Minimum interval
	        // minInterval: null
	    }, defaultOption);
	
	    // FIXME
	    var timeAxis = zrUtil.defaults({
	        scale: true,
	        min: 'dataMin',
	        max: 'dataMax'
	    }, valueAxis);
	    var logAxis = zrUtil.defaults({
	        logBase: 10
	    }, valueAxis);
	    logAxis.scale = true;
	
	    module.exports = {
	        categoryAxis: categoryAxis,
	        valueAxis: valueAxis,
	        timeAxis: timeAxis,
	        logAxis: logAxis
	    };


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var axisHelper = __webpack_require__(136);
	
	    function getName(obj) {
	        if (zrUtil.isObject(obj) && obj.value != null) {
	            return obj.value;
	        }
	        else {
	            return obj;
	        }
	    }
	
	    module.exports = {
	
	        /**
	         * Format labels
	         * @return {Array.<string>}
	         */
	        getFormattedLabels: function () {
	            return axisHelper.getFormattedLabels(
	                this.axis,
	                this.get('axisLabel.formatter')
	            );
	        },
	
	        /**
	         * Get categories
	         */
	        getCategories: function () {
	            return this.get('type') === 'category'
	                && zrUtil.map(this.get('data'), getName);
	        },
	
	        /**
	         * @param {boolean} origin
	         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	         */
	        getMin: function (origin) {
	            var option = this.option;
	            var min = (!origin && option.rangeStart != null)
	                ? option.rangeStart : option.min;
	
	            if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {
	                min = this.axis.scale.parse(min);
	            }
	            return min;
	        },
	
	        /**
	         * @param {boolean} origin
	         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	         */
	        getMax: function (origin) {
	            var option = this.option;
	            var max = (!origin && option.rangeEnd != null)
	                ? option.rangeEnd : option.max;
	
	            if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {
	                max = this.axis.scale.parse(max);
	            }
	            return max;
	        },
	
	        /**
	         * @return {boolean}
	         */
	        getNeedCrossZero: function () {
	            var option = this.option;
	            return (option.rangeStart != null || option.rangeEnd != null)
	                ? false : !option.scale;
	        },
	
	        /**
	         * Should be implemented by each axis model if necessary.
	         * @return {module:echarts/model/Component} coordinate system model
	         */
	        getCoordSysModel: zrUtil.noop,
	
	        /**
	         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	         */
	        setRange: function (rangeStart, rangeEnd) {
	            this.option.rangeStart = rangeStart;
	            this.option.rangeEnd = rangeEnd;
	        },
	
	        /**
	         * Reset range
	         */
	        resetRange: function () {
	            // rangeStart and rangeEnd is readonly.
	            this.option.rangeStart = this.option.rangeEnd = null;
	        }
	    };


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO boundaryGap
	
	
	    __webpack_require__(148);
	
	    __webpack_require__(153);


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var AxisBuilder = __webpack_require__(154);
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	    var getInterval = AxisBuilder.getInterval;
	
	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	    var selfBuilderAttrs = [
	        'splitArea', 'splitLine'
	    ];
	
	    // function getAlignWithLabel(model, axisModel) {
	    //     var alignWithLabel = model.get('alignWithLabel');
	    //     if (alignWithLabel === 'auto') {
	    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	    //     }
	    //     return alignWithLabel;
	    // }
	
	    var AxisView = __webpack_require__(22).extendComponentView({
	
	        type: 'axis',
	
	        render: function (axisModel, ecModel) {
	
	            this.group.removeAll();
	
	            var oldAxisGroup = this._axisGroup;
	            this._axisGroup = new graphic.Group();
	
	            this.group.add(this._axisGroup);
	
	            if (!axisModel.get('show')) {
	                return;
	            }
	
	            var gridModel = axisModel.getCoordSysModel();
	
	            var layout = layoutAxis(gridModel, axisModel);
	
	            var axisBuilder = new AxisBuilder(axisModel, layout);
	
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	
	            this._axisGroup.add(axisBuilder.getGroup());
	
	            zrUtil.each(selfBuilderAttrs, function (name) {
	                if (axisModel.get(name + '.show')) {
	                    this['_' + name](axisModel, gridModel, layout.labelInterval);
	                }
	            }, this);
	
	            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	        },
	
	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitLine: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;
	
	            if (axis.isBlank()) {
	                return;
	            }
	
	            var splitLineModel = axisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	
	            var lineInterval = getInterval(splitLineModel, labelInterval);
	
	            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	
	            var gridRect = gridModel.coordinateSystem.getRect();
	            var isHorizontal = axis.isHorizontal();
	
	            var lineCount = 0;
	
	            var ticksCoords = axis.getTicksCoords(
	                // splitLineModel.get('alignWithLabel')
	            );
	            var ticks = axis.scale.getTicks();
	
	            var p1 = [];
	            var p2 = [];
	            // Simple optimization
	            // Batching the lines if color are the same
	            var lineStyle = lineStyleModel.getLineStyle();
	            for (var i = 0; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                    continue;
	                }
	
	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	
	                if (isHorizontal) {
	                    p1[0] = tickCoord;
	                    p1[1] = gridRect.y;
	                    p2[0] = tickCoord;
	                    p2[1] = gridRect.y + gridRect.height;
	                }
	                else {
	                    p1[0] = gridRect.x;
	                    p1[1] = tickCoord;
	                    p2[0] = gridRect.x + gridRect.width;
	                    p2[1] = tickCoord;
	                }
	
	                var colorIndex = (lineCount++) % lineColors.length;
	                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                    anid: 'line_' + ticks[i],
	
	                    shape: {
	                        x1: p1[0],
	                        y1: p1[1],
	                        x2: p2[0],
	                        y2: p2[1]
	                    },
	                    style: zrUtil.defaults({
	                        stroke: lineColors[colorIndex]
	                    }, lineStyle),
	                    silent: true
	                })));
	            }
	        },
	
	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitArea: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;
	
	            if (axis.isBlank()) {
	                return;
	            }
	
	            var splitAreaModel = axisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');
	
	            var gridRect = gridModel.coordinateSystem.getRect();
	
	            var ticksCoords = axis.getTicksCoords(
	                // splitAreaModel.get('alignWithLabel')
	            );
	            var ticks = axis.scale.getTicks();
	
	            var prevX = axis.toGlobalCoord(ticksCoords[0]);
	            var prevY = axis.toGlobalCoord(ticksCoords[0]);
	
	            var count = 0;
	
	            var areaInterval = getInterval(splitAreaModel, labelInterval);
	
	            var areaStyle = areaStyleModel.getAreaStyle();
	            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];
	
	            for (var i = 1; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                    continue;
	                }
	
	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	
	                var x;
	                var y;
	                var width;
	                var height;
	                if (axis.isHorizontal()) {
	                    x = prevX;
	                    y = gridRect.y;
	                    width = tickCoord - x;
	                    height = gridRect.height;
	                }
	                else {
	                    x = gridRect.x;
	                    y = prevY;
	                    width = gridRect.width;
	                    height = tickCoord - y;
	                }
	
	                var colorIndex = (count++) % areaColors.length;
	                this._axisGroup.add(new graphic.Rect({
	                    anid: 'area_' + ticks[i],
	
	                    shape: {
	                        x: x,
	                        y: y,
	                        width: width,
	                        height: height
	                    },
	                    style: zrUtil.defaults({
	                        fill: areaColors[colorIndex]
	                    }, areaStyle),
	                    silent: true
	                }));
	
	                prevX = x + width;
	                prevY = y + height;
	            }
	        }
	    });
	
	    AxisView.extend({
	        type: 'xAxis'
	    });
	    AxisView.extend({
	        type: 'yAxis'
	    });
	
	    /**
	     * @inner
	     */
	    function layoutAxis(gridModel, axisModel) {
	        var grid = gridModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};
	
	        var rawAxisPosition = axis.position;
	        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	        var axisDim = axis.dim;
	
	        // [left, right, top, bottom]
	        var rect = grid.getRect();
	        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	
	        var axisOffset = axisModel.get('offset') || 0;
	
	        var posMap = {
	            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },
	            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }
	        };
	
	        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);
	
	        function getZero(dim, val) {
	            var theAxis = grid.getAxis(dim);
	            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	        }
	
	        // Axis position
	        layout.position = [
	            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],
	            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]
	        ];
	
	        // Axis rotation
	        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);
	
	        // Tick and label direction, x y is axisDim
	        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};
	
	        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	        if (axis.onZero) {
	            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	        }
	
	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }
	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }
	
	        // Special label rotation
	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;
	
	        // label interval when auto mode.
	        layout.labelInterval = axis.getLabelInterval();
	
	        // Over splitLine and splitArea
	        layout.z2 = 1;
	
	        return layout;
	    }


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var formatUtil = __webpack_require__(27);
	    var graphic = __webpack_require__(64);
	    var Model = __webpack_require__(33);
	    var numberUtil = __webpack_require__(28);
	    var remRadian = numberUtil.remRadian;
	    var isRadianAroundZero = numberUtil.isRadianAroundZero;
	    var vec2 = __webpack_require__(31);
	    var v2ApplyTransform = vec2.applyTransform;
	    var retrieve = zrUtil.retrieve;
	
	    var PI = Math.PI;
	
	    function makeAxisEventDataBase(axisModel) {
	        var eventData = {
	            componentType: axisModel.mainType
	        };
	        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	        return eventData;
	    }
	
	    /**
	     * A final axis is translated and rotated from a "standard axis".
	     * So opt.position and opt.rotation is required.
	     *
	     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	     * for example: (0, 0) ------------> (0, 50)
	     *
	     * nameDirection or tickDirection or labelDirection is 1 means tick
	     * or label is below the standard axis, whereas is -1 means above
	     * the standard axis. labelOffset means offset between label and axis,
	     * which is useful when 'onZero', where axisLabel is in the grid and
	     * label in outside grid.
	     *
	     * Tips: like always,
	     * positive rotation represents anticlockwise, and negative rotation
	     * represents clockwise.
	     * The direction of position coordinate is the same as the direction
	     * of screen coordinate.
	     *
	     * Do not need to consider axis 'inverse', which is auto processed by
	     * axis extent.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} axisModel
	     * @param {Object} opt Standard axis parameters.
	     * @param {Array.<number>} opt.position [x, y]
	     * @param {number} opt.rotation by radian
	     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	     * @param {number} [opt.tickDirection=1] 1 or -1
	     * @param {number} [opt.labelDirection=1] 1 or -1
	     * @param {number} [opt.labelOffset=0] Usefull when onZero.
	     * @param {string} [opt.axisLabelShow] default get from axisModel.
	     * @param {string} [opt.axisName] default get from axisModel.
	     * @param {number} [opt.axisNameAvailableWidth]
	     * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	     * @param {number} [opt.labelInterval] Default label interval when label
	     *                                     interval from model is null or 'auto'.
	     * @param {number} [opt.strokeContainThreshold] Default label interval when label
	     */
	    var AxisBuilder = function (axisModel, opt) {
	
	        /**
	         * @readOnly
	         */
	        this.opt = opt;
	
	        /**
	         * @readOnly
	         */
	        this.axisModel = axisModel;
	
	        // Default value
	        zrUtil.defaults(
	            opt,
	            {
	                labelOffset: 0,
	                nameDirection: 1,
	                tickDirection: 1,
	                labelDirection: 1,
	                silent: true
	            }
	        );
	
	        /**
	         * @readOnly
	         */
	        this.group = new graphic.Group();
	
	        // FIXME Not use a seperate text group?
	        var dumbGroup = new graphic.Group({
	            position: opt.position.slice(),
	            rotation: opt.rotation
	        });
	
	        // this.group.add(dumbGroup);
	        // this._dumbGroup = dumbGroup;
	
	        dumbGroup.updateTransform();
	        this._transform = dumbGroup.transform;
	
	        this._dumbGroup = dumbGroup;
	    };
	
	    AxisBuilder.prototype = {
	
	        constructor: AxisBuilder,
	
	        hasBuilder: function (name) {
	            return !!builders[name];
	        },
	
	        add: function (name) {
	            builders[name].call(this);
	        },
	
	        getGroup: function () {
	            return this.group;
	        }
	
	    };
	
	    var builders = {
	
	        /**
	         * @private
	         */
	        axisLine: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;
	
	            if (!axisModel.get('axisLine.show')) {
	                return;
	            }
	
	            var extent = this.axisModel.axis.getExtent();
	
	            var matrix = this._transform;
	            var pt1 = [extent[0], 0];
	            var pt2 = [extent[1], 0];
	            if (matrix) {
	                v2ApplyTransform(pt1, pt1, matrix);
	                v2ApplyTransform(pt2, pt2, matrix);
	            }
	
	            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	
	                // Id for animation
	                anid: 'line',
	
	                shape: {
	                    x1: pt1[0],
	                    y1: pt1[1],
	                    x2: pt2[0],
	                    y2: pt2[1]
	                },
	                style: zrUtil.extend(
	                    {lineCap: 'round'},
	                    axisModel.getModel('axisLine.lineStyle').getLineStyle()
	                ),
	                strokeContainThreshold: opt.strokeContainThreshold || 5,
	                silent: true,
	                z2: 1
	            })));
	        },
	
	        /**
	         * @private
	         */
	        axisTick: function () {
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;
	
	            if (!axisModel.get('axisTick.show') || axis.isBlank()) {
	                return;
	            }
	
	            var tickModel = axisModel.getModel('axisTick');
	            var opt = this.opt;
	
	            var lineStyleModel = tickModel.getModel('lineStyle');
	            var tickLen = tickModel.get('length');
	
	            var tickInterval = getInterval(tickModel, opt.labelInterval);
	            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));
	            var ticks = axis.scale.getTicks();
	
	            var pt1 = [];
	            var pt2 = [];
	            var matrix = this._transform;
	
	            for (var i = 0; i < ticksCoords.length; i++) {
	                // Only ordinal scale support tick interval
	                if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                     continue;
	                }
	
	                var tickCoord = ticksCoords[i];
	
	                pt1[0] = tickCoord;
	                pt1[1] = 0;
	                pt2[0] = tickCoord;
	                pt2[1] = opt.tickDirection * tickLen;
	
	                if (matrix) {
	                    v2ApplyTransform(pt1, pt1, matrix);
	                    v2ApplyTransform(pt2, pt2, matrix);
	                }
	                // Tick line, Not use group transform to have better line draw
	                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({
	
	                    // Id for animation
	                    anid: 'tick_' + ticks[i],
	
	                    shape: {
	                        x1: pt1[0],
	                        y1: pt1[1],
	                        x2: pt2[0],
	                        y2: pt2[1]
	                    },
	                    style: zrUtil.defaults(
	                        lineStyleModel.getLineStyle(),
	                        {
	                            stroke: axisModel.get('axisLine.lineStyle.color')
	                        }
	                    ),
	                    z2: 2,
	                    silent: true
	                })));
	            }
	        },
	
	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @private
	         */
	        axisLabel: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;
	            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));
	
	            if (!show || axis.isBlank()) {
	                return;
	            }
	
	            var labelModel = axisModel.getModel('axisLabel');
	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelMargin = labelModel.get('margin');
	            var ticks = axis.scale.getTicks();
	            var labels = axisModel.getFormattedLabels();
	
	            // Special label rotate.
	            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;
	            // To radian.
	            labelRotation = labelRotation * PI / 180;
	
	            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	            var categoryData = axisModel.get('data');
	
	            var textEls = [];
	            var silent = isSilent(axisModel);
	            var triggerEvent = axisModel.get('triggerEvent');
	
	            zrUtil.each(ticks, function (tickVal, index) {
	                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {
	                     return;
	                }
	
	                var itemTextStyleModel = textStyleModel;
	                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {
	                    itemTextStyleModel = new Model(
	                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel
	                    );
	                }
	                var textColor = itemTextStyleModel.getTextColor()
	                    || axisModel.get('axisLine.lineStyle.color');
	
	                var tickCoord = axis.dataToCoord(tickVal);
	                var pos = [
	                    tickCoord,
	                    opt.labelOffset + opt.labelDirection * labelMargin
	                ];
	                var labelBeforeFormat = axis.scale.getLabel(tickVal);
	
	                var textEl = new graphic.Text({
	
	                    // Id for animation
	                    anid: 'label_' + tickVal,
	
	                    style: {
	                        text: labels[index],
	                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                        textFont: itemTextStyleModel.getFont(),
	                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor
	                    },
	                    position: pos,
	                    rotation: labelLayout.rotation,
	                    silent: silent,
	                    z2: 10
	                });
	
	                // Pack data for mouse event
	                if (triggerEvent) {
	                    textEl.eventData = makeAxisEventDataBase(axisModel);
	                    textEl.eventData.targetType = 'axisLabel';
	                    textEl.eventData.value = labelBeforeFormat;
	                }
	
	                // FIXME
	                this._dumbGroup.add(textEl);
	                textEl.updateTransform();
	
	                textEls.push(textEl);
	                this.group.add(textEl);
	
	                textEl.decomposeTransform();
	
	            }, this);
	
	            function isTwoLabelOverlapped(current, next) {
	                var firstRect = current && current.getBoundingRect().clone();
	                var nextRect = next && next.getBoundingRect().clone();
	                if (firstRect && nextRect) {
	                    firstRect.applyTransform(current.getLocalTransform());
	                    nextRect.applyTransform(next.getLocalTransform());
	                    return firstRect.intersect(nextRect);
	                }
	            }
	
	            // If min or max are user set, we need to check
	            // If the tick on min(max) are overlap on their neighbour tick
	            // If they are overlapped, we need to hide the min(max) tick label
	            if (axisModel.getMin() != null) {
	                var firstLabel = textEls[0];
	                var nextLabel = textEls[1];
	                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                    firstLabel.ignore = true;
	                }
	            }
	            if (axisModel.getMax() != null) {
	                var lastLabel = textEls[textEls.length - 1];
	                var prevLabel = textEls[textEls.length - 2];
	                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                    lastLabel.ignore = true;
	                }
	            }
	        },
	
	        /**
	         * @private
	         */
	        axisName: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;
	            var name = retrieve(opt.axisName, axisModel.get('name'));
	
	            if (!name) {
	                return;
	            }
	
	            var nameLocation = axisModel.get('nameLocation');
	            var nameDirection = opt.nameDirection;
	            var textStyleModel = axisModel.getModel('nameTextStyle');
	            var gap = axisModel.get('nameGap') || 0;
	
	            var extent = this.axisModel.axis.getExtent();
	            var gapSignal = extent[0] > extent[1] ? -1 : 1;
	            var pos = [
	                nameLocation === 'start'
	                    ? extent[0] - gapSignal * gap
	                    : nameLocation === 'end'
	                    ? extent[1] + gapSignal * gap
	                    : (extent[0] + extent[1]) / 2, // 'middle'
	                // Reuse labelOffset.
	                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0
	            ];
	
	            var labelLayout;
	
	            var nameRotation = axisModel.get('nameRotate');
	            if (nameRotation != null) {
	                nameRotation = nameRotation * PI / 180; // To radian.
	            }
	
	            var axisNameAvailableWidth;
	
	            if (nameLocation === 'middle') {
	                labelLayout = innerTextLayout(
	                    opt,
	                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	                    nameDirection
	                );
	            }
	            else {
	                labelLayout = endTextLayout(
	                    opt, nameLocation, nameRotation || 0, extent
	                );
	
	                axisNameAvailableWidth = opt.axisNameAvailableWidth;
	                if (axisNameAvailableWidth != null) {
	                    axisNameAvailableWidth = Math.abs(
	                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)
	                    );
	                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	                }
	            }
	
	            var textFont = textStyleModel.getFont();
	
	            var truncateOpt = axisModel.get('nameTruncate', true) || {};
	            var ellipsis = truncateOpt.ellipsis;
	            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);
	            var truncatedText = (ellipsis != null && maxWidth != null)
	                ? formatUtil.truncateText(
	                    name, maxWidth, textFont, ellipsis,
	                    {minChar: 2, placeholder: truncateOpt.placeholder}
	                )
	                : name;
	
	            var tooltipOpt = axisModel.get('tooltip', true);
	
	            var mainType = axisModel.mainType;
	            var formatterParams = {
	                componentType: mainType,
	                name: name,
	                $vars: ['name']
	            };
	            formatterParams[mainType + 'Index'] = axisModel.componentIndex;
	
	            var textEl = new graphic.Text({
	
	                // Id for animation
	                anid: 'name',
	
	                __fullText: name,
	                __truncatedText: truncatedText,
	
	                style: {
	                    text: truncatedText,
	                    textFont: textFont,
	                    fill: textStyleModel.getTextColor()
	                        || axisModel.get('axisLine.lineStyle.color'),
	                    textAlign: labelLayout.textAlign,
	                    textVerticalAlign: labelLayout.verticalAlign
	                },
	                position: pos,
	                rotation: labelLayout.rotation,
	                silent: isSilent(axisModel),
	                z2: 1,
	                tooltip: (tooltipOpt && tooltipOpt.show)
	                    ? zrUtil.extend({
	                        content: name,
	                        formatter: function () {
	                            return name;
	                        },
	                        formatterParams: formatterParams
	                    }, tooltipOpt)
	                    : null
	            });
	
	            if (axisModel.get('triggerEvent')) {
	                textEl.eventData = makeAxisEventDataBase(axisModel);
	                textEl.eventData.targetType = 'axisName';
	                textEl.eventData.name = name;
	            }
	
	            // FIXME
	            this._dumbGroup.add(textEl);
	            textEl.updateTransform();
	
	            this.group.add(textEl);
	
	            textEl.decomposeTransform();
	        }
	
	    };
	
	    /**
	     * @inner
	     */
	    function innerTextLayout(opt, textRotation, direction) {
	        var rotationDiff = remRadian(textRotation - opt.rotation);
	        var textAlign;
	        var verticalAlign;
	
	        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.
	            verticalAlign = direction > 0 ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.
	            verticalAlign = direction > 0 ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';
	
	            if (rotationDiff > 0 && rotationDiff < PI) {
	                textAlign = direction > 0 ? 'right' : 'left';
	            }
	            else {
	                textAlign = direction > 0 ? 'left' : 'right';
	            }
	        }
	
	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }
	
	    /**
	     * @inner
	     */
	    function endTextLayout(opt, textPosition, textRotate, extent) {
	        var rotationDiff = remRadian(textRotate - opt.rotation);
	        var textAlign;
	        var verticalAlign;
	        var inverse = extent[0] > extent[1];
	        var onLeft = (textPosition === 'start' && !inverse)
	            || (textPosition !== 'start' && inverse);
	
	        if (isRadianAroundZero(rotationDiff - PI / 2)) {
	            verticalAlign = onLeft ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	            verticalAlign = onLeft ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';
	            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	                textAlign = onLeft ? 'left' : 'right';
	            }
	            else {
	                textAlign = onLeft ? 'right' : 'left';
	            }
	        }
	
	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }
	
	    /**
	     * @inner
	     */
	    function isSilent(axisModel) {
	        var tooltipOpt = axisModel.get('tooltip');
	        return axisModel.get('silent')
	            // Consider mouse cursor, add these restrictions.
	            || !(
	                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)
	            );
	    }
	
	    /**
	     * @static
	     */
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	        var rawTick;
	        var scale = axis.scale;
	        return scale.type === 'ordinal'
	            && (
	                typeof interval === 'function'
	                    ? (
	                        rawTick = scale.getTicks()[i],
	                        !interval(rawTick, scale.getLabel(rawTick))
	                    )
	                    : i % (interval + 1)
	            );
	    };
	
	    /**
	     * @static
	     */
	    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	        var interval = model.get('interval');
	        if (interval == null || interval == 'auto') {
	            interval = labelInterval;
	        }
	        return interval;
	    };
	
	    module.exports = AxisBuilder;
	


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    __webpack_require__(135);
	
	    __webpack_require__(156);
	    __webpack_require__(158);
	
	    var barLayoutGrid = __webpack_require__(161);
	    var echarts = __webpack_require__(22);
	
	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	    // Visual coding for legend
	    echarts.registerVisual(function (ecModel) {
	        ecModel.eachSeriesByType('bar', function (seriesModel) {
	            var data = seriesModel.getData();
	            data.setVisual('legendSymbol', 'roundRect');
	        });
	    });
	
	    // In case developer forget to include grid component
	    __webpack_require__(134);


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(157).extend({
	
	        type: 'series.bar',
	
	        dependencies: ['grid', 'polar'],
	
	        brushSelector: 'rect'
	    });


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var SeriesModel = __webpack_require__(49);
	    var createListFromArray = __webpack_require__(123);
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.__base_bar__',
	
	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'cartesian2d') {
	                    throw new Error('Bar only support cartesian2d coordinateSystem');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },
	
	        getMarkerPosition: function (value) {
	            var coordSys = this.coordinateSystem;
	            if (coordSys) {
	                // PENDING if clamp ?
	                var pt = coordSys.dataToPoint(value, true);
	                var data = this.getData();
	                var offset = data.getLayout('offset');
	                var size = data.getLayout('size');
	                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	                pt[offsetIndex] += offset + size / 2;
	                return pt;
	            }
	            return [NaN, NaN];
	        },
	
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	            // stack: null
	
	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            // 最小高度改为0
	            barMinHeight: 0,
	
	            // barMaxWidth: null,
	            // 默认自适应
	            // barWidth: null,
	            // 柱间距离，默认为柱形宽度的30%，可设固定值
	            // barGap: '30%',
	            // 类目间柱形距离，默认为类目间距的20%，可设固定值
	            // barCategoryGap: '20%',
	            // label: {
	            //     normal: {
	            //         show: false
	            //     }
	            // },
	            itemStyle: {
	                normal: {
	                    // color: '各异'
	                },
	                emphasis: {}
	            }
	        }
	    });


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var helper = __webpack_require__(159);
	
	    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];
	
	    // FIXME
	    // Just for compatible with ec2.
	    zrUtil.extend(__webpack_require__(33).prototype, __webpack_require__(160));
	
	    var BarView = __webpack_require__(22).extendChartView({
	
	        type: 'bar',
	
	        render: function (seriesModel, ecModel, api) {
	            var coordinateSystemType = seriesModel.get('coordinateSystem');
	
	            if (coordinateSystemType === 'cartesian2d') {
	                this._renderOnCartesian(seriesModel, ecModel, api);
	            }
	
	            return this.group;
	        },
	
	        dispose: zrUtil.noop,
	
	        _renderOnCartesian: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;
	
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = baseAxis.isHorizontal();
	            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
	
	            data.diff(oldData)
	                .add(function (dataIndex) {
	                    if (!data.hasValue(dataIndex)) {
	                        return;
	                    }
	
	                    var itemModel = data.getItemModel(dataIndex);
	                    var layout = getRectItemLayout(data, dataIndex, itemModel);
	                    var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);
	                    data.setItemGraphicEl(dataIndex, el);
	                    group.add(el);
	
	                    updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);
	                })
	                .update(function (newIndex, oldIndex) {
	                    var el = oldData.getItemGraphicEl(oldIndex);
	
	                    if (!data.hasValue(newIndex)) {
	                        group.remove(el);
	                        return;
	                    }
	
	                    var itemModel = data.getItemModel(newIndex);
	                    var layout = getRectItemLayout(data, newIndex, itemModel);
	
	                    if (el) {
	                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);
	                    }
	                    else {
	                        el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);
	                    }
	
	                    data.setItemGraphicEl(newIndex, el);
	                    // Add back
	                    group.add(el);
	
	                    updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);
	                })
	                .remove(function (dataIndex) {
	                    var el = oldData.getItemGraphicEl(dataIndex);
	                    el && removeRect(dataIndex, animationModel, el);
	                })
	                .execute();
	
	            this._data = data;
	        },
	
	        remove: function (ecModel, api) {
	            var group = this.group;
	            var data = this._data;
	            if (ecModel.get('animation')) {
	                if (data) {
	                    data.eachItemGraphicEl(function (el) {
	                        removeRect(el.dataIndex, ecModel, el);
	                    });
	                }
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    });
	
	    function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	        var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});
	
	        // Animation
	        if (animationModel) {
	            var rectShape = rect.shape;
	            var animateProperty = isHorizontal ? 'height' : 'width';
	            var animateTarget = {};
	            rectShape[animateProperty] = 0;
	            animateTarget[animateProperty] = layout[animateProperty];
	            graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	                shape: animateTarget
	            }, animationModel, dataIndex);
	        }
	
	        return rect;
	    }
	
	    function removeRect(dataIndex, animationModel, el) {
	        // Not show text when animating
	        el.style.text = '';
	        graphic.updateProps(el, {
	            shape: {
	                width: 0
	            }
	        }, animationModel, dataIndex, function () {
	            el.parent && el.parent.remove(el);
	        });
	    }
	
	    function getRectItemLayout(data, dataIndex, itemModel) {
	        var layout = data.getItemLayout(dataIndex);
	        var fixedLineWidth = getLineWidth(itemModel, layout);
	
	        // fix layout with lineWidth
	        var signX = layout.width > 0 ? 1 : -1;
	        var signY = layout.height > 0 ? 1 : -1;
	        return {
	            x: layout.x + signX * fixedLineWidth / 2,
	            y: layout.y + signY * fixedLineWidth / 2,
	            width: layout.width - signX * fixedLineWidth,
	            height: layout.height - signY * fixedLineWidth
	        };
	    }
	
	    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {
	        var color = data.getItemVisual(dataIndex, 'color');
	        var opacity = data.getItemVisual(dataIndex, 'opacity');
	        var itemStyleModel = itemModel.getModel('itemStyle.normal');
	        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();
	
	        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	
	        el.useStyle(zrUtil.defaults(
	            {
	                fill: color,
	                opacity: opacity
	            },
	            itemStyleModel.getBarItemStyle()
	        ));
	
	        var labelPositionOutside = isHorizontal
	            ? (layout.height > 0 ? 'bottom' : 'top')
	            : (layout.width > 0 ? 'left' : 'right');
	
	        helper.setLabel(
	            el.style, hoverStyle, itemModel, color,
	            seriesModel, dataIndex, labelPositionOutside
	        );
	
	        graphic.setHoverStyle(el, hoverStyle);
	    }
	
	    // In case width or height are too small.
	    function getLineWidth(itemModel, rawLayout) {
	        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	    }
	
	    module.exports = BarView;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	
	    var helper = {};
	
	    helper.setLabel = function (
	        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside
	    ) {
	        var labelModel = itemModel.getModel('label.normal');
	        var hoverLabelModel = itemModel.getModel('label.emphasis');
	
	        if (labelModel.get('show')) {
	            setLabel(
	                normalStyle, labelModel, color,
	                zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(dataIndex, 'normal'),
	                    seriesModel.getRawValue(dataIndex)
	                ),
	                labelPositionOutside
	            );
	        }
	        else {
	            normalStyle.text = '';
	        }
	
	        if (hoverLabelModel.get('show')) {
	            setLabel(
	                hoverStyle, hoverLabelModel, color,
	                zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),
	                    seriesModel.getRawValue(dataIndex)
	                ),
	                labelPositionOutside
	            );
	        }
	        else {
	            hoverStyle.text = '';
	        }
	    };
	
	    function setLabel(style, model, color, labelText, labelPositionOutside) {
	        graphic.setText(style, model, color);
	        style.text = labelText;
	        if (style.textPosition === 'outside') {
	            style.textPosition = labelPositionOutside;
	        }
	    }
	
	    module.exports = helper;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	
	
	
	    var getBarItemStyle = __webpack_require__(36)(
	        [
	            ['fill', 'color'],
	            ['stroke', 'borderColor'],
	            ['lineWidth', 'borderWidth'],
	            // Compatitable with 2
	            ['stroke', 'barBorderColor'],
	            ['lineWidth', 'barBorderWidth'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]
	    );
	    module.exports = {
	        getBarItemStyle: function (excludes) {
	            var style = getBarItemStyle.call(this, excludes);
	            if (this.getBorderLineDash) {
	                var lineDash = this.getBorderLineDash();
	                lineDash && (style.lineDash = lineDash);
	            }
	            return style;
	        }
	    };


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var parsePercent = numberUtil.parsePercent;
	
	    function getSeriesStackId(seriesModel) {
	        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	    }
	
	    function getAxisKey(axis) {
	        return axis.dim + axis.index;
	    }
	
	    function calBarWidthAndOffset(barSeries, api) {
	        // Columns info on each category axis. Key is cartesian name
	        var columnsMap = {};
	
	        zrUtil.each(barSeries, function (seriesModel, idx) {
	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	
	            var baseAxis = cartesian.getBaseAxis();
	            var axisExtent = baseAxis.getExtent();
	            var bandWidth = baseAxis.type === 'category'
	                ? baseAxis.getBandWidth()
	                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());
	
	            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {
	                bandWidth: bandWidth,
	                remainedWidth: bandWidth,
	                autoWidthCount: 0,
	                categoryGap: '20%',
	                gap: '30%',
	                stacks: {}
	            };
	            var stacks = columnsOnAxis.stacks;
	            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;
	
	            var stackId = getSeriesStackId(seriesModel);
	
	            if (!stacks[stackId]) {
	                columnsOnAxis.autoWidthCount++;
	            }
	            stacks[stackId] = stacks[stackId] || {
	                width: 0,
	                maxWidth: 0
	            };
	
	            var barWidth = parsePercent(
	                seriesModel.get('barWidth'), bandWidth
	            );
	            var barMaxWidth = parsePercent(
	                seriesModel.get('barMaxWidth'), bandWidth
	            );
	            var barGap = seriesModel.get('barGap');
	            var barCategoryGap = seriesModel.get('barCategoryGap');
	
	            // Caution: In a single coordinate system, these barGrid attributes
	            // will be shared by series. Consider that they have default values,
	            // only the attributes set on the last series will work.
	            // Do not change this fact unless there will be a break change.
	
	            // TODO
	            if (barWidth && !stacks[stackId].width) {
	                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	                stacks[stackId].width = barWidth;
	                columnsOnAxis.remainedWidth -= barWidth;
	            }
	
	            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	            (barGap != null) && (columnsOnAxis.gap = barGap);
	            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);
	        });
	
	        var result = {};
	
	        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	
	            result[coordSysName] = {};
	
	            var stacks = columnsOnAxis.stacks;
	            var bandWidth = columnsOnAxis.bandWidth;
	            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	
	            var remainedWidth = columnsOnAxis.remainedWidth;
	            var autoWidthCount = columnsOnAxis.autoWidthCount;
	            var autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);
	
	            // Find if any auto calculated bar exceeded maxBarWidth
	            zrUtil.each(stacks, function (column, stack) {
	                var maxWidth = column.maxWidth;
	                if (!column.width && maxWidth && maxWidth < autoWidth) {
	                    maxWidth = Math.min(maxWidth, remainedWidth);
	                    remainedWidth -= maxWidth;
	                    column.width = maxWidth;
	                    autoWidthCount--;
	                }
	            });
	
	            // Recalculate width again
	            autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);
	
	            var widthSum = 0;
	            var lastColumn;
	            zrUtil.each(stacks, function (column, idx) {
	                if (!column.width) {
	                    column.width = autoWidth;
	                }
	                lastColumn = column;
	                widthSum += column.width * (1 + barGapPercent);
	            });
	            if (lastColumn) {
	                widthSum -= lastColumn.width * barGapPercent;
	            }
	
	            var offset = -widthSum / 2;
	            zrUtil.each(stacks, function (column, stackId) {
	                result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                    offset: offset,
	                    width: column.width
	                };
	
	                offset += column.width * (1 + barGapPercent);
	            });
	        });
	
	        return result;
	    }
	
	    /**
	     * @param {string} seriesType
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function barLayoutGrid(seriesType, ecModel, api) {
	
	        var barWidthAndOffset = calBarWidthAndOffset(
	            zrUtil.filter(
	                ecModel.getSeriesByType(seriesType),
	                function (seriesModel) {
	                    return !ecModel.isSeriesFiltered(seriesModel)
	                        && seriesModel.coordinateSystem
	                        && seriesModel.coordinateSystem.type === 'cartesian2d';
	                }
	            )
	        );
	
	        var lastStackCoords = {};
	        var lastStackCoordsOrigin = {};
	
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	
	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	
	            var stackId = getSeriesStackId(seriesModel);
	            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	            var columnOffset = columnLayoutInfo.offset;
	            var columnWidth = columnLayoutInfo.width;
	            var valueAxis = cartesian.getOtherAxis(baseAxis);
	
	            var barMinHeight = seriesModel.get('barMinHeight') || 0;
	
	            var valueAxisStart = baseAxis.onZero
	                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))
	                : valueAxis.getGlobalExtent()[0];
	
	            var coords = cartesian.dataToPoints(data, true);
	            lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243
	
	            data.setLayout({
	                offset: columnOffset,
	                size: columnWidth
	            });
	
	            data.each(valueAxis.dim, function (value, idx) {
	                if (isNaN(value)) {
	                    return;
	                }
	
	                if (!lastStackCoords[stackId][idx]) {
	                    lastStackCoords[stackId][idx] = {
	                        p: valueAxisStart, // Positive stack
	                        n: valueAxisStart  // Negative stack
	                    };
	                    lastStackCoordsOrigin[stackId][idx] = {
	                        p: valueAxisStart, // Positive stack
	                        n: valueAxisStart  // Negative stack
	                    };
	                }
	                var sign = value >= 0 ? 'p' : 'n';
	                var coord = coords[idx];
	                var lastCoord = lastStackCoords[stackId][idx][sign];
	                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];
	                var x;
	                var y;
	                var width;
	                var height;
	
	                if (valueAxis.isHorizontal()) {
	                    x = lastCoord;
	                    y = coord[1] + columnOffset;
	                    width = coord[0] - lastCoordOrigin;
	                    height = columnWidth;
	
	                    lastStackCoordsOrigin[stackId][idx][sign] += width;
	                    if (Math.abs(width) < barMinHeight) {
	                        width = (width < 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += width;
	                }
	                else {
	                    x = coord[0] + columnOffset;
	                    y = lastCoord;
	                    width = columnWidth;
	                    height = coord[1] - lastCoordOrigin;
	
	                    lastStackCoordsOrigin[stackId][idx][sign] += height;
	                    if (Math.abs(height) < barMinHeight) {
	                        // Include zero to has a positive bar
	                        height = (height <= 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += height;
	                }
	
	                data.setItemLayout(idx, {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }, true);
	
	        }, this);
	    }
	
	    module.exports = barLayoutGrid;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(163);
	    __webpack_require__(165);
	
	    __webpack_require__(166)('pie', [{
	        type: 'pieToggleSelect',
	        event: 'pieselectchanged',
	        method: 'toggleSelected'
	    }, {
	        type: 'pieSelect',
	        event: 'pieselected',
	        method: 'select'
	    }, {
	        type: 'pieUnSelect',
	        event: 'pieunselected',
	        method: 'unSelect'
	    }]);
	
	    echarts.registerVisual(zrUtil.curry(__webpack_require__(167), 'pie'));
	
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(168), 'pie'
	    ));
	
	    echarts.registerProcessor(zrUtil.curry(__webpack_require__(170), 'pie'));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var completeDimensions = __webpack_require__(124);
	
	    var dataSelectableMixin = __webpack_require__(164);
	
	    var PieSeries = __webpack_require__(22).extendSeriesModel({
	
	        type: 'series.pie',
	
	        // Overwrite
	        init: function (option) {
	            PieSeries.superApply(this, 'init', arguments);
	
	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	
	            this.updateSelectedMap(option.data);
	
	            this._defaultLabelLine(option);
	        },
	
	        // Overwrite
	        mergeOption: function (newOption) {
	            PieSeries.superCall(this, 'mergeOption', newOption);
	            this.updateSelectedMap(this.option.data);
	        },
	
	        getInitialData: function (option, ecModel) {
	            var dimensions = completeDimensions(['value'], option.data);
	            var list = new List(dimensions, this);
	            list.initData(option.data);
	            return list;
	        },
	
	        // Overwrite
	        getDataParams: function (dataIndex) {
	            var data = this.getData();
	            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	            var sum = data.getSum('value');
	            // FIXME toFixed?
	            //
	            // Percent is 0 if sum is 0
	            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);
	
	            params.$vars.push('percent');
	            return params;
	        },
	
	        _defaultLabelLine: function (option) {
	            // Extend labelLine emphasis
	            modelUtil.defaultEmphasis(option.labelLine, ['show']);
	
	            var labelLineNormalOpt = option.labelLine.normal;
	            var labelLineEmphasisOpt = option.labelLine.emphasis;
	            // Not show label line if `label.normal.show = false`
	            labelLineNormalOpt.show = labelLineNormalOpt.show
	                && option.label.normal.show;
	            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
	                && option.label.emphasis.show;
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	            // 默认全局居中
	            center: ['50%', '50%'],
	            radius: [0, '75%'],
	            // 默认顺时针
	            clockwise: true,
	            startAngle: 90,
	            // 最小角度改为0
	            minAngle: 0,
	            // 选中是扇区偏移量
	            selectedOffset: 10,
	
	            // If use strategy to avoid label overlapping
	            avoidLabelOverlap: true,
	            // 选择模式，默认关闭，可选single，multiple
	            // selectedMode: false,
	            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	            // roseType: null,
	
	            // If still show when all data zero.
	            stillShowZeroSum: true,
	
	            label: {
	                normal: {
	                    // If rotate around circle
	                    rotate: false,
	                    show: true,
	                    // 'outer', 'inside', 'center'
	                    position: 'outer'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
	                },
	                emphasis: {}
	            },
	            // Enabled when label.normal.position is 'outer'
	            labelLine: {
	                normal: {
	                    show: true,
	                    // 引导线两段中的第一段长度
	                    length: 15,
	                    // 引导线两段中的第二段长度
	                    length2: 15,
	                    smooth: false,
	                    lineStyle: {
	                        // color: 各异,
	                        width: 1,
	                        type: 'solid'
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    borderWidth: 1
	                },
	                emphasis: {}
	            },
	
	            // Animation type canbe expansion, scale
	            animationType: 'expansion',
	
	            animationEasing: 'cubicOut',
	
	            data: []
	        }
	    });
	
	    zrUtil.mixin(PieSeries, dataSelectableMixin);
	
	    module.exports = PieSeries;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 *
	 * @module echarts/chart/helper/DataSelectable
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = {
	
	        updateSelectedMap: function (targetList) {
	            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	                targetMap[target.name] = target;
	                return targetMap;
	            }, {});
	        },
	        /**
	         * @param {string} name
	         */
	        // PENGING If selectedMode is null ?
	        select: function (name) {
	            var targetMap = this._selectTargetMap;
	            var target = targetMap[name];
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                zrUtil.each(targetMap, function (target) {
	                    target.selected = false;
	                });
	            }
	            target && (target.selected = true);
	        },
	
	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            var target = this._selectTargetMap[name];
	            // var selectedMode = this.get('selectedMode');
	            // selectedMode !== 'single' && target && (target.selected = false);
	            target && (target.selected = false);
	        },
	
	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            if (target != null) {
	                this[target.selected ? 'unSelect' : 'select'](name);
	                return target.selected;
	            }
	        },
	
	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            return target && target.selected;
	        }
	    };


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	        var data = seriesModel.getData();
	        var dataIndex = this.dataIndex;
	        var name = data.getName(dataIndex);
	        var selectedOffset = seriesModel.get('selectedOffset');
	
	        api.dispatchAction({
	            type: 'pieToggleSelect',
	            from: uid,
	            name: name,
	            seriesId: seriesModel.id
	        });
	
	        data.each(function (idx) {
	            toggleItemSelected(
	                data.getItemGraphicEl(idx),
	                data.getItemLayout(idx),
	                seriesModel.isSelected(data.getName(idx)),
	                selectedOffset,
	                hasAnimation
	            );
	        });
	    }
	
	    /**
	     * @param {module:zrender/graphic/Sector} el
	     * @param {Object} layout
	     * @param {boolean} isSelected
	     * @param {number} selectedOffset
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	        var midAngle = (layout.startAngle + layout.endAngle) / 2;
	
	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);
	
	        var offset = isSelected ? selectedOffset : 0;
	        var position = [dx * offset, dy * offset];
	
	        hasAnimation
	            // animateTo will stop revious animation like update transition
	            ? el.animate()
	                .when(200, {
	                    position: position
	                })
	                .start('bounceOut')
	            : el.attr('position', position);
	    }
	
	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function PiePiece(data, idx) {
	
	        graphic.Group.call(this);
	
	        var sector = new graphic.Sector({
	            z2: 2
	        });
	        var polyline = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(sector);
	        this.add(polyline);
	        this.add(text);
	
	        this.updateData(data, idx, true);
	
	        // Hover to change label and labelLine
	        function onEmphasis() {
	            polyline.ignore = polyline.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            polyline.ignore = polyline.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis)
	            .on('normal', onNormal)
	            .on('mouseover', onEmphasis)
	            .on('mouseout', onNormal);
	    }
	
	    var piePieceProto = PiePiece.prototype;
	
	    function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	        return {
	            fill: textStyleModel.getTextColor()
	                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            opacity: data.getItemVisual(idx, 'opacity'),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(
	                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)
	            )
	        };
	    }
	
	    piePieceProto.updateData = function (data, idx, firstCreate) {
	
	        var sector = this.childAt(0);
	
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var sectorShape = zrUtil.extend({}, layout);
	        sectorShape.label = null;
	
	        if (firstCreate) {
	            sector.setShape(sectorShape);
	
	            var animationType = seriesModel.getShallow('animationType');
	            if (animationType === 'scale') {
	                sector.shape.r = layout.r0;
	                graphic.initProps(sector, {
	                    shape: {
	                        r: layout.r
	                    }
	                }, seriesModel, idx);
	            }
	            // Expansion
	            else {
	                sector.shape.endAngle = layout.startAngle;
	                graphic.updateProps(sector, {
	                    shape: {
	                        endAngle: layout.endAngle
	                    }
	                }, seriesModel, idx);
	            }
	
	        }
	        else {
	            graphic.updateProps(sector, {
	                shape: sectorShape
	            }, seriesModel, idx);
	        }
	
	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');
	
	        sector.useStyle(
	            zrUtil.defaults(
	                {
	                    lineJoin: 'bevel',
	                    fill: visualColor
	                },
	                itemStyleModel.getModel('normal').getItemStyle()
	            )
	        );
	        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	
	        // Toggle selected
	        toggleItemSelected(
	            this,
	            data.getItemLayout(idx),
	            itemModel.get('selected'),
	            seriesModel.get('selectedOffset'),
	            seriesModel.get('animation')
	        );
	
	        function onEmphasis() {
	            // Sector may has animation of updating data. Force to move to the last frame
	            // Or it may stopped on the wrong shape
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r + 10
	                }
	            }, 300, 'elasticOut');
	        }
	        function onNormal() {
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r
	                }
	            }, 300, 'elasticOut');
	        }
	        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {
	            sector
	                .on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }
	
	        this._updateLabel(data, idx);
	
	        graphic.setHoverStyle(this);
	    };
	
	    piePieceProto._updateLabel = function (data, idx) {
	
	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);
	
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');
	
	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || [
	                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]
	                ]
	            }
	        }, seriesModel, idx);
	
	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel, idx);
	        labelText.attr({
	            style: {
	                textVerticalAlign: labelLayout.verticalAlign,
	                textAlign: labelLayout.textAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [labelLayout.x, labelLayout.y],
	            z2: 10
	        });
	
	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');
	
	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));
	
	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');
	
	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');
	
	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor,
	            opacity: data.getItemVisual(idx, 'opacity')
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	
	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	
	        var smooth = labelLineModel.get('smooth');
	        if (smooth && smooth === true) {
	            smooth = 0.4;
	        }
	        labelLine.setShape({
	            smooth: smooth
	        });
	    };
	
	    zrUtil.inherits(PiePiece, graphic.Group);
	
	
	    // Pie view
	    var Pie = __webpack_require__(63).extend({
	
	        type: 'pie',
	
	        init: function () {
	            var sectorGroup = new graphic.Group();
	            this._sectorGroup = sectorGroup;
	        },
	
	        render: function (seriesModel, ecModel, api, payload) {
	            if (payload && (payload.from === this.uid)) {
	                return;
	            }
	
	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var group = this.group;
	
	            var hasAnimation = ecModel.get('animation');
	            var isFirstRender = !oldData;
	            var animationType = seriesModel.get('animationType');
	
	            var onSectorClick = zrUtil.curry(
	                updateDataSelected, this.uid, seriesModel, hasAnimation, api
	            );
	
	            var selectedMode = seriesModel.get('selectedMode');
	
	            data.diff(oldData)
	                .add(function (idx) {
	                    var piePiece = new PiePiece(data, idx);
	                    // Default expansion animation
	                    if (isFirstRender && animationType !== 'scale') {
	                        piePiece.eachChild(function (child) {
	                            child.stopAnimation(true);
	                        });
	                    }
	
	                    selectedMode && piePiece.on('click', onSectorClick);
	
	                    data.setItemGraphicEl(idx, piePiece);
	
	                    group.add(piePiece);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);
	
	                    piePiece.updateData(data, newIdx);
	
	                    piePiece.off('click');
	                    selectedMode && piePiece.on('click', onSectorClick);
	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                })
	                .remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                })
	                .execute();
	
	            if (
	                hasAnimation && isFirstRender && data.count() > 0
	                // Default expansion animation
	                && animationType !== 'scale'
	            ) {
	                var shape = data.getItemLayout(0);
	                var r = Math.max(api.getWidth(), api.getHeight()) / 2;
	
	                var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	                group.setClipPath(this._createClipPath(
	                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel
	                ));
	            }
	
	            this._data = data;
	        },
	
	        dispose: function () {},
	
	        _createClipPath: function (
	            cx, cy, r, startAngle, clockwise, cb, seriesModel
	        ) {
	            var clipPath = new graphic.Sector({
	                shape: {
	                    cx: cx,
	                    cy: cy,
	                    r0: 0,
	                    r: r,
	                    startAngle: startAngle,
	                    endAngle: startAngle,
	                    clockwise: clockwise
	                }
	            });
	
	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	                }
	            }, seriesModel, cb);
	
	            return clipPath;
	        },
	
	        /**
	         * @implement
	         */
	        containPoint: function (point, seriesModel) {
	            var data = seriesModel.getData();
	            var itemLayout = data.getItemLayout(0);
	            if (itemLayout) {
	                var dx = point[0] - itemLayout.cx;
	                var dy = point[1] - itemLayout.cy;
	                var radius = Math.sqrt(dx * dx + dy * dy);
	                return radius <= itemLayout.r && radius >= itemLayout.r0;
	            }
	        }
	
	    });
	
	    module.exports = Pie;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	    module.exports = function (seriesType, actionInfos) {
	        zrUtil.each(actionInfos, function (actionInfo) {
	            actionInfo.update = 'updateView';
	            /**
	             * @payload
	             * @property {string} seriesName
	             * @property {string} name
	             */
	            echarts.registerAction(actionInfo, function (payload, ecModel) {
	                var selected = {};
	                ecModel.eachComponent(
	                    {mainType: 'series', subType: seriesType, query: payload},
	                    function (seriesModel) {
	                        if (seriesModel[actionInfo.method]) {
	                            seriesModel[actionInfo.method](payload.name);
	                        }
	                        var data = seriesModel.getData();
	                        // Create selected map
	                        data.each(function (idx) {
	                            var name = data.getName(idx);
	                            selected[name] = seriesModel.isSelected(name) || false;
	                        });
	                    }
	                );
	                return {
	                    name: payload.name,
	                    selected: selected
	                };
	            });
	        });
	    };


/***/ },
/* 167 */
/***/ function(module, exports) {

	// Pick color from palette for each data item.
	// Applicable for charts that require applying color palette
	// in data level (like pie, funnel, chord).
	
	
	    module.exports = function (seriesType, ecModel) {
	        // Pie and funnel may use diferrent scope
	        var paletteScope = {};
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var dataAll = seriesModel.getRawData();
	            var idxMap = {};
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                var data = seriesModel.getData();
	                data.each(function (idx) {
	                    var rawIdx = data.getRawIndex(idx);
	                    idxMap[rawIdx] = idx;
	                });
	                dataAll.each(function (rawIdx) {
	                    var filteredIdx = idxMap[rawIdx];
	
	                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                    var singleDataColor = filteredIdx != null
	                        && data.getItemVisual(filteredIdx, 'color', true);
	
	                    if (!singleDataColor) {
	                        // FIXME Performance
	                        var itemModel = dataAll.getItemModel(rawIdx);
	                        var color = itemModel.get('itemStyle.normal.color')
	                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);
	                        // Legend may use the visual info in data before processed
	                        dataAll.setItemVisual(rawIdx, 'color', color);
	
	                        // Data is not filtered
	                        if (filteredIdx != null) {
	                            data.setItemVisual(filteredIdx, 'color', color);
	                        }
	                    }
	                    else {
	                        // Set data all color for legend
	                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	// TODO minAngle
	
	
	
	    var numberUtil = __webpack_require__(28);
	    var parsePercent = numberUtil.parsePercent;
	    var labelLayout = __webpack_require__(169);
	    var zrUtil = __webpack_require__(25);
	
	    var PI2 = Math.PI * 2;
	    var RADIAN = Math.PI / 180;
	
	    module.exports = function (seriesType, ecModel, api, payload) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var center = seriesModel.get('center');
	            var radius = seriesModel.get('radius');
	
	            if (!zrUtil.isArray(radius)) {
	                radius = [0, radius];
	            }
	            if (!zrUtil.isArray(center)) {
	                center = [center, center];
	            }
	
	            var width = api.getWidth();
	            var height = api.getHeight();
	            var size = Math.min(width, height);
	            var cx = parsePercent(center[0], width);
	            var cy = parsePercent(center[1], height);
	            var r0 = parsePercent(radius[0], size / 2);
	            var r = parsePercent(radius[1], size / 2);
	
	            var data = seriesModel.getData();
	
	            var startAngle = -seriesModel.get('startAngle') * RADIAN;
	
	            var minAngle = seriesModel.get('minAngle') * RADIAN;
	
	            var sum = data.getSum('value');
	            // Sum may be 0
	            var unitRadian = Math.PI / (sum || data.count()) * 2;
	
	            var clockwise = seriesModel.get('clockwise');
	
	            var roseType = seriesModel.get('roseType');
	            var stillShowZeroSum = seriesModel.get('stillShowZeroSum');
	
	            // [0...max]
	            var extent = data.getDataExtent('value');
	            extent[0] = 0;
	
	            // In the case some sector angle is smaller than minAngle
	            var restAngle = PI2;
	            var valueSumLargerThanMinAngle = 0;
	
	            var currentAngle = startAngle;
	
	            var dir = clockwise ? 1 : -1;
	            data.each('value', function (value, idx) {
	                var angle;
	                if (isNaN(value)) {
	                    data.setItemLayout(idx, {
	                        angle: NaN,
	                        startAngle: NaN,
	                        endAngle: NaN,
	                        clockwise: clockwise,
	                        cx: cx,
	                        cy: cy,
	                        r0: r0,
	                        r: roseType
	                            ? NaN
	                            : r
	                    });
	                    return;
	                }
	
	                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	                if (roseType !== 'area') {
	                    angle = (sum === 0 && stillShowZeroSum)
	                        ? unitRadian : (value * unitRadian);
	                }
	                else {
	                    angle = PI2 / (data.count() || 1);
	                }
	
	                if (angle < minAngle) {
	                    angle = minAngle;
	                    restAngle -= minAngle;
	                }
	                else {
	                    valueSumLargerThanMinAngle += value;
	                }
	
	                var endAngle = currentAngle + dir * angle;
	                data.setItemLayout(idx, {
	                    angle: angle,
	                    startAngle: currentAngle,
	                    endAngle: endAngle,
	                    clockwise: clockwise,
	                    cx: cx,
	                    cy: cy,
	                    r0: r0,
	                    r: roseType
	                        ? numberUtil.linearMap(value, extent, [r0, r])
	                        : r
	                });
	
	                currentAngle = endAngle;
	            }, true);
	
	            // Some sector is constrained by minAngle
	            // Rest sectors needs recalculate angle
	            if (restAngle < PI2) {
	                // Average the angle if rest angle is not enough after all angles is
	                // Constrained by minAngle
	                if (restAngle <= 1e-3) {
	                    var angle = PI2 / data.count();
	                    data.each(function (idx) {
	                        var layout = data.getItemLayout(idx);
	                        layout.startAngle = startAngle + dir * idx * angle;
	                        layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                    });
	                }
	                else {
	                    unitRadian = restAngle / valueSumLargerThanMinAngle;
	                    currentAngle = startAngle;
	                    data.each('value', function (value, idx) {
	                        var layout = data.getItemLayout(idx);
	                        var angle = layout.angle === minAngle
	                            ? minAngle : value * unitRadian;
	                        layout.startAngle = currentAngle;
	                        layout.endAngle = currentAngle + dir * angle;
	                        currentAngle += dir * angle;
	                    });
	                }
	            }
	
	            labelLayout(seriesModel, r, width, height);
	        });
	    };


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME emphasis label position is not same with normal label position
	
	
	    var textContain = __webpack_require__(29);
	
	    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	        list.sort(function (a, b) {
	            return a.y - b.y;
	        });
	
	        // 压
	        function shiftDown(start, end, delta, dir) {
	            for (var j = start; j < end; j++) {
	                list[j].y += delta;
	                if (j > start
	                    && j + 1 < end
	                    && list[j + 1].y > list[j].y + list[j].height
	                ) {
	                    shiftUp(j, delta / 2);
	                    return;
	                }
	            }
	
	            shiftUp(end - 1, delta / 2);
	        }
	
	        // 弹
	        function shiftUp(end, delta) {
	            for (var j = end; j >= 0; j--) {
	                list[j].y -= delta;
	                if (j > 0
	                    && list[j].y > list[j - 1].y + list[j - 1].height
	                ) {
	                    break;
	                }
	            }
	        }
	
	        function changeX(list, isDownList, cx, cy, r, dir) {
	            var lastDeltaX = dir > 0
	                ? isDownList                // 右侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0                     // 上
	                : isDownList                // 左侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0;                    // 上
	
	            for (var i = 0, l = list.length; i < l; i++) {
	                // Not change x for center label
	                if (list[i].position === 'center') {
	                    continue;
	                }
	                var deltaY = Math.abs(list[i].y - cy);
	                var length = list[i].len;
	                var length2 = list[i].len2;
	                var deltaX = (deltaY < r + length)
	                    ? Math.sqrt(
	                          (r + length + length2) * (r + length + length2)
	                          - deltaY * deltaY
	                      )
	                    : Math.abs(list[i].x - cx);
	                if (isDownList && deltaX >= lastDeltaX) {
	                    // 右下，左下
	                    deltaX = lastDeltaX - 10;
	                }
	                if (!isDownList && deltaX <= lastDeltaX) {
	                    // 右上，左上
	                    deltaX = lastDeltaX + 10;
	                }
	
	                list[i].x = cx + deltaX * dir;
	                lastDeltaX = deltaX;
	            }
	        }
	
	        var lastY = 0;
	        var delta;
	        var len = list.length;
	        var upList = [];
	        var downList = [];
	        for (var i = 0; i < len; i++) {
	            delta = list[i].y - lastY;
	            if (delta < 0) {
	                shiftDown(i, len, -delta, dir);
	            }
	            lastY = list[i].y + list[i].height;
	        }
	        if (viewHeight - lastY < 0) {
	            shiftUp(len - 1, lastY - viewHeight);
	        }
	        for (var i = 0; i < len; i++) {
	            if (list[i].y >= cy) {
	                downList.push(list[i]);
	            }
	            else {
	                upList.push(list[i]);
	            }
	        }
	        changeX(upList, false, cx, cy, r, dir);
	        changeX(downList, true, cx, cy, r, dir);
	    }
	
	    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	        var leftList = [];
	        var rightList = [];
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            if (labelLayoutList[i].x < cx) {
	                leftList.push(labelLayoutList[i]);
	            }
	            else {
	                rightList.push(labelLayoutList[i]);
	            }
	        }
	
	        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);
	
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            var linePoints = labelLayoutList[i].linePoints;
	            if (linePoints) {
	                var dist = linePoints[1][0] - linePoints[2][0];
	                if (labelLayoutList[i].x < cx) {
	                    linePoints[2][0] = labelLayoutList[i].x + 3;
	                }
	                else {
	                    linePoints[2][0] = labelLayoutList[i].x - 3;
	                }
	                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	                linePoints[1][0] = linePoints[2][0] + dist;
	            }
	        }
	    }
	
	    module.exports = function (seriesModel, r, viewWidth, viewHeight) {
	        var data = seriesModel.getData();
	        var labelLayoutList = [];
	        var cx;
	        var cy;
	        var hasLabelRotate = false;
	
	        data.each(function (idx) {
	            var layout = data.getItemLayout(idx);
	
	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            // Use position in normal or emphasis
	            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');
	
	            var labelLineModel = itemModel.getModel('labelLine.normal');
	            var labelLineLen = labelLineModel.get('length');
	            var labelLineLen2 = labelLineModel.get('length2');
	
	            var midAngle = (layout.startAngle + layout.endAngle) / 2;
	            var dx = Math.cos(midAngle);
	            var dy = Math.sin(midAngle);
	
	            var textX;
	            var textY;
	            var linePoints;
	            var textAlign;
	
	            cx = layout.cx;
	            cy = layout.cy;
	
	            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	            if (labelPosition === 'center') {
	                textX = layout.cx;
	                textY = layout.cy;
	                textAlign = 'center';
	            }
	            else {
	                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;
	
	                textX = x1 + dx * 3;
	                textY = y1 + dy * 3;
	
	                if (!isLabelInside) {
	                    // For roseType
	                    var x2 = x1 + dx * (labelLineLen + r - layout.r);
	                    var y2 = y1 + dy * (labelLineLen + r - layout.r);
	                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);
	                    var y3 = y2;
	
	                    textX = x3 + (dx < 0 ? -5 : 5);
	                    textY = y3;
	                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	                }
	
	                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');
	            }
	            var font = labelModel.getModel('textStyle').getFont();
	
	            var labelRotate = labelModel.get('rotate')
	                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;
	            var text = seriesModel.getFormattedLabel(idx, 'normal')
	                        || data.getName(idx);
	            var textRect = textContain.getBoundingRect(
	                text, font, textAlign, 'top'
	            );
	            hasLabelRotate = !!labelRotate;
	            layout.label = {
	                x: textX,
	                y: textY,
	                position: labelPosition,
	                height: textRect.height,
	                len: labelLineLen,
	                len2: labelLineLen2,
	                linePoints: linePoints,
	                textAlign: textAlign,
	                verticalAlign: 'middle',
	                font: font,
	                rotation: labelRotate
	            };
	
	            // Not layout the inside label
	            if (!isLabelInside) {
	                labelLayoutList.push(layout.label);
	            }
	        });
	        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	        }
	    };


/***/ },
/* 170 */
/***/ function(module, exports) {

	
	    module.exports = function (seriesType, ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType(seriesType, function (series) {
	            var data = series.getData();
	            data.filterSelf(function (idx) {
	                var name = data.getName(idx);
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(name)) {
	                        return false;
	                    }
	                }
	                return true;
	            }, this);
	        }, this);
	    };


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(172);
	    __webpack_require__(173);
	
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'scatter', 'circle', null
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(132), 'scatter'
	    ));
	
	    // In case developer forget to include grid component
	    __webpack_require__(134);


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var createListFromArray = __webpack_require__(123);
	    var SeriesModel = __webpack_require__(49);
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.scatter',
	
	        dependencies: ['grid', 'polar'],
	
	        getInitialData: function (option, ecModel) {
	            var list = createListFromArray(option.data, this, ecModel);
	            return list;
	        },
	
	        brushSelector: 'point',
	
	        defaultOption: {
	            coordinateSystem: 'cartesian2d',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            // Polar coordinate system
	            // polarIndex: 0,
	
	            // Geo coordinate system
	            // geoIndex: 0,
	
	            // symbol: null,        // 图形类型
	            symbolSize: 10,          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null,  // 图形旋转控制
	
	            large: false,
	            // Available when large is true
	            largeThreshold: 2000,
	
	            // label: {
	                // normal: {
	                    // show: false
	                    // distance: 5,
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            //     }
	            // },
	            itemStyle: {
	                normal: {
	                    opacity: 0.8
	                    // color: 各异
	                }
	            }
	        }
	
	    });


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var SymbolDraw = __webpack_require__(126);
	    var LargeSymbolDraw = __webpack_require__(174);
	
	    __webpack_require__(22).extendChartView({
	
	        type: 'scatter',
	
	        init: function () {
	            this._normalSymbolDraw = new SymbolDraw();
	            this._largeSymbolDraw = new LargeSymbolDraw();
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var largeSymbolDraw = this._largeSymbolDraw;
	            var normalSymbolDraw = this._normalSymbolDraw;
	            var group = this.group;
	
	            var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold')
	                ? largeSymbolDraw : normalSymbolDraw;
	
	            this._symbolDraw = symbolDraw;
	            symbolDraw.updateData(data);
	            group.add(symbolDraw.group);
	
	            group.remove(
	                symbolDraw === largeSymbolDraw
	                ? normalSymbolDraw.group : largeSymbolDraw.group
	            );
	        },
	
	        updateLayout: function (seriesModel) {
	            this._symbolDraw.updateLayout(seriesModel);
	        },
	
	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove(api, true);
	        },
	
	        dispose: function () {}
	    });


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Batch by color
	
	
	
	    var graphic = __webpack_require__(64);
	    var symbolUtil = __webpack_require__(128);
	
	    var LargeSymbolPath = graphic.extendShape({
	
	        shape: {
	            points: null,
	            sizes: null
	        },
	
	        symbolProxy: null,
	
	        buildPath: function (path, shape) {
	            var points = shape.points;
	            var sizes = shape.sizes;
	
	            var symbolProxy = this.symbolProxy;
	            var symbolProxyShape = symbolProxy.shape;
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                var size = sizes[i];
	                if (size[0] < 4) {
	                    // Optimize for small symbol
	                    path.rect(
	                        pt[0] - size[0] / 2, pt[1] - size[1] / 2,
	                        size[0], size[1]
	                    );
	                }
	                else {
	                    symbolProxyShape.x = pt[0] - size[0] / 2;
	                    symbolProxyShape.y = pt[1] - size[1] / 2;
	                    symbolProxyShape.width = size[0];
	                    symbolProxyShape.height = size[1];
	
	                    symbolProxy.buildPath(path, symbolProxyShape, true);
	                }
	            }
	        },
	
	        findDataIndex: function (x, y) {
	            var shape = this.shape;
	            var points = shape.points;
	            var sizes = shape.sizes;
	
	            // Not consider transform
	            // Treat each element as a rect
	            // top down traverse
	            for (var i = points.length - 1; i >= 0; i--) {
	                var pt = points[i];
	                var size = sizes[i];
	                var x0 = pt[0] - size[0] / 2;
	                var y0 = pt[1] - size[1] / 2;
	                if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {
	                    // i is dataIndex
	                    return i;
	                }
	            }
	
	            return -1;
	        }
	    });
	
	    function LargeSymbolDraw() {
	        this.group = new graphic.Group();
	
	        this._symbolEl = new LargeSymbolPath({
	            // rectHover: true,
	            // cursor: 'default'
	        });
	    }
	
	    var largeSymbolProto = LargeSymbolDraw.prototype;
	
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    largeSymbolProto.updateData = function (data) {
	        this.group.removeAll();
	
	        var symbolEl = this._symbolEl;
	
	        var seriesModel = data.hostModel;
	
	        symbolEl.setShape({
	            points: data.mapArray(data.getItemLayout),
	            sizes: data.mapArray(
	                function (idx) {
	                    var size = data.getItemVisual(idx, 'symbolSize');
	                    if (!(size instanceof Array)) {
	                        size = [size, size];
	                    }
	                    return size;
	                }
	            )
	        });
	
	        // Create symbolProxy to build path for each data
	        symbolEl.symbolProxy = symbolUtil.createSymbol(
	            data.getVisual('symbol'), 0, 0, 0, 0
	        );
	        // Use symbolProxy setColor method
	        symbolEl.setColor = symbolEl.symbolProxy.setColor;
	
	        symbolEl.useStyle(
	            seriesModel.getModel('itemStyle.normal').getItemStyle(['color'])
	        );
	
	        var visualColor = data.getVisual('color');
	        if (visualColor) {
	            symbolEl.setColor(visualColor);
	        }
	
	        // Enable tooltip
	        // PENDING May have performance issue when path is extremely large
	        symbolEl.seriesIndex = seriesModel.seriesIndex;
	        symbolEl.on('mousemove', function (e) {
	            symbolEl.dataIndex = null;
	            var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);
	            if (dataIndex > 0) {
	                // Provide dataIndex for tooltip
	                symbolEl.dataIndex = dataIndex;
	            }
	        });
	
	        // Add back
	        this.group.add(symbolEl);
	    };
	
	    largeSymbolProto.updateLayout = function (seriesModel) {
	        var data = seriesModel.getData();
	        this._symbolEl.setShape({
	            points: data.mapArray(data.getItemLayout)
	        });
	    };
	
	    largeSymbolProto.remove = function () {
	        this.group.removeAll();
	    };
	
	    module.exports = LargeSymbolDraw;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    // Must use radar component
	    __webpack_require__(176);
	
	    __webpack_require__(181);
	    __webpack_require__(182);
	
	    echarts.registerVisual(zrUtil.curry(__webpack_require__(167), 'radar'));
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'radar', 'circle', null
	    ));
	    echarts.registerLayout(__webpack_require__(183));
	
	    echarts.registerProcessor(
	        zrUtil.curry(__webpack_require__(170), 'radar')
	    );
	
	    echarts.registerPreprocessor(__webpack_require__(184));


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(177);
	    __webpack_require__(179);
	
	    __webpack_require__(180);


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	// TODO clockwise
	
	
	    var zrUtil = __webpack_require__(25);
	    var IndicatorAxis = __webpack_require__(178);
	    var IntervalScale = __webpack_require__(139);
	    var numberUtil = __webpack_require__(28);
	    var axisHelper = __webpack_require__(136);
	
	    function Radar(radarModel, ecModel, api) {
	
	        this._model = radarModel;
	        /**
	         * Radar dimensions
	         * @type {Array.<string>}
	         */
	        this.dimensions = [];
	
	        this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
	            var dim = 'indicator_' + idx;
	            var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
	            indicatorAxis.name = indicatorModel.get('name');
	            // Inject model and axis
	            indicatorAxis.model = indicatorModel;
	            indicatorModel.axis = indicatorAxis;
	            this.dimensions.push(dim);
	            return indicatorAxis;
	        }, this);
	
	        this.resize(radarModel, api);
	
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.cx;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.cy;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.r;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.startAngle;
	    }
	
	    Radar.prototype.getIndicatorAxes = function () {
	        return this._indicatorAxes;
	    };
	
	    Radar.prototype.dataToPoint = function (value, indicatorIndex) {
	        var indicatorAxis = this._indicatorAxes[indicatorIndex];
	
	        return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
	    };
	
	    Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
	        var indicatorAxis = this._indicatorAxes[indicatorIndex];
	        var angle = indicatorAxis.angle;
	        var x = this.cx + coord * Math.cos(angle);
	        var y = this.cy - coord * Math.sin(angle);
	        return [x, y];
	    };
	
	    Radar.prototype.pointToData = function (pt) {
	        var dx = pt[0] - this.cx;
	        var dy = pt[1] - this.cy;
	        var radius = Math.sqrt(dx * dx + dy * dy);
	        dx /= radius;
	        dy /= radius;
	
	        var radian = Math.atan2(-dy, dx);
	
	        // Find the closest angle
	        // FIXME index can calculated directly
	        var minRadianDiff = Infinity;
	        var closestAxis;
	        var closestAxisIdx = -1;
	        for (var i = 0; i < this._indicatorAxes.length; i++) {
	            var indicatorAxis = this._indicatorAxes[i];
	            var diff = Math.abs(radian - indicatorAxis.angle);
	            if (diff < minRadianDiff) {
	                closestAxis = indicatorAxis;
	                closestAxisIdx = i;
	                minRadianDiff = diff;
	            }
	        }
	
	        return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
	    };
	
	    Radar.prototype.resize = function (radarModel, api) {
	        var center = radarModel.get('center');
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();
	        var viewSize = Math.min(viewWidth, viewHeight) / 2;
	        this.cx = numberUtil.parsePercent(center[0], viewWidth);
	        this.cy = numberUtil.parsePercent(center[1], viewHeight);
	
	        this.startAngle = radarModel.get('startAngle') * Math.PI / 180;
	
	        this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);
	
	        zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
	            indicatorAxis.setExtent(0, this.r);
	            var angle = (this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length);
	            // Normalize to [-PI, PI]
	            angle = Math.atan2(Math.sin(angle), Math.cos(angle));
	            indicatorAxis.angle = angle;
	        }, this);
	    };
	
	    Radar.prototype.update = function (ecModel, api) {
	        var indicatorAxes = this._indicatorAxes;
	        var radarModel = this._model;
	        zrUtil.each(indicatorAxes, function (indicatorAxis) {
	            indicatorAxis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
	            if (radarSeries.get('coordinateSystem') !== 'radar'
	                || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel
	            ) {
	                return;
	            }
	            var data = radarSeries.getData();
	            zrUtil.each(indicatorAxes, function (indicatorAxis) {
	                indicatorAxis.scale.unionExtentFromData(data, indicatorAxis.dim);
	            });
	        }, this);
	
	        var splitNumber = radarModel.get('splitNumber');
	
	        function increaseInterval(interval) {
	            var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
	            // Increase interval
	            var f = interval / exp10;
	            if (f === 2) {
	                f = 5;
	            }
	            else { // f is 2 or 5
	                f *= 2;
	            }
	            return f * exp10;
	        }
	        // Force all the axis fixing the maxSplitNumber.
	        zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
	            var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);
	            axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);
	
	            var axisModel = indicatorAxis.model;
	            var scale = indicatorAxis.scale;
	            var fixedMin = axisModel.getMin();
	            var fixedMax = axisModel.getMax();
	            var interval = scale.getInterval();
	
	            if (fixedMin != null && fixedMax != null) {
	                // User set min, max, divide to get new interval
	                // FIXME precision
	                scale.setInterval(
	                    (fixedMax - fixedMin) / splitNumber
	                );
	            }
	            else if (fixedMin != null) {
	                var max;
	                // User set min, expand extent on the other side
	                do {
	                    max = fixedMin + interval * splitNumber;
	                    scale.setExtent(+fixedMin, max);
	                    // Interval must been set after extent
	                    // FIXME
	                    scale.setInterval(interval);
	
	                    interval = increaseInterval(interval);
	                } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
	            }
	            else if (fixedMax != null) {
	                var min;
	                // User set min, expand extent on the other side
	                do {
	                    min = fixedMax - interval * splitNumber;
	                    scale.setExtent(min, +fixedMax);
	                    scale.setInterval(interval);
	                    interval = increaseInterval(interval);
	                } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
	            }
	            else {
	                var nicedSplitNumber = scale.getTicks().length - 1;
	                if (nicedSplitNumber > splitNumber) {
	                    interval = increaseInterval(interval);
	                }
	                // PENDING
	                var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
	                var halfSplitNumber = Math.round(splitNumber / 2);
	                scale.setExtent(
	                    numberUtil.round(center - halfSplitNumber * interval),
	                    numberUtil.round(center + (splitNumber - halfSplitNumber) * interval)
	                );
	                scale.setInterval(interval);
	            }
	        });
	    };
	
	    /**
	     * Radar dimensions is based on the data
	     * @type {Array}
	     */
	    Radar.dimensions = [];
	
	    Radar.create = function (ecModel, api) {
	        var radarList = [];
	        ecModel.eachComponent('radar', function (radarModel) {
	            var radar = new Radar(radarModel, ecModel, api);
	            radarList.push(radar);
	            radarModel.coordinateSystem = radar;
	        });
	        ecModel.eachSeriesByType('radar', function (radarSeries) {
	            if (radarSeries.get('coordinateSystem') === 'radar') {
	                // Inject coordinate system
	                radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
	            }
	        });
	        return radarList;
	    };
	
	    __webpack_require__(47).register('radar', Radar);
	    module.exports = Radar;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	
	    function IndicatorAxis(dim, scale, radiusExtent) {
	        Axis.call(this, dim, scale, radiusExtent);
	
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'value';
	
	        this.angle = 0;
	
	        /**
	         * Indicator name
	         * @type {string}
	         */
	        this.name = '';
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.model;
	    }
	
	    zrUtil.inherits(IndicatorAxis, Axis);
	
	    module.exports = IndicatorAxis;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	
	
	
	    var axisDefault = __webpack_require__(150);
	    var valueAxisDefault = axisDefault.valueAxis;
	    var Model = __webpack_require__(33);
	    var zrUtil = __webpack_require__(25);
	
	    var axisModelCommonMixin = __webpack_require__(151);
	
	    function defaultsShow(opt, show) {
	        return zrUtil.defaults({
	            show: show
	        }, opt);
	    }
	
	    var RadarModel = __webpack_require__(22).extendComponentModel({
	
	        type: 'radar',
	
	        optionUpdated: function () {
	            var boundaryGap = this.get('boundaryGap');
	            var splitNumber = this.get('splitNumber');
	            var scale = this.get('scale');
	            var axisLine = this.get('axisLine');
	            var axisTick = this.get('axisTick');
	            var axisLabel = this.get('axisLabel');
	            var nameTextStyle = this.get('name.textStyle');
	            var showName = this.get('name.show');
	            var nameFormatter = this.get('name.formatter');
	            var nameGap = this.get('nameGap');
	            var triggerEvent = this.get('triggerEvent');
	
	            var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
	                // PENDING
	                if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {
	                    indicatorOpt.min = 0;
	                }
	                else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {
	                    indicatorOpt.max = 0;
	                }
	                // Use same configuration
	                indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {
	                    boundaryGap: boundaryGap,
	                    splitNumber: splitNumber,
	                    scale: scale,
	                    axisLine: axisLine,
	                    axisTick: axisTick,
	                    axisLabel: axisLabel,
	                    // Competitable with 2 and use text
	                    name: indicatorOpt.text,
	                    nameLocation: 'end',
	                    nameGap: nameGap,
	                    // min: 0,
	                    nameTextStyle: nameTextStyle,
	                    triggerEvent: triggerEvent
	                }, false);
	                if (!showName) {
	                    indicatorOpt.name = '';
	                }
	                if (typeof nameFormatter === 'string') {
	                    var indName = indicatorOpt.name;
	                    indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');
	                }
	                else if (typeof nameFormatter === 'function') {
	                    indicatorOpt.name = nameFormatter(
	                        indicatorOpt.name, indicatorOpt
	                    );
	                }
	                var model = zrUtil.extend(
	                    new Model(indicatorOpt, null, this.ecModel),
	                    axisModelCommonMixin
	                );
	
	                // For triggerEvent.
	                model.mainType = 'radar';
	                model.componentIndex = this.componentIndex;
	
	                return model;
	            }, this);
	
	            this.getIndicatorModels = function () {
	                return indicatorModels;
	            };
	        },
	
	        defaultOption: {
	
	            zlevel: 0,
	
	            z: 0,
	
	            center: ['50%', '50%'],
	
	            radius: '75%',
	
	            startAngle: 90,
	
	            name: {
	                show: true
	                // formatter: null
	                // textStyle: {}
	            },
	
	            boundaryGap: [0, 0],
	
	            splitNumber: 5,
	
	            nameGap: 15,
	
	            scale: false,
	
	            // Polygon or circle
	            shape: 'polygon',
	
	            axisLine: zrUtil.merge(
	                {
	                    lineStyle: {
	                        color: '#bbb'
	                    }
	                },
	                valueAxisDefault.axisLine
	            ),
	            axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
	            axisTick: defaultsShow(valueAxisDefault.axisTick, false),
	            splitLine: defaultsShow(valueAxisDefault.splitLine, true),
	            splitArea: defaultsShow(valueAxisDefault.splitArea, true),
	
	            // {text, min, max}
	            indicator: []
	        }
	    });
	
	    module.exports = RadarModel;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var AxisBuilder = __webpack_require__(154);
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	
	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	
	    module.exports = __webpack_require__(22).extendComponentView({
	
	        type: 'radar',
	
	        render: function (radarModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();
	
	            this._buildAxes(radarModel);
	            this._buildSplitLineAndArea(radarModel);
	        },
	
	        _buildAxes: function (radarModel) {
	            var radar = radarModel.coordinateSystem;
	            var indicatorAxes = radar.getIndicatorAxes();
	            var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
	                var axisBuilder = new AxisBuilder(indicatorAxis.model, {
	                    position: [radar.cx, radar.cy],
	                    rotation: indicatorAxis.angle,
	                    labelDirection: -1,
	                    tickDirection: -1,
	                    nameDirection: 1
	                });
	                return axisBuilder;
	            });
	
	            zrUtil.each(axisBuilders, function (axisBuilder) {
	                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	                this.group.add(axisBuilder.getGroup());
	            }, this);
	        },
	
	        _buildSplitLineAndArea: function (radarModel) {
	            var radar = radarModel.coordinateSystem;
	            var indicatorAxes = radar.getIndicatorAxes();
	            if (!indicatorAxes.length) {
	                return;
	            }
	            var shape = radarModel.get('shape');
	            var splitLineModel = radarModel.getModel('splitLine');
	            var splitAreaModel = radarModel.getModel('splitArea');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	
	            var showSplitLine = splitLineModel.get('show');
	            var showSplitArea = splitAreaModel.get('show');
	            var splitLineColors = lineStyleModel.get('color');
	            var splitAreaColors = areaStyleModel.get('color');
	
	            splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
	            splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];
	
	            var splitLines = [];
	            var splitAreas = [];
	
	            function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
	                var colorIndex = idx % areaOrLineColorList.length;
	                areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
	                return colorIndex;
	            }
	
	            if (shape === 'circle') {
	                var ticksRadius = indicatorAxes[0].getTicksCoords();
	                var cx = radar.cx;
	                var cy = radar.cy;
	                for (var i = 0; i < ticksRadius.length; i++) {
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Circle({
	                            shape: {
	                                cx: cx,
	                                cy: cy,
	                                r: ticksRadius[i]
	                            }
	                        }));
	                    }
	                    if (showSplitArea && i < ticksRadius.length - 1) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
	                        splitAreas[colorIndex].push(new graphic.Ring({
	                            shape: {
	                                cx: cx,
	                                cy: cy,
	                                r0: ticksRadius[i],
	                                r: ticksRadius[i + 1]
	                            }
	                        }));
	                    }
	                }
	            }
	            // Polyyon
	            else {
	                var realSplitNumber = -1;
	                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
	                    var ticksCoords = indicatorAxis.getTicksCoords();
	                    realSplitNumber = Math.max(ticksCoords.length - 1, realSplitNumber);
	                    return zrUtil.map(ticksCoords, function (tickCoord) {
	                        return radar.coordToPoint(tickCoord, idx);
	                    });
	                });
	
	                var prevPoints = [];
	                for (var i = 0; i <= realSplitNumber; i++) {
	                    var points = [];
	                    for (var j = 0; j < indicatorAxes.length; j++) {
	                        points.push(axesTicksPoints[j][i]);
	                    }
	                    // Close
	                    if (points[0]) {
	                        points.push(points[0].slice());
	                    }
	                    else {
	                        if (__DEV__) {
	                            console.error('Can\'t draw value axis ' + i);
	                        }
	                    }
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Polyline({
	                            shape: {
	                                points: points
	                            }
	                        }));
	                    }
	                    if (showSplitArea && prevPoints) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
	                        splitAreas[colorIndex].push(new graphic.Polygon({
	                            shape: {
	                                points: points.concat(prevPoints)
	                            }
	                        }));
	                    }
	                    prevPoints = points.slice().reverse();
	                }
	            }
	
	            var lineStyle = lineStyleModel.getLineStyle();
	            var areaStyle = areaStyleModel.getAreaStyle();
	            // Add splitArea before splitLine
	            zrUtil.each(splitAreas, function (splitAreas, idx) {
	                this.group.add(graphic.mergePath(
	                    splitAreas, {
	                        style: zrUtil.defaults({
	                            stroke: 'none',
	                            fill: splitAreaColors[idx % splitAreaColors.length]
	                        }, areaStyle),
	                        silent: true
	                    }
	                ));
	            }, this);
	
	            zrUtil.each(splitLines, function (splitLines, idx) {
	                this.group.add(graphic.mergePath(
	                    splitLines, {
	                        style: zrUtil.defaults({
	                            fill: 'none',
	                            stroke: splitLineColors[idx % splitLineColors.length]
	                        }, lineStyle),
	                        silent: true
	                    }
	                ));
	            }, this);
	
	        }
	    });


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var SeriesModel = __webpack_require__(49);
	    var List = __webpack_require__(119);
	    var completeDimensions = __webpack_require__(124);
	    var zrUtil = __webpack_require__(25);
	    var encodeHTML = __webpack_require__(27).encodeHTML;
	
	    var RadarSeries = SeriesModel.extend({
	
	        type: 'series.radar',
	
	        dependencies: ['radar'],
	
	
	        // Overwrite
	        init: function (option) {
	            RadarSeries.superApply(this, 'init', arguments);
	
	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	        },
	
	        getInitialData: function (option, ecModel) {
	            var data = option.data || [];
	            var dimensions = completeDimensions(
	                [], data, [], 'indicator_'
	            );
	            var list = new List(dimensions, this);
	            list.initData(data);
	            return list;
	        },
	
	        formatTooltip: function (dataIndex) {
	            var value = this.getRawValue(dataIndex);
	            var coordSys = this.coordinateSystem;
	            var indicatorAxes = coordSys.getIndicatorAxes();
	            var name = this.getData().getName(dataIndex);
	            return encodeHTML(name === '' ? this.name : name) + '<br/>'
	                + zrUtil.map(indicatorAxes, function (axis, idx) {
	                    return encodeHTML(axis.name + ' : ' + value[idx]);
	                }).join('<br />');
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            coordinateSystem: 'radar',
	            legendHoverLink: true,
	            radarIndex: 0,
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            label: {
	                normal: {
	                    position: 'top'
	                }
	            },
	            // areaStyle: {
	            // },
	            // itemStyle: {}
	            symbol: 'emptyCircle',
	            symbolSize: 4
	            // symbolRotate: null
	        }
	    });
	
	    module.exports = RadarSeries;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var symbolUtil = __webpack_require__(128);
	
	    function normalizeSymbolSize(symbolSize) {
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [+symbolSize, +symbolSize];
	        }
	        return symbolSize;
	    }
	    module.exports = __webpack_require__(22).extendChartView({
	        type: 'radar',
	
	        render: function (seriesModel, ecModel, api) {
	            var polar = seriesModel.coordinateSystem;
	            var group = this.group;
	
	            var data = seriesModel.getData();
	            var oldData = this._data;
	
	            function createSymbol(data, idx) {
	                var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	                var color = data.getItemVisual(idx, 'color');
	                if (symbolType === 'none') {
	                    return;
	                }
	                var symbolPath = symbolUtil.createSymbol(
	                    symbolType, -0.5, -0.5, 1, 1, color
	                );
	                symbolPath.attr({
	                    style: {
	                        strokeNoScale: true
	                    },
	                    z2: 100,
	                    scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))
	                });
	                return symbolPath;
	            }
	
	            function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
	                // Simply rerender all
	                symbolGroup.removeAll();
	                for (var i = 0; i < newPoints.length - 1; i++) {
	                    var symbolPath = createSymbol(data, idx);
	                    if (symbolPath) {
	                        symbolPath.__dimIdx = i;
	                        if (oldPoints[i]) {
	                            symbolPath.attr('position', oldPoints[i]);
	                            graphic[isInit ? 'initProps' : 'updateProps'](
	                                symbolPath, {
	                                    position: newPoints[i]
	                                }, seriesModel, idx
	                            );
	                        }
	                        else {
	                            symbolPath.attr('position', newPoints[i]);
	                        }
	                        symbolGroup.add(symbolPath);
	                    }
	                }
	            }
	
	            function getInitialPoints(points) {
	                return zrUtil.map(points, function (pt) {
	                    return [polar.cx, polar.cy];
	                });
	            }
	            data.diff(oldData)
	                .add(function (idx) {
	                    var points = data.getItemLayout(idx);
	                    if (!points) {
	                        return;
	                    }
	                    var polygon = new graphic.Polygon();
	                    var polyline = new graphic.Polyline();
	                    var target = {
	                        shape: {
	                            points: points
	                        }
	                    };
	                    polygon.shape.points = getInitialPoints(points);
	                    polyline.shape.points = getInitialPoints(points);
	                    graphic.initProps(polygon, target, seriesModel, idx);
	                    graphic.initProps(polyline, target, seriesModel, idx);
	
	                    var itemGroup = new graphic.Group();
	                    var symbolGroup = new graphic.Group();
	                    itemGroup.add(polyline);
	                    itemGroup.add(polygon);
	                    itemGroup.add(symbolGroup);
	
	                    updateSymbols(
	                        polyline.shape.points, points, symbolGroup, data, idx, true
	                    );
	
	                    data.setItemGraphicEl(idx, itemGroup);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var itemGroup = oldData.getItemGraphicEl(oldIdx);
	                    var polyline = itemGroup.childAt(0);
	                    var polygon = itemGroup.childAt(1);
	                    var symbolGroup = itemGroup.childAt(2);
	                    var target = {
	                        shape: {
	                            points: data.getItemLayout(newIdx)
	                        }
	                    };
	                    if (!target.shape.points) {
	                        return;
	                    }
	                    updateSymbols(
	                        polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false
	                    );
	
	                    graphic.updateProps(polyline, target, seriesModel);
	                    graphic.updateProps(polygon, target, seriesModel);
	
	                    data.setItemGraphicEl(newIdx, itemGroup);
	                })
	                .remove(function (idx) {
	                    group.remove(oldData.getItemGraphicEl(idx));
	                })
	                .execute();
	
	            data.eachItemGraphicEl(function (itemGroup, idx) {
	                var itemModel = data.getItemModel(idx);
	                var polyline = itemGroup.childAt(0);
	                var polygon = itemGroup.childAt(1);
	                var symbolGroup = itemGroup.childAt(2);
	                var color = data.getItemVisual(idx, 'color');
	
	                group.add(itemGroup);
	
	                polyline.useStyle(
	                    zrUtil.defaults(
	                        itemModel.getModel('lineStyle.normal').getLineStyle(),
	                        {
	                            fill: 'none',
	                            stroke: color
	                        }
	                    )
	                );
	                polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	
	                var areaStyleModel = itemModel.getModel('areaStyle.normal');
	                var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
	                var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
	                var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();
	
	                hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
	                polygon.ignore = polygonIgnore;
	
	                polygon.useStyle(
	                    zrUtil.defaults(
	                        areaStyleModel.getAreaStyle(),
	                        {
	                            fill: color,
	                            opacity: 0.7
	                        }
	                    )
	                );
	                polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();
	
	                var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	                var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	                var labelModel = itemModel.getModel('label.normal');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                symbolGroup.eachChild(function (symbolPath) {
	                    symbolPath.setStyle(itemStyle);
	                    symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);
	
	                    var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
	                    graphic.setText(symbolPath.style, labelModel, color);
	                    symbolPath.setStyle({
	                        text: labelModel.get('show') ? zrUtil.retrieve(
	                            seriesModel.getFormattedLabel(
	                                idx, 'normal', null, symbolPath.__dimIdx
	                            ),
	                            defaultText
	                        ) : ''
	                    });
	
	                    graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);
	                    symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(
	                        seriesModel.getFormattedLabel(
	                            idx, 'emphasis', null, symbolPath.__dimIdx
	                        ),
	                        defaultText
	                    ) : '';
	                });
	
	                function onEmphasis() {
	                    polygon.attr('ignore', hoverPolygonIgnore);
	                }
	
	                function onNormal() {
	                    polygon.attr('ignore', polygonIgnore);
	                }
	
	                itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
	                itemGroup.on('emphasis', onEmphasis)
	                    .on('mouseover', onEmphasis)
	                    .on('normal', onNormal)
	                    .on('mouseout', onNormal);
	
	                graphic.setHoverStyle(itemGroup);
	            });
	
	            this._data = data;
	        },
	
	        remove: function () {
	            this.group.removeAll();
	            this._data = null;
	        },
	
	        dispose: function () {}
	    });


/***/ },
/* 183 */
/***/ function(module, exports) {

	
	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('radar', function (seriesModel) {
	            var data = seriesModel.getData();
	            var points = [];
	            var coordSys = seriesModel.coordinateSystem;
	            if (!coordSys) {
	                return;
	            }
	
	            function pointsConverter(val, idx) {
	                points[idx] = points[idx] || [];
	                points[idx][i] = coordSys.dataToPoint(val, i);
	            }
	            for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
	                var dim = data.dimensions[i];
	                data.each(dim, pointsConverter);
	            }
	
	            data.each(function (idx) {
	                // Close polygon
	                points[idx][0] && points[idx].push(points[idx][0].slice());
	                data.setItemLayout(idx, points[idx]);
	            });
	        });
	    };


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// Backward compat for radar chart in 2
	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (option) {
	        var polarOptArr = option.polar;
	        if (polarOptArr) {
	            if (!zrUtil.isArray(polarOptArr)) {
	                polarOptArr = [polarOptArr];
	            }
	            var polarNotRadar = [];
	            zrUtil.each(polarOptArr, function (polarOpt, idx) {
	                if (polarOpt.indicator) {
	                    if (polarOpt.type && !polarOpt.shape) {
	                        polarOpt.shape = polarOpt.type;
	                    }
	                    option.radar = option.radar || [];
	                    if (!zrUtil.isArray(option.radar)) {
	                        option.radar = [option.radar];
	                    }
	                    option.radar.push(polarOpt);
	                }
	                else {
	                    polarNotRadar.push(polarOpt);
	                }
	            });
	            option.polar = polarNotRadar;
	        }
	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
	                seriesOpt.radarIndex = seriesOpt.polarIndex;
	            }
	        });
	    };


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	    var PRIORITY = echarts.PRIORITY;
	
	    __webpack_require__(186);
	
	    __webpack_require__(196);
	
	    __webpack_require__(200);
	
	    __webpack_require__(187);
	
	    echarts.registerLayout(__webpack_require__(202));
	
	    echarts.registerVisual(__webpack_require__(203));
	
	    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, __webpack_require__(204));
	
	    echarts.registerPreprocessor(__webpack_require__(205));
	
	    __webpack_require__(166)('map', [{
	        type: 'mapToggleSelect',
	        event: 'mapselectchanged',
	        method: 'toggleSelected'
	    }, {
	        type: 'mapSelect',
	        event: 'mapselected',
	        method: 'select'
	    }, {
	        type: 'mapUnSelect',
	        event: 'mapunselected',
	        method: 'unSelect'
	    }]);


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var List = __webpack_require__(119);
	    var SeriesModel = __webpack_require__(49);
	    var zrUtil = __webpack_require__(25);
	    var completeDimensions = __webpack_require__(124);
	
	    var formatUtil = __webpack_require__(27);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;
	
	    var dataSelectableMixin = __webpack_require__(164);
	
	    var geoCreator = __webpack_require__(187);
	
	    var MapSeries = SeriesModel.extend({
	
	        type: 'series.map',
	
	        dependencies: ['geo'],
	
	        layoutMode: 'box',
	
	        /**
	         * Only first map series of same mapType will drawMap
	         * @type {boolean}
	         */
	        needsDrawMap: false,
	
	        /**
	         * Group of all map series with same mapType
	         * @type {boolean}
	         */
	        seriesGroup: [],
	
	        init: function (option) {
	
	            option = this._fillOption(option, this.getMapType());
	            this.option = option;
	
	            MapSeries.superApply(this, 'init', arguments);
	
	            this.updateSelectedMap(option.data);
	        },
	
	        getInitialData: function (option) {
	            var dimensions = completeDimensions(['value'], option.data || []);
	
	            var list = new List(dimensions, this);
	
	            list.initData(option.data);
	
	            return list;
	        },
	
	        mergeOption: function (newOption) {
	            if (newOption.data) {
	                newOption = this._fillOption(newOption, this.getMapType());
	            }
	
	            MapSeries.superCall(this, 'mergeOption', newOption);
	
	            this.updateSelectedMap(this.option.data);
	        },
	
	        /**
	         * If no host geo model, return null, which means using a
	         * inner exclusive geo model.
	         */
	        getHostGeoModel: function () {
	            var geoIndex = this.option.geoIndex;
	            return geoIndex != null
	                ? this.dependentModels.geo[geoIndex]
	                : null;
	        },
	
	        getMapType: function () {
	            return (this.getHostGeoModel() || this).option.map;
	        },
	
	        _fillOption: function (option, mapName) {
	            // Shallow clone
	            option = zrUtil.extend({}, option);
	
	            option.data = geoCreator.getFilledRegions(option.data, mapName);
	
	            return option;
	        },
	
	        getRawValue: function (dataIndex) {
	            // Use value stored in data instead because it is calculated from multiple series
	            // FIXME Provide all value of multiple series ?
	            return this.getData().get('value', dataIndex);
	        },
	
	        /**
	         * Get model of region
	         * @param  {string} name
	         * @return {module:echarts/model/Model}
	         */
	        getRegionModel: function (regionName) {
	            var data = this.getData();
	            return data.getItemModel(data.indexOfName(regionName));
	        },
	
	        /**
	         * Map tooltip formatter
	         *
	         * @param {number} dataIndex
	         */
	        formatTooltip: function (dataIndex) {
	            // FIXME orignalData and data is a bit confusing
	            var data = this.getData();
	            var formattedValue = addCommas(this.getRawValue(dataIndex));
	            var name = data.getName(dataIndex);
	
	            var seriesGroup = this.seriesGroup;
	            var seriesNames = [];
	            for (var i = 0; i < seriesGroup.length; i++) {
	                var otherIndex = seriesGroup[i].originalData.indexOfName(name);
	                if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {
	                    seriesNames.push(
	                        encodeHTML(seriesGroup[i].name)
	                    );
	                }
	            }
	
	            return seriesNames.join(', ') + '<br />'
	                + encodeHTML(name + ' : ' + formattedValue);
	        },
	
	        /**
	         * @implement
	         */
	        getTooltipPosition: function (dataIndex) {
	            if (dataIndex != null) {
	                var name = this.getData().getName(dataIndex);
	                var geo = this.coordinateSystem;
	                var region = geo.getRegion(name);
	
	                return region && geo.dataToPoint(region.center);
	            }
	        },
	
	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },
	
	        setCenter: function (center) {
	            this.option.center = center;
	        },
	
	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 2,
	
	            coordinateSystem: 'geo',
	
	            // map should be explicitly specified since ec3.
	            map: '',
	
	            // If `geoIndex` is not specified, a exclusive geo will be
	            // created. Otherwise use the specified geo component, and
	            // `map` and `mapType` are ignored.
	            // geoIndex: 0,
	
	            // 'center' | 'left' | 'right' | 'x%' | {number}
	            left: 'center',
	            // 'center' | 'top' | 'bottom' | 'x%' | {number}
	            top: 'center',
	            // right
	            // bottom
	            // width:
	            // height
	
	            // Aspect is width / height. Inited to be geoJson bbox aspect
	            // This parameter is used for scale this aspect
	            aspectScale: 0.75,
	
	            ///// Layout with center and size
	            // If you wan't to put map in a fixed size box with right aspect ratio
	            // This two properties may more conveninet
	            // layoutCenter: [50%, 50%]
	            // layoutSize: 100
	
	
	            // 数值合并方式，默认加和，可选为：
	            // 'sum' | 'average' | 'max' | 'min'
	            // mapValueCalculation: 'sum',
	            // 地图数值计算结果小数精度
	            // mapValuePrecision: 0,
	
	
	            // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
	            showLegendSymbol: true,
	            // 选择模式，默认关闭，可选single，multiple
	            // selectedMode: false,
	            dataRangeHoverLink: true,
	            // 是否开启缩放及漫游模式
	            // roam: false,
	
	            // Default on center of map
	            center: null,
	
	            zoom: 1,
	
	            scaleLimit: null,
	
	            label: {
	                normal: {
	                    show: false,
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            },
	            // scaleLimit: null,
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderWidth: 0.5,
	                    borderColor: '#444',
	                    areaColor: '#eee'
	                },
	                // 也是选中样式
	                emphasis: {
	                    areaColor: 'rgba(255,215,0,0.8)'
	                }
	            }
	        }
	
	    });
	
	    zrUtil.mixin(MapSeries, dataSelectableMixin);
	
	    module.exports = MapSeries;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var Geo = __webpack_require__(188);
	
	    var layout = __webpack_require__(42);
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	
	    var mapDataStores = {};
	
	    /**
	     * Resize method bound to the geo
	     * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function resizeGeo (geoModel, api) {
	        var rect = this.getBoundingRect();
	
	        var boxLayoutOption;
	
	        var center = geoModel.get('layoutCenter');
	        var size = geoModel.get('layoutSize');
	
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();
	
	        var aspectScale = geoModel.get('aspectScale') || 0.75;
	        var aspect = rect.width / rect.height * aspectScale;
	
	        var useCenterAndSize = false;
	        if (center && size) {
	            center = [
	                numberUtil.parsePercent(center[0], viewWidth),
	                numberUtil.parsePercent(center[1], viewHeight)
	            ];
	            size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));
	
	            if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {
	                useCenterAndSize = true;
	            }
	            else {
	                if (__DEV__) {
	                    console.warn('Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.');
	                }
	            }
	        }
	
	        var viewRect;
	        if (useCenterAndSize) {
	            var viewRect = {};
	            if (aspect > 1) {
	                // Width is same with size
	                viewRect.width = size;
	                viewRect.height = size / aspect;
	            }
	            else {
	                viewRect.height = size;
	                viewRect.width = size * aspect;
	            }
	            viewRect.y = center[1] - viewRect.height / 2;
	            viewRect.x = center[0] - viewRect.width / 2;
	        }
	        else {
	            // Use left/top/width/height
	            boxLayoutOption = geoModel.getBoxLayoutParams();
	
	            // 0.75 rate
	            boxLayoutOption.aspect = aspect;
	
	            viewRect = layout.getLayoutRect(boxLayoutOption, {
	                width: viewWidth,
	                height: viewHeight
	            });
	        }
	
	        this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
	
	        this.setCenter(geoModel.get('center'));
	        this.setZoom(geoModel.get('zoom'));
	    }
	
	    /**
	     * @param {module:echarts/coord/Geo} geo
	     * @param {module:echarts/model/Model} model
	     * @inner
	     */
	    function setGeoCoords(geo, model) {
	        zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
	            geo.addGeoCoord(name, geoCoord);
	        });
	    }
	
	    if (__DEV__) {
	        var mapNotExistsError = function (name) {
	            console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
	        };
	    }
	
	    var geoCreator = {
	
	        // For deciding which dimensions to use when creating list data
	        dimensions: Geo.prototype.dimensions,
	
	        create: function (ecModel, api) {
	            var geoList = [];
	
	            // FIXME Create each time may be slow
	            ecModel.eachComponent('geo', function (geoModel, idx) {
	                var name = geoModel.get('map');
	                var mapData = mapDataStores[name];
	                if (__DEV__) {
	                    if (!mapData) {
	                        mapNotExistsError(name);
	                    }
	                }
	                var geo = new Geo(
	                    name + idx, name,
	                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
	                    geoModel.get('nameMap')
	                );
	                geo.zoomLimit = geoModel.get('scaleLimit');
	                geoList.push(geo);
	
	                setGeoCoords(geo, geoModel);
	
	                geoModel.coordinateSystem = geo;
	                geo.model = geoModel;
	
	                // Inject resize method
	                geo.resize = resizeGeo;
	
	                geo.resize(geoModel, api);
	            });
	
	            ecModel.eachSeries(function (seriesModel) {
	                var coordSys = seriesModel.get('coordinateSystem');
	                if (coordSys === 'geo') {
	                    var geoIndex = seriesModel.get('geoIndex') || 0;
	                    seriesModel.coordinateSystem = geoList[geoIndex];
	                }
	            });
	
	            // If has map series
	            var mapModelGroupBySeries = {};
	
	            ecModel.eachSeriesByType('map', function (seriesModel) {
	                if (!seriesModel.getHostGeoModel()) {
	                    var mapType = seriesModel.getMapType();
	                    mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
	                    mapModelGroupBySeries[mapType].push(seriesModel);
	                }
	            });
	
	            zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
	                var mapData = mapDataStores[mapType];
	                if (__DEV__) {
	                    if (!mapData) {
	                        mapNotExistsError(mapSeries[0].get('map'));
	                    }
	                }
	
	                var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
	                    return singleMapSeries.get('nameMap');
	                });
	                var geo = new Geo(
	                    mapType, mapType,
	                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
	                    zrUtil.mergeAll(nameMapList)
	                );
	                geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {
	                    return singleMapSeries.get('scaleLimit');
	                }));
	                geoList.push(geo);
	
	                // Inject resize method
	                geo.resize = resizeGeo;
	
	                geo.resize(mapSeries[0], api);
	
	                zrUtil.each(mapSeries, function (singleMapSeries) {
	                    singleMapSeries.coordinateSystem = geo;
	
	                    setGeoCoords(geo, singleMapSeries);
	                });
	            });
	
	            return geoList;
	        },
	
	        /**
	         * @param {string} mapName
	         * @param {Object|string} geoJson
	         * @param {Object} [specialAreas]
	         *
	         * @example
	         *     $.get('USA.json', function (geoJson) {
	         *         echarts.registerMap('USA', geoJson);
	         *         // Or
	         *         echarts.registerMap('USA', {
	         *             geoJson: geoJson,
	         *             specialAreas: {}
	         *         })
	         *     });
	         */
	        registerMap: function (mapName, geoJson, specialAreas) {
	            if (geoJson.geoJson && !geoJson.features) {
	                specialAreas = geoJson.specialAreas;
	                geoJson = geoJson.geoJson;
	            }
	            if (typeof geoJson === 'string') {
	                geoJson = (typeof JSON !== 'undefined' && JSON.parse)
	                    ? JSON.parse(geoJson) : (new Function('return (' + geoJson + ');'))();
	            }
	            mapDataStores[mapName] = {
	                geoJson: geoJson,
	                specialAreas: specialAreas
	            };
	        },
	
	        /**
	         * @param {string} mapName
	         * @return {Object}
	         */
	        getMap: function (mapName) {
	            return mapDataStores[mapName];
	        },
	
	        /**
	         * Fill given regions array
	         * @param  {Array.<Object>} originRegionArr
	         * @param  {string} mapName
	         * @return {Array}
	         */
	        getFilledRegions: function (originRegionArr, mapName) {
	            // Not use the original
	            var regionsArr = (originRegionArr || []).slice();
	
	            var map = geoCreator.getMap(mapName);
	            var geoJson = map && map.geoJson;
	            if (!geoJson) {
	                if (__DEV__) {
	                    mapNotExistsError(mapName);
	                }
	                return originRegionArr;
	            }
	
	            var dataNameMap = {};
	            var features = geoJson.features;
	            for (var i = 0; i < regionsArr.length; i++) {
	                dataNameMap[regionsArr[i].name] = regionsArr[i];
	            }
	
	            for (var i = 0; i < features.length; i++) {
	                var name = features[i].properties.name;
	                if (!dataNameMap[name]) {
	                    regionsArr.push({
	                        name: name
	                    });
	                }
	            }
	            return regionsArr;
	        }
	    };
	
	    // Inject methods into echarts
	    var echarts = __webpack_require__(22);
	
	    echarts.registerMap = geoCreator.registerMap;
	
	    echarts.getMap = geoCreator.getMap;
	
	    // TODO
	    echarts.loadMap = function () {};
	
	    echarts.registerCoordinateSystem('geo', geoCreator);
	
	    module.exports = geoCreator;


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var parseGeoJson = __webpack_require__(189);
	
	    var zrUtil = __webpack_require__(25);
	
	    var BoundingRect = __webpack_require__(30);
	
	    var View = __webpack_require__(192);
	
	
	    // Geo fix functions
	    var geoFixFuncs = [
	        __webpack_require__(193),
	        __webpack_require__(194),
	        __webpack_require__(195)
	    ];
	
	    /**
	     * [Geo description]
	     * @param {string} name Geo name
	     * @param {string} map Map type
	     * @param {Object} geoJson
	     * @param {Object} [specialAreas]
	     *        Specify the positioned areas by left, top, width, height
	     * @param {Object.<string, string>} [nameMap]
	     *        Specify name alias
	     */
	    function Geo(name, map, geoJson, specialAreas, nameMap) {
	
	        View.call(this, name);
	
	        /**
	         * Map type
	         * @type {string}
	         */
	        this.map = map;
	
	        this._nameCoordMap = {};
	
	        this.loadGeoJson(geoJson, specialAreas, nameMap);
	    }
	
	    Geo.prototype = {
	
	        constructor: Geo,
	
	        type: 'geo',
	
	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['lng', 'lat'],
	
	        /**
	         * If contain given lng,lat coord
	         * @param {Array.<number>}
	         * @readOnly
	         */
	        containCoord: function (coord) {
	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                if (regions[i].contain(coord)) {
	                    return true;
	                }
	            }
	            return false;
	        },
	        /**
	         * @param {Object} geoJson
	         * @param {Object} [specialAreas]
	         *        Specify the positioned areas by left, top, width, height
	         * @param {Object.<string, string>} [nameMap]
	         *        Specify name alias
	         */
	        loadGeoJson: function (geoJson, specialAreas, nameMap) {
	            // https://jsperf.com/try-catch-performance-overhead
	            try {
	                this.regions = geoJson ? parseGeoJson(geoJson) : [];
	            }
	            catch (e) {
	                throw 'Invalid geoJson format\n' + e;
	            }
	            specialAreas = specialAreas || {};
	            nameMap = nameMap || {};
	            var regions = this.regions;
	            var regionsMap = {};
	            for (var i = 0; i < regions.length; i++) {
	                var regionName = regions[i].name;
	                // Try use the alias in nameMap
	                regionName = nameMap[regionName] || regionName;
	                regions[i].name = regionName;
	
	                regionsMap[regionName] = regions[i];
	                // Add geoJson
	                this.addGeoCoord(regionName, regions[i].center);
	
	                // Some area like Alaska in USA map needs to be tansformed
	                // to look better
	                var specialArea = specialAreas[regionName];
	                if (specialArea) {
	                    regions[i].transformTo(
	                        specialArea.left, specialArea.top, specialArea.width, specialArea.height
	                    );
	                }
	            }
	
	            this._regionsMap = regionsMap;
	
	            this._rect = null;
	
	            zrUtil.each(geoFixFuncs, function (fixFunc) {
	                fixFunc(this);
	            }, this);
	        },
	
	        // Overwrite
	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();
	
	            rect = rect.clone();
	            // Longitute is inverted
	            rect.y = -rect.y - rect.height;
	
	            var viewTransform = this._viewTransform;
	
	            viewTransform.transform = rect.calculateTransform(
	                new BoundingRect(x, y, width, height)
	            );
	
	            viewTransform.decomposeTransform();
	
	            var scale = viewTransform.scale;
	            scale[1] = -scale[1];
	
	            viewTransform.updateTransform();
	
	            this._updateTransform();
	        },
	
	        /**
	         * @param {string} name
	         * @return {module:echarts/coord/geo/Region}
	         */
	        getRegion: function (name) {
	            return this._regionsMap[name];
	        },
	
	        getRegionByCoord: function (coord) {
	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                if (regions[i].contain(coord)) {
	                    return regions[i];
	                }
	            }
	        },
	
	        /**
	         * Add geoCoord for indexing by name
	         * @param {string} name
	         * @param {Array.<number>} geoCoord
	         */
	        addGeoCoord: function (name, geoCoord) {
	            this._nameCoordMap[name] = geoCoord;
	        },
	
	        /**
	         * Get geoCoord by name
	         * @param {string} name
	         * @return {Array.<number>}
	         */
	        getGeoCoord: function (name) {
	            return this._nameCoordMap[name];
	        },
	
	        // Overwrite
	        getBoundingRect: function () {
	            if (this._rect) {
	                return this._rect;
	            }
	            var rect;
	
	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                var regionRect = regions[i].getBoundingRect();
	                rect = rect || regionRect.clone();
	                rect.union(regionRect);
	            }
	            // FIXME Always return new ?
	            return (this._rect = rect || new BoundingRect(0, 0, 0, 0));
	        },
	
	        /**
	         * Convert series data to a list of points
	         * @param {module:echarts/data/List} data
	         * @param {boolean} stack
	         * @return {Array}
	         *  Return list of points. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data) {
	            var item = [];
	            return data.mapArray(['lng', 'lat'], function (lon, lat) {
	                item[0] = lon;
	                item[1] = lat;
	                return this.dataToPoint(item);
	            }, this);
	        },
	
	        // Overwrite
	        /**
	         * @param {string|Array.<number>} data
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data) {
	            if (typeof data === 'string') {
	                // Map area name to geoCoord
	                data = this.getGeoCoord(data);
	            }
	            if (data) {
	                return View.prototype.dataToPoint.call(this, data);
	            }
	        },
	
	        /**
	         * @override
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),
	
	        /**
	         * @override
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertFromPixel: zrUtil.curry(doConvert, 'pointToData')
	
	    };
	
	    zrUtil.mixin(Geo, View);
	
	    function doConvert(methodName, ecModel, finder, value) {
	        var geoModel = finder.geoModel;
	        var seriesModel = finder.seriesModel;
	
	        var coordSys = geoModel
	            ? geoModel.coordinateSystem
	            : seriesModel
	            ? (
	                seriesModel.coordinateSystem // For map.
	                || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem
	            )
	            : null;
	
	        return coordSys === this ? coordSys[methodName](value) : null;
	    }
	
	    module.exports = Geo;


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var Region = __webpack_require__(190);
	
	    function decode(json) {
	        if (!json.UTF8Encoding) {
	            return json;
	        }
	        var features = json.features;
	
	        for (var f = 0; f < features.length; f++) {
	            var feature = features[f];
	            var geometry = feature.geometry;
	            var coordinates = geometry.coordinates;
	            var encodeOffsets = geometry.encodeOffsets;
	
	            for (var c = 0; c < coordinates.length; c++) {
	                var coordinate = coordinates[c];
	
	                if (geometry.type === 'Polygon') {
	                    coordinates[c] = decodePolygon(
	                        coordinate,
	                        encodeOffsets[c]
	                    );
	                }
	                else if (geometry.type === 'MultiPolygon') {
	                    for (var c2 = 0; c2 < coordinate.length; c2++) {
	                        var polygon = coordinate[c2];
	                        coordinate[c2] = decodePolygon(
	                            polygon,
	                            encodeOffsets[c][c2]
	                        );
	                    }
	                }
	            }
	        }
	        // Has been decoded
	        json.UTF8Encoding = false;
	        return json;
	    }
	
	    function decodePolygon(coordinate, encodeOffsets) {
	        var result = [];
	        var prevX = encodeOffsets[0];
	        var prevY = encodeOffsets[1];
	
	        for (var i = 0; i < coordinate.length; i += 2) {
	            var x = coordinate.charCodeAt(i) - 64;
	            var y = coordinate.charCodeAt(i + 1) - 64;
	            // ZigZag decoding
	            x = (x >> 1) ^ (-(x & 1));
	            y = (y >> 1) ^ (-(y & 1));
	            // Delta deocding
	            x += prevX;
	            y += prevY;
	
	            prevX = x;
	            prevY = y;
	            // Dequantize
	            result.push([x / 1024, y / 1024]);
	        }
	
	        return result;
	    }
	
	    /**
	     * @inner
	     */
	    function flattern2D(array) {
	        var ret = [];
	        for (var i = 0; i < array.length; i++) {
	            for (var k = 0; k < array[i].length; k++) {
	                ret.push(array[i][k]);
	            }
	        }
	        return ret;
	    }
	
	    /**
	     * @alias module:echarts/coord/geo/parseGeoJson
	     * @param {Object} geoJson
	     * @return {module:zrender/container/Group}
	     */
	    module.exports = function (geoJson) {
	
	        decode(geoJson);
	
	        return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	            // Output of mapshaper may have geometry null
	            return featureObj.geometry && featureObj.properties;
	        }), function (featureObj) {
	            var properties = featureObj.properties;
	            var geometry = featureObj.geometry;
	
	            var coordinates = geometry.coordinates;
	
	            if (geometry.type === 'MultiPolygon') {
	                coordinates = flattern2D(coordinates);
	            }
	
	            return new Region(
	                properties.name,
	                coordinates,
	                properties.cp
	            );
	        });
	    };


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/coord/geo/Region
	 */
	
	
	    var polygonContain = __webpack_require__(191);
	
	    var BoundingRect = __webpack_require__(30);
	
	    var bbox = __webpack_require__(72);
	    var vec2 = __webpack_require__(31);
	
	    /**
	     * @param {string} name
	     * @param {Array} contours
	     * @param {Array.<number>} cp
	     */
	    function Region(name, contours, cp) {
	
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.name = name;
	
	        /**
	         * @type {Array.<Array>}
	         * @readOnly
	         */
	        this.contours = contours;
	
	        if (!cp) {
	            var rect = this.getBoundingRect();
	            cp = [
	                rect.x + rect.width / 2,
	                rect.y + rect.height / 2
	            ];
	        }
	        else {
	            cp = [cp[0], cp[1]];
	        }
	        /**
	         * @type {Array.<number>}
	         */
	        this.center = cp;
	    }
	
	    Region.prototype = {
	
	        constructor: Region,
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function () {
	            var rect = this._rect;
	            if (rect) {
	                return rect;
	            }
	
	            var MAX_NUMBER = Number.MAX_VALUE;
	            var min = [MAX_NUMBER, MAX_NUMBER];
	            var max = [-MAX_NUMBER, -MAX_NUMBER];
	            var min2 = [];
	            var max2 = [];
	            var contours = this.contours;
	            for (var i = 0; i < contours.length; i++) {
	                bbox.fromPoints(contours[i], min2, max2);
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }
	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }
	
	            return (this._rect = new BoundingRect(
	                min[0], min[1], max[0] - min[0], max[1] - min[1]
	            ));
	        },
	
	        /**
	         * @param {<Array.<number>} coord
	         * @return {boolean}
	         */
	        contain: function (coord) {
	            var rect = this.getBoundingRect();
	            var contours = this.contours;
	            if (rect.contain(coord[0], coord[1])) {
	                for (var i = 0, len = contours.length; i < len; i++) {
	                    if (polygonContain.contain(contours[i], coord[0], coord[1])) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        },
	
	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();
	            var aspect = rect.width / rect.height;
	            if (!width) {
	                width = aspect * height;
	            }
	            else if (!height) {
	                height = width / aspect ;
	            }
	            var target = new BoundingRect(x, y, width, height);
	            var transform = rect.calculateTransform(target);
	            var contours = this.contours;
	            for (var i = 0; i < contours.length; i++) {
	                for (var p = 0; p < contours[i].length; p++) {
	                    vec2.applyTransform(contours[i][p], contours[i][p], transform);
	                }
	            }
	            rect = this._rect;
	            rect.copy(target);
	            // Update center
	            this.center = [
	                rect.x + rect.width / 2,
	                rect.y + rect.height / 2
	            ];
	        }
	    };
	
	    module.exports = Region;


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var windingLine = __webpack_require__(79);
	
	    var EPSILON = 1e-8;
	
	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }
	
	    function contain(points, x, y) {
	        var w = 0;
	        var p = points[0];
	
	        if (!p) {
	            return false;
	        }
	
	        for (var i = 1; i < points.length; i++) {
	            var p2 = points[i];
	            w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	            p = p2;
	        }
	
	        // Close polygon
	        var p0 = points[0];
	        if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	            w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	        }
	
	        return w !== 0;
	    }
	
	
	    module.exports = {
	        contain: contain
	    };


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Simple view coordinate system
	 * Mapping given x, y to transformd view x, y
	 */
	
	
	    var vector = __webpack_require__(31);
	    var matrix = __webpack_require__(32);
	
	    var Transformable = __webpack_require__(55);
	    var zrUtil = __webpack_require__(25);
	
	    var BoundingRect = __webpack_require__(30);
	
	    var v2ApplyTransform = vector.applyTransform;
	
	    // Dummy transform node
	    function TransformDummy() {
	        Transformable.call(this);
	    }
	    zrUtil.mixin(TransformDummy, Transformable);
	
	    function View(name) {
	        /**
	         * @type {string}
	         */
	        this.name = name;
	
	        /**
	         * @type {Object}
	         */
	        this.zoomLimit;
	
	        Transformable.call(this);
	
	        this._roamTransform = new TransformDummy();
	
	        this._viewTransform = new TransformDummy();
	
	        this._center;
	        this._zoom;
	    }
	
	    View.prototype = {
	
	        constructor: View,
	
	        type: 'view',
	
	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['x', 'y'],
	
	        /**
	         * Set bounding rect
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */
	
	        // PENDING to getRect
	        setBoundingRect: function (x, y, width, height) {
	            this._rect = new BoundingRect(x, y, width, height);
	            return this._rect;
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        // PENDING to getRect
	        getBoundingRect: function () {
	            return this._rect;
	        },
	
	        /**
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */
	        setViewRect: function (x, y, width, height) {
	            this.transformTo(x, y, width, height);
	            this._viewRect = new BoundingRect(x, y, width, height);
	        },
	
	        /**
	         * Transformed to particular position and size
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */
	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();
	            var viewTransform = this._viewTransform;
	
	            viewTransform.transform = rect.calculateTransform(
	                new BoundingRect(x, y, width, height)
	            );
	
	            viewTransform.decomposeTransform();
	
	            this._updateTransform();
	        },
	
	        /**
	         * Set center of view
	         * @param {Array.<number>} [centerCoord]
	         */
	        setCenter: function (centerCoord) {
	            if (!centerCoord) {
	                return;
	            }
	            this._center = centerCoord;
	
	            this._updateCenterAndZoom();
	        },
	
	        /**
	         * @param {number} zoom
	         */
	        setZoom: function (zoom) {
	            zoom = zoom || 1;
	
	            var zoomLimit = this.zoomLimit;
	            if (zoomLimit) {
	                if (zoomLimit.max != null) {
	                    zoom = Math.min(zoomLimit.max, zoom);
	                }
	                if (zoomLimit.min != null) {
	                    zoom = Math.max(zoomLimit.min, zoom);
	                }
	            }
	            this._zoom = zoom;
	
	            this._updateCenterAndZoom();
	        },
	
	        /**
	         * Get default center without roam
	         */
	        getDefaultCenter: function () {
	            // Rect before any transform
	            var rawRect = this.getBoundingRect();
	            var cx = rawRect.x + rawRect.width / 2;
	            var cy = rawRect.y + rawRect.height / 2;
	
	            return [cx, cy];
	        },
	
	        getCenter: function () {
	            return this._center || this.getDefaultCenter();
	        },
	
	        getZoom: function () {
	            return this._zoom || 1;
	        },
	
	        /**
	         * @return {Array.<number}
	         */
	        getRoamTransform: function () {
	            return this._roamTransform;
	        },
	
	        _updateCenterAndZoom: function () {
	            // Must update after view transform updated
	            var viewTransformMatrix = this._viewTransform.getLocalTransform();
	            var roamTransform = this._roamTransform;
	            var defaultCenter = this.getDefaultCenter();
	            var center = this.getCenter();
	            var zoom = this.getZoom();
	
	            center = vector.applyTransform([], center, viewTransformMatrix);
	            defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);
	
	            roamTransform.origin = center;
	            roamTransform.position = [
	                defaultCenter[0] - center[0],
	                defaultCenter[1] - center[1]
	            ];
	            roamTransform.scale = [zoom, zoom];
	
	            this._updateTransform();
	        },
	
	        /**
	         * Update transform from roam and mapLocation
	         * @private
	         */
	        _updateTransform: function () {
	            var roamTransform = this._roamTransform;
	            var viewTransform = this._viewTransform;
	
	            viewTransform.parent = roamTransform;
	            roamTransform.updateTransform();
	            viewTransform.updateTransform();
	
	            viewTransform.transform
	                && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);
	
	            if (this.transform) {
	                this.invTransform = this.invTransform || [];
	                matrix.invert(this.invTransform, this.transform);
	            }
	            else {
	                this.invTransform = null;
	            }
	            this.decomposeTransform();
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getViewRect: function () {
	            return this._viewRect;
	        },
	
	        /**
	         * Get view rect after roam transform
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getViewRectAfterRoam: function () {
	            var rect = this.getBoundingRect().clone();
	            rect.applyTransform(this.transform);
	            return rect;
	        },
	
	        /**
	         * Convert a single (lon, lat) data item to (x, y) point.
	         * @param {Array.<number>} data
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data) {
	            var transform = this.transform;
	            return transform
	                ? v2ApplyTransform([], data, transform)
	                : [data[0], data[1]];
	        },
	
	        /**
	         * Convert a (x, y) point to (lon, lat) data
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToData: function (point) {
	            var invTransform = this.invTransform;
	            return invTransform
	                ? v2ApplyTransform([], point, invTransform)
	                : [point[0], point[1]];
	        },
	
	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),
	
	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),
	
	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        containPoint: function (point) {
	            return this.getViewRectAfterRoam().contain(point[0], point[1]);
	        }
	
	        /**
	         * @return {number}
	         */
	        // getScalarScale: function () {
	        //     // Use determinant square root of transform to mutiply scalar
	        //     var m = this.transform;
	        //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
	        //     return det;
	        // }
	    };
	
	    zrUtil.mixin(View, Transformable);
	
	    function doConvert(methodName, ecModel, finder, value) {
	        var seriesModel = finder.seriesModel;
	        var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.
	        return coordSys === this ? coordSys[methodName](value) : null;
	    }
	
	    module.exports = View;


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	// Fix for 南海诸岛
	
	
	    var Region = __webpack_require__(190);
	
	    var geoCoord = [126, 25];
	
	    var points = [
	        [[0,3.5],[7,11.2],[15,11.9],[30,7],[42,0.7],[52,0.7],
	         [56,7.7],[59,0.7],[64,0.7],[64,0],[5,0],[0,3.5]],
	        [[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],
	        [[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],
	        [[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],
	        [[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],
	        [[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],
	        [[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],
	        [[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],
	        [[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],
	        [[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],
	        [[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],
	        [[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],
	         [1,92.4],[1,3.5],[0,3.5]]
	    ];
	    for (var i = 0; i < points.length; i++) {
	        for (var k = 0; k < points[i].length; k++) {
	            points[i][k][0] /= 10.5;
	            points[i][k][1] /= -10.5 / 0.75;
	
	            points[i][k][0] += geoCoord[0];
	            points[i][k][1] += geoCoord[1];
	        }
	    }
	    module.exports = function (geo) {
	        if (geo.map === 'china') {
	            geo.regions.push(new Region(
	                '南海诸岛', points, geoCoord
	            ));
	        }
	    };


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var coordsOffsetMap = {
	        '南海诸岛' : [32, 80],
	        // 全国
	        '广东': [0, -10],
	        '香港': [10, 5],
	        '澳门': [-10, 10],
	        //'北京': [-10, 0],
	        '天津': [5, 5]
	    };
	
	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var coordFix = coordsOffsetMap[region.name];
	            if (coordFix) {
	                var cp = region.center;
	                cp[0] += coordFix[0] / 10.5;
	                cp[1] += -coordFix[1] / (10.5 / 0.75);
	            }
	        });
	    };


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var geoCoordMap = {
	        'Russia': [100, 60],
	        'United States of America': [-99, 38]
	    };
	
	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var geoCoord = geoCoordMap[region.name];
	            if (geoCoord) {
	                var cp = region.center;
	                cp[0] = geoCoord[0];
	                cp[1] = geoCoord[1];
	            }
	        });
	    };


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    // var zrUtil = require('zrender/lib/core/util');
	    var graphic = __webpack_require__(64);
	
	    var MapDraw = __webpack_require__(197);
	
	    __webpack_require__(22).extendChartView({
	
	        type: 'map',
	
	        render: function (mapModel, ecModel, api, payload) {
	            // Not render if it is an toggleSelect action from self
	            if (payload && payload.type === 'mapToggleSelect'
	                && payload.from === this.uid
	            ) {
	                return;
	            }
	
	            var group = this.group;
	            group.removeAll();
	
	            if (mapModel.getHostGeoModel()) {
	                return;
	            }
	
	            // Not update map if it is an roam action from self
	            if (!(payload && payload.type === 'geoRoam'
	                    && payload.componentType === 'series'
	                    && payload.seriesId === mapModel.id
	                )
	            ) {
	                if (mapModel.needsDrawMap) {
	                    var mapDraw = this._mapDraw || new MapDraw(api, true);
	                    group.add(mapDraw.group);
	
	                    mapDraw.draw(mapModel, ecModel, api, this, payload);
	
	                    this._mapDraw = mapDraw;
	                }
	                else {
	                    // Remove drawed map
	                    this._mapDraw && this._mapDraw.remove();
	                    this._mapDraw = null;
	                }
	            }
	            else {
	                var mapDraw = this._mapDraw;
	                mapDraw && group.add(mapDraw.group);
	            }
	
	            mapModel.get('showLegendSymbol') && ecModel.getComponent('legend')
	                && this._renderSymbols(mapModel, ecModel, api);
	        },
	
	        remove: function () {
	            this._mapDraw && this._mapDraw.remove();
	            this._mapDraw = null;
	            this.group.removeAll();
	        },
	
	        dispose: function () {
	            this._mapDraw && this._mapDraw.remove();
	            this._mapDraw = null;
	        },
	
	        _renderSymbols: function (mapModel, ecModel, api) {
	            var originalData = mapModel.originalData;
	            var group = this.group;
	
	            originalData.each('value', function (value, idx) {
	                if (isNaN(value)) {
	                    return;
	                }
	
	                var layout = originalData.getItemLayout(idx);
	
	                if (!layout || !layout.point) {
	                    // Not exists in map
	                    return;
	                }
	
	                var point = layout.point;
	                var offset = layout.offset;
	
	                var circle = new graphic.Circle({
	                    style: {
	                        // Because the special of map draw.
	                        // Which needs statistic of multiple series and draw on one map.
	                        // And each series also need a symbol with legend color
	                        //
	                        // Layout and visual are put one the different data
	                        fill: mapModel.getData().getVisual('color')
	                    },
	                    shape: {
	                        cx: point[0] + offset * 9,
	                        cy: point[1],
	                        r: 3
	                    },
	                    silent: true,
	                    z2: 10
	                });
	
	                // First data on the same region
	                if (!offset) {
	                    var fullData = mapModel.mainSeries.getData();
	                    var name = originalData.getName(idx);
	                    var labelText = name;
	                    var fullIndex = fullData.indexOfName(name);
	
	                    var itemModel = originalData.getItemModel(idx);
	                    var labelModel = itemModel.getModel('label.normal');
	                    var hoverLabelModel = itemModel.getModel('label.emphasis');
	
	                    var textStyleModel = labelModel.getModel('textStyle');
	                    var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');
	
	                    var polygonGroups = fullData.getItemGraphicEl(fullIndex);
	                    circle.setStyle({
	                        textPosition: 'bottom'
	                    });
	
	                    var onEmphasis = function () {
	                        circle.setStyle({
	                            text: hoverLabelModel.get('show') ? labelText : '',
	                            textFill: hoverTextStyleModel.getTextColor(),
	                            textFont: hoverTextStyleModel.getFont()
	                        });
	                    };
	
	                    var onNormal = function () {
	                        circle.setStyle({
	                            text: labelModel.get('show') ? labelText : '',
	                            textFill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont()
	                        });
	                    };
	
	                    polygonGroups.on('mouseover', onEmphasis)
	                        .on('mouseout', onNormal)
	                        .on('emphasis', onEmphasis)
	                        .on('normal', onNormal);
	
	                    onNormal();
	                }
	
	                group.add(circle);
	            });
	        }
	    });


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/helper/MapDraw
	 */
	
	
	    var RoamController = __webpack_require__(198);
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    function getFixedItemStyle(model, scale) {
	        var itemStyle = model.getItemStyle();
	        var areaColor = model.get('areaColor');
	
	        // If user want the color not to be changed when hover,
	        // they should both set areaColor and color to be null.
	        if (areaColor != null) {
	            itemStyle.fill = areaColor;
	        }
	
	        return itemStyle;
	    }
	
	    function updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {
	        group.off('click');
	        group.off('mousedown');
	
	        if (mapOrGeoModel.get('selectedMode')) {
	
	            group.on('mousedown', function () {
	                mapDraw._mouseDownFlag = true;
	            });
	
	            group.on('click', function (e) {
	                if (!mapDraw._mouseDownFlag) {
	                    return;
	                }
	                mapDraw._mouseDownFlag = false;
	
	                var el = e.target;
	                while (!el.__region) {
	                    el = el.parent;
	                }
	                if (!el) {
	                    return;
	                }
	
	                var region = el.__region;
	                var action = {
	                    type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',
	                    name: region.name,
	                    from: fromView.uid
	                };
	                action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;
	
	                api.dispatchAction(action);
	
	                updateMapSelected(mapOrGeoModel, group);
	            });
	        }
	    }
	
	    function updateMapSelected(mapOrGeoModel, group) {
	        // FIXME
	        group.eachChild(function (otherRegionEl) {
	            if (otherRegionEl.__region) {
	                otherRegionEl.trigger(mapOrGeoModel.isSelected(otherRegionEl.__region.name) ? 'emphasis' : 'normal');
	            }
	        });
	    }
	
	    /**
	     * @alias module:echarts/component/helper/MapDraw
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {boolean} updateGroup
	     */
	    function MapDraw(api, updateGroup) {
	
	        var group = new graphic.Group();
	
	        /**
	         * @type {module:echarts/component/helper/RoamController}
	         * @private
	         */
	        this._controller = new RoamController(
	            api.getZr(), updateGroup ? group : null, null
	        );
	
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = group;
	
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._updateGroup = updateGroup;
	
	        /**
	         * This flag is used to make sure that only one among
	         * `pan`, `zoom`, `click` can occurs, otherwise 'selected'
	         * action may be triggered when `pan`, which is unexpected.
	         * @type {booelan}
	         */
	        this._mouseDownFlag;
	    }
	
	    MapDraw.prototype = {
	
	        constructor: MapDraw,
	
	        draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {
	
	            var isGeo = mapOrGeoModel.mainType === 'geo';
	
	            // map series has data, geo model that controlled by map series
	            // has no data, otherwise data exists.
	            var data = mapOrGeoModel.getData && mapOrGeoModel.getData();
	            isGeo && ecModel.eachComponent({mainType: 'series', subType: 'map'}, function (mapSeries) {
	                if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {
	                    data = mapSeries.getData();
	                }
	            });
	
	            var geo = mapOrGeoModel.coordinateSystem;
	
	            var group = this.group;
	
	            var scale = geo.scale;
	            var groupNewProp = {
	                position: geo.position,
	                scale: scale
	            };
	
	            // No animation when first draw or in action
	            if (!group.childAt(0) || payload) {
	                group.attr(groupNewProp);
	            }
	            else {
	                graphic.updateProps(group, groupNewProp, mapOrGeoModel);
	            }
	
	            group.removeAll();
	
	            var itemStyleAccessPath = ['itemStyle', 'normal'];
	            var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
	            var labelAccessPath = ['label', 'normal'];
	            var hoverLabelAccessPath = ['label', 'emphasis'];
	
	            zrUtil.each(geo.regions, function (region) {
	
	                var regionGroup = new graphic.Group();
	                var compoundPath = new graphic.CompoundPath({
	                    shape: {
	                        paths: []
	                    }
	                });
	                regionGroup.add(compoundPath);
	
	                var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;
	
	                var itemStyleModel = regionModel.getModel(itemStyleAccessPath);
	                var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);
	                var itemStyle = getFixedItemStyle(itemStyleModel, scale);
	                var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);
	
	                var labelModel = regionModel.getModel(labelAccessPath);
	                var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);
	
	                var dataIdx;
	                // Use the itemStyle in data if has data
	                if (data) {
	                    dataIdx = data.indexOfName(region.name);
	                    // Only visual color of each item will be used. It can be encoded by dataRange
	                    // But visual color of series is used in symbol drawing
	                    //
	                    // Visual color for each series is for the symbol draw
	                    var visualColor = data.getItemVisual(dataIdx, 'color', true);
	                    if (visualColor) {
	                        itemStyle.fill = visualColor;
	                    }
	                }
	
	                var textStyleModel = labelModel.getModel('textStyle');
	                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');
	
	                zrUtil.each(region.contours, function (contour) {
	
	                    var polygon = new graphic.Polygon({
	                        shape: {
	                            points: contour
	                        }
	                    });
	
	                    compoundPath.shape.paths.push(polygon);
	                });
	
	                compoundPath.setStyle(itemStyle);
	                compoundPath.style.strokeNoScale = true;
	                compoundPath.culling = true;
	                // Label
	                var showLabel = labelModel.get('show');
	                var hoverShowLabel = hoverLabelModel.get('show');
	
	                var isDataNaN = data && isNaN(data.get('value', dataIdx));
	                var itemLayout = data && data.getItemLayout(dataIdx);
	                // In the following cases label will be drawn
	                // 1. In map series and data value is NaN
	                // 2. In geo component
	                // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout
	                if (
	                    (isGeo || isDataNaN && (showLabel || hoverShowLabel))
	                 || (itemLayout && itemLayout.showLabel)
	                 ) {
	                    var query = data ? dataIdx : region.name;
	                    var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');
	                    var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');
	                    var text = new graphic.Text({
	                        style: {
	                            text: showLabel ? (formattedStr || region.name) : '',
	                            fill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont(),
	                            textAlign: 'center',
	                            textVerticalAlign: 'middle'
	                        },
	                        hoverStyle: {
	                            text: hoverShowLabel ? (hoverFormattedStr || region.name) : '',
	                            fill: hoverTextStyleModel.getTextColor(),
	                            textFont: hoverTextStyleModel.getFont()
	                        },
	                        position: region.center.slice(),
	                        scale: [1 / scale[0], 1 / scale[1]],
	                        z2: 10,
	                        silent: true
	                    });
	
	                    regionGroup.add(text);
	                }
	
	                // setItemGraphicEl, setHoverStyle after all polygons and labels
	                // are added to the rigionGroup
	                if (data) {
	                    data.setItemGraphicEl(dataIdx, regionGroup);
	                }
	                else {
	                    var regionModel = mapOrGeoModel.getRegionModel(region.name);
	                    // Package custom mouse event for geo component
	                    compoundPath.eventData = {
	                        componentType: 'geo',
	                        geoIndex: mapOrGeoModel.componentIndex,
	                        name: region.name,
	                        region: (regionModel && regionModel.option) || {}
	                    };
	                }
	
	                regionGroup.__region = region;
	
	                graphic.setHoverStyle(
	                    regionGroup,
	                    hoverItemStyle,
	                    {hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')}
	                );
	
	                group.add(regionGroup);
	            });
	
	            this._updateController(mapOrGeoModel, ecModel, api);
	
	            updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);
	
	            updateMapSelected(mapOrGeoModel, group);
	        },
	
	        remove: function () {
	            this.group.removeAll();
	            this._controller.dispose();
	        },
	
	        _updateController: function (mapOrGeoModel, ecModel, api) {
	            var geo = mapOrGeoModel.coordinateSystem;
	            var controller = this._controller;
	            controller.zoomLimit = mapOrGeoModel.get('scaleLimit');
	            // Update zoom from model
	            controller.zoom = geo.getZoom();
	            // roamType is will be set default true if it is null
	            controller.enable(mapOrGeoModel.get('roam') || false);
	            var mainType = mapOrGeoModel.mainType;
	
	            function makeActionBase() {
	                var action = {
	                    type: 'geoRoam',
	                    componentType: mainType
	                };
	                action[mainType + 'Id'] = mapOrGeoModel.id;
	                return action;
	            }
	
	            controller.off('pan').on('pan', function (dx, dy) {
	                this._mouseDownFlag = false;
	
	                api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                    dx: dx,
	                    dy: dy
	                }));
	            }, this);
	
	            controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {
	                this._mouseDownFlag = false;
	
	                api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                    zoom: zoom,
	                    originX: mouseX,
	                    originY: mouseY
	                }));
	
	                if (this._updateGroup) {
	                    var group = this.group;
	                    var scale = group.scale;
	                    group.traverse(function (el) {
	                        if (el.type === 'text') {
	                            el.attr('scale', [1 / scale[0], 1 / scale[1]]);
	                        }
	                    });
	                }
	            }, this);
	
	            controller.setContainsPoint(function (x, y) {
	                return geo.getViewRectAfterRoam().contain(x, y);
	            });
	        }
	    };
	
	    module.exports = MapDraw;


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/helper/RoamController
	 */
	
	
	
	    var Eventful = __webpack_require__(54);
	    var zrUtil = __webpack_require__(25);
	    var eventTool = __webpack_require__(109);
	    var interactionMutex = __webpack_require__(199);
	
	    function mousedown(e) {
	        if (e.target && e.target.draggable) {
	            return;
	        }
	
	        var x = e.offsetX;
	        var y = e.offsetY;
	
	        if (this.containsPoint && this.containsPoint(x, y)) {
	            this._x = x;
	            this._y = y;
	            this._dragging = true;
	        }
	    }
	
	    function mousemove(e) {
	        if (!this._dragging) {
	            return;
	        }
	
	        eventTool.stop(e.event);
	
	        if (e.gestureEvent !== 'pinch') {
	
	            if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	                return;
	            }
	
	            var x = e.offsetX;
	            var y = e.offsetY;
	
	            var oldX = this._x;
	            var oldY = this._y;
	
	            var dx = x - oldX;
	            var dy = y - oldY;
	
	            this._x = x;
	            this._y = y;
	
	            var target = this.target;
	
	            if (target) {
	                var pos = target.position;
	                pos[0] += dx;
	                pos[1] += dy;
	                target.dirty();
	            }
	
	            eventTool.stop(e.event);
	            this.trigger('pan', dx, dy, oldX, oldY, x, y);
	        }
	    }
	
	    function mouseup(e) {
	        this._dragging = false;
	    }
	
	    function mousewheel(e) {
	        // Convenience:
	        // Mac and VM Windows on Mac: scroll up: zoom out.
	        // Windows: scroll up: zoom in.
	        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	    }
	
	    function pinch(e) {
	        if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	            return;
	        }
	        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	    }
	
	    function zoom(e, zoomDelta, zoomX, zoomY) {
	        if (this.containsPoint && this.containsPoint(zoomX, zoomY)) {
	            // When mouse is out of roamController rect,
	            // default befavoius should be be disabled, otherwise
	            // page sliding is disabled, contrary to expectation.
	            eventTool.stop(e.event);
	
	            var target = this.target;
	            var zoomLimit = this.zoomLimit;
	
	            if (target) {
	                var pos = target.position;
	                var scale = target.scale;
	
	                var newZoom = this.zoom = this.zoom || 1;
	                newZoom *= zoomDelta;
	                if (zoomLimit) {
	                    var zoomMin = zoomLimit.min || 0;
	                    var zoomMax = zoomLimit.max || Infinity;
	                    newZoom = Math.max(
	                        Math.min(zoomMax, newZoom),
	                        zoomMin
	                    );
	                }
	                var zoomScale = newZoom / this.zoom;
	                this.zoom = newZoom;
	                // Keep the mouse center when scaling
	                pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
	                pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
	                scale[0] *= zoomScale;
	                scale[1] *= zoomScale;
	
	                target.dirty();
	            }
	
	            this.trigger('zoom', zoomDelta, zoomX, zoomY);
	        }
	    }
	
	    /**
	     * @alias module:echarts/component/helper/RoamController
	     * @constructor
	     * @mixin {module:zrender/mixin/Eventful}
	     *
	     * @param {module:zrender/zrender~ZRender} zr
	     * @param {module:zrender/Element} target
	     */
	    function RoamController(zr, target) {
	
	        /**
	         * @type {module:zrender/Element}
	         */
	        this.target = target;
	
	        /**
	         * @type {Function}
	         */
	        this.containsPoint;
	
	        /**
	         * { min: 1, max: 2 }
	         * @type {Object}
	         */
	        this.zoomLimit;
	
	        /**
	         * @type {number}
	         */
	        this.zoom;
	        /**
	         * @type {module:zrender}
	         */
	        this._zr = zr;
	
	        // Avoid two roamController bind the same handler
	        var bind = zrUtil.bind;
	        var mousedownHandler = bind(mousedown, this);
	        var mousemoveHandler = bind(mousemove, this);
	        var mouseupHandler = bind(mouseup, this);
	        var mousewheelHandler = bind(mousewheel, this);
	        var pinchHandler = bind(pinch, this);
	
	        Eventful.call(this);
	
	        /**
	         * @param {Function} containsPoint
	         *                   input: x, y
	         *                   output: boolean
	         */
	        this.setContainsPoint = function (containsPoint) {
	            this.containsPoint = containsPoint;
	        };
	
	        /**
	         * Notice: only enable needed types. For example, if 'zoom'
	         * is not needed, 'zoom' should not be enabled, otherwise
	         * default mousewheel behaviour (scroll page) will be disabled.
	         *
	         * @param  {boolean|string} [controlType=true] Specify the control type,
	         *                          which can be null/undefined or true/false
	         *                          or 'pan/move' or 'zoom'/'scale'
	         */
	        this.enable = function (controlType) {
	            // Disable previous first
	            this.disable();
	
	            if (controlType == null) {
	                controlType = true;
	            }
	
	            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {
	                zr.on('mousedown', mousedownHandler);
	                zr.on('mousemove', mousemoveHandler);
	                zr.on('mouseup', mouseupHandler);
	            }
	            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {
	                zr.on('mousewheel', mousewheelHandler);
	                zr.on('pinch', pinchHandler);
	            }
	        };
	
	        this.disable = function () {
	            zr.off('mousedown', mousedownHandler);
	            zr.off('mousemove', mousemoveHandler);
	            zr.off('mouseup', mouseupHandler);
	            zr.off('mousewheel', mousewheelHandler);
	            zr.off('pinch', pinchHandler);
	        };
	
	        this.dispose = this.disable;
	
	        this.isDragging = function () {
	            return this._dragging;
	        };
	
	        this.isPinching = function () {
	            return this._pinching;
	        };
	    }
	
	    zrUtil.mixin(RoamController, Eventful);
	
	    module.exports = RoamController;


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var ATTR = '\0_ec_interaction_mutex';
	
	    var interactionMutex = {
	
	        take: function (zr, resourceKey, userKey) {
	            var store = getStore(zr);
	            store[resourceKey] = userKey;
	        },
	
	        release: function (zr, resourceKey, userKey) {
	            var store = getStore(zr);
	            var uKey = store[resourceKey];
	
	            if (uKey === userKey) {
	                store[resourceKey] = null;
	            }
	        },
	
	        isTaken: function (zr, resourceKey) {
	            return !!getStore(zr)[resourceKey];
	        }
	    };
	
	    function getStore(zr) {
	        return zr[ATTR] || (zr[ATTR] = {});
	    }
	
	    /**
	     * payload: {
	     *     type: 'takeGlobalCursor',
	     *     key: 'dataZoomSelect', or 'brush', or ...,
	     *         If no userKey, release global cursor.
	     * }
	     */
	    __webpack_require__(22).registerAction(
	        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},
	        function () {}
	    );
	
	    module.exports = interactionMutex;


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var roamHelper = __webpack_require__(201);
	
	    var echarts = __webpack_require__(22);
	
	    /**
	     * @payload
	     * @property {string} [componentType=series]
	     * @property {number} [dx]
	     * @property {number} [dy]
	     * @property {number} [zoom]
	     * @property {number} [originX]
	     * @property {number} [originY]
	     */
	    echarts.registerAction({
	        type: 'geoRoam',
	        event: 'geoRoam',
	        update: 'updateLayout'
	    }, function (payload, ecModel) {
	        var componentType = payload.componentType || 'series';
	
	        ecModel.eachComponent(
	            { mainType: componentType, query: payload },
	            function (componentModel) {
	                var geo = componentModel.coordinateSystem;
	                if (geo.type !== 'geo') {
	                    return;
	                }
	
	                var res = roamHelper.updateCenterAndZoom(
	                    geo, payload, componentModel.get('scaleLimit')
	                );
	
	                componentModel.setCenter
	                    && componentModel.setCenter(res.center);
	
	                componentModel.setZoom
	                    && componentModel.setZoom(res.zoom);
	
	                // All map series with same `map` use the same geo coordinate system
	                // So the center and zoom must be in sync. Include the series not selected by legend
	                if (componentType === 'series') {
	                    zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
	                        seriesModel.setCenter(res.center);
	                        seriesModel.setZoom(res.zoom);
	                    });
	                }
	            }
	        );
	    });


/***/ },
/* 201 */
/***/ function(module, exports) {

	
	
	    var roamHelper = {};
	
	    /**
	     * @param {module:echarts/coord/View} view
	     * @param {Object} payload
	     * @param {Object} [zoomLimit]
	     */
	    roamHelper.updateCenterAndZoom = function (
	        view, payload, zoomLimit
	    ) {
	        var previousZoom = view.getZoom();
	        var center = view.getCenter();
	        var zoom = payload.zoom;
	
	        var point = view.dataToPoint(center);
	
	        if (payload.dx != null && payload.dy != null) {
	            point[0] -= payload.dx;
	            point[1] -= payload.dy;
	
	            var center = view.pointToData(point);
	            view.setCenter(center);
	        }
	        if (zoom != null) {
	            if (zoomLimit) {
	                var zoomMin = zoomLimit.min || 0;
	                var zoomMax = zoomLimit.max || Infinity;
	                zoom = Math.max(
	                    Math.min(previousZoom * zoom, zoomMax),
	                    zoomMin
	                ) / previousZoom;
	            }
	
	            // Zoom on given point(originX, originY)
	            view.scale[0] *= zoom;
	            view.scale[1] *= zoom;
	            var position = view.position;
	            var fixX = (payload.originX - position[0]) * (zoom - 1);
	            var fixY = (payload.originY - position[1]) * (zoom - 1);
	
	            position[0] -= fixX;
	            position[1] -= fixY;
	
	            view.updateTransform();
	            // Get the new center
	            var center = view.pointToData(point);
	            view.setCenter(center);
	            view.setZoom(zoom * previousZoom);
	        }
	
	        return {
	            center: view.getCenter(),
	            zoom: view.getZoom()
	        };
	    };
	
	    module.exports = roamHelper;


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (ecModel) {
	
	        var processedMapType = {};
	
	        ecModel.eachSeriesByType('map', function (mapSeries) {
	            var mapType = mapSeries.getMapType();
	            if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {
	                return;
	            }
	
	            var mapSymbolOffsets = {};
	
	            zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
	                var geo = subMapSeries.coordinateSystem;
	                var data = subMapSeries.originalData;
	                if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
	                    data.each('value', function (value, idx) {
	                        var name = data.getName(idx);
	                        var region = geo.getRegion(name);
	
	                        // If input series.data is [11, 22, '-'/null/undefined, 44],
	                        // it will be filled with NaN: [11, 22, NaN, 44] and NaN will
	                        // not be drawn. So here must validate if value is NaN.
	                        if (!region || isNaN(value)) {
	                            return;
	                        }
	
	                        var offset = mapSymbolOffsets[name] || 0;
	
	                        var point = geo.dataToPoint(region.center);
	
	                        mapSymbolOffsets[name] = offset + 1;
	
	                        data.setItemLayout(idx, {
	                            point: point,
	                            offset: offset
	                        });
	                    });
	                }
	            });
	
	            // Show label of those region not has legendSymbol(which is offset 0)
	            var data = mapSeries.getData();
	            data.each(function (idx) {
	                var name = data.getName(idx);
	                var layout = data.getItemLayout(idx) || {};
	                layout.showLabel = !mapSymbolOffsets[name];
	                data.setItemLayout(idx, layout);
	            });
	
	            processedMapType[mapType] = true;
	        });
	    };


/***/ },
/* 203 */
/***/ function(module, exports) {

	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            var colorList = seriesModel.get('color');
	            var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	
	            var areaColor = itemStyleModel.get('areaColor');
	            var color = itemStyleModel.get('color')
	                || colorList[seriesModel.seriesIndex % colorList.length];
	
	            seriesModel.getData().setVisual({
	                'areaColor': areaColor,
	                'color': color
	            });
	        });
	    };


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    // FIXME 公用？
	    /**
	     * @param {Array.<module:echarts/data/List>} datas
	     * @param {string} statisticType 'average' 'sum'
	     * @inner
	     */
	    function dataStatistics(datas, statisticType) {
	        var dataNameMap = {};
	        var dims = ['value'];
	
	        zrUtil.each(datas, function (data) {
	            data.each(dims, function (value, idx) {
	                var name = data.getName(idx);
	                dataNameMap[name] = dataNameMap[name] || [];
	                if (!isNaN(value)) {
	                    dataNameMap[name].push(value);
	                }
	            });
	        });
	
	        return datas[0].map(dims, function (value, idx) {
	            var name = datas[0].getName(idx);
	            var sum = 0;
	            var min = Infinity;
	            var max = -Infinity;
	            var len = dataNameMap[name].length;
	            for (var i = 0; i < len; i++) {
	                min = Math.min(min, dataNameMap[name][i]);
	                max = Math.max(max, dataNameMap[name][i]);
	                sum += dataNameMap[name][i];
	            }
	            var result;
	            if (statisticType === 'min') {
	                result = min;
	            }
	            else if (statisticType === 'max') {
	                result = max;
	            }
	            else if (statisticType === 'average') {
	                result = sum / len;
	            }
	            else {
	                result = sum;
	            }
	            return len === 0 ? NaN : result;
	        });
	    }
	
	    module.exports = function (ecModel) {
	        var seriesGroups = {};
	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            var hostGeoModel = seriesModel.getHostGeoModel();
	            var key = hostGeoModel ? 'o' + hostGeoModel.id : 'i' + seriesModel.getMapType();
	            (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);
	        });
	
	        zrUtil.each(seriesGroups, function (seriesList, key) {
	            var data = dataStatistics(
	                zrUtil.map(seriesList, function (seriesModel) {
	                    return seriesModel.getData();
	                }),
	                seriesList[0].get('mapValueCalculation')
	            );
	
	            for (var i = 0; i < seriesList.length; i++) {
	                seriesList[i].originalData = seriesList[i].getData();
	            }
	
	            // FIXME Put where?
	            for (var i = 0; i < seriesList.length; i++) {
	                seriesList[i].seriesGroup = seriesList;
	                seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();
	
	                seriesList[i].setData(data.cloneShallow());
	                seriesList[i].mainSeries = seriesList[0];
	            }
	        });
	    };


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (option) {
	        // Save geoCoord
	        var mapSeries = [];
	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt.type === 'map') {
	                mapSeries.push(seriesOpt);
	            }
	        });
	
	        zrUtil.each(mapSeries, function (seriesOpt) {
	            seriesOpt.map = seriesOpt.map || seriesOpt.mapType;
	            // Put x, y, width, height, x2, y2 in the top level
	            zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
	        });
	    };


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(207);
	    __webpack_require__(211);
	    __webpack_require__(214);
	
	    echarts.registerVisual(__webpack_require__(215));
	
	    echarts.registerLayout(__webpack_require__(217));


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var SeriesModel = __webpack_require__(49);
	    var Tree = __webpack_require__(208);
	    var zrUtil = __webpack_require__(25);
	    var Model = __webpack_require__(33);
	    var formatUtil = __webpack_require__(27);
	    var helper = __webpack_require__(210);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;
	
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.treemap',
	
	        layoutMode: 'box',
	
	        dependencies: ['grid', 'polar'],
	
	        /**
	         * @type {module:echarts/data/Tree~Node}
	         */
	        _viewRoot: null,
	
	        defaultOption: {
	            // Disable progressive rendering
	            progressive: 0,
	            hoverLayerThreshold: Infinity,
	            // center: ['50%', '50%'],          // not supported in ec3.
	            // size: ['80%', '80%'],            // deprecated, compatible with ec2.
	            left: 'center',
	            top: 'middle',
	            right: null,
	            bottom: null,
	            width: '80%',
	            height: '80%',
	            sort: true,                         // Can be null or false or true
	                                                // (order by desc default, asc not supported yet (strange effect))
	            clipWindow: 'origin',               // Size of clipped window when zooming. 'origin' or 'fullscreen'
	            squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio
	            leafDepth: null,                    // Nodes on depth from root are regarded as leaves.
	                                                // Count from zero (zero represents only view root).
	            drillDownIcon: '▶',                 // Use html character temporarily because it is complicated
	                                                // to align specialized icon. ▷▶❒❐▼✚
	
	            zoomToNodeRatio: 0.32 * 0.32,       // Be effective when using zoomToNode. Specify the proportion of the
	                                                // target node area in the view area.
	            roam: true,                         // true, false, 'scale' or 'zoom', 'move'.
	            nodeClick: 'zoomToNode',            // Leaf node click behaviour: 'zoomToNode', 'link', false.
	                                                // If leafDepth is set and clicking a node which has children but
	                                                // be on left depth, the behaviour would be changing root. Otherwise
	                                                // use behavious defined above.
	            animation: true,
	            animationDurationUpdate: 900,
	            animationEasing: 'quinticInOut',
	            breadcrumb: {
	                show: true,
	                height: 22,
	                left: 'center',
	                top: 'bottom',
	                // right
	                // bottom
	                emptyItemWidth: 25,             // Width of empty node.
	                itemStyle: {
	                    normal: {
	                        color: 'rgba(0,0,0,0.7)', //'#5793f3',
	                        borderColor: 'rgba(255,255,255,0.7)',
	                        borderWidth: 1,
	                        shadowColor: 'rgba(150,150,150,1)',
	                        shadowBlur: 3,
	                        shadowOffsetX: 0,
	                        shadowOffsetY: 0,
	                        textStyle: {
	                            color: '#fff'
	                        }
	                    },
	                    emphasis: {
	                        textStyle: {}
	                    }
	                }
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'inside', // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...
	                    textStyle: {
	                        color: '#fff',
	                        ellipsis: true
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    color: null,            // Can be 'none' if not necessary.
	                    colorAlpha: null,       // Can be 'none' if not necessary.
	                    colorSaturation: null,  // Can be 'none' if not necessary.
	                    borderWidth: 0,
	                    gapWidth: 0,
	                    borderColor: '#fff',
	                    borderColorSaturation: null // If specified, borderColor will be ineffective, and the
	                                                // border color is evaluated by color of current node and
	                                                // borderColorSaturation.
	                },
	                emphasis: {
	
	                }
	            },
	
	            visualDimension: 0,                 // Can be 0, 1, 2, 3.
	            visualMin: null,
	            visualMax: null,
	
	            color: [],                  // + treemapSeries.color should not be modified. Please only modified
	                                        // level[n].color (if necessary).
	                                        // + Specify color list of each level. level[0].color would be global
	                                        // color list if not specified. (see method `setDefault`).
	                                        // + But set as a empty array to forbid fetch color from global palette
	                                        // when using nodeModel.get('color'), otherwise nodes on deep level
	                                        // will always has color palette set and are not able to inherit color
	                                        // from parent node.
	                                        // + TreemapSeries.color can not be set as 'none', otherwise effect
	                                        // legend color fetching (see seriesColor.js).
	            colorAlpha: null,           // Array. Specify color alpha range of each level, like [0.2, 0.8]
	            colorSaturation: null,      // Array. Specify color saturation of each level, like [0.2, 0.5]
	            colorMappingBy: 'index',    // 'value' or 'index' or 'id'.
	            visibleMin: 10,             // If area less than this threshold (unit: pixel^2), node will not
	                                        // be rendered. Only works when sort is 'asc' or 'desc'.
	            childrenVisibleMin: null,   // If area of a node less than this threshold (unit: pixel^2),
	                                        // grandchildren will not show.
	                                        // Why grandchildren? If not grandchildren but children,
	                                        // some siblings show children and some not,
	                                        // the appearance may be mess and not consistent,
	            levels: []                  // Each item: {
	                                        //     visibleMin, itemStyle, visualDimension, label
	                                        // }
	            // data: {
	            //      value: [],
	            //      children: [],
	            //      link: 'http://xxx.xxx.xxx',
	            //      target: 'blank' or 'self'
	            // }
	        },
	
	        /**
	         * @override
	         */
	        getInitialData: function (option, ecModel) {
	            var data = option.data || [];
	            var rootName = option.name;
	            rootName == null && (rootName = option.name);
	
	            // Create a virtual root.
	            var root = {name: rootName, children: option.data};
	            var value0 = (data[0] || {}).value;
	
	            completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);
	
	            // FIXME
	            // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。
	            var levels = option.levels || [];
	
	            levels = option.levels = setDefault(levels, ecModel);
	
	            // Make sure always a new tree is created when setOption,
	            // in TreemapView, we check whether oldTree === newTree
	            // to choose mappings approach among old shapes and new shapes.
	            return Tree.createTree(root, this, levels).data;
	        },
	
	        optionUpdated: function () {
	            this.resetViewRoot();
	        },
	
	        /**
	         * @override
	         * @param {number} dataIndex
	         * @param {boolean} [mutipleSeries=false]
	         */
	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = zrUtil.isArray(value)
	                ? addCommas(value[0]) : addCommas(value);
	            var name = data.getName(dataIndex);
	
	            return encodeHTML(name + ': ' + formattedValue);
	        },
	
	        /**
	         * Add tree path to tooltip param
	         *
	         * @override
	         * @param {number} dataIndex
	         * @return {Object}
	         */
	        getDataParams: function (dataIndex) {
	            var params = SeriesModel.prototype.getDataParams.apply(this, arguments);
	
	            var node = this.getData().tree.getNodeByDataIndex(dataIndex);
	            params.treePathInfo = helper.wrapTreePathInfo(node, this);
	
	            return params;
	        },
	
	        /**
	         * @public
	         * @param {Object} layoutInfo {
	         *                                x: containerGroup x
	         *                                y: containerGroup y
	         *                                width: containerGroup width
	         *                                height: containerGroup height
	         *                            }
	         */
	        setLayoutInfo: function (layoutInfo) {
	            /**
	             * @readOnly
	             * @type {Object}
	             */
	            this.layoutInfo = this.layoutInfo || {};
	            zrUtil.extend(this.layoutInfo, layoutInfo);
	        },
	
	        /**
	         * @param  {string} id
	         * @return {number} index
	         */
	        mapIdToIndex: function (id) {
	            // A feature is implemented:
	            // index is monotone increasing with the sequence of
	            // input id at the first time.
	            // This feature can make sure that each data item and its
	            // mapped color have the same index between data list and
	            // color list at the beginning, which is useful for user
	            // to adjust data-color mapping.
	
	            /**
	             * @private
	             * @type {Object}
	             */
	            var idIndexMap = this._idIndexMap;
	
	            if (!idIndexMap) {
	                idIndexMap = this._idIndexMap = {};
	                /**
	                 * @private
	                 * @type {number}
	                 */
	                this._idIndexMapCount = 0;
	            }
	
	            var index = idIndexMap[id];
	            if (index == null) {
	                idIndexMap[id] = index = this._idIndexMapCount++;
	            }
	
	            return index;
	        },
	
	        getViewRoot: function () {
	            return this._viewRoot;
	        },
	
	        /**
	         * @param {module:echarts/data/Tree~Node} [viewRoot]
	         */
	        resetViewRoot: function (viewRoot) {
	            viewRoot
	                ? (this._viewRoot = viewRoot)
	                : (viewRoot = this._viewRoot);
	
	            var root = this.getData().tree.root;
	
	            if (!viewRoot
	                || (viewRoot !== root && !root.contains(viewRoot))
	            ) {
	                this._viewRoot = root;
	            }
	        }
	    });
	
	    /**
	     * @param {Object} dataNode
	     */
	    function completeTreeValue(dataNode, arrValueLength) {
	        // Postorder travel tree.
	        // If value of none-leaf node is not set,
	        // calculate it by suming up the value of all children.
	        var sum = 0;
	
	        zrUtil.each(dataNode.children, function (child) {
	
	            completeTreeValue(child, arrValueLength);
	
	            var childValue = child.value;
	            zrUtil.isArray(childValue) && (childValue = childValue[0]);
	
	            sum += childValue;
	        });
	
	        var thisValue = dataNode.value;
	
	        if (arrValueLength >= 0) {
	            if (!zrUtil.isArray(thisValue)) {
	                dataNode.value = new Array(arrValueLength);
	            }
	            else {
	                thisValue = thisValue[0];
	            }
	        }
	
	        if (thisValue == null || isNaN(thisValue)) {
	            thisValue = sum;
	        }
	        // Value should not less than 0.
	        if (thisValue < 0) {
	            thisValue = 0;
	        }
	
	        arrValueLength >= 0
	            ? (dataNode.value[0] = thisValue)
	            : (dataNode.value = thisValue);
	    }
	
	    /**
	     * set default to level configuration
	     */
	    function setDefault(levels, ecModel) {
	        var globalColorList = ecModel.get('color');
	
	        if (!globalColorList) {
	            return;
	        }
	
	        levels = levels || [];
	        var hasColorDefine;
	        zrUtil.each(levels, function (levelDefine) {
	            var model = new Model(levelDefine);
	            var modelColor = model.get('color');
	
	            if (model.get('itemStyle.normal.color')
	                || (modelColor && modelColor !== 'none')
	            ) {
	                hasColorDefine = true;
	            }
	        });
	
	        if (!hasColorDefine) {
	            var level0 = levels[0] || (levels[0] = {});
	            level0.color = globalColorList.slice();
	        }
	
	        return levels;
	    }
	


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Tree data structure
	 *
	 * @module echarts/data/Tree
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var Model = __webpack_require__(33);
	    var List = __webpack_require__(119);
	    var linkList = __webpack_require__(209);
	    var completeDimensions = __webpack_require__(124);
	
	    /**
	     * @constructor module:echarts/data/Tree~TreeNode
	     * @param {string} name
	     * @param {module:echarts/data/Tree} hostTree
	     */
	    var TreeNode = function (name, hostTree) {
	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	
	        /**
	         * Depth of node
	         *
	         * @type {number}
	         * @readOnly
	         */
	        this.depth = 0;
	
	        /**
	         * Height of the subtree rooted at this node.
	         * @type {number}
	         * @readOnly
	         */
	        this.height = 0;
	
	        /**
	         * @type {module:echarts/data/Tree~TreeNode}
	         * @readOnly
	         */
	        this.parentNode = null;
	
	        /**
	         * Reference to list item.
	         * Do not persistent dataIndex outside,
	         * besause it may be changed by list.
	         * If dataIndex -1,
	         * this node is logical deleted (filtered) in list.
	         *
	         * @type {Object}
	         * @readOnly
	         */
	        this.dataIndex = -1;
	
	        /**
	         * @type {Array.<module:echarts/data/Tree~TreeNode>}
	         * @readOnly
	         */
	        this.children = [];
	
	        /**
	         * @type {Array.<module:echarts/data/Tree~TreeNode>}
	         * @pubilc
	         */
	        this.viewChildren = [];
	
	        /**
	         * @type {moduel:echarts/data/Tree}
	         * @readOnly
	         */
	        this.hostTree = hostTree;
	    };
	
	    TreeNode.prototype = {
	
	        constructor: TreeNode,
	
	        /**
	         * The node is removed.
	         * @return {boolean} is removed.
	         */
	        isRemoved: function () {
	            return this.dataIndex < 0;
	        },
	
	        /**
	         * Travel this subtree (include this node).
	         * Usage:
	         *    node.eachNode(function () { ... }); // preorder
	         *    node.eachNode('preorder', function () { ... }); // preorder
	         *    node.eachNode('postorder', function () { ... }); // postorder
	         *    node.eachNode(
	         *        {order: 'postorder', attr: 'viewChildren'},
	         *        function () { ... }
	         *    ); // postorder
	         *
	         * @param {(Object|string)} options If string, means order.
	         * @param {string=} options.order 'preorder' or 'postorder'
	         * @param {string=} options.attr 'children' or 'viewChildren'
	         * @param {Function} cb If in preorder and return false,
	         *                      its subtree will not be visited.
	         * @param {Object} [context]
	         */
	        eachNode: function (options, cb, context) {
	            if (typeof options === 'function') {
	                context = cb;
	                cb = options;
	                options = null;
	            }
	
	            options = options || {};
	            if (zrUtil.isString(options)) {
	                options = {order: options};
	            }
	
	            var order = options.order || 'preorder';
	            var children = this[options.attr || 'children'];
	
	            var suppressVisitSub;
	            order === 'preorder' && (suppressVisitSub = cb.call(context, this));
	
	            for (var i = 0; !suppressVisitSub && i < children.length; i++) {
	                children[i].eachNode(options, cb, context);
	            }
	
	            order === 'postorder' && cb.call(context, this);
	        },
	
	        /**
	         * Update depth and height of this subtree.
	         *
	         * @param  {number} depth
	         */
	        updateDepthAndHeight: function (depth) {
	            var height = 0;
	            this.depth = depth;
	            for (var i = 0; i < this.children.length; i++) {
	                var child = this.children[i];
	                child.updateDepthAndHeight(depth + 1);
	                if (child.height > height) {
	                    height = child.height;
	                }
	            }
	            this.height = height + 1;
	        },
	
	        /**
	         * @param  {string} id
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeById: function (id) {
	            if (this.getId() === id) {
	                return this;
	            }
	            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	                var res = children[i].getNodeById(id);
	                if (res) {
	                    return res;
	                }
	            }
	        },
	
	        /**
	         * @param {module:echarts/data/Tree~TreeNode} node
	         * @return {boolean}
	         */
	        contains: function (node) {
	            if (node === this) {
	                return true;
	            }
	            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	                var res = children[i].contains(node);
	                if (res) {
	                    return res;
	                }
	            }
	        },
	
	        /**
	         * @param {boolean} includeSelf Default false.
	         * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
	         */
	        getAncestors: function (includeSelf) {
	            var ancestors = [];
	            var node = includeSelf ? this : this.parentNode;
	            while (node) {
	                ancestors.push(node);
	                node = node.parentNode;
	            }
	            ancestors.reverse();
	            return ancestors;
	        },
	
	        /**
	         * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
	         * @return {number} Value.
	         */
	        getValue: function (dimension) {
	            var data = this.hostTree.data;
	            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	        },
	
	        /**
	         * @param {Object} layout
	         * @param {boolean=} [merge=false]
	         */
	        setLayout: function (layout, merge) {
	            this.dataIndex >= 0
	                && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
	        },
	
	        /**
	         * @return {Object} layout
	         */
	        getLayout: function () {
	            return this.hostTree.data.getItemLayout(this.dataIndex);
	        },
	
	        /**
	         * @param {string} path
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path) {
	            if (this.dataIndex < 0) {
	                return;
	            }
	            var hostTree = this.hostTree;
	            var itemModel = hostTree.data.getItemModel(this.dataIndex);
	            var levelModel = this.getLevelModel();
	
	            return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));
	        },
	
	        /**
	         * @return {module:echarts/model/Model}
	         */
	        getLevelModel: function () {
	            return (this.hostTree.levelModels || [])[this.depth];
	        },
	
	        /**
	         * @example
	         *  setItemVisual('color', color);
	         *  setItemVisual({
	         *      'color': color
	         *  });
	         */
	        setVisual: function (key, value) {
	            this.dataIndex >= 0
	                && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
	        },
	
	        /**
	         * Get item visual
	         */
	        getVisual: function (key, ignoreParent) {
	            return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
	        },
	
	        /**
	         * @public
	         * @return {number}
	         */
	        getRawIndex: function () {
	            return this.hostTree.data.getRawIndex(this.dataIndex);
	        },
	
	        /**
	         * @public
	         * @return {string}
	         */
	        getId: function () {
	            return this.hostTree.data.getId(this.dataIndex);
	        }
	    };
	
	    /**
	     * @constructor
	     * @alias module:echarts/data/Tree
	     * @param {module:echarts/model/Model} hostModel
	     * @param {Array.<Object>} levelOptions
	     */
	    function Tree(hostModel, levelOptions) {
	        /**
	         * @type {module:echarts/data/Tree~TreeNode}
	         * @readOnly
	         */
	        this.root;
	
	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.data;
	
	        /**
	         * Index of each item is the same as the raw index of coresponding list item.
	         * @private
	         * @type {Array.<module:echarts/data/Tree~TreeNode}
	         */
	        this._nodes = [];
	
	        /**
	         * @private
	         * @readOnly
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;
	
	        /**
	         * @private
	         * @readOnly
	         * @type {Array.<module:echarts/model/Model}
	         */
	        this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
	            return new Model(levelDefine, hostModel, hostModel.ecModel);
	        });
	    }
	
	    Tree.prototype = {
	
	        constructor: Tree,
	
	        type: 'tree',
	
	        /**
	         * Travel this subtree (include this node).
	         * Usage:
	         *    node.eachNode(function () { ... }); // preorder
	         *    node.eachNode('preorder', function () { ... }); // preorder
	         *    node.eachNode('postorder', function () { ... }); // postorder
	         *    node.eachNode(
	         *        {order: 'postorder', attr: 'viewChildren'},
	         *        function () { ... }
	         *    ); // postorder
	         *
	         * @param {(Object|string)} options If string, means order.
	         * @param {string=} options.order 'preorder' or 'postorder'
	         * @param {string=} options.attr 'children' or 'viewChildren'
	         * @param {Function} cb
	         * @param {Object}   [context]
	         */
	        eachNode: function(options, cb, context) {
	            this.root.eachNode(options, cb, context);
	        },
	
	        /**
	         * @param {number} dataIndex
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeByDataIndex: function (dataIndex) {
	            var rawIndex = this.data.getRawIndex(dataIndex);
	            return this._nodes[rawIndex];
	        },
	
	        /**
	         * @param {string} name
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeByName: function (name) {
	            return this.root.getNodeByName(name);
	        },
	
	        /**
	         * Update item available by list,
	         * when list has been performed options like 'filterSelf' or 'map'.
	         */
	        update: function () {
	            var data = this.data;
	            var nodes = this._nodes;
	
	            for (var i = 0, len = nodes.length; i < len; i++) {
	                nodes[i].dataIndex = -1;
	            }
	
	            for (var i = 0, len = data.count(); i < len; i++) {
	                nodes[data.getRawIndex(i)].dataIndex = i;
	            }
	        },
	
	        /**
	         * Clear all layouts
	         */
	        clearLayouts: function () {
	            this.data.clearItemLayouts();
	        }
	    };
	
	    /**
	     * data node format:
	     * {
	     *     name: ...
	     *     value: ...
	     *     children: [
	     *         {
	     *             name: ...
	     *             value: ...
	     *             children: ...
	     *         },
	     *         ...
	     *     ]
	     * }
	     *
	     * @static
	     * @param {Objec} dataRoot Root node.
	     * @param {module:echarts/model/Model} hostModel
	     * @param {Array.<Object>} levelOptions
	     * @return module:echarts/data/Tree
	     */
	    Tree.createTree = function (dataRoot, hostModel, levelOptions) {
	
	        var tree = new Tree(hostModel, levelOptions);
	        var listData = [];
	
	        buildHierarchy(dataRoot);
	
	        function buildHierarchy(dataNode, parentNode) {
	            listData.push(dataNode);
	
	            var node = new TreeNode(dataNode.name, tree);
	            parentNode
	                ? addChild(node, parentNode)
	                : (tree.root = node);
	
	            tree._nodes.push(node);
	
	            var children = dataNode.children;
	            if (children) {
	                for (var i = 0; i < children.length; i++) {
	                    buildHierarchy(children[i], node);
	                }
	            }
	        }
	
	        tree.root.updateDepthAndHeight(0);
	
	        var dimensions = completeDimensions([{name: 'value'}], listData);
	        var list = new List(dimensions, hostModel);
	        list.initData(listData);
	
	        linkList({
	            mainData: list,
	            struct: tree,
	            structAttr: 'tree'
	        });
	
	        tree.update();
	
	        return tree;
	    };
	
	    /**
	     * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
	     * so this function is not ready and not necessary to be public.
	     *
	     * @param {(module:echarts/data/Tree~TreeNode|Object)} child
	     */
	    function addChild(child, node) {
	        var children = node.children;
	        if (child.parentNode === node) {
	            return;
	        }
	
	        children.push(child);
	        child.parentNode = node;
	    }
	
	    module.exports = Tree;


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Link lists and struct (graph or tree)
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var each = zrUtil.each;
	
	    var DATAS = '\0__link_datas';
	    var MAIN_DATA = '\0__link_mainData';
	
	    // Caution:
	    // In most case, either list or its shallow clones (see list.cloneShallow)
	    // is active in echarts process. So considering heap memory consumption,
	    // we do not clone tree or graph, but share them among list and its shallow clones.
	    // But in some rare case, we have to keep old list (like do animation in chart). So
	    // please take care that both the old list and the new list share the same tree/graph.
	
	    /**
	     * @param {Object} opt
	     * @param {module:echarts/data/List} opt.mainData
	     * @param {Object} [opt.struct] For example, instance of Graph or Tree.
	     * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
	     * @param {Object} [opt.datas] {dataType: data},
	     *                 like: {node: nodeList, edge: edgeList}.
	     *                 Should contain mainData.
	     * @param {Object} [opt.datasAttr] {dataType: attr},
	     *                 designation: struct[datasAttr[dataType]] = list;
	     */
	    function linkList(opt) {
	        var mainData = opt.mainData;
	        var datas = opt.datas;
	
	        if (!datas) {
	            datas = {main: mainData};
	            opt.datasAttr = {main: 'data'};
	        }
	        opt.datas = opt.mainData = null;
	
	        linkAll(mainData, datas, opt);
	
	        // Porxy data original methods.
	        each(datas, function (data) {
	            each(mainData.TRANSFERABLE_METHODS, function (methodName) {
	                data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
	            });
	
	        });
	
	        // Beyond transfer, additional features should be added to `cloneShallow`.
	        mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));
	
	        // Only mainData trigger change, because struct.update may trigger
	        // another changable methods, which may bring about dead lock.
	        each(mainData.CHANGABLE_METHODS, function (methodName) {
	            mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
	        });
	
	        // Make sure datas contains mainData.
	        zrUtil.assert(datas[mainData.dataType] === mainData);
	    }
	
	    function transferInjection(opt, res) {
	        if (isMainData(this)) {
	            // Transfer datas to new main data.
	            var datas = zrUtil.extend({}, this[DATAS]);
	            datas[this.dataType] = res;
	            linkAll(res, datas, opt);
	        }
	        else {
	            // Modify the reference in main data to point newData.
	            linkSingle(res, this.dataType, this[MAIN_DATA], opt);
	        }
	        return res;
	    }
	
	    function changeInjection(opt, res) {
	        opt.struct && opt.struct.update(this);
	        return res;
	    }
	
	    function cloneShallowInjection(opt, res) {
	        // cloneShallow, which brings about some fragilities, may be inappropriate
	        // to be exposed as an API. So for implementation simplicity we can make
	        // the restriction that cloneShallow of not-mainData should not be invoked
	        // outside, but only be invoked here.
	        each(res[DATAS], function (data, dataType) {
	            data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
	        });
	        return res;
	    }
	
	    /**
	     * Supplement method to List.
	     *
	     * @public
	     * @param {string} [dataType] If not specified, return mainData.
	     * @return {module:echarts/data/List}
	     */
	    function getLinkedData(dataType) {
	        var mainData = this[MAIN_DATA];
	        return (dataType == null || mainData == null)
	            ? mainData
	            : mainData[DATAS][dataType];
	    }
	
	    function isMainData(data) {
	        return data[MAIN_DATA] === data;
	    }
	
	    function linkAll(mainData, datas, opt) {
	        mainData[DATAS] = {};
	        each(datas, function (data, dataType) {
	            linkSingle(data, dataType, mainData, opt);
	        });
	    }
	
	    function linkSingle(data, dataType, mainData, opt) {
	        mainData[DATAS][dataType] = data;
	        data[MAIN_DATA] = mainData;
	        data.dataType = dataType;
	
	        if (opt.struct) {
	            data[opt.structAttr] = opt.struct;
	            opt.struct[opt.datasAttr[dataType]] = data;
	        }
	
	        // Supplement method.
	        data.getLinkedData = getLinkedData;
	    }
	
	    module.exports = linkList;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    var helper = {
	
	        retrieveTargetInfo: function (payload, seriesModel) {
	            if (payload
	                && (
	                    payload.type === 'treemapZoomToNode'
	                    || payload.type === 'treemapRootToNode'
	                )
	            ) {
	                var root = seriesModel.getData().tree.root;
	                var targetNode = payload.targetNode;
	                if (targetNode && root.contains(targetNode)) {
	                    return {node: targetNode};
	                }
	
	                var targetNodeId = payload.targetNodeId;
	                if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
	                    return {node: targetNode};
	                }
	            }
	        },
	
	        // Not includes the given node at the last item.
	        getPathToRoot: function (node) {
	            var path = [];
	            while (node) {
	                node = node.parentNode;
	                node && path.push(node);
	            }
	            return path.reverse();
	        },
	
	        aboveViewRoot: function (viewRoot, node) {
	            var viewPath = helper.getPathToRoot(viewRoot);
	            return zrUtil.indexOf(viewPath, node) >= 0;
	        },
	
	        // From root to the input node (the input node will be included).
	        wrapTreePathInfo: function (node, seriesModel) {
	            var treePathInfo = [];
	
	            while (node) {
	                var nodeDataIndex = node.dataIndex;
	                treePathInfo.push({
	                    name: node.name,
	                    dataIndex: nodeDataIndex,
	                    value: seriesModel.getRawValue(nodeDataIndex)
	                });
	                node = node.parentNode;
	            }
	
	            treePathInfo.reverse();
	
	            return treePathInfo;
	        }
	    };
	
	    module.exports = helper;


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	 
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var DataDiffer = __webpack_require__(120);
	    var helper = __webpack_require__(210);
	    var Breadcrumb = __webpack_require__(212);
	    var RoamController = __webpack_require__(198);
	    var BoundingRect = __webpack_require__(30);
	    var matrix = __webpack_require__(32);
	    var animationUtil = __webpack_require__(213);
	    var bind = zrUtil.bind;
	    var Group = graphic.Group;
	    var Rect = graphic.Rect;
	    var each = zrUtil.each;
	
	    var DRAG_THRESHOLD = 3;
	    var PATH_LABEL_NORMAL = ['label', 'normal'];
	    var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];
	    var Z_BASE = 10; // Should bigger than every z.
	    var Z_BG = 1;
	    var Z_CONTENT = 2;
	
	    module.exports = __webpack_require__(22).extendChartView({
	
	        type: 'treemap',
	
	        /**
	         * @override
	         */
	        init: function (o, api) {
	
	            /**
	             * @private
	             * @type {module:zrender/container/Group}
	             */
	            this._containerGroup;
	
	            /**
	             * @private
	             * @type {Object.<string, Array.<module:zrender/container/Group>>}
	             */
	            this._storage = createStorage();
	
	            /**
	             * @private
	             * @type {module:echarts/data/Tree}
	             */
	            this._oldTree;
	
	            /**
	             * @private
	             * @type {module:echarts/chart/treemap/Breadcrumb}
	             */
	            this._breadcrumb;
	
	            /**
	             * @private
	             * @type {module:echarts/component/helper/RoamController}
	             */
	            this._controller;
	
	            /**
	             * 'ready', 'animating'
	             * @private
	             */
	            this._state = 'ready';
	
	            /**
	             * @private
	             * @type {boolean}
	             */
	            this._mayClick;
	        },
	
	        /**
	         * @override
	         */
	        render: function (seriesModel, ecModel, api, payload) {
	
	            var models = ecModel.findComponents({
	                mainType: 'series', subType: 'treemap', query: payload
	            });
	            if (zrUtil.indexOf(models, seriesModel) < 0) {
	                return;
	            }
	
	            this.seriesModel = seriesModel;
	            this.api = api;
	            this.ecModel = ecModel;
	
	            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	            var payloadType = payload && payload.type;
	            var layoutInfo = seriesModel.layoutInfo;
	            var isInit = !this._oldTree;
	            var thisStorage = this._storage;
	
	            // Mark new root when action is treemapRootToNode.
	            var reRoot = (payloadType === 'treemapRootToNode' && targetInfo && thisStorage)
	                ? {
	                    rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
	                    direction: payload.direction
	                }
	                : null;
	
	            var containerGroup = this._giveContainerGroup(layoutInfo);
	
	            var renderResult = this._doRender(containerGroup, seriesModel, reRoot);
	            (
	                !isInit && (
	                    !payloadType
	                    || payloadType === 'treemapZoomToNode'
	                    || payloadType === 'treemapRootToNode'
	                )
	            )
	                ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot)
	                : renderResult.renderFinally();
	
	            this._resetController(api);
	
	            this._renderBreadcrumb(seriesModel, api, targetInfo);
	        },
	
	        /**
	         * @private
	         */
	        _giveContainerGroup: function (layoutInfo) {
	            var containerGroup = this._containerGroup;
	            if (!containerGroup) {
	                // FIXME
	                // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
	                containerGroup = this._containerGroup = new Group();
	                this._initEvents(containerGroup);
	                this.group.add(containerGroup);
	            }
	            containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);
	
	            return containerGroup;
	        },
	
	        /**
	         * @private
	         */
	        _doRender: function (containerGroup, seriesModel, reRoot) {
	            var thisTree = seriesModel.getData().tree;
	            var oldTree = this._oldTree;
	
	            // Clear last shape records.
	            var lastsForAnimation = createStorage();
	            var thisStorage = createStorage();
	            var oldStorage = this._storage;
	            var willInvisibleEls = [];
	            var doRenderNode = zrUtil.curry(
	                renderNode, seriesModel,
	                thisStorage, oldStorage, reRoot,
	                lastsForAnimation, willInvisibleEls
	            );
	
	            // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),
	            // the oldTree is actually losted, so we can not find all of the old graphic
	            // elements from tree. So we use this stragegy: make element storage, move
	            // from old storage to new storage, clear old storage.
	
	            dualTravel(
	                thisTree.root ? [thisTree.root] : [],
	                (oldTree && oldTree.root) ? [oldTree.root] : [],
	                containerGroup,
	                thisTree === oldTree || !oldTree,
	                0
	            );
	
	            // Process all removing.
	            var willDeleteEls = clearStorage(oldStorage);
	
	            this._oldTree = thisTree;
	            this._storage = thisStorage;
	
	            return {
	                lastsForAnimation: lastsForAnimation,
	                willDeleteEls: willDeleteEls,
	                renderFinally: renderFinally
	            };
	
	            function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {
	                // When 'render' is triggered by action,
	                // 'this' and 'old' may be the same tree,
	                // we use rawIndex in that case.
	                if (sameTree) {
	                    oldViewChildren = thisViewChildren;
	                    each(thisViewChildren, function (child, index) {
	                        !child.isRemoved() && processNode(index, index);
	                    });
	                }
	                // Diff hierarchically (diff only in each subtree, but not whole).
	                // because, consistency of view is important.
	                else {
	                    (new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey))
	                        .add(processNode)
	                        .update(processNode)
	                        .remove(zrUtil.curry(processNode, null))
	                        .execute();
	                }
	
	                function getKey(node) {
	                    // Identify by name or raw index.
	                    return node.getId();
	                }
	
	                function processNode(newIndex, oldIndex) {
	                    var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
	                    var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;
	
	                    var group = doRenderNode(thisNode, oldNode, parentGroup, depth);
	
	                    group && dualTravel(
	                        thisNode && thisNode.viewChildren || [],
	                        oldNode && oldNode.viewChildren || [],
	                        group,
	                        sameTree,
	                        depth + 1
	                    );
	                }
	            }
	
	            function clearStorage(storage) {
	                var willDeleteEls = createStorage();
	                storage && each(storage, function (store, storageName) {
	                    var delEls = willDeleteEls[storageName];
	                    each(store, function (el) {
	                        el && (delEls.push(el), el.__tmWillDelete = 1);
	                    });
	                });
	                return willDeleteEls;
	            }
	
	            function renderFinally() {
	                each(willDeleteEls, function (els) {
	                    each(els, function (el) {
	                        el.parent && el.parent.remove(el);
	                    });
	                });
	                each(willInvisibleEls, function (el) {
	                    el.invisible = true;
	                    // Setting invisible is for optimizing, so no need to set dirty,
	                    // just mark as invisible.
	                    el.dirty();
	                });
	            }
	        },
	
	        /**
	         * @private
	         */
	        _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {
	            if (!seriesModel.get('animation')) {
	                return;
	            }
	
	            var duration = seriesModel.get('animationDurationUpdate');
	            var easing = seriesModel.get('animationEasing');
	            var animationWrap = animationUtil.createWrap();
	
	            // Make delete animations.
	            each(renderResult.willDeleteEls, function (store, storageName) {
	                each(store, function (el, rawIndex) {
	                    if (el.invisible) {
	                        return;
	                    }
	
	                    var parent = el.parent; // Always has parent, and parent is nodeGroup.
	                    var target;
	
	                    if (reRoot && reRoot.direction === 'drillDown') {
	                        target = parent === reRoot.rootNodeGroup
	                            // This is the content element of view root.
	                            // Only `content` will enter this branch, because
	                            // `background` and `nodeGroup` will not be deleted.
	                            ? {
	                                shape: {
	                                    x: 0,
	                                    y: 0,
	                                    width: parent.__tmNodeWidth,
	                                    height: parent.__tmNodeHeight
	                                },
	                                style: {
	                                    opacity: 0
	                                }
	                            }
	                            // Others.
	                            : {style: {opacity: 0}};
	                    }
	                    else {
	                        var targetX = 0;
	                        var targetY = 0;
	
	                        if (!parent.__tmWillDelete) {
	                            // Let node animate to right-bottom corner, cooperating with fadeout,
	                            // which is appropriate for user understanding.
	                            // Divided by 2 for reRoot rolling up effect.
	                            targetX = parent.__tmNodeWidth / 2;
	                            targetY = parent.__tmNodeHeight / 2;
	                        }
	
	                        target = storageName === 'nodeGroup'
	                            ? {position: [targetX, targetY], style: {opacity: 0}}
	                            : {
	                                shape: {x: targetX, y: targetY, width: 0, height: 0},
	                                style: {opacity: 0}
	                            };
	                    }
	
	                    target && animationWrap.add(el, target, duration, easing);
	                });
	            });
	
	            // Make other animations
	            each(this._storage, function (store, storageName) {
	                each(store, function (el, rawIndex) {
	                    var last = renderResult.lastsForAnimation[storageName][rawIndex];
	                    var target = {};
	
	                    if (!last) {
	                        return;
	                    }
	
	                    if (storageName === 'nodeGroup') {
	                        if (last.old) {
	                            target.position = el.position.slice();
	                            el.attr('position', last.old);
	                        }
	                    }
	                    else {
	                        if (last.old) {
	                            target.shape = zrUtil.extend({}, el.shape);
	                            el.setShape(last.old);
	                        }
	
	                        if (last.fadein) {
	                            el.setStyle('opacity', 0);
	                            target.style = {opacity: 1};
	                        }
	                        // When animation is stopped for succedent animation starting,
	                        // el.style.opacity might not be 1
	                        else if (el.style.opacity !== 1) {
	                            target.style = {opacity: 1};
	                        }
	                    }
	
	                    animationWrap.add(el, target, duration, easing);
	                });
	            }, this);
	
	            this._state = 'animating';
	
	            animationWrap
	                .done(bind(function () {
	                    this._state = 'ready';
	                    renderResult.renderFinally();
	                }, this))
	                .start();
	        },
	
	        /**
	         * @private
	         */
	        _resetController: function (api) {
	            var controller = this._controller;
	
	            // Init controller.
	            if (!controller) {
	                controller = this._controller = new RoamController(api.getZr());
	                controller.enable(this.seriesModel.get('roam'));
	                controller.on('pan', bind(this._onPan, this));
	                controller.on('zoom', bind(this._onZoom, this));
	            }
	
	            var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
	            controller.setContainsPoint(function (x, y) {
	                return rect.contain(x, y);
	            });
	        },
	
	        /**
	         * @private
	         */
	        _clearController: function () {
	            var controller = this._controller;
	            if (controller) {
	                controller.dispose();
	                controller = null;
	            }
	        },
	
	        /**
	         * @private
	         */
	        _onPan: function (dx, dy) {
	            this._mayClick = false;
	
	            if (this._state !== 'animating'
	                && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)
	            ) {
	                // These param must not be cached.
	                var root = this.seriesModel.getData().tree.root;
	
	                if (!root) {
	                    return;
	                }
	
	                var rootLayout = root.getLayout();
	
	                if (!rootLayout) {
	                    return;
	                }
	
	                this.api.dispatchAction({
	                    type: 'treemapMove',
	                    from: this.uid,
	                    seriesId: this.seriesModel.id,
	                    rootRect: {
	                        x: rootLayout.x + dx, y: rootLayout.y + dy,
	                        width: rootLayout.width, height: rootLayout.height
	                    }
	                });
	            }
	        },
	
	        /**
	         * @private
	         */
	        _onZoom: function (scale, mouseX, mouseY) {
	            this._mayClick = false;
	
	            if (this._state !== 'animating') {
	                // These param must not be cached.
	                var root = this.seriesModel.getData().tree.root;
	
	                if (!root) {
	                    return;
	                }
	
	                var rootLayout = root.getLayout();
	
	                if (!rootLayout) {
	                    return;
	                }
	
	                var rect = new BoundingRect(
	                    rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height
	                );
	                var layoutInfo = this.seriesModel.layoutInfo;
	
	                // Transform mouse coord from global to containerGroup.
	                mouseX -= layoutInfo.x;
	                mouseY -= layoutInfo.y;
	
	                // Scale root bounding rect.
	                var m = matrix.create();
	                matrix.translate(m, m, [-mouseX, -mouseY]);
	                matrix.scale(m, m, [scale, scale]);
	                matrix.translate(m, m, [mouseX, mouseY]);
	
	                rect.applyTransform(m);
	
	                this.api.dispatchAction({
	                    type: 'treemapRender',
	                    from: this.uid,
	                    seriesId: this.seriesModel.id,
	                    rootRect: {
	                        x: rect.x, y: rect.y,
	                        width: rect.width, height: rect.height
	                    }
	                });
	            }
	        },
	
	        /**
	         * @private
	         */
	        _initEvents: function (containerGroup) {
	            // FIXME
	            // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，
	            // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，
	            // 还是会触发click，期望是不触发。
	
	            // Mousedown occurs when drag start, and mouseup occurs when drag end,
	            // click event should not be triggered in that case.
	
	            containerGroup.on('mousedown', function (e) {
	                this._state === 'ready' && (this._mayClick = true);
	            }, this);
	            containerGroup.on('mouseup', function (e) {
	                if (this._mayClick) {
	                    this._mayClick = false;
	                    this._state === 'ready' && onClick.call(this, e);
	                }
	            }, this);
	
	            function onClick(e) {
	                var nodeClick = this.seriesModel.get('nodeClick', true);
	
	                if (!nodeClick) {
	                    return;
	                }
	
	                var targetInfo = this.findTarget(e.offsetX, e.offsetY);
	
	                if (!targetInfo) {
	                    return;
	                }
	
	                var node = targetInfo.node;
	                if (node.getLayout().isLeafRoot) {
	                    this._rootToNode(targetInfo);
	                }
	                else {
	                    if (nodeClick === 'zoomToNode') {
	                        this._zoomToNode(targetInfo);
	                    }
	                    else if (nodeClick === 'link') {
	                        var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
	                        var link = itemModel.get('link', true);
	                        var linkTarget = itemModel.get('target', true) || 'blank';
	                        link && window.open(link, linkTarget);
	                    }
	                }
	            }
	        },
	
	        /**
	         * @private
	         */
	        _renderBreadcrumb: function (seriesModel, api, targetInfo) {
	            if (!targetInfo) {
	                targetInfo = seriesModel.get('leafDepth', true) != null
	                    ? {node: seriesModel.getViewRoot()}
	                    // FIXME
	                    // better way?
	                    // Find breadcrumb tail on center of containerGroup.
	                    : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);
	
	                if (!targetInfo) {
	                    targetInfo = {node: seriesModel.getData().tree.root};
	                }
	            }
	
	            (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group)))
	                .render(seriesModel, api, targetInfo.node, bind(onSelect, this));
	
	            function onSelect(node) {
	                if (this._state !== 'animating') {
	                    helper.aboveViewRoot(seriesModel.getViewRoot(), node)
	                        ? this._rootToNode({node: node})
	                        : this._zoomToNode({node: node});
	                }
	            }
	        },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearController();
	            this._containerGroup && this._containerGroup.removeAll();
	            this._storage = createStorage();
	            this._state = 'ready';
	            this._breadcrumb && this._breadcrumb.remove();
	        },
	
	        dispose: function () {
	            this._clearController();
	        },
	
	        /**
	         * @private
	         */
	        _zoomToNode: function (targetInfo) {
	            this.api.dispatchAction({
	                type: 'treemapZoomToNode',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                targetNode: targetInfo.node
	            });
	        },
	
	        /**
	         * @private
	         */
	        _rootToNode: function (targetInfo) {
	            this.api.dispatchAction({
	                type: 'treemapRootToNode',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                targetNode: targetInfo.node
	            });
	        },
	
	        /**
	         * @public
	         * @param {number} x Global coord x.
	         * @param {number} y Global coord y.
	         * @return {Object} info If not found, return undefined;
	         * @return {number} info.node Target node.
	         * @return {number} info.offsetX x refer to target node.
	         * @return {number} info.offsetY y refer to target node.
	         */
	        findTarget: function (x, y) {
	            var targetInfo;
	            var viewRoot = this.seriesModel.getViewRoot();
	
	            viewRoot.eachNode({attr: 'viewChildren', order: 'preorder'}, function (node) {
	                var bgEl = this._storage.background[node.getRawIndex()];
	                // If invisible, there might be no element.
	                if (bgEl) {
	                    var point = bgEl.transformCoordToLocal(x, y);
	                    var shape = bgEl.shape;
	
	                    // For performance consideration, dont use 'getBoundingRect'.
	                    if (shape.x <= point[0]
	                        && point[0] <= shape.x + shape.width
	                        && shape.y <= point[1]
	                        && point[1] <= shape.y + shape.height
	                    ) {
	                        targetInfo = {node: node, offsetX: point[0], offsetY: point[1]};
	                    }
	                    else {
	                        return false; // Suppress visit subtree.
	                    }
	                }
	            }, this);
	
	            return targetInfo;
	        }
	
	    });
	
	    /**
	     * @inner
	     */
	    function createStorage() {
	        return {nodeGroup: [], background: [], content: []};
	    }
	
	    /**
	     * @inner
	     * @return Return undefined means do not travel further.
	     */
	    function renderNode(
	        seriesModel, thisStorage, oldStorage, reRoot,
	        lastsForAnimation, willInvisibleEls,
	        thisNode, oldNode, parentGroup, depth
	    ) {
	        // Whether under viewRoot.
	        if (!thisNode) {
	            // Deleting nodes will be performed finally. This method just find
	            // element from old storage, or create new element, set them to new
	            // storage, and set styles.
	            return;
	        }
	
	        var thisLayout = thisNode.getLayout();
	
	        if (!thisLayout || !thisLayout.isInView) {
	            return;
	        }
	
	        var thisWidth = thisLayout.width;
	        var thisHeight = thisLayout.height;
	        var thisInvisible = thisLayout.invisible;
	
	        var thisRawIndex = thisNode.getRawIndex();
	        var oldRawIndex = oldNode && oldNode.getRawIndex();
	
	        // Node group
	        var group = giveGraphic('nodeGroup', Group);
	
	        if (!group) {
	            return;
	        }
	
	        parentGroup.add(group);
	        // x,y are not set when el is above view root.
	        group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);
	        group.__tmNodeWidth = thisWidth;
	        group.__tmNodeHeight = thisHeight;
	
	        if (thisLayout.isAboveViewRoot) {
	            return group;
	        }
	
	        // Background
	        var bg = giveGraphic('background', Rect, depth, Z_BG);
	        if (bg) {
	            bg.setShape({x: 0, y: 0, width: thisWidth, height: thisHeight});
	            updateStyle(bg, function () {
	                bg.setStyle('fill', thisNode.getVisual('borderColor', true));
	            });
	            group.add(bg);
	        }
	
	        var thisViewChildren = thisNode.viewChildren;
	
	        // No children, render content.
	        if (!thisViewChildren || !thisViewChildren.length) {
	            var content = giveGraphic('content', Rect, depth, Z_CONTENT);
	            content && renderContent(group);
	        }
	
	        return group;
	
	        // ----------------------------
	        // | Procedures in renderNode |
	        // ----------------------------
	
	        function renderContent(group) {
	            // For tooltip.
	            content.dataIndex = thisNode.dataIndex;
	            content.seriesIndex = seriesModel.seriesIndex;
	
	            var borderWidth = thisLayout.borderWidth;
	            var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
	            var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);
	
	            content.culling = true;
	            content.setShape({
	                x: borderWidth,
	                y: borderWidth,
	                width: contentWidth,
	                height: contentHeight
	            });
	
	            var visualColor = thisNode.getVisual('color', true);
	            updateStyle(content, function () {
	                var normalStyle = {fill: visualColor};
	                var emphasisStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();
	
	                prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);
	
	                content.setStyle(normalStyle);
	                graphic.setHoverStyle(content, emphasisStyle);
	            });
	
	            group.add(content);
	        }
	
	        function updateStyle(element, cb) {
	            if (!thisInvisible) {
	                // If invisible, do not set visual, otherwise the element will
	                // change immediately before animation. We think it is OK to
	                // remain its origin color when moving out of the view window.
	                cb();
	
	                if (!element.__tmWillVisible) {
	                    element.invisible = false;
	                }
	            }
	            else {
	                // Delay invisible setting utill animation finished,
	                // avoid element vanish suddenly before animation.
	                !element.invisible && willInvisibleEls.push(element);
	            }
	        }
	
	        function prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight) {
	            var nodeModel = thisNode.getModel();
	            var text = nodeModel.get('name');
	            if (thisLayout.isLeafRoot) {
	                var iconChar = seriesModel.get('drillDownIcon', true);
	                text = iconChar ? iconChar + ' ' + text : text;
	            }
	
	            setText(
	                text, normalStyle, nodeModel, PATH_LABEL_NORMAL,
	                visualColor, contentWidth, contentHeight
	            );
	            setText(
	                text, emphasisStyle, nodeModel, PATH_LABEL_EMPHASIS,
	                visualColor, contentWidth, contentHeight
	            );
	        }
	
	        function setText(text, style, nodeModel, labelPath, visualColor, contentWidth, contentHeight) {
	            var labelModel = nodeModel.getModel(labelPath);
	            var labelTextStyleModel = labelModel.getModel('textStyle');
	
	            graphic.setText(style, labelModel, visualColor);
	
	            // text.align and text.baseline is not included by graphic.setText,
	            // because in most cases the two attributes are not exposed to user,
	            // except in treemap.
	            style.textAlign = labelTextStyleModel.get('align');
	            style.textVerticalAlign = labelTextStyleModel.get('baseline');
	
	            var textRect = labelTextStyleModel.getTextRect(text);
	            if (!labelModel.getShallow('show') || textRect.height > contentHeight) {
	                style.text = '';
	            }
	            else if (textRect.width > contentWidth) {
	                style.text = labelTextStyleModel.get('ellipsis')
	                    ? labelTextStyleModel.truncateText(
	                        text, contentWidth, null, {minChar: 2}
	                    )
	                    : '';
	            }
	            else {
	                style.text = text;
	            }
	        }
	
	        function giveGraphic(storageName, Ctor, depth, z) {
	            var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
	            var lasts = lastsForAnimation[storageName];
	
	            if (element) {
	                // Remove from oldStorage
	                oldStorage[storageName][oldRawIndex] = null;
	                prepareAnimationWhenHasOld(lasts, element, storageName);
	            }
	            // If invisible and no old element, do not create new element (for optimizing).
	            else if (!thisInvisible) {
	                element = new Ctor({z: calculateZ(depth, z)});
	                element.__tmDepth = depth;
	                element.__tmStorageName = storageName;
	                prepareAnimationWhenNoOld(lasts, element, storageName);
	            }
	
	            // Set to thisStorage
	            return (thisStorage[storageName][thisRawIndex] = element);
	        }
	
	        function prepareAnimationWhenHasOld(lasts, element, storageName) {
	            var lastCfg = lasts[thisRawIndex] = {};
	            lastCfg.old = storageName === 'nodeGroup'
	                ? element.position.slice()
	                : zrUtil.extend({}, element.shape);
	        }
	
	        // If a element is new, we need to find the animation start point carefully,
	        // otherwise it will looks strange when 'zoomToNode'.
	        function prepareAnimationWhenNoOld(lasts, element, storageName) {
	            var lastCfg = lasts[thisRawIndex] = {};
	            var parentNode = thisNode.parentNode;
	
	            if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {
	                var parentOldX = 0;
	                var parentOldY = 0;
	
	                // New nodes appear from right-bottom corner in 'zoomToNode' animation.
	                // For convenience, get old bounding rect from background.
	                var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];
	                if (!reRoot && parentOldBg && parentOldBg.old) {
	                    parentOldX = parentOldBg.old.width;
	                    parentOldY = parentOldBg.old.height;
	                }
	
	                // When no parent old shape found, its parent is new too,
	                // so we can just use {x:0, y:0}.
	                lastCfg.old = storageName === 'nodeGroup'
	                    ? [0, parentOldY]
	                    : {x: parentOldX, y: parentOldY, width: 0, height: 0};
	            }
	
	            // Fade in, user can be aware that these nodes are new.
	            lastCfg.fadein = storageName !== 'nodeGroup';
	        }
	    }
	
	    // We can not set all backgroud with the same z, Because the behaviour of
	    // drill down and roll up differ background creation sequence from tree
	    // hierarchy sequence, which cause that lowser background element overlap
	    // upper ones. So we calculate z based on depth.
	    // Moreover, we try to shrink down z interval to [0, 1] to avoid that
	    // treemap with large z overlaps other components.
	    function calculateZ(depth, zInLevel) {
	        var zb = depth * Z_BASE + zInLevel;
	        return (zb - 1) / zb;
	    }
	


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	 
	
	    var graphic = __webpack_require__(64);
	    var layout = __webpack_require__(42);
	    var zrUtil = __webpack_require__(25);
	    var helper = __webpack_require__(210);
	
	    var TEXT_PADDING = 8;
	    var ITEM_GAP = 8;
	    var ARRAY_LENGTH = 5;
	
	    function Breadcrumb(containerGroup) {
	        /**
	         * @private
	         * @type {module:zrender/container/Group}
	         */
	        this.group = new graphic.Group();
	
	        containerGroup.add(this.group);
	    }
	
	    Breadcrumb.prototype = {
	
	        constructor: Breadcrumb,
	
	        render: function (seriesModel, api, targetNode, onSelect) {
	            var model = seriesModel.getModel('breadcrumb');
	            var thisGroup = this.group;
	
	            thisGroup.removeAll();
	
	            if (!model.get('show') || !targetNode) {
	                return;
	            }
	
	            var normalStyleModel = model.getModel('itemStyle.normal');
	            // var emphasisStyleModel = model.getModel('itemStyle.emphasis');
	            var textStyleModel = normalStyleModel.getModel('textStyle');
	
	            var layoutParam = {
	                pos: {
	                    left: model.get('left'),
	                    right: model.get('right'),
	                    top: model.get('top'),
	                    bottom: model.get('bottom')
	                },
	                box: {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                },
	                emptyItemWidth: model.get('emptyItemWidth'),
	                totalWidth: 0,
	                renderList: []
	            };
	
	            this._prepare(targetNode, layoutParam, textStyleModel);
	            this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);
	
	            layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);
	        },
	
	        /**
	         * Prepare render list and total width
	         * @private
	         */
	        _prepare: function (targetNode, layoutParam, textStyleModel) {
	            for (var node = targetNode; node; node = node.parentNode) {
	                var text = node.getModel().get('name');
	                var textRect = textStyleModel.getTextRect(text);
	                var itemWidth = Math.max(
	                    textRect.width + TEXT_PADDING * 2,
	                    layoutParam.emptyItemWidth
	                );
	                layoutParam.totalWidth += itemWidth + ITEM_GAP;
	                layoutParam.renderList.push({node: node, text: text, width: itemWidth});
	            }
	        },
	
	        /**
	         * @private
	         */
	        _renderContent: function (
	            seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect
	        ) {
	            // Start rendering.
	            var lastX = 0;
	            var emptyItemWidth = layoutParam.emptyItemWidth;
	            var height = seriesModel.get('breadcrumb.height');
	            var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
	            var totalWidth = layoutParam.totalWidth;
	            var renderList = layoutParam.renderList;
	
	            for (var i = renderList.length - 1; i >= 0; i--) {
	                var item = renderList[i];
	                var itemNode = item.node;
	                var itemWidth = item.width;
	                var text = item.text;
	
	                // Hdie text and shorten width if necessary.
	                if (totalWidth > availableSize.width) {
	                    totalWidth -= itemWidth - emptyItemWidth;
	                    itemWidth = emptyItemWidth;
	                    text = '';
	                }
	
	                var el = new graphic.Polygon({
	                    shape: {
	                        points: makeItemPoints(
	                            lastX, 0, itemWidth, height,
	                            i === renderList.length - 1, i === 0
	                        )
	                    },
	                    style: zrUtil.defaults(
	                        normalStyleModel.getItemStyle(),
	                        {
	                            lineJoin: 'bevel',
	                            text: text,
	                            textFill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont()
	                        }
	                    ),
	                    z: 10,
	                    onclick: zrUtil.curry(onSelect, itemNode)
	                });
	                this.group.add(el);
	
	                packEventData(el, seriesModel, itemNode);
	
	                lastX += itemWidth + ITEM_GAP;
	            }
	        },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            this.group.removeAll();
	        }
	    };
	
	    function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
	        var points = [
	            [head ? x : x - ARRAY_LENGTH, y],
	            [x + itemWidth, y],
	            [x + itemWidth, y + itemHeight],
	            [head ? x : x - ARRAY_LENGTH, y + itemHeight]
	        ];
	        !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
	        !head && points.push([x, y + itemHeight / 2]);
	        return points;
	    }
	
	    // Package custom mouse event.
	    function packEventData(el, seriesModel, itemNode) {
	        el.eventData = {
	            componentType: 'series',
	            componentSubType: 'treemap',
	            seriesIndex: seriesModel.componentIndex,
	            seriesName: seriesModel.name,
	            seriesType: 'treemap',
	            selfType: 'breadcrumb', // Distinguish with click event on treemap node.
	            nodeData: {
	                dataIndex: itemNode && itemNode.dataIndex,
	                name: itemNode && itemNode.name
	            },
	            treePathInfo: itemNode && helper.wrapTreePathInfo(itemNode, seriesModel)
	        };
	    }
	
	    module.exports = Breadcrumb;


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	 
	
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * @param {number} [time=500] Time in ms
	     * @param {string} [easing='linear']
	     * @param {number} [delay=0]
	     * @param {Function} [callback]
	     *
	     * @example
	     *  // Animate position
	     *  animation
	     *      .createWrap()
	     *      .add(el1, {position: [10, 10]})
	     *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
	     *      .done(function () { // done })
	     *      .start('cubicOut');
	     */
	    function createWrap() {
	
	        var storage = [];
	        var elExistsMap = {};
	        var doneCallback;
	
	        return {
	
	            /**
	             * Caution: a el can only be added once, otherwise 'done'
	             * might not be called. This method checks this (by el.id),
	             * suppresses adding and returns false when existing el found.
	             *
	             * @param {modele:zrender/Element} el
	             * @param {Object} target
	             * @param {number} [time=500]
	             * @param {number} [delay=0]
	             * @param {string} [easing='linear']
	             * @return {boolean} Whether adding succeeded.
	             *
	             * @example
	             *     add(el, target, time, delay, easing);
	             *     add(el, target, time, easing);
	             *     add(el, target, time);
	             *     add(el, target);
	             */
	            add: function (el, target, time, delay, easing) {
	                if (zrUtil.isString(delay)) {
	                    easing = delay;
	                    delay = 0;
	                }
	
	                if (elExistsMap[el.id]) {
	                    return false;
	                }
	                elExistsMap[el.id] = 1;
	
	                storage.push(
	                    {el: el, target: target, time: time, delay: delay, easing: easing}
	                );
	
	                return true;
	            },
	
	            /**
	             * Only execute when animation finished. Will not execute when any
	             * of 'stop' or 'stopAnimation' called.
	             *
	             * @param {Function} callback
	             */
	            done: function (callback) {
	                doneCallback = callback;
	                return this;
	            },
	
	            /**
	             * Will stop exist animation firstly.
	             */
	            start: function () {
	                var count = storage.length;
	
	                for (var i = 0, len = storage.length; i < len; i++) {
	                    var item = storage[i];
	                    item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
	                }
	
	                return this;
	
	                function done() {
	                    count--;
	                    if (!count) {
	                        storage.length = 0;
	                        elExistsMap = {};
	                        doneCallback && doneCallback();
	                    }
	                }
	            }
	        };
	    }
	
	    module.exports = {createWrap: createWrap};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Treemap action
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var helper = __webpack_require__(210);
	
	    var noop = function () {};
	
	    var actionTypes = [
	        'treemapZoomToNode',
	        'treemapRender',
	        'treemapMove'
	    ];
	
	    for (var i = 0; i < actionTypes.length; i++) {
	        echarts.registerAction({type: actionTypes[i], update: 'updateView'}, noop);
	    }
	
	    echarts.registerAction(
	        {type: 'treemapRootToNode', update: 'updateView'},
	        function (payload, ecModel) {
	
	            ecModel.eachComponent(
	                {mainType: 'series', subType: 'treemap', query: payload},
	                handleRootToNode
	            );
	
	            function handleRootToNode(model, index) {
	                var targetInfo = helper.retrieveTargetInfo(payload, model);
	
	                if (targetInfo) {
	                    var originViewRoot = model.getViewRoot();
	                    if (originViewRoot) {
	                        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node)
	                            ? 'rollUp' : 'drillDown';
	                    }
	                    model.resetViewRoot(targetInfo.node);
	                }
	            }
	        }
	    );
	


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var VisualMapping = __webpack_require__(216);
	    var zrColor = __webpack_require__(60);
	    var zrUtil = __webpack_require__(25);
	    var isArray = zrUtil.isArray;
	
	    var ITEM_STYLE_NORMAL = 'itemStyle.normal';
	
	    module.exports = function (ecModel, api, payload) {
	
	        var condition = {mainType: 'series', subType: 'treemap', query: payload};
	        ecModel.eachComponent(condition, function (seriesModel) {
	
	            var tree = seriesModel.getData().tree;
	            var root = tree.root;
	            var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);
	
	            if (root.isRemoved()) {
	                return;
	            }
	
	            var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
	                return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
	            });
	
	            travelTree(
	                root, // Visual should calculate from tree root but not view root.
	                {},
	                levelItemStyles,
	                seriesItemStyleModel,
	                seriesModel.getViewRoot().getAncestors(),
	                seriesModel
	            );
	        });
	    };
	
	    function travelTree(
	        node, designatedVisual, levelItemStyles, seriesItemStyleModel,
	        viewRootAncestors, seriesModel
	    ) {
	        var nodeModel = node.getModel();
	        var nodeLayout = node.getLayout();
	
	        // Optimize
	        if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {
	            return;
	        }
	
	        var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
	        var levelItemStyle = levelItemStyles[node.depth];
	        var visuals = buildVisuals(
	            nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
	        );
	
	        // calculate border color
	        var borderColor = nodeItemStyleModel.get('borderColor');
	        var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
	        var thisNodeColor;
	        if (borderColorSaturation != null) {
	            // For performance, do not always execute 'calculateColor'.
	            thisNodeColor = calculateColor(visuals, node);
	            borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
	        }
	        node.setVisual('borderColor', borderColor);
	
	        var viewChildren = node.viewChildren;
	        if (!viewChildren || !viewChildren.length) {
	            thisNodeColor = calculateColor(visuals, node);
	            // Apply visual to this node.
	            node.setVisual('color', thisNodeColor);
	        }
	        else {
	            var mapping = buildVisualMapping(
	                node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
	            );
	
	            // Designate visual to children.
	            zrUtil.each(viewChildren, function (child, index) {
	                // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
	                if (child.depth >= viewRootAncestors.length
	                    || child === viewRootAncestors[child.depth]
	                ) {
	                    var childVisual = mapVisual(
	                        nodeModel, visuals, child, index, mapping, seriesModel
	                    );
	                    travelTree(
	                        child, childVisual, levelItemStyles, seriesItemStyleModel,
	                        viewRootAncestors, seriesModel
	                    );
	                }
	            });
	        }
	    }
	
	    function buildVisuals(
	        nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
	    ) {
	        var visuals = zrUtil.extend({}, designatedVisual);
	
	        zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
	            // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
	            var val = nodeItemStyleModel.get(visualName, true); // Ignore parent
	            val == null && levelItemStyle && (val = levelItemStyle[visualName]);
	            val == null && (val = designatedVisual[visualName]);
	            val == null && (val = seriesItemStyleModel.get(visualName));
	
	            val != null && (visuals[visualName] = val);
	        });
	
	        return visuals;
	    }
	
	    function calculateColor(visuals) {
	        var color = getValueVisualDefine(visuals, 'color');
	
	        if (color) {
	            var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
	            var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');
	            if (colorSaturation) {
	                color = zrColor.modifyHSL(color, null, null, colorSaturation);
	            }
	            if (colorAlpha) {
	                color = zrColor.modifyAlpha(color, colorAlpha);
	            }
	
	            return color;
	        }
	    }
	
	    function calculateBorderColor(borderColorSaturation, thisNodeColor) {
	        return thisNodeColor != null
	             ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation)
	             : null;
	    }
	
	    function getValueVisualDefine(visuals, name) {
	        var value = visuals[name];
	        if (value != null && value !== 'none') {
	            return value;
	        }
	    }
	
	    function buildVisualMapping(
	        node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
	    ) {
	        if (!viewChildren || !viewChildren.length) {
	            return;
	        }
	
	        var rangeVisual = getRangeVisual(nodeModel, 'color')
	            || (
	                visuals.color != null
	                && visuals.color !== 'none'
	                && (
	                    getRangeVisual(nodeModel, 'colorAlpha')
	                    || getRangeVisual(nodeModel, 'colorSaturation')
	                )
	            );
	
	        if (!rangeVisual) {
	            return;
	        }
	
	        var visualMin = nodeModel.get('visualMin');
	        var visualMax = nodeModel.get('visualMax');
	        var dataExtent = nodeLayout.dataExtent.slice();
	        visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);
	        visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);
	
	        var colorMappingBy = nodeModel.get('colorMappingBy');
	        var opt = {
	            type: rangeVisual.name,
	            dataExtent: dataExtent,
	            visual: rangeVisual.range
	        };
	        if (opt.type === 'color'
	            && (colorMappingBy === 'index' || colorMappingBy === 'id')
	        ) {
	            opt.mappingMethod = 'category';
	            opt.loop = true;
	            // categories is ordinal, so do not set opt.categories.
	        }
	        else {
	            opt.mappingMethod = 'linear';
	        }
	
	        var mapping = new VisualMapping(opt);
	        mapping.__drColorMappingBy = colorMappingBy;
	
	        return mapping;
	    }
	
	    // Notice: If we dont have the attribute 'colorRange', but only use
	    // attribute 'color' to represent both concepts of 'colorRange' and 'color',
	    // (It means 'colorRange' when 'color' is Array, means 'color' when not array),
	    // this problem will be encountered:
	    // If a level-1 node dont have children, and its siblings has children,
	    // and colorRange is set on level-1, then the node can not be colored.
	    // So we separate 'colorRange' and 'color' to different attributes.
	    function getRangeVisual(nodeModel, name) {
	        // 'colorRange', 'colorARange', 'colorSRange'.
	        // If not exsits on this node, fetch from levels and series.
	        var range = nodeModel.get(name);
	        return (isArray(range) && range.length) ? {name: name, range: range} : null;
	    }
	
	    function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
	        var childVisuals = zrUtil.extend({}, visuals);
	
	        if (mapping) {
	            var mappingType = mapping.type;
	            var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
	            var value =
	                colorMappingBy === 'index'
	                ? index
	                : colorMappingBy === 'id'
	                ? seriesModel.mapIdToIndex(child.getId())
	                : child.getValue(nodeModel.get('visualDimension'));
	
	            childVisuals[mappingType] = mapping.mapValueToVisual(value);
	        }
	
	        return childVisuals;
	    }
	


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual mapping.
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var zrColor = __webpack_require__(60);
	    var linearMap = __webpack_require__(28).linearMap;
	    var each = zrUtil.each;
	    var isObject = zrUtil.isObject;
	
	    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;
	
	    /**
	     * @param {Object} option
	     * @param {string} [option.type] See visualHandlers.
	     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'
	     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	     *                                              required when mappingMethod is 'linear'
	     * @param {Array.<Object>=} [option.pieceList] [
	     *                                             {value: someValue},
	     *                                             {interval: [min1, max1], visual: {...}},
	     *                                             {interval: [min2, max2]}
	     *                                             ],
	     *                                            required when mappingMethod is 'piecewise'.
	     *                                            Visual for only each piece can be specified.
	     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	     *                                            required when mappingMethod is 'category'.
	     *                                            If no option.categories, categories is set
	     *                                            as [0, 1, 2, ...].
	     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	     * @param {(Array|Object|*)} [option.visual]  Visual data.
	     *                                            when mappingMethod is 'category',
	     *                                            visual data can be array or object
	     *                                            (like: {cate1: '#222', none: '#fff'})
	     *                                            or primary types (which represents
	     *                                            defualt category visual), otherwise visual
	     *                                            can be array or primary (which will be
	     *                                            normalized to array).
	     *
	     */
	    var VisualMapping = function (option) {
	        var mappingMethod = option.mappingMethod;
	        var visualType = option.type;
	
	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        var thisOption = this.option = zrUtil.clone(option);
	
	        /**
	         * @readOnly
	         * @type {string}
	         */
	        this.type = visualType;
	
	        /**
	         * @readOnly
	         * @type {string}
	         */
	        this.mappingMethod = mappingMethod;
	
	        /**
	         * @private
	         * @type {Function}
	         */
	        this._normalizeData = normalizers[mappingMethod];
	
	        var visualHandler = visualHandlers[visualType];
	
	        /**
	         * @public
	         * @type {Function}
	         */
	        this.applyVisual = visualHandler.applyVisual;
	
	        /**
	         * @public
	         * @type {Function}
	         */
	        this.getColorMapper = visualHandler.getColorMapper;
	
	        /**
	         * @private
	         * @type {Function}
	         */
	        this._doMap = visualHandler._doMap[mappingMethod];
	
	        if (mappingMethod === 'piecewise') {
	            normalizeVisualRange(thisOption);
	            preprocessForPiecewise(thisOption);
	        }
	        else if (mappingMethod === 'category') {
	            thisOption.categories
	                ? preprocessForSpecifiedCategory(thisOption)
	                // categories is ordinal when thisOption.categories not specified,
	                // which need no more preprocess except normalize visual.
	                : normalizeVisualRange(thisOption, true);
	        }
	        else { // mappingMethod === 'linear' or 'fixed'
	            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);
	            normalizeVisualRange(thisOption);
	        }
	    };
	
	    VisualMapping.prototype = {
	
	        constructor: VisualMapping,
	
	        mapValueToVisual: function (value) {
	            var normalized = this._normalizeData(value);
	            return this._doMap(normalized, value);
	        },
	
	        getNormalizer: function () {
	            return zrUtil.bind(this._normalizeData, this);
	        }
	    };
	
	    var visualHandlers = VisualMapping.visualHandlers = {
	
	        color: {
	
	            applyVisual: makeApplyVisual('color'),
	
	            /**
	             * Create a mapper function
	             * @return {Function}
	             */
	            getColorMapper: function () {
	                var thisOption = this.option;
	                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);
	
	                return zrUtil.bind(
	                    thisOption.mappingMethod === 'category'
	                        ? function (value, isNormalized) {
	                            !isNormalized && (value = this._normalizeData(value));
	                            return doMapCategory.call(this, value);
	                        }
	                        : function (value, isNormalized, out) {
	                            // If output rgb array
	                            // which will be much faster and useful in pixel manipulation
	                            var returnRGBArray = !!out;
	                            !isNormalized && (value = this._normalizeData(value));
	                            out = zrColor.fastMapToColor(value, parsedVisual, out);
	                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');
	                        },
	                    this
	                );
	            },
	
	            _doMap: {
	                linear: function (normalized) {
	                    return zrColor.mapToColor(normalized, this.option.visual);
	                },
	                category: doMapCategory,
	                piecewise: function (normalized, value) {
	                    var result = getSpecifiedVisual.call(this, value);
	                    if (result == null) {
	                        result = zrColor.mapToColor(normalized, this.option.visual);
	                    }
	                    return result;
	                },
	                fixed: doMapFixed
	            }
	        },
	
	        colorHue: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, value);
	        }),
	
	        colorSaturation: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, null, value);
	        }),
	
	        colorLightness: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, null, null, value);
	        }),
	
	        colorAlpha: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyAlpha(color, value);
	        }),
	
	        opacity: {
	            applyVisual: makeApplyVisual('opacity'),
	            _doMap: makeDoMap([0, 1])
	        },
	
	        symbol: {
	            applyVisual: function (value, getter, setter) {
	                var symbolCfg = this.mapValueToVisual(value);
	                if (zrUtil.isString(symbolCfg)) {
	                    setter('symbol', symbolCfg);
	                }
	                else if (isObject(symbolCfg)) {
	                    for (var name in symbolCfg) {
	                        if (symbolCfg.hasOwnProperty(name)) {
	                            setter(name, symbolCfg[name]);
	                        }
	                    }
	                }
	            },
	            _doMap: {
	                linear: doMapToArray,
	                category: doMapCategory,
	                piecewise: function (normalized, value) {
	                    var result = getSpecifiedVisual.call(this, value);
	                    if (result == null) {
	                        result = doMapToArray.call(this, normalized);
	                    }
	                    return result;
	                },
	                fixed: doMapFixed
	            }
	        },
	
	        symbolSize: {
	            applyVisual: makeApplyVisual('symbolSize'),
	            _doMap: makeDoMap([0, 1])
	        }
	    };
	
	
	    function preprocessForPiecewise(thisOption) {
	        var pieceList = thisOption.pieceList;
	        thisOption.hasSpecialVisual = false;
	
	        zrUtil.each(pieceList, function (piece, index) {
	            piece.originIndex = index;
	            // piece.visual is "result visual value" but not
	            // a visual range, so it does not need to be normalized.
	            if (piece.visual != null) {
	                thisOption.hasSpecialVisual = true;
	            }
	        });
	    }
	
	    function preprocessForSpecifiedCategory(thisOption) {
	        // Hash categories.
	        var categories = thisOption.categories;
	        var visual = thisOption.visual;
	
	        var categoryMap = thisOption.categoryMap = {};
	        each(categories, function (cate, index) {
	            categoryMap[cate] = index;
	        });
	
	        // Process visual map input.
	        if (!zrUtil.isArray(visual)) {
	            var visualArr = [];
	
	            if (zrUtil.isObject(visual)) {
	                each(visual, function (v, cate) {
	                    var index = categoryMap[cate];
	                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	                });
	            }
	            else { // Is primary type, represents default visual.
	                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	            }
	
	            visual = thisOption.visual = visualArr;
	        }
	
	        // Remove categories that has no visual,
	        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.
	        for (var i = categories.length - 1; i >= 0; i--) {
	            if (visual[i] == null) {
	                delete categoryMap[categories[i]];
	                categories.pop();
	            }
	        }
	    }
	
	    function normalizeVisualRange(thisOption, isCategory) {
	        var visual = thisOption.visual;
	        var visualArr = [];
	
	        if (zrUtil.isObject(visual)) {
	            each(visual, function (v) {
	                visualArr.push(v);
	            });
	        }
	        else if (visual != null) {
	            visualArr.push(visual);
	        }
	
	        var doNotNeedPair = {color: 1, symbol: 1};
	
	        if (!isCategory
	            && visualArr.length === 1
	            && !doNotNeedPair.hasOwnProperty(thisOption.type)
	        ) {
	            // Do not care visualArr.length === 0, which is illegal.
	            visualArr[1] = visualArr[0];
	        }
	
	        thisOption.visual = visualArr;
	    }
	
	    function makePartialColorVisualHandler(applyValue) {
	        return {
	            applyVisual: function (value, getter, setter) {
	                value = this.mapValueToVisual(value);
	                // Must not be array value
	                setter('color', applyValue(getter('color'), value));
	            },
	            _doMap: makeDoMap([0, 1])
	        };
	    }
	
	    function doMapToArray(normalized) {
	        var visual = this.option.visual;
	        return visual[
	            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))
	        ] || {};
	    }
	
	    function makeApplyVisual(visualType) {
	        return function (value, getter, setter) {
	            setter(visualType, this.mapValueToVisual(value));
	        };
	    }
	
	    function doMapCategory(normalized) {
	        var visual = this.option.visual;
	        return visual[
	            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)
	                ? normalized % visual.length
	                : normalized
	        ];
	    }
	
	    function doMapFixed() {
	        return this.option.visual[0];
	    }
	
	    function makeDoMap(sourceExtent) {
	        return {
	            linear: function (normalized) {
	                return linearMap(normalized, sourceExtent, this.option.visual, true);
	            },
	            category: doMapCategory,
	            piecewise: function (normalized, value) {
	                var result = getSpecifiedVisual.call(this, value);
	                if (result == null) {
	                    result = linearMap(normalized, sourceExtent, this.option.visual, true);
	                }
	                return result;
	            },
	            fixed: doMapFixed
	        };
	    }
	
	    function getSpecifiedVisual(value) {
	        var thisOption = this.option;
	        var pieceList = thisOption.pieceList;
	        if (thisOption.hasSpecialVisual) {
	            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	            var piece = pieceList[pieceIndex];
	            if (piece && piece.visual) {
	                return piece.visual[this.type];
	            }
	        }
	    }
	
	
	    /**
	     * Normalizers by mapping methods.
	     */
	    var normalizers = {
	
	        linear: function (value) {
	            return linearMap(value, this.option.dataExtent, [0, 1], true);
	        },
	
	        piecewise: function (value) {
	            var pieceList = this.option.pieceList;
	            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);
	            if (pieceIndex != null) {
	                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	            }
	        },
	
	        category: function (value) {
	            var index = this.option.categories
	                ? this.option.categoryMap[value]
	                : value; // ordinal
	            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	        },
	
	        fixed: zrUtil.noop
	    };
	
	
	
	    /**
	     * List available visual types.
	     *
	     * @public
	     * @return {Array.<string>}
	     */
	    VisualMapping.listVisualTypes = function () {
	        var visualTypes = [];
	        zrUtil.each(visualHandlers, function (handler, key) {
	            visualTypes.push(key);
	        });
	        return visualTypes;
	    };
	
	    /**
	     * @public
	     */
	    VisualMapping.addVisualHandler = function (name, handler) {
	        visualHandlers[name] = handler;
	    };
	
	    /**
	     * @public
	     */
	    VisualMapping.isValidType = function (visualType) {
	        return visualHandlers.hasOwnProperty(visualType);
	    };
	
	    /**
	     * Convinent method.
	     * Visual can be Object or Array or primary type.
	     *
	     * @public
	     */
	    VisualMapping.eachVisual = function (visual, callback, context) {
	        if (zrUtil.isObject(visual)) {
	            zrUtil.each(visual, callback, context);
	        }
	        else {
	            callback.call(context, visual);
	        }
	    };
	
	    VisualMapping.mapVisual = function (visual, callback, context) {
	        var isPrimary;
	        var newVisual = zrUtil.isArray(visual)
	            ? []
	            : zrUtil.isObject(visual)
	            ? {}
	            : (isPrimary = true, null);
	
	        VisualMapping.eachVisual(visual, function (v, key) {
	            var newVal = callback.call(context, v, key);
	            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);
	        });
	        return newVisual;
	    };
	
	    /**
	     * @public
	     * @param {Object} obj
	     * @return {Oject} new object containers visual values.
	     *                 If no visuals, return null.
	     */
	    VisualMapping.retrieveVisuals = function (obj) {
	        var ret = {};
	        var hasVisual;
	
	        obj && each(visualHandlers, function (h, visualType) {
	            if (obj.hasOwnProperty(visualType)) {
	                ret[visualType] = obj[visualType];
	                hasVisual = true;
	            }
	        });
	
	        return hasVisual ? ret : null;
	    };
	
	    /**
	     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	     *
	     * @public
	     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	     * @return {Array.<string>} Sorted visual types.
	     */
	    VisualMapping.prepareVisualTypes = function (visualTypes) {
	        if (isObject(visualTypes)) {
	            var types = [];
	            each(visualTypes, function (item, type) {
	                types.push(type);
	            });
	            visualTypes = types;
	        }
	        else if (zrUtil.isArray(visualTypes)) {
	            visualTypes = visualTypes.slice();
	        }
	        else {
	            return [];
	        }
	
	        visualTypes.sort(function (type1, type2) {
	            // color should be front of colorSaturation, colorAlpha, ...
	            // symbol and symbolSize do not matter.
	            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)
	                ? 1 : -1;
	        });
	
	        return visualTypes;
	    };
	
	    /**
	     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.
	     * Other visuals are only depends on themself.
	     *
	     * @public
	     * @param {string} visualType1
	     * @param {string} visualType2
	     * @return {boolean}
	     */
	    VisualMapping.dependsOn = function (visualType1, visualType2) {
	        return visualType2 === 'color'
	            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)
	            : visualType1 === visualType2;
	    };
	
	    /**
	     * @param {number} value
	     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]
	     *                         Always from small to big.
	     * @param {boolean} [findClosestWhenOutside=false]
	     * @return {number} index
	     */
	    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {
	        var possibleI;
	        var abs = Infinity;
	
	        // value has the higher priority.
	        for (var i = 0, len = pieceList.length; i < len; i++) {
	            var pieceValue = pieceList[i].value;
	            if (pieceValue != null) {
	                if (pieceValue === value) {
	                    return i;
	                }
	                findClosestWhenOutside && updatePossible(pieceValue, i);
	            }
	        }
	
	        for (var i = 0, len = pieceList.length; i < len; i++) {
	            var piece = pieceList[i];
	            var interval = piece.interval;
	            var close = piece.close;
	
	            if (interval) {
	                if (interval[0] === -Infinity) {
	                    if (littleThan(close[1], value, interval[1])) {
	                        return i;
	                    }
	                }
	                else if (interval[1] === Infinity) {
	                    if (littleThan(close[0], interval[0], value)) {
	                        return i;
	                    }
	                }
	                else if (
	                    littleThan(close[0], interval[0], value)
	                    && littleThan(close[1], value, interval[1])
	                ) {
	                    return i;
	                }
	                findClosestWhenOutside && updatePossible(interval[0], i);
	                findClosestWhenOutside && updatePossible(interval[1], i);
	            }
	        }
	
	        if (findClosestWhenOutside) {
	            return value === Infinity
	                ? pieceList.length - 1
	                : value === -Infinity
	                ? 0
	                : possibleI;
	        }
	
	        function updatePossible(val, index) {
	            var newAbs = Math.abs(val - value);
	            if (newAbs < abs) {
	                abs = newAbs;
	                possibleI = index;
	            }
	        }
	
	    };
	
	    function littleThan(close, a, b) {
	        return close ? a <= b : a < b;
	    }
	
	    module.exports = VisualMapping;
	


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var layout = __webpack_require__(42);
	    var helper = __webpack_require__(210);
	    var BoundingRect = __webpack_require__(30);
	    var helper = __webpack_require__(210);
	
	    var mathMax = Math.max;
	    var mathMin = Math.min;
	    var parsePercent = numberUtil.parsePercent;
	    var retrieveValue = zrUtil.retrieve;
	    var each = zrUtil.each;
	
	    /**
	     * @public
	     */
	    function update(ecModel, api, payload) {
	        // Layout result in each node:
	        // {x, y, width, height, area, borderWidth}
	        var condition = {mainType: 'series', subType: 'treemap', query: payload};
	        ecModel.eachComponent(condition, function (seriesModel) {
	
	            var ecWidth = api.getWidth();
	            var ecHeight = api.getHeight();
	            var seriesOption = seriesModel.option;
	
	            var layoutInfo = layout.getLayoutRect(
	                seriesModel.getBoxLayoutParams(),
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );
	
	            var size = seriesOption.size || []; // Compatible with ec2.
	            var containerWidth = parsePercent(
	                retrieveValue(layoutInfo.width, size[0]),
	                ecWidth
	            );
	            var containerHeight = parsePercent(
	                retrieveValue(layoutInfo.height, size[1]),
	                ecHeight
	            );
	
	            // Fetch payload info.
	            var payloadType = payload && payload.type;
	            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	            var rootRect = (payloadType === 'treemapRender' || payloadType === 'treemapMove')
	                ? payload.rootRect : null;
	            var viewRoot = seriesModel.getViewRoot();
	            var viewAbovePath = helper.getPathToRoot(viewRoot);
	
	            if (payloadType !== 'treemapMove') {
	                var rootSize = payloadType === 'treemapZoomToNode'
	                    ? estimateRootSize(
	                        seriesModel, targetInfo, viewRoot, containerWidth, containerHeight
	                    )
	                    : rootRect
	                    ? [rootRect.width, rootRect.height]
	                    : [containerWidth, containerHeight];
	
	                var sort = seriesOption.sort;
	                if (sort && sort !== 'asc' && sort !== 'desc') {
	                    sort = 'desc';
	                }
	                var options = {
	                    squareRatio: seriesOption.squareRatio,
	                    sort: sort,
	                    leafDepth: seriesOption.leafDepth
	                };
	
	                // layout should be cleared because using updateView but not update.
	                viewRoot.hostTree.clearLayouts();
	
	                // TODO
	                // optimize: if out of view clip, do not layout.
	                // But take care that if do not render node out of view clip,
	                // how to calculate start po
	
	                var viewRootLayout = {
	                    x: 0, y: 0,
	                    width: rootSize[0], height: rootSize[1],
	                    area: rootSize[0] * rootSize[1]
	                };
	                viewRoot.setLayout(viewRootLayout);
	
	                squarify(viewRoot, options, false, 0);
	                // Supplement layout.
	                var viewRootLayout = viewRoot.getLayout();
	                each(viewAbovePath, function (node, index) {
	                    var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();
	                    node.setLayout(zrUtil.extend(
	                        {dataExtent: [childValue, childValue], borderWidth: 0},
	                        viewRootLayout
	                    ));
	                });
	            }
	
	            var treeRoot = seriesModel.getData().tree.root;
	
	            treeRoot.setLayout(
	                calculateRootPosition(layoutInfo, rootRect, targetInfo),
	                true
	            );
	
	            seriesModel.setLayoutInfo(layoutInfo);
	
	            // FIXME
	            // 现在没有clip功能，暂时取ec高宽。
	            prunning(
	                treeRoot,
	                // Transform to base element coordinate system.
	                new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight),
	                viewAbovePath,
	                viewRoot,
	                0
	            );
	        });
	    }
	
	    /**
	     * Layout treemap with squarify algorithm.
	     * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
	     * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	     *
	     * @protected
	     * @param {module:echarts/data/Tree~TreeNode} node
	     * @param {Object} options
	     * @param {string} options.sort 'asc' or 'desc'
	     * @param {number} options.squareRatio
	     * @param {boolean} hideChildren
	     * @param {number} depth
	     */
	    function squarify(node, options, hideChildren, depth) {
	        var width;
	        var height;
	
	        if (node.isRemoved()) {
	            return;
	        }
	
	        var thisLayout = node.getLayout();
	        width = thisLayout.width;
	        height = thisLayout.height;
	
	        // Considering border and gap
	        var itemStyleModel = node.getModel('itemStyle.normal');
	        var borderWidth = itemStyleModel.get('borderWidth');
	        var halfGapWidth = itemStyleModel.get('gapWidth') / 2;
	        var layoutOffset = borderWidth - halfGapWidth;
	        var nodeModel = node.getModel();
	
	        node.setLayout({borderWidth: borderWidth}, true);
	
	        width = mathMax(width - 2 * layoutOffset, 0);
	        height = mathMax(height - 2 * layoutOffset, 0);
	
	        var totalArea = width * height;
	        var viewChildren = initChildren(
	            node, nodeModel, totalArea, options, hideChildren, depth
	        );
	
	        if (!viewChildren.length) {
	            return;
	        }
	
	        var rect = {x: layoutOffset, y: layoutOffset, width: width, height: height};
	        var rowFixedLength = mathMin(width, height);
	        var best = Infinity; // the best row score so far
	        var row = [];
	        row.area = 0;
	
	        for (var i = 0, len = viewChildren.length; i < len;) {
	            var child = viewChildren[i];
	
	            row.push(child);
	            row.area += child.getLayout().area;
	            var score = worst(row, rowFixedLength, options.squareRatio);
	
	            // continue with this orientation
	            if (score <= best) {
	                i++;
	                best = score;
	            }
	            // abort, and try a different orientation
	            else {
	                row.area -= row.pop().getLayout().area;
	                position(row, rowFixedLength, rect, halfGapWidth, false);
	                rowFixedLength = mathMin(rect.width, rect.height);
	                row.length = row.area = 0;
	                best = Infinity;
	            }
	        }
	
	        if (row.length) {
	            position(row, rowFixedLength, rect, halfGapWidth, true);
	        }
	
	        if (!hideChildren) {
	            var childrenVisibleMin = nodeModel.get('childrenVisibleMin');
	            if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
	                hideChildren = true;
	            }
	        }
	
	        for (var i = 0, len = viewChildren.length; i < len; i++) {
	            squarify(viewChildren[i], options, hideChildren, depth + 1);
	        }
	    }
	
	    /**
	     * Set area to each child, and calculate data extent for visual coding.
	     */
	    function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {
	        var viewChildren = node.children || [];
	        var orderBy = options.sort;
	        orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);
	
	        var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;
	
	        // leafDepth has higher priority.
	        if (hideChildren && !overLeafDepth) {
	            return (node.viewChildren = []);
	        }
	
	        // Sort children, order by desc.
	        viewChildren = zrUtil.filter(viewChildren, function (child) {
	            return !child.isRemoved();
	        });
	
	        sort(viewChildren, orderBy);
	
	        var info = statistic(nodeModel, viewChildren, orderBy);
	
	        if (info.sum === 0) {
	            return (node.viewChildren = []);
	        }
	
	        info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);
	
	        if (info.sum === 0) {
	            return (node.viewChildren = []);
	        }
	
	        // Set area to each child.
	        for (var i = 0, len = viewChildren.length; i < len; i++) {
	            var area = viewChildren[i].getValue() / info.sum * totalArea;
	            // Do not use setLayout({...}, true), because it is needed to clear last layout.
	            viewChildren[i].setLayout({area: area});
	        }
	
	        if (overLeafDepth) {
	            viewChildren.length && node.setLayout({isLeafRoot: true}, true);
	            viewChildren.length = 0;
	        }
	
	        node.viewChildren = viewChildren;
	        node.setLayout({dataExtent: info.dataExtent}, true);
	
	        return viewChildren;
	    }
	
	    /**
	     * Consider 'visibleMin'. Modify viewChildren and get new sum.
	     */
	    function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {
	
	        // visibleMin is not supported yet when no option.sort.
	        if (!orderBy) {
	            return sum;
	        }
	
	        var visibleMin = nodeModel.get('visibleMin');
	        var len = orderedChildren.length;
	        var deletePoint = len;
	
	        // Always travel from little value to big value.
	        for (var i = len - 1; i >= 0; i--) {
	            var value = orderedChildren[
	                orderBy === 'asc' ? len - i - 1 : i
	            ].getValue();
	
	            if (value / sum * totalArea < visibleMin) {
	                deletePoint = i;
	                sum -= value;
	            }
	        }
	
	        orderBy === 'asc'
	            ? orderedChildren.splice(0, len - deletePoint)
	            : orderedChildren.splice(deletePoint, len - deletePoint);
	
	        return sum;
	    }
	
	    /**
	     * Sort
	     */
	    function sort(viewChildren, orderBy) {
	        if (orderBy) {
	            viewChildren.sort(function (a, b) {
	                return orderBy === 'asc'
	                    ?  a.getValue() - b.getValue() : b.getValue() - a.getValue();
	            });
	        }
	        return viewChildren;
	    }
	
	    /**
	     * Statistic
	     */
	    function statistic(nodeModel, children, orderBy) {
	        // Calculate sum.
	        var sum = 0;
	        for (var i = 0, len = children.length; i < len; i++) {
	            sum += children[i].getValue();
	        }
	
	        // Statistic data extent for latter visual coding.
	        // Notice: data extent should be calculate based on raw children
	        // but not filtered view children, otherwise visual mapping will not
	        // be stable when zoom (where children is filtered by visibleMin).
	
	        var dimension = nodeModel.get('visualDimension');
	        var dataExtent;
	
	        // The same as area dimension.
	        if (!children || !children.length) {
	            dataExtent = [NaN, NaN];
	        }
	        else if (dimension === 'value' && orderBy) {
	            dataExtent = [
	                children[children.length - 1].getValue(),
	                children[0].getValue()
	            ];
	            orderBy === 'asc' && dataExtent.reverse();
	        }
	        // Other dimension.
	        else {
	            var dataExtent = [Infinity, -Infinity];
	            each(children, function (child) {
	                var value = child.getValue(dimension);
	                value < dataExtent[0] && (dataExtent[0] = value);
	                value > dataExtent[1] && (dataExtent[1] = value);
	            });
	        }
	
	        return {sum: sum, dataExtent: dataExtent};
	    }
	
	    /**
	     * Computes the score for the specified row,
	     * as the worst aspect ratio.
	     */
	    function worst(row, rowFixedLength, ratio) {
	        var areaMax = 0;
	        var areaMin = Infinity;
	
	        for (var i = 0, area, len = row.length; i < len; i++) {
	            area = row[i].getLayout().area;
	            if (area) {
	                area < areaMin && (areaMin = area);
	                area > areaMax && (areaMax = area);
	            }
	        }
	
	        var squareArea = row.area * row.area;
	        var f = rowFixedLength * rowFixedLength * ratio;
	
	        return squareArea
	            ? mathMax(
	                (f * areaMax) / squareArea,
	                squareArea / (f * areaMin)
	            )
	            : Infinity;
	    }
	
	    /**
	     * Positions the specified row of nodes. Modifies `rect`.
	     */
	    function position(row, rowFixedLength, rect, halfGapWidth, flush) {
	        // When rowFixedLength === rect.width,
	        // it is horizontal subdivision,
	        // rowFixedLength is the width of the subdivision,
	        // rowOtherLength is the height of the subdivision,
	        // and nodes will be positioned from left to right.
	
	        // wh[idx0WhenH] means: when horizontal,
	        //      wh[idx0WhenH] => wh[0] => 'width'.
	        //      xy[idx1WhenH] => xy[1] => 'y'.
	        var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
	        var idx1WhenH = 1 - idx0WhenH;
	        var xy = ['x', 'y'];
	        var wh = ['width', 'height'];
	
	        var last = rect[xy[idx0WhenH]];
	        var rowOtherLength = rowFixedLength
	            ? row.area / rowFixedLength : 0;
	
	        if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
	            rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
	        }
	        for (var i = 0, rowLen = row.length; i < rowLen; i++) {
	            var node = row[i];
	            var nodeLayout = {};
	            var step = rowOtherLength
	                ? node.getLayout().area / rowOtherLength : 0;
	
	            var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);
	
	            // We use Math.max/min to avoid negative width/height when considering gap width.
	            var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
	            var modWH = (i === rowLen - 1 || remain < step) ? remain : step;
	            var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);
	
	            nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
	            nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);
	
	            last += modWH;
	            node.setLayout(nodeLayout, true);
	        }
	
	        rect[xy[idx1WhenH]] += rowOtherLength;
	        rect[wh[idx1WhenH]] -= rowOtherLength;
	    }
	
	    // Return [containerWidth, containerHeight] as defualt.
	    function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
	        // If targetInfo.node exists, we zoom to the node,
	        // so estimate whold width and heigth by target node.
	        var currNode = (targetInfo || {}).node;
	        var defaultSize = [containerWidth, containerHeight];
	
	        if (!currNode || currNode === viewRoot) {
	            return defaultSize;
	        }
	
	        var parent;
	        var viewArea = containerWidth * containerHeight;
	        var area = viewArea * seriesModel.option.zoomToNodeRatio;
	
	        while (parent = currNode.parentNode) { // jshint ignore:line
	            var sum = 0;
	            var siblings = parent.children;
	
	            for (var i = 0, len = siblings.length; i < len; i++) {
	                sum += siblings[i].getValue();
	            }
	            var currNodeValue = currNode.getValue();
	            if (currNodeValue === 0) {
	                return defaultSize;
	            }
	            area *= sum / currNodeValue;
	
	            var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');
	
	            if (isFinite(borderWidth)) {
	                // Considering border, suppose aspect ratio is 1.
	                area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);
	            }
	
	            area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);
	
	            currNode = parent;
	        }
	
	        area < viewArea && (area = viewArea);
	        var scale = Math.pow(area / viewArea, 0.5);
	
	        return [containerWidth * scale, containerHeight * scale];
	    }
	
	    // Root postion base on coord of containerGroup
	    function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
	        if (rootRect) {
	            return {x: rootRect.x, y: rootRect.y};
	        }
	
	        var defaultPosition = {x: 0, y: 0};
	        if (!targetInfo) {
	            return defaultPosition;
	        }
	
	        // If targetInfo is fetched by 'retrieveTargetInfo',
	        // old tree and new tree are the same tree,
	        // so the node still exists and we can visit it.
	
	        var targetNode = targetInfo.node;
	        var layout = targetNode.getLayout();
	
	        if (!layout) {
	            return defaultPosition;
	        }
	
	        // Transform coord from local to container.
	        var targetCenter = [layout.width / 2, layout.height / 2];
	        var node = targetNode;
	        while (node) {
	            var nodeLayout = node.getLayout();
	            targetCenter[0] += nodeLayout.x;
	            targetCenter[1] += nodeLayout.y;
	            node = node.parentNode;
	        }
	
	        return {
	            x: layoutInfo.width / 2 - targetCenter[0],
	            y: layoutInfo.height / 2 - targetCenter[1]
	        };
	    }
	
	    // Mark nodes visible for prunning when visual coding and rendering.
	    // Prunning depends on layout and root position, so we have to do it after layout.
	    function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {
	        var nodeLayout = node.getLayout();
	        var nodeInViewAbovePath = viewAbovePath[depth];
	        var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;
	
	        if (
	            (nodeInViewAbovePath && !isAboveViewRoot)
	            || (depth === viewAbovePath.length && node !== viewRoot)
	        ) {
	            return;
	        }
	
	        node.setLayout({
	            // isInView means: viewRoot sub tree + viewAbovePath
	            isInView: true,
	            // invisible only means: outside view clip so that the node can not
	            // see but still layout for animation preparation but not render.
	            invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),
	            isAboveViewRoot: isAboveViewRoot
	        }, true);
	
	        // Transform to child coordinate.
	        var childClipRect = new BoundingRect(
	            clipRect.x - nodeLayout.x,
	            clipRect.y - nodeLayout.y,
	            clipRect.width,
	            clipRect.height
	        );
	
	        each(node.viewChildren || [], function (child) {
	            prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);
	        });
	    }
	
	    module.exports = update;


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    __webpack_require__(219);
	    __webpack_require__(222);
	
	    __webpack_require__(227);
	
	    echarts.registerProcessor(__webpack_require__(228));
	
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'graph', 'circle', null
	    ));
	    echarts.registerVisual(__webpack_require__(229));
	    echarts.registerVisual(__webpack_require__(230));
	
	    echarts.registerLayout(__webpack_require__(231));
	    echarts.registerLayout(__webpack_require__(234));
	    echarts.registerLayout(__webpack_require__(236));
	
	    // Graph view coordinate system
	    echarts.registerCoordinateSystem('graphView', {
	        create: __webpack_require__(238)
	    });


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var Model = __webpack_require__(33);
	    var formatUtil = __webpack_require__(27);
	
	    var createGraphFromNodeEdge = __webpack_require__(220);
	
	    var GraphSeries = __webpack_require__(22).extendSeriesModel({
	
	        type: 'series.graph',
	
	        init: function (option) {
	            GraphSeries.superApply(this, 'init', arguments);
	
	            // Provide data for legend select
	            this.legendDataProvider = function () {
	                return this._categoriesData;
	            };
	
	            this.fillDataTextStyle(option.edges || option.links);
	
	            this._updateCategoriesData();
	        },
	
	        mergeOption: function (option) {
	            GraphSeries.superApply(this, 'mergeOption', arguments);
	
	            this.fillDataTextStyle(option.edges || option.links);
	
	            this._updateCategoriesData();
	        },
	
	        mergeDefaultAndTheme: function (option) {
	            GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);
	            modelUtil.defaultEmphasis(option.edgeLabel, modelUtil.LABEL_OPTIONS);
	        },
	
	        getInitialData: function (option, ecModel) {
	            var edges = option.edges || option.links || [];
	            var nodes = option.data || option.nodes || [];
	            var self = this;
	
	            if (nodes && edges) {
	                return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;
	            }
	
	            function beforeLink(nodeData, edgeData) {
	                // Overwrite nodeData.getItemModel to
	                nodeData.wrapMethod('getItemModel', function (model) {
	                    var categoriesModels = self._categoriesModels;
	                    var categoryIdx = model.getShallow('category');
	                    var categoryModel = categoriesModels[categoryIdx];
	                    if (categoryModel) {
	                        categoryModel.parentModel = model.parentModel;
	                        model.parentModel = categoryModel;
	                    }
	                    return model;
	                });
	
	                var edgeLabelModel = self.getModel('edgeLabel');
	                // For option `edgeLabel` can be found by label.xxx.xxx on item mode.
	                var fakeSeriesModel = new Model(
	                    {label: edgeLabelModel.option},
	                    edgeLabelModel.parentModel,
	                    ecModel
	                );
	
	                edgeData.wrapMethod('getItemModel', function (model) {
	                    model.customizeGetParent(edgeGetParent);
	                    return model;
	                });
	
	                function edgeGetParent(path) {
	                    path = this.parsePath(path);
	                    return (path && path[0] === 'label')
	                        ? fakeSeriesModel
	                        : this.parentModel;
	                }
	            }
	        },
	
	        /**
	         * @return {module:echarts/data/Graph}
	         */
	        getGraph: function () {
	            return this.getData().graph;
	        },
	
	        /**
	         * @return {module:echarts/data/List}
	         */
	        getEdgeData: function () {
	            return this.getGraph().edgeData;
	        },
	
	        /**
	         * @return {module:echarts/data/List}
	         */
	        getCategoriesData: function () {
	            return this._categoriesData;
	        },
	
	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            if (dataType === 'edge') {
	                var nodeData = this.getData();
	                var params = this.getDataParams(dataIndex, dataType);
	                var edge = nodeData.graph.getEdgeByIndex(dataIndex);
	                var sourceName = nodeData.getName(edge.node1.dataIndex);
	                var targetName = nodeData.getName(edge.node2.dataIndex);
	
	                var html = [];
	                sourceName != null && html.push(sourceName);
	                targetName != null && html.push(targetName);
	                html = formatUtil.encodeHTML(html.join(' > '));
	
	                if (params.value) {
	                    html += ' : ' + formatUtil.encodeHTML(params.value);
	                }
	                return html;
	            }
	            else { // dataType === 'node' or empty
	                return GraphSeries.superApply(this, 'formatTooltip', arguments);
	            }
	        },
	
	        _updateCategoriesData: function () {
	            var categories = zrUtil.map(this.option.categories || [], function (category) {
	                // Data must has value
	                return category.value != null ? category : zrUtil.extend({
	                    value: 0
	                }, category);
	            });
	            var categoriesData = new List(['value'], this);
	            categoriesData.initData(categories);
	
	            this._categoriesData = categoriesData;
	
	            this._categoriesModels = categoriesData.mapArray(function (idx) {
	                return categoriesData.getItemModel(idx, true);
	            });
	        },
	
	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },
	
	        setCenter: function (center) {
	            this.option.center = center;
	        },
	
	        isAnimationEnabled: function () {
	            return GraphSeries.superCall(this, 'isAnimationEnabled')
	                // Not enable animation when do force layout
	                && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	
	            coordinateSystem: 'view',
	
	            // Default option for all coordinate systems
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	            // polarIndex: 0,
	            // geoIndex: 0,
	
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	
	            layout: null,
	
	            focusNodeAdjacency: false,
	
	            // Configuration of circular layout
	            circular: {
	                rotateLabel: false
	            },
	            // Configuration of force directed layout
	            force: {
	                initLayout: null,
	                // Node repulsion. Can be an array to represent range.
	                repulsion: [0, 50],
	                gravity: 0.1,
	
	                // Edge length. Can be an array to represent range.
	                edgeLength: 30,
	
	                layoutAnimation: true
	            },
	
	            left: 'center',
	            top: 'center',
	            // right: null,
	            // bottom: null,
	            // width: '80%',
	            // height: '80%',
	
	            symbol: 'circle',
	            symbolSize: 10,
	
	            edgeSymbol: ['none', 'none'],
	            edgeSymbolSize: 10,
	            edgeLabel: {
	                normal: {
	                    position: 'middle'
	                },
	                emphasis: {}
	            },
	
	            draggable: false,
	
	            roam: false,
	
	            // Default on center of graph
	            center: null,
	
	            zoom: 1,
	            // Symbol size scale ratio in roam
	            nodeScaleRatio: 0.6,
	
	            // categories: [],
	
	            // data: []
	            // Or
	            // nodes: []
	            //
	            // links: []
	            // Or
	            // edges: []
	
	            label: {
	                normal: {
	                    show: false,
	                    formatter: '{b}'
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	
	            itemStyle: {
	                normal: {},
	                emphasis: {}
	            },
	
	            lineStyle: {
	                normal: {
	                    color: '#aaa',
	                    width: 1,
	                    curveness: 0,
	                    opacity: 0.5
	                },
	                emphasis: {}
	            }
	        }
	    });
	
	    module.exports = GraphSeries;


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var List = __webpack_require__(119);
	    var Graph = __webpack_require__(221);
	    var linkList = __webpack_require__(209);
	    var completeDimensions = __webpack_require__(124);
	    var CoordinateSystem = __webpack_require__(47);
	    var zrUtil = __webpack_require__(25);
	    var createListFromArray = __webpack_require__(123);
	
	    module.exports = function (nodes, edges, hostModel, directed, beforeLink) {
	        var graph = new Graph(directed);
	        for (var i = 0; i < nodes.length; i++) {
	            graph.addNode(zrUtil.retrieve(
	                // Id, name, dataIndex
	                nodes[i].id, nodes[i].name, i
	            ), i);
	        }
	
	        var linkNameList = [];
	        var validEdges = [];
	        var linkCount = 0;
	        for (var i = 0; i < edges.length; i++) {
	            var link = edges[i];
	            var source = link.source;
	            var target = link.target;
	            // addEdge may fail when source or target not exists
	            if (graph.addEdge(source, target, linkCount)) {
	                validEdges.push(link);
	                linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));
	                linkCount++;
	            }
	        }
	
	        var coordSys = hostModel.get('coordinateSystem');
	        var nodeData;
	        if (coordSys === 'cartesian2d' || coordSys === 'polar') {
	            nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);
	        }
	        else {
	            // FIXME
	            var coordSysCtor = CoordinateSystem.get(coordSys);
	            // FIXME
	            var dimensionNames = completeDimensions(
	                ((coordSysCtor && coordSysCtor.type !== 'view') ? (coordSysCtor.dimensions || []) : []).concat(['value']),
	                nodes
	            );
	            nodeData = new List(dimensionNames, hostModel);
	            nodeData.initData(nodes);
	        }
	
	        var edgeData = new List(['value'], hostModel);
	        edgeData.initData(validEdges, linkNameList);
	
	        beforeLink && beforeLink(nodeData, edgeData);
	
	        linkList({
	            mainData: nodeData,
	            struct: graph,
	            structAttr: 'graph',
	            datas: {node: nodeData, edge: edgeData},
	            datasAttr: {node: 'data', edge: 'edgeData'}
	        });
	
	        // Update dataIndex of nodes and edges because invalid edge may be removed
	        graph.update();
	
	        return graph;
	    };


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * @alias module:echarts/data/Graph
	     * @constructor
	     * @param {boolean} directed
	     */
	    var Graph = function(directed) {
	        /**
	         * 是否是有向图
	         * @type {boolean}
	         * @private
	         */
	        this._directed = directed || false;
	
	        /**
	         * @type {Array.<module:echarts/data/Graph.Node>}
	         * @readOnly
	         */
	        this.nodes = [];
	
	        /**
	         * @type {Array.<module:echarts/data/Graph.Edge>}
	         * @readOnly
	         */
	        this.edges = [];
	
	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Node>}
	         * @private
	         */
	        this._nodesMap = {};
	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Edge>}
	         * @private
	         */
	        this._edgesMap = {};
	
	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.data;
	
	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.edgeData;
	    };
	
	    var graphProto = Graph.prototype;
	    /**
	     * @type {string}
	     */
	    graphProto.type = 'graph';
	
	    /**
	     * If is directed graph
	     * @return {boolean}
	     */
	    graphProto.isDirected = function () {
	        return this._directed;
	    };
	
	    /**
	     * Add a new node
	     * @param {string} id
	     * @param {number} [dataIndex]
	     */
	    graphProto.addNode = function (id, dataIndex) {
	        id = id || ('' + dataIndex);
	
	        var nodesMap = this._nodesMap;
	
	        if (nodesMap[id]) {
	            return;
	        }
	
	        var node = new Node(id, dataIndex);
	        node.hostGraph = this;
	
	        this.nodes.push(node);
	
	        nodesMap[id] = node;
	        return node;
	    };
	
	    /**
	     * Get node by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getNodeByIndex = function (dataIndex) {
	        var rawIdx = this.data.getRawIndex(dataIndex);
	        return this.nodes[rawIdx];
	    };
	    /**
	     * Get node by id
	     * @param  {string} id
	     * @return {module:echarts/data/Graph.Node}
	     */
	    graphProto.getNodeById = function (id) {
	        return this._nodesMap[id];
	    };
	
	    /**
	     * Add a new edge
	     * @param {number|string|module:echarts/data/Graph.Node} n1
	     * @param {number|string|module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.addEdge = function (n1, n2, dataIndex) {
	        var nodesMap = this._nodesMap;
	        var edgesMap = this._edgesMap;
	
	        // PNEDING
	        if (typeof n1 === 'number') {
	            n1 = this.nodes[n1];
	        }
	        if (typeof n2 === 'number') {
	            n2 = this.nodes[n2];
	        }
	
	        if (!(n1 instanceof Node)) {
	            n1 = nodesMap[n1];
	        }
	        if (!(n2 instanceof Node)) {
	            n2 = nodesMap[n2];
	        }
	        if (!n1 || !n2) {
	            return;
	        }
	
	        var key = n1.id + '-' + n2.id;
	        // PENDING
	        if (edgesMap[key]) {
	            return;
	        }
	
	        var edge = new Edge(n1, n2, dataIndex);
	        edge.hostGraph = this;
	
	        if (this._directed) {
	            n1.outEdges.push(edge);
	            n2.inEdges.push(edge);
	        }
	        n1.edges.push(edge);
	        if (n1 !== n2) {
	            n2.edges.push(edge);
	        }
	
	        this.edges.push(edge);
	        edgesMap[key] = edge;
	
	        return edge;
	    };
	
	    /**
	     * Get edge by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getEdgeByIndex = function (dataIndex) {
	        var rawIdx = this.edgeData.getRawIndex(dataIndex);
	        return this.edges[rawIdx];
	    };
	    /**
	     * Get edge by two linked nodes
	     * @param  {module:echarts/data/Graph.Node|string} n1
	     * @param  {module:echarts/data/Graph.Node|string} n2
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.getEdge = function (n1, n2) {
	        if (n1 instanceof Node) {
	            n1 = n1.id;
	        }
	        if (n2 instanceof Node) {
	            n2 = n2.id;
	        }
	
	        var edgesMap = this._edgesMap;
	
	        if (this._directed) {
	            return edgesMap[n1 + '-' + n2];
	        } else {
	            return edgesMap[n1 + '-' + n2]
	                || edgesMap[n2 + '-' + n1];
	        }
	    };
	
	    /**
	     * Iterate all nodes
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachNode = function (cb, context) {
	        var nodes = this.nodes;
	        var len = nodes.length;
	        for (var i = 0; i < len; i++) {
	            if (nodes[i].dataIndex >= 0) {
	                cb.call(context, nodes[i], i);
	            }
	        }
	    };
	
	    /**
	     * Iterate all edges
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachEdge = function (cb, context) {
	        var edges = this.edges;
	        var len = edges.length;
	        for (var i = 0; i < len; i++) {
	            if (edges[i].dataIndex >= 0
	                && edges[i].node1.dataIndex >= 0
	                && edges[i].node2.dataIndex >= 0
	            ) {
	                cb.call(context, edges[i], i);
	            }
	        }
	    };
	
	    /**
	     * Breadth first traverse
	     * @param {Function} cb
	     * @param {module:echarts/data/Graph.Node} startNode
	     * @param {string} [direction='none'] 'none'|'in'|'out'
	     * @param {*} [context]
	     */
	    graphProto.breadthFirstTraverse = function (
	        cb, startNode, direction, context
	    ) {
	        if (!(startNode instanceof Node)) {
	            startNode = this._nodesMap[startNode];
	        }
	        if (!startNode) {
	            return;
	        }
	
	        var edgeType = direction === 'out'
	            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');
	
	        for (var i = 0; i < this.nodes.length; i++) {
	            this.nodes[i].__visited = false;
	        }
	
	        if (cb.call(context, startNode, null)) {
	            return;
	        }
	
	        var queue = [startNode];
	        while (queue.length) {
	            var currentNode = queue.shift();
	            var edges = currentNode[edgeType];
	
	            for (var i = 0; i < edges.length; i++) {
	                var e = edges[i];
	                var otherNode = e.node1 === currentNode
	                    ? e.node2 : e.node1;
	                if (!otherNode.__visited) {
	                    if (cb.call(otherNode, otherNode, currentNode)) {
	                        // Stop traversing
	                        return;
	                    }
	                    queue.push(otherNode);
	                    otherNode.__visited = true;
	                }
	            }
	        }
	    };
	
	    // TODO
	    // graphProto.depthFirstTraverse = function (
	    //     cb, startNode, direction, context
	    // ) {
	
	    // };
	
	    // Filter update
	    graphProto.update = function () {
	        var data = this.data;
	        var edgeData = this.edgeData;
	        var nodes = this.nodes;
	        var edges = this.edges;
	
	        for (var i = 0, len = nodes.length; i < len; i++) {
	            nodes[i].dataIndex = -1;
	        }
	        for (var i = 0, len = data.count(); i < len; i++) {
	            nodes[data.getRawIndex(i)].dataIndex = i;
	        }
	
	        edgeData.filterSelf(function (idx) {
	            var edge = edges[edgeData.getRawIndex(idx)];
	            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	        });
	
	        // Update edge
	        for (var i = 0, len = edges.length; i < len; i++) {
	            edges[i].dataIndex = -1;
	        }
	        for (var i = 0, len = edgeData.count(); i < len; i++) {
	            edges[edgeData.getRawIndex(i)].dataIndex = i;
	        }
	    };
	
	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    graphProto.clone = function () {
	        var graph = new Graph(this._directed);
	        var nodes = this.nodes;
	        var edges = this.edges;
	        for (var i = 0; i < nodes.length; i++) {
	            graph.addNode(nodes[i].id, nodes[i].dataIndex);
	        }
	        for (var i = 0; i < edges.length; i++) {
	            var e = edges[i];
	            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	        }
	        return graph;
	    };
	
	
	    /**
	     * @alias module:echarts/data/Graph.Node
	     */
	    function Node(id, dataIndex) {
	        /**
	        * @type {string}
	        */
	        this.id = id == null ? '' : id;
	
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.inEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.outEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.edges = [];
	        /**
	         * @type {module:echarts/data/Graph}
	         */
	        this.hostGraph;
	
	        /**
	         * @type {number}
	         */
	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }
	
	    Node.prototype = {
	
	        constructor: Node,
	
	        /**
	         * @return {number}
	         */
	        degree: function () {
	            return this.edges.length;
	        },
	
	        /**
	         * @return {number}
	         */
	        inDegree: function () {
	            return this.inEdges.length;
	        },
	
	        /**
	        * @return {number}
	        */
	        outDegree: function () {
	            return this.outEdges.length;
	        },
	
	        /**
	         * @param {string} [path]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path) {
	            if (this.dataIndex < 0) {
	                return;
	            }
	            var graph = this.hostGraph;
	            var itemModel = graph.data.getItemModel(this.dataIndex);
	
	            return itemModel.getModel(path);
	        }
	    };
	
	    /**
	     * 图边
	     * @alias module:echarts/data/Graph.Edge
	     * @param {module:echarts/data/Graph.Node} n1
	     * @param {module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     */
	    function Edge(n1, n2, dataIndex) {
	
	        /**
	         * 节点1，如果是有向图则为源节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node1 = n1;
	
	        /**
	         * 节点2，如果是有向图则为目标节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node2 = n2;
	
	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }
	
	    /**
	     * @param {string} [path]
	     * @return {module:echarts/model/Model}
	     */
	     Edge.prototype.getModel = function (path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var graph = this.hostGraph;
	        var itemModel = graph.edgeData.getItemModel(this.dataIndex);
	
	        return itemModel.getModel(path);
	    };
	
	    var createGraphDataProxyMixin = function (hostName, dataName) {
	        return {
	            /**
	             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	             * @return {number}
	             */
	            getValue: function (dimension) {
	                var data = this[hostName][dataName];
	                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	            },
	
	            /**
	             * @param {Object|string} key
	             * @param {*} [value]
	             */
	            setVisual: function (key, value) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	            },
	
	            /**
	             * @param {string} key
	             * @return {boolean}
	             */
	            getVisual: function (key, ignoreParent) {
	                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	            },
	
	            /**
	             * @param {Object} layout
	             * @return {boolean} [merge=false]
	             */
	            setLayout: function (layout, merge) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	            },
	
	            /**
	             * @return {Object}
	             */
	            getLayout: function () {
	                return this[hostName][dataName].getItemLayout(this.dataIndex);
	            },
	
	            /**
	             * @return {module:zrender/Element}
	             */
	            getGraphicEl: function () {
	                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	            },
	
	            /**
	             * @return {number}
	             */
	            getRawIndex: function () {
	                return this[hostName][dataName].getRawIndex(this.dataIndex);
	            }
	        };
	    };
	
	    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));
	
	    Graph.Node = Node;
	    Graph.Edge = Edge;
	
	    module.exports = Graph;


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	
	
	
	    var SymbolDraw = __webpack_require__(126);
	    var LineDraw = __webpack_require__(223);
	    var RoamController = __webpack_require__(198);
	
	    var graphic = __webpack_require__(64);
	    var adjustEdge = __webpack_require__(226);
	    var zrUtil = __webpack_require__(25);
	
	    var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];
	    var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];
	
	    function getItemOpacity(item, opacityPath) {
	        return item.getVisual('opacity') || item.getModel().get(opacityPath);
	    }
	
	    __webpack_require__(22).extendChartView({
	
	        type: 'graph',
	
	        init: function (ecModel, api) {
	            var symbolDraw = new SymbolDraw();
	            var lineDraw = new LineDraw();
	            var group = this.group;
	
	            var controller = new RoamController(api.getZr(), group);
	
	            group.add(symbolDraw.group);
	            group.add(lineDraw.group);
	
	            this._symbolDraw = symbolDraw;
	            this._lineDraw = lineDraw;
	            this._controller = controller;
	
	            this._firstRender = true;
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	
	            this._model = seriesModel;
	            this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');
	
	            var symbolDraw = this._symbolDraw;
	            var lineDraw = this._lineDraw;
	
	            var group = this.group;
	
	            if (coordSys.type === 'view') {
	                var groupNewProp = {
	                    position: coordSys.position,
	                    scale: coordSys.scale
	                };
	                if (this._firstRender) {
	                    group.attr(groupNewProp);
	                }
	                else {
	                    graphic.updateProps(group, groupNewProp, seriesModel);
	                }
	            }
	            // Fix edge contact point with node
	            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	
	            var data = seriesModel.getData();
	            symbolDraw.updateData(data);
	
	            var edgeData = seriesModel.getEdgeData();
	            lineDraw.updateData(edgeData);
	
	            this._updateNodeAndLinkScale();
	
	            this._updateController(seriesModel, api);
	
	            clearTimeout(this._layoutTimeout);
	            var forceLayout = seriesModel.forceLayout;
	            var layoutAnimation = seriesModel.get('force.layoutAnimation');
	            if (forceLayout) {
	                this._startForceLayoutIteration(forceLayout, layoutAnimation);
	            }
	            data.eachItemGraphicEl(function (el, idx) {
	                var itemModel = data.getItemModel(idx);
	                // Update draggable
	                el.off('drag').off('dragend');
	                var draggable = data.getItemModel(idx).get('draggable');
	                if (draggable) {
	                    el.on('drag', function () {
	                        if (forceLayout) {
	                            forceLayout.warmUp();
	                            !this._layouting
	                                && this._startForceLayoutIteration(forceLayout, layoutAnimation);
	                            forceLayout.setFixed(idx);
	                            // Write position back to layout
	                            data.setItemLayout(idx, el.position);
	                        }
	                    }, this).on('dragend', function () {
	                        if (forceLayout) {
	                            forceLayout.setUnfixed(idx);
	                        }
	                    }, this);
	                }
	                el.setDraggable(draggable && forceLayout);
	
	                el.off('mouseover', el.__focusNodeAdjacency);
	                el.off('mouseout', el.__unfocusNodeAdjacency);
	
	                if (itemModel.get('focusNodeAdjacency')) {
	                    el.on('mouseover', el.__focusNodeAdjacency = function () {
	                        api.dispatchAction({
	                            type: 'focusNodeAdjacency',
	                            seriesId: seriesModel.id,
	                            dataIndex: el.dataIndex
	                        });
	                    });
	                    el.on('mouseout', el.__unfocusNodeAdjacency = function () {
	                        api.dispatchAction({
	                            type: 'unfocusNodeAdjacency',
	                            seriesId: seriesModel.id
	                        });
	                    });
	                }
	
	            }, this);
	
	            var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');
	            var cx = data.getLayout('cx');
	            var cy = data.getLayout('cy');
	            data.eachItemGraphicEl(function (el, idx) {
	                var symbolPath = el.getSymbolPath();
	                if (circularRotateLabel) {
	                    var pos = data.getItemLayout(idx);
	                    var rad = Math.atan2(pos[1] - cy, pos[0] - cx);
	                    if (rad < 0) {
	                        rad = Math.PI * 2 + rad;
	                    }
	                    var isLeft = pos[0] < cx;
	                    if (isLeft) {
	                        rad = rad - Math.PI;
	                    }
	                    var textPosition = isLeft ? 'left' : 'right';
	                    symbolPath.setStyle({
	                        textRotation: rad,
	                        textPosition: textPosition
	                    });
	                    symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);
	                }
	                else {
	                    symbolPath.setStyle({
	                        textRotation: 0
	                    });
	                }
	            });
	
	            this._firstRender = false;
	        },
	
	        dispose: function () {
	            this._controller && this._controller.dispose();
	        },
	
	        focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	            var data = this._model.getData();
	            var dataIndex = payload.dataIndex;
	            var el = data.getItemGraphicEl(dataIndex);
	
	            if (!el) {
	                return;
	            }
	
	            var graph = data.graph;
	            var dataType = el.dataType;
	
	            function fadeOutItem(item, opacityPath) {
	                var opacity = getItemOpacity(item, opacityPath);
	                var el = item.getGraphicEl();
	                if (opacity == null) {
	                    opacity = 1;
	                }
	
	                el.traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity * 0.1);
	                    }
	                });
	            }
	
	            function fadeInItem(item, opacityPath) {
	                var opacity = getItemOpacity(item, opacityPath);
	                var el = item.getGraphicEl();
	
	                el.traverse(function (child) {
	                    child.trigger('emphasis');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            }
	            if (dataIndex !== null && dataType !== 'edge') {
	                graph.eachNode(function (node) {
	                    fadeOutItem(node, nodeOpacityPath);
	                });
	                graph.eachEdge(function (edge) {
	                    fadeOutItem(edge, lineOpacityPath);
	                });
	
	                var node = graph.getNodeByIndex(dataIndex);
	                fadeInItem(node, nodeOpacityPath);
	                zrUtil.each(node.edges, function (edge) {
	                    if (edge.dataIndex < 0) {
	                        return;
	                    }
	                    fadeInItem(edge, lineOpacityPath);
	                    fadeInItem(edge.node1, nodeOpacityPath);
	                    fadeInItem(edge.node2, nodeOpacityPath);
	                });
	            }
	        },
	
	        unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	            var graph = this._model.getData().graph;
	            graph.eachNode(function (node) {
	                var opacity = getItemOpacity(node, nodeOpacityPath);
	                node.getGraphicEl().traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            });
	            graph.eachEdge(function (edge) {
	                var opacity = getItemOpacity(edge, lineOpacityPath);
	                edge.getGraphicEl().traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            });
	        },
	
	        _startForceLayoutIteration: function (forceLayout, layoutAnimation) {
	            var self = this;
	            (function step() {
	                forceLayout.step(function (stopped) {
	                    self.updateLayout(self._model);
	                    (self._layouting = !stopped) && (
	                        layoutAnimation
	                            ? (self._layoutTimeout = setTimeout(step, 16))
	                            : step()
	                    );
	                });
	            })();
	        },
	
	        _updateController: function (seriesModel, api) {
	            var controller = this._controller;
	            var group = this.group;
	
	            controller.setContainsPoint(function (x, y) {
	                var rect = group.getBoundingRect();
	                rect.applyTransform(group.transform);
	                return rect.contain(x, y);
	            });
	
	            if (seriesModel.coordinateSystem.type !== 'view') {
	                controller.disable();
	                return;
	            }
	            controller.enable(seriesModel.get('roam'));
	            controller.zoomLimit = seriesModel.get('scaleLimit');
	            // Update zoom from model
	            controller.zoom = seriesModel.coordinateSystem.getZoom();
	
	            controller
	                .off('pan')
	                .off('zoom')
	                .on('pan', function (dx, dy) {
	                    api.dispatchAction({
	                        seriesId: seriesModel.id,
	                        type: 'graphRoam',
	                        dx: dx,
	                        dy: dy
	                    });
	                })
	                .on('zoom', function (zoom, mouseX, mouseY) {
	                    api.dispatchAction({
	                        seriesId: seriesModel.id,
	                        type: 'graphRoam',
	                        zoom:  zoom,
	                        originX: mouseX,
	                        originY: mouseY
	                    });
	                    this._updateNodeAndLinkScale();
	                    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	                    this._lineDraw.updateLayout();
	                }, this);
	        },
	
	        _updateNodeAndLinkScale: function () {
	            var seriesModel = this._model;
	            var data = seriesModel.getData();
	
	            var nodeScale = this._getNodeGlobalScale(seriesModel);
	            var invScale = [nodeScale, nodeScale];
	
	            data.eachItemGraphicEl(function (el, idx) {
	                el.attr('scale', invScale);
	            });
	        },
	
	        _getNodeGlobalScale: function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys.type !== 'view') {
	                return 1;
	            }
	
	            var nodeScaleRatio = this._nodeScaleRatio;
	
	            var groupScale = coordSys.scale;
	            var groupZoom = (groupScale && groupScale[0]) || 1;
	            // Scale node when zoom changes
	            var roamZoom = coordSys.getZoom();
	            var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;
	
	            return nodeScale / groupZoom;
	        },
	
	        updateLayout: function (seriesModel) {
	            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	
	            this._symbolDraw.updateLayout();
	            this._lineDraw.updateLayout();
	        },
	
	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove();
	            this._lineDraw && this._lineDraw.remove();
	        }
	    });


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/LineDraw
	 */
	
	
	    var graphic = __webpack_require__(64);
	    var LineGroup = __webpack_require__(224);
	
	
	    function isPointNaN(pt) {
	        return isNaN(pt[0]) || isNaN(pt[1]);
	    }
	    function lineNeedsDraw(pts) {
	        return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
	    }
	    /**
	     * @alias module:echarts/component/marker/LineDraw
	     * @constructor
	     */
	    function LineDraw(ctor) {
	        this._ctor = ctor || LineGroup;
	        this.group = new graphic.Group();
	    }
	
	    var lineDrawProto = LineDraw.prototype;
	
	    /**
	     * @param {module:echarts/data/List} lineData
	     */
	    lineDrawProto.updateData = function (lineData) {
	
	        var oldLineData = this._lineData;
	        var group = this.group;
	        var LineCtor = this._ctor;
	
	        var hostModel = lineData.hostModel;
	
	        var seriesScope = {
	            lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),
	            hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),
	            labelModel: hostModel.getModel('label.normal'),
	            hoverLabelModel: hostModel.getModel('label.emphasis')
	        };
	
	        lineData.diff(oldLineData)
	            .add(function (idx) {
	                if (!lineNeedsDraw(lineData.getItemLayout(idx))) {
	                    return;
	                }
	                var lineGroup = new LineCtor(lineData, idx, seriesScope);
	
	                lineData.setItemGraphicEl(idx, lineGroup);
	
	                group.add(lineGroup);
	            })
	            .update(function (newIdx, oldIdx) {
	                var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
	                if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {
	                    group.remove(lineGroup);
	                    return;
	                }
	
	                if (!lineGroup) {
	                    lineGroup = new LineCtor(lineData, newIdx, seriesScope);
	                }
	                else {
	                    lineGroup.updateData(lineData, newIdx, seriesScope);
	                }
	
	                lineData.setItemGraphicEl(newIdx, lineGroup);
	
	                group.add(lineGroup);
	            })
	            .remove(function (idx) {
	                group.remove(oldLineData.getItemGraphicEl(idx));
	            })
	            .execute();
	
	        this._lineData = lineData;
	    };
	
	    lineDrawProto.updateLayout = function () {
	        var lineData = this._lineData;
	        lineData.eachItemGraphicEl(function (el, idx) {
	            el.updateLayout(lineData, idx);
	        }, this);
	    };
	
	    lineDrawProto.remove = function () {
	        this.group.removeAll();
	    };
	
	    module.exports = LineDraw;


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Line
	 */
	
	
	    var symbolUtil = __webpack_require__(128);
	    var vector = __webpack_require__(31);
	    // var matrix = require('zrender/lib/core/matrix');
	    var LinePath = __webpack_require__(225);
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	
	    var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];
	    function makeSymbolTypeKey(symbolCategory) {
	        return '_' + symbolCategory + 'Type';
	    }
	    /**
	     * @inner
	     */
	    function createSymbol(name, lineData, idx) {
	        var color = lineData.getItemVisual(idx, 'color');
	        var symbolType = lineData.getItemVisual(idx, name);
	        var symbolSize = lineData.getItemVisual(idx, name + 'Size');
	
	        if (!symbolType || symbolType === 'none') {
	            return;
	        }
	
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [symbolSize, symbolSize];
	        }
	        var symbolPath = symbolUtil.createSymbol(
	            symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2,
	            symbolSize[0], symbolSize[1], color
	        );
	
	        symbolPath.name = name;
	
	        return symbolPath;
	    }
	
	    function createLine(points) {
	        var line = new LinePath({
	            name: 'line'
	        });
	        setLinePoints(line.shape, points);
	        return line;
	    }
	
	    function setLinePoints(targetShape, points) {
	        var p1 = points[0];
	        var p2 = points[1];
	        var cp1 = points[2];
	        targetShape.x1 = p1[0];
	        targetShape.y1 = p1[1];
	        targetShape.x2 = p2[0];
	        targetShape.y2 = p2[1];
	        targetShape.percent = 1;
	
	        if (cp1) {
	            targetShape.cpx1 = cp1[0];
	            targetShape.cpy1 = cp1[1];
	        }
	        else {
	            targetShape.cpx1 = NaN;
	            targetShape.cpy1 = NaN;
	        }
	    }
	
	    function updateSymbolAndLabelBeforeLineUpdate () {
	        var lineGroup = this;
	        var symbolFrom = lineGroup.childOfName('fromSymbol');
	        var symbolTo = lineGroup.childOfName('toSymbol');
	        var label = lineGroup.childOfName('label');
	        // Quick reject
	        if (!symbolFrom && !symbolTo && label.ignore) {
	            return;
	        }
	
	        var invScale = 1;
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode.scale) {
	                invScale /= parentNode.scale[0];
	            }
	            parentNode = parentNode.parent;
	        }
	
	        var line = lineGroup.childOfName('line');
	        // If line not changed
	        // FIXME Parent scale changed
	        if (!this.__dirty && !line.__dirty) {
	            return;
	        }
	
	        var percent = line.shape.percent;
	        var fromPos = line.pointAt(0);
	        var toPos = line.pointAt(percent);
	
	        var d = vector.sub([], toPos, fromPos);
	        vector.normalize(d, d);
	
	        if (symbolFrom) {
	            symbolFrom.attr('position', fromPos);
	            var tangent = line.tangentAt(0);
	            symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(
	                tangent[1], tangent[0]
	            ));
	            symbolFrom.attr('scale', [invScale * percent, invScale * percent]);
	        }
	        if (symbolTo) {
	            symbolTo.attr('position', toPos);
	            var tangent = line.tangentAt(1);
	            symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(
	                tangent[1], tangent[0]
	            ));
	            symbolTo.attr('scale', [invScale * percent, invScale * percent]);
	        }
	
	        if (!label.ignore) {
	            label.attr('position', toPos);
	
	            var textPosition;
	            var textAlign;
	            var textVerticalAlign;
	
	            var distance = 5 * invScale;
	            // End
	            if (label.__position === 'end') {
	                textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];
	                textAlign = d[0] > 0.8 ? 'left' : (d[0] < -0.8 ? 'right' : 'center');
	                textVerticalAlign = d[1] > 0.8 ? 'top' : (d[1] < -0.8 ? 'bottom' : 'middle');
	            }
	            // Middle
	            else if (label.__position === 'middle') {
	                var halfPercent = percent / 2;
	                var tangent = line.tangentAt(halfPercent);
	                var n = [tangent[1], -tangent[0]];
	                var cp = line.pointAt(halfPercent);
	                if (n[1] > 0) {
	                    n[0] = -n[0];
	                    n[1] = -n[1];
	                }
	                textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];
	                textAlign = 'center';
	                textVerticalAlign = 'bottom';
	                var rotation = -Math.atan2(tangent[1], tangent[0]);
	                if (toPos[0] < fromPos[0]) {
	                    rotation = Math.PI + rotation;
	                }
	                label.attr('rotation', rotation);
	            }
	            // Start
	            else {
	                textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];
	                textAlign = d[0] > 0.8 ? 'right' : (d[0] < -0.8 ? 'left' : 'center');
	                textVerticalAlign = d[1] > 0.8 ? 'bottom' : (d[1] < -0.8 ? 'top' : 'middle');
	            }
	            label.attr({
	                style: {
	                    // Use the user specified text align and baseline first
	                    textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	                    textAlign: label.__textAlign || textAlign
	                },
	                position: textPosition,
	                scale: [invScale, invScale]
	            });
	        }
	    }
	
	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Line}
	     */
	    function Line(lineData, idx, seriesScope) {
	        graphic.Group.call(this);
	
	        this._createLine(lineData, idx, seriesScope);
	    }
	
	    var lineProto = Line.prototype;
	
	    // Update symbol position and rotation
	    lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;
	
	    lineProto._createLine = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	        var linePoints = lineData.getItemLayout(idx);
	
	        var line = createLine(linePoints);
	        line.shape.percent = 0;
	        graphic.initProps(line, {
	            shape: {
	                percent: 1
	            }
	        }, seriesModel, idx);
	
	        this.add(line);
	
	        var label = new graphic.Text({
	            name: 'label'
	        });
	        this.add(label);
	
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbol = createSymbol(symbolCategory, lineData, idx);
	            // symbols must added after line to make sure
	            // it will be updated after line#update.
	            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
	            this.add(symbol);
	            this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
	        }, this);
	
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	
	    lineProto.updateData = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	
	        var line = this.childOfName('line');
	        var linePoints = lineData.getItemLayout(idx);
	        var target = {
	            shape: {}
	        };
	        setLinePoints(target.shape, linePoints);
	        graphic.updateProps(line, target, seriesModel, idx);
	
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbolType = lineData.getItemVisual(idx, symbolCategory);
	            var key = makeSymbolTypeKey(symbolCategory);
	            // Symbol changed
	            if (this[key] !== symbolType) {
	                this.remove(this.childOfName(symbolCategory));
	                var symbol = createSymbol(symbolCategory, lineData, idx);
	                this.add(symbol);
	            }
	            this[key] = symbolType;
	        }, this);
	
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	
	    lineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	
	        var line = this.childOfName('line');
	
	        var lineStyle = seriesScope && seriesScope.lineStyle;
	        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	
	        // Optimization for large dataset
	        if (!seriesScope || lineData.hasItemOption) {
	            var itemModel = lineData.getItemModel(idx);
	
	            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	
	            labelModel = itemModel.getModel('label.normal');
	            hoverLabelModel = itemModel.getModel('label.emphasis');
	        }
	
	        var visualColor = lineData.getItemVisual(idx, 'color');
	        var visualOpacity = zrUtil.retrieve(
	            lineData.getItemVisual(idx, 'opacity'),
	            lineStyle.opacity,
	            1
	        );
	
	        line.useStyle(zrUtil.defaults(
	            {
	                strokeNoScale: true,
	                fill: 'none',
	                stroke: visualColor,
	                opacity: visualOpacity
	            },
	            lineStyle
	        ));
	        line.hoverStyle = hoverLineStyle;
	
	        // Update symbol
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbol = this.childOfName(symbolCategory);
	            if (symbol) {
	                symbol.setColor(visualColor);
	                symbol.setStyle({
	                    opacity: visualOpacity
	                });
	            }
	        }, this);
	
	        var showLabel = labelModel.getShallow('show');
	        var hoverShowLabel = hoverLabelModel.getShallow('show');
	
	        var label = this.childOfName('label');
	        var defaultLabelColor;
	        var defaultText;
	
	        if (showLabel || hoverShowLabel) {
	            var rawVal = seriesModel.getRawValue(idx);
	            defaultText = rawVal == null
	                ? defaultText = lineData.getName(idx)
	                : isFinite(rawVal)
	                ? numberUtil.round(rawVal)
	                : rawVal;
	            defaultLabelColor = visualColor || '#000';
	        }
	
	        // label.afterUpdate = lineAfterUpdate;
	        if (showLabel) {
	            var textStyleModel = labelModel.getModel('textStyle');
	            label.setStyle({
	                text: zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType),
	                    defaultText
	                ),
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor() || defaultLabelColor
	            });
	
	            label.__textAlign = textStyleModel.get('align');
	            label.__verticalAlign = textStyleModel.get('baseline');
	            label.__position = labelModel.get('position');
	        }
	        else {
	            label.setStyle('text', '');
	        }
	        if (hoverShowLabel) {
	            var textStyleHoverModel = hoverLabelModel.getModel('textStyle');
	
	            label.hoverStyle = {
	                text: zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType),
	                    defaultText
	                ),
	                textFont: textStyleHoverModel.getFont(),
	                fill: textStyleHoverModel.getTextColor() || defaultLabelColor
	            };
	        }
	        else {
	            label.hoverStyle = {
	                text: ''
	            };
	        }
	
	        label.ignore = !showLabel && !hoverShowLabel;
	
	        graphic.setHoverStyle(this);
	    };
	
	    lineProto.updateLayout = function (lineData, idx) {
	        this.setLinePoints(lineData.getItemLayout(idx));
	    };
	
	    lineProto.setLinePoints = function (points) {
	        var linePath = this.childOfName('line');
	        setLinePoints(linePath.shape, points);
	        linePath.dirty();
	    };
	
	    zrUtil.inherits(Line, graphic.Group);
	
	    module.exports = Line;


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Line path for bezier and straight line draw
	 */
	
	    var graphic = __webpack_require__(64);
	    var vec2 = __webpack_require__(31);
	
	    var straightLineProto = graphic.Line.prototype;
	    var bezierCurveProto = graphic.BezierCurve.prototype;
	
	    function isLine(shape) {
	        return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);
	    }
	
	    module.exports = graphic.extendShape({
	
	        type: 'ec-line',
	
	        style: {
	            stroke: '#000',
	            fill: null
	        },
	
	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            percent: 1,
	            cpx1: null,
	            cpy1: null
	        },
	
	        buildPath: function (ctx, shape) {
	            (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	        },
	
	        pointAt: function (t) {
	            return isLine(this.shape)
	                ? straightLineProto.pointAt.call(this, t)
	                : bezierCurveProto.pointAt.call(this, t);
	        },
	
	        tangentAt: function (t) {
	            var shape = this.shape;
	            var p = isLine(shape)
	                ? [shape.x2 - shape.x1, shape.y2 - shape.y1]
	                : bezierCurveProto.tangentAt.call(this, t);
	            return vec2.normalize(p, p);
	        }
	    });


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var curveTool = __webpack_require__(71);
	    var vec2 = __webpack_require__(31);
	
	    var v1 = [];
	    var v2 = [];
	    var v3 = [];
	    var quadraticAt = curveTool.quadraticAt;
	    var v2DistSquare = vec2.distSquare;
	    var mathAbs = Math.abs;
	    function intersectCurveCircle(curvePoints, center, radius) {
	        var p0 = curvePoints[0];
	        var p1 = curvePoints[1];
	        var p2 = curvePoints[2];
	
	        var d = Infinity;
	        var t;
	        var radiusSquare = radius * radius;
	        var interval = 0.1;
	
	        for (var _t = 0.1; _t <= 0.9; _t += 0.1) {
	            v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);
	            v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);
	            var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);
	            if (diff < d) {
	                d = diff;
	                t = _t;
	            }
	        }
	
	        // Assume the segment is monotone，Find root through Bisection method
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            // var prev = t - interval;
	            var next = t + interval;
	            // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);
	            // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);
	            v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);
	            v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);
	            v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);
	            v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);
	
	            var diff = v2DistSquare(v2, center) - radiusSquare;
	            if (mathAbs(diff) < 1e-2) {
	                break;
	            }
	
	            // var prevDiff = v2DistSquare(v1, center) - radiusSquare;
	            var nextDiff = v2DistSquare(v3, center) - radiusSquare;
	
	            interval /= 2;
	            if (diff < 0) {
	                if (nextDiff >= 0) {
	                    t = t + interval;
	                }
	                else {
	                    t = t - interval;
	                }
	            }
	            else {
	                if (nextDiff >= 0) {
	                    t = t - interval;
	                }
	                else {
	                    t = t + interval;
	                }
	            }
	        }
	
	        return t;
	    }
	    // Adjust edge to avoid
	    module.exports = function (graph, scale) {
	        var tmp0 = [];
	        var quadraticSubdivide = curveTool.quadraticSubdivide;
	        var pts = [[], [], []];
	        var pts2 = [[], []];
	        var v = [];
	        scale /= 2;
	
	        function getSymbolSize(node) {
	            var symbolSize = node.getVisual('symbolSize');
	            if (symbolSize instanceof Array) {
	                symbolSize = (symbolSize[0] + symbolSize[1]) / 2;
	            }
	            return symbolSize;
	        }
	        graph.eachEdge(function (edge, idx) {
	            var linePoints = edge.getLayout();
	            var fromSymbol = edge.getVisual('fromSymbol');
	            var toSymbol = edge.getVisual('toSymbol');
	
	            if (!linePoints.__original) {
	                linePoints.__original = [
	                    vec2.clone(linePoints[0]),
	                    vec2.clone(linePoints[1])
	                ];
	                if (linePoints[2]) {
	                    linePoints.__original.push(vec2.clone(linePoints[2]));
	                }
	            }
	            var originalPoints = linePoints.__original;
	            // Quadratic curve
	            if (linePoints[2] != null) {
	                vec2.copy(pts[0], originalPoints[0]);
	                vec2.copy(pts[1], originalPoints[2]);
	                vec2.copy(pts[2], originalPoints[1]);
	                if (fromSymbol && fromSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node1);
	
	                    var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale);
	                    // Subdivide and get the second
	                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                    pts[0][0] = tmp0[3];
	                    pts[1][0] = tmp0[4];
	                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                    pts[0][1] = tmp0[3];
	                    pts[1][1] = tmp0[4];
	                }
	                if (toSymbol && toSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node2);
	
	                    var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale);
	                    // Subdivide and get the first
	                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                    pts[1][0] = tmp0[1];
	                    pts[2][0] = tmp0[2];
	                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                    pts[1][1] = tmp0[1];
	                    pts[2][1] = tmp0[2];
	                }
	                // Copy back to layout
	                vec2.copy(linePoints[0], pts[0]);
	                vec2.copy(linePoints[1], pts[2]);
	                vec2.copy(linePoints[2], pts[1]);
	            }
	            // Line
	            else {
	                vec2.copy(pts2[0], originalPoints[0]);
	                vec2.copy(pts2[1], originalPoints[1]);
	
	                vec2.sub(v, pts2[1], pts2[0]);
	                vec2.normalize(v, v);
	                if (fromSymbol && fromSymbol != 'none') {
	
	                    var symbolSize = getSymbolSize(edge.node1);
	
	                    vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);
	                }
	                if (toSymbol && toSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node2);
	
	                    vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);
	                }
	                vec2.copy(linePoints[0], pts2[0]);
	                vec2.copy(linePoints[1], pts2[1]);
	            }
	        });
	    };


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	    var roamHelper = __webpack_require__(201);
	
	    var actionInfo = {
	        type: 'graphRoam',
	        event: 'graphRoam',
	        update: 'none'
	    };
	
	    /**
	     * @payload
	     * @property {string} name Series name
	     * @property {number} [dx]
	     * @property {number} [dy]
	     * @property {number} [zoom]
	     * @property {number} [originX]
	     * @property {number} [originY]
	     */
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	        ecModel.eachComponent({mainType: 'series', query: payload}, function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	
	            var res = roamHelper.updateCenterAndZoom(coordSys, payload);
	
	            seriesModel.setCenter
	                && seriesModel.setCenter(res.center);
	
	            seriesModel.setZoom
	                && seriesModel.setZoom(res.zoom);
	        });
	    });
	
	
	    /**
	     * @payload
	     * @property {number} [seriesIndex]
	     * @property {string} [seriesId]
	     * @property {string} [seriesName]
	     * @property {number} [dataIndex]
	     */
	    echarts.registerAction({
	        type: 'focusNodeAdjacency',
	        event: 'focusNodeAdjacency',
	        update: 'series.graph:focusNodeAdjacency'
	    }, function () {});
	
	    /**
	     * @payload
	     * @property {number} [seriesIndex]
	     * @property {string} [seriesId]
	     * @property {string} [seriesName]
	     */
	    echarts.registerAction({
	        type: 'unfocusNodeAdjacency',
	        event: 'unfocusNodeAdjacency',
	        update: 'series.graph:unfocusNodeAdjacency'
	    }, function () {});
	


/***/ },
/* 228 */
/***/ function(module, exports) {

	
	
	    module.exports = function (ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType('graph', function (graphSeries) {
	            var categoriesData = graphSeries.getCategoriesData();
	            var graph = graphSeries.getGraph();
	            var data = graph.data;
	
	            var categoryNames = categoriesData.mapArray(categoriesData.getName);
	
	            data.filterSelf(function (idx) {
	                var model = data.getItemModel(idx);
	                var category = model.getShallow('category');
	                if (category != null) {
	                    if (typeof category === 'number') {
	                        category = categoryNames[category];
	                    }
	                    // If in any legend component the status is not selected.
	                    for (var i = 0; i < legendModels.length; i++) {
	                        if (!legendModels[i].isSelected(category)) {
	                            return false;
	                        }
	                    }
	                }
	                return true;
	            });
	        }, this);
	    };


/***/ },
/* 229 */
/***/ function(module, exports) {

	
	
	    module.exports = function (ecModel) {
	
	        var paletteScope = {};
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var categoriesData = seriesModel.getCategoriesData();
	            var data = seriesModel.getData();
	
	            var categoryNameIdxMap = {};
	
	            categoriesData.each(function (idx) {
	                var name = categoriesData.getName(idx);
	                categoryNameIdxMap[name] = idx;
	
	                var itemModel = categoriesData.getItemModel(idx);
	                var color = itemModel.get('itemStyle.normal.color')
	                    || seriesModel.getColorFromPalette(name, paletteScope);
	                categoriesData.setItemVisual(idx, 'color', color);
	            });
	
	            // Assign category color to visual
	            if (categoriesData.count()) {
	                data.each(function (idx) {
	                    var model = data.getItemModel(idx);
	                    var category = model.getShallow('category');
	                    if (category != null) {
	                        if (typeof category === 'string') {
	                            category = categoryNameIdxMap[category];
	                        }
	                        if (!data.getItemVisual(idx, 'color', true)) {
	                            data.setItemVisual(
	                                idx, 'color',
	                                categoriesData.getItemVisual(category, 'color')
	                            );
	                        }
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 230 */
/***/ function(module, exports) {

	
	
	    function normalize(a) {
	        if (!(a instanceof Array)) {
	            a = [a, a];
	        }
	        return a;
	    }
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var graph = seriesModel.getGraph();
	            var edgeData = seriesModel.getEdgeData();
	            var symbolType = normalize(seriesModel.get('edgeSymbol'));
	            var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));
	
	            var colorQuery = 'lineStyle.normal.color'.split('.');
	            var opacityQuery = 'lineStyle.normal.opacity'.split('.');
	
	            edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);
	            edgeData.setVisual('toSymbol', symbolType && symbolType[1]);
	            edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	            edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	            edgeData.setVisual('color', seriesModel.get(colorQuery));
	            edgeData.setVisual('opacity', seriesModel.get(opacityQuery));
	
	            edgeData.each(function (idx) {
	                var itemModel = edgeData.getItemModel(idx);
	                var edge = graph.getEdgeByIndex(idx);
	                var symbolType = normalize(itemModel.getShallow('symbol', true));
	                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	                // Edge visual must after node visual
	                var color = itemModel.get(colorQuery);
	                var opacity = itemModel.get(opacityQuery);
	                switch (color) {
	                    case 'source':
	                        color = edge.node1.getVisual('color');
	                        break;
	                    case 'target':
	                        color = edge.node2.getVisual('color');
	                        break;
	                }
	
	                symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);
	                symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);
	                symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);
	                symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);
	
	                edge.setVisual('color', color);
	                edge.setVisual('opacity', opacity);
	            });
	        });
	    };


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var simpleLayoutHelper = __webpack_require__(232);
	    var simpleLayoutEdge = __webpack_require__(233);
	    module.exports = function (ecModel, api) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var layout = seriesModel.get('layout');
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && coordSys.type !== 'view') {
	                var data = seriesModel.getData();
	                data.each(coordSys.dimensions, function (x, y, idx) {
	                    if (!isNaN(x) && !isNaN(y)) {
	                        data.setItemLayout(idx, coordSys.dataToPoint([x, y]));
	                    }
	                    else {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, [NaN, NaN]);
	                    }
	                });
	
	                simpleLayoutEdge(data.graph);
	            }
	            else if (!layout || layout === 'none') {
	                simpleLayoutHelper(seriesModel);
	            }
	        });
	    };


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var simpleLayoutEdge = __webpack_require__(233);
	
	    module.exports = function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            return;
	        }
	        var graph = seriesModel.getGraph();
	
	        graph.eachNode(function (node) {
	            var model = node.getModel();
	            node.setLayout([+model.get('x'), +model.get('y')]);
	        });
	
	        simpleLayoutEdge(graph);
	    };


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	
	    var vec2 = __webpack_require__(31);
	    module.exports = function (graph) {
	        graph.eachEdge(function (edge) {
	            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	            var p1 = vec2.clone(edge.node1.getLayout());
	            var p2 = vec2.clone(edge.node2.getLayout());
	            var points = [p1, p2];
	            if (+curveness) {
	                points.push([
	                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,
	                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness
	                ]);
	            }
	            edge.setLayout(points);
	        });
	    };


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	
	    var circularLayoutHelper = __webpack_require__(235);
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            if (seriesModel.get('layout') === 'circular') {
	                circularLayoutHelper(seriesModel);
	            }
	        });
	    };


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	
	    var vec2 = __webpack_require__(31);
	    module.exports = function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            return;
	        }
	
	        var rect = coordSys.getBoundingRect();
	
	        var nodeData = seriesModel.getData();
	        var graph = nodeData.graph;
	
	        var angle = 0;
	        var sum = nodeData.getSum('value');
	        var unitAngle = Math.PI * 2 / (sum || nodeData.count());
	
	        var cx = rect.width / 2 + rect.x;
	        var cy = rect.height / 2 + rect.y;
	
	        var r = Math.min(rect.width, rect.height) / 2;
	
	        graph.eachNode(function (node) {
	            var value = node.getValue('value');
	
	            angle += unitAngle * (sum ? value : 1) / 2;
	
	            node.setLayout([
	                r * Math.cos(angle) + cx,
	                r * Math.sin(angle) + cy
	            ]);
	
	            angle += unitAngle * (sum ? value : 1) / 2;
	        });
	
	        nodeData.setLayout({
	            cx: cx,
	            cy: cy
	        });
	
	        graph.eachEdge(function (edge) {
	            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	            var p1 = vec2.clone(edge.node1.getLayout());
	            var p2 = vec2.clone(edge.node2.getLayout());
	            var cp1;
	            var x12 = (p1[0] + p2[0]) / 2;
	            var y12 = (p1[1] + p2[1]) / 2;
	            if (+curveness) {
	                curveness *= 3;
	                cp1 = [
	                    cx * curveness + x12 * (1 - curveness),
	                    cy * curveness + y12 * (1 - curveness)
	                ];
	            }
	            edge.setLayout([p1, p2, cp1]);
	        });
	    };


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var forceHelper = __webpack_require__(237);
	    var numberUtil = __webpack_require__(28);
	    var simpleLayoutHelper = __webpack_require__(232);
	    var circularLayoutHelper = __webpack_require__(235);
	    var vec2 = __webpack_require__(31);
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (graphSeries) {
	            var coordSys = graphSeries.coordinateSystem;
	            if (coordSys && coordSys.type !== 'view') {
	                return;
	            }
	            if (graphSeries.get('layout') === 'force') {
	                var preservedPoints = graphSeries.preservedPoints || {};
	                var graph = graphSeries.getGraph();
	                var nodeData = graph.data;
	                var edgeData = graph.edgeData;
	                var forceModel = graphSeries.getModel('force');
	                var initLayout = forceModel.get('initLayout');
	                if (graphSeries.preservedPoints) {
	                    nodeData.each(function (idx) {
	                        var id = nodeData.getId(idx);
	                        nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
	                    });
	                }
	                else if (!initLayout || initLayout === 'none') {
	                    simpleLayoutHelper(graphSeries);
	                }
	                else if (initLayout === 'circular') {
	                    circularLayoutHelper(graphSeries);
	                }
	
	                var nodeDataExtent = nodeData.getDataExtent('value');
	                var edgeDataExtent = edgeData.getDataExtent('value');
	                // var edgeDataExtent = edgeData.getDataExtent('value');
	                var repulsion = forceModel.get('repulsion');
	                var edgeLength = forceModel.get('edgeLength');
	                if (!zrUtil.isArray(repulsion)) {
	                    repulsion = [repulsion, repulsion];
	                }
	                if (!zrUtil.isArray(edgeLength)) {
	                    edgeLength = [edgeLength, edgeLength];
	                }
	                // Larger value has smaller length
	                edgeLength = [edgeLength[1], edgeLength[0]];
	
	                var nodes = nodeData.mapArray('value', function (value, idx) {
	                    var point = nodeData.getItemLayout(idx);
	                    // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);
	                    var rep = numberUtil.linearMap(value, nodeDataExtent, repulsion);
	                    if (isNaN(rep)) {
	                        rep = (repulsion[0] + repulsion[1]) / 2;
	                    }
	                    return {
	                        w: rep,
	                        rep: rep,
	                        p: (!point || isNaN(point[0]) || isNaN(point[1])) ? null : point
	                    };
	                });
	                var edges = edgeData.mapArray('value', function (value, idx) {
	                    var edge = graph.getEdgeByIndex(idx);
	                    var d = numberUtil.linearMap(value, edgeDataExtent, edgeLength);
	                    if (isNaN(d)) {
	                        d = (edgeLength[0] + edgeLength[1]) / 2;
	                    }
	                    return {
	                        n1: nodes[edge.node1.dataIndex],
	                        n2: nodes[edge.node2.dataIndex],
	                        d: d,
	                        curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
	                    };
	                });
	
	                var coordSys = graphSeries.coordinateSystem;
	                var rect = coordSys.getBoundingRect();
	                var forceInstance = forceHelper(nodes, edges, {
	                    rect: rect,
	                    gravity: forceModel.get('gravity')
	                });
	                var oldStep = forceInstance.step;
	                forceInstance.step = function (cb) {
	                    for (var i = 0, l = nodes.length; i < l; i++) {
	                        if (nodes[i].fixed) {
	                            // Write back to layout instance
	                            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
	                        }
	                    }
	                    oldStep(function (nodes, edges, stopped) {
	                        for (var i = 0, l = nodes.length; i < l; i++) {
	                            if (!nodes[i].fixed) {
	                                graph.getNodeByIndex(i).setLayout(nodes[i].p);
	                            }
	                            preservedPoints[nodeData.getId(i)] = nodes[i].p;
	                        }
	                        for (var i = 0, l = edges.length; i < l; i++) {
	                            var e = edges[i];
	                            var edge = graph.getEdgeByIndex(i);
	                            var p1 = e.n1.p;
	                            var p2 = e.n2.p;
	                            var points = edge.getLayout();
	                            points = points ? points.slice() : [];
	                            points[0] = points[0] || [];
	                            points[1] = points[1] || [];
	                            vec2.copy(points[0], p1);
	                            vec2.copy(points[1], p2);
	                            if (+e.curveness) {
	                                points[2] = [
	                                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness,
	                                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness
	                                ];
	                            }
	                            edge.setLayout(points);
	                        }
	                        // Update layout
	
	                        cb && cb(stopped);
	                    });
	                };
	                graphSeries.forceLayout = forceInstance;
	                graphSeries.preservedPoints = preservedPoints;
	
	                // Step to get the layout
	                forceInstance.step();
	            }
	            else {
	                // Remove prev injected forceLayout instance
	                graphSeries.forceLayout = null;
	            }
	        });
	    };


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var vec2 = __webpack_require__(31);
	    var scaleAndAdd = vec2.scaleAndAdd;
	
	    // function adjacentNode(n, e) {
	    //     return e.n1 === n ? e.n2 : e.n1;
	    // }
	
	    module.exports = function (nodes, edges, opts) {
	        var rect = opts.rect;
	        var width = rect.width;
	        var height = rect.height;
	        var center = [rect.x + width / 2, rect.y + height / 2];
	        // var scale = opts.scale || 1;
	        var gravity = opts.gravity == null ? 0.1 : opts.gravity;
	
	        // for (var i = 0; i < edges.length; i++) {
	        //     var e = edges[i];
	        //     var n1 = e.n1;
	        //     var n2 = e.n2;
	        //     n1.edges = n1.edges || [];
	        //     n2.edges = n2.edges || [];
	        //     n1.edges.push(e);
	        //     n2.edges.push(e);
	        // }
	        // Init position
	        for (var i = 0; i < nodes.length; i++) {
	            var n = nodes[i];
	            if (!n.p) {
	                // Use the position from first adjecent node with defined position
	                // Or use a random position
	                // From d3
	                // if (n.edges) {
	                //     var j = -1;
	                //     while (++j < n.edges.length) {
	                //         var e = n.edges[j];
	                //         var other = adjacentNode(n, e);
	                //         if (other.p) {
	                //             n.p = vec2.clone(other.p);
	                //             break;
	                //         }
	                //     }
	                // }
	                // if (!n.p) {
	                    n.p = vec2.create(
	                        width * (Math.random() - 0.5) + center[0],
	                        height * (Math.random() - 0.5) + center[1]
	                    );
	                // }
	            }
	            n.pp = vec2.clone(n.p);
	            n.edges = null;
	        }
	
	        // Formula in 'Graph Drawing by Force-directed Placement'
	        // var k = scale * Math.sqrt(width * height / nodes.length);
	        // var k2 = k * k;
	
	        var friction = 0.6;
	
	        return {
	            warmUp: function () {
	                friction = 0.5;
	            },
	
	            setFixed: function (idx) {
	                nodes[idx].fixed = true;
	            },
	
	            setUnfixed: function (idx) {
	                nodes[idx].fixed = false;
	            },
	
	            step: function (cb) {
	                var v12 = [];
	                var nLen = nodes.length;
	                for (var i = 0; i < edges.length; i++) {
	                    var e = edges[i];
	                    var n1 = e.n1;
	                    var n2 = e.n2;
	
	                    vec2.sub(v12, n2.p, n1.p);
	                    var d = vec2.len(v12) - e.d;
	                    var w = n2.w / (n1.w + n2.w);
	                    vec2.normalize(v12, v12);
	
	                    !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
	                    !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
	                }
	                // Gravity
	                for (var i = 0; i < nLen; i++) {
	                    var n = nodes[i];
	                    if (!n.fixed) {
	                        vec2.sub(v12, center, n.p);
	                        // var d = vec2.len(v12);
	                        // vec2.scale(v12, v12, 1 / d);
	                        // var gravityFactor = gravity;
	                        vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);
	                    }
	                }
	
	                // Repulsive
	                // PENDING
	                for (var i = 0; i < nLen; i++) {
	                    var n1 = nodes[i];
	                    for (var j = i + 1; j < nLen; j++) {
	                        var n2 = nodes[j];
	                        vec2.sub(v12, n2.p, n1.p);
	                        var d = vec2.len(v12);
	                        if (d === 0) {
	                            // Random repulse
	                            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
	                            d = 1;
	                        }
	                        var repFact = (n1.rep + n2.rep) / d / d;
	                        !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
	                        !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
	                    }
	                }
	                var v = [];
	                for (var i = 0; i < nLen; i++) {
	                    var n = nodes[i];
	                    if (!n.fixed) {
	                        vec2.sub(v, n.p, n.pp);
	                        vec2.scaleAndAdd(n.p, n.p, v, friction);
	                        vec2.copy(n.pp, n.p);
	                    }
	                }
	
	                friction = friction * 0.992;
	
	                cb && cb(nodes, edges, friction < 0.01);
	            }
	        };
	    };


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	
	    // FIXME Where to create the simple view coordinate system
	    var View = __webpack_require__(192);
	    var layout = __webpack_require__(42);
	    var bbox = __webpack_require__(72);
	
	    function getViewRect(seriesModel, api, aspect) {
	        var option = seriesModel.getBoxLayoutParams();
	        option.aspect = aspect;
	        return layout.getLayoutRect(option, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	    }
	
	    module.exports = function (ecModel, api) {
	        var viewList = [];
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var coordSysType = seriesModel.get('coordinateSystem');
	            if (!coordSysType || coordSysType === 'view') {
	
	                var data = seriesModel.getData();
	                var positions = data.mapArray(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    return [+itemModel.get('x'), +itemModel.get('y')];
	                });
	
	                var min = [];
	                var max = [];
	
	                bbox.fromPoints(positions, min, max);
	
	                // If width or height is 0
	                if (max[0] - min[0] === 0) {
	                    max[0] += 1;
	                    min[0] -= 1;
	                }
	                if (max[1] - min[1] === 0) {
	                    max[1] += 1;
	                    min[1] -= 1;
	                }
	                var aspect = (max[0] - min[0]) / (max[1] - min[1]);
	                // FIXME If get view rect after data processed?
	                var viewRect = getViewRect(seriesModel, api, aspect);
	                // Position may be NaN, use view rect instead
	                if (isNaN(aspect)) {
	                    min = [viewRect.x, viewRect.y];
	                    max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
	                }
	
	                var bbWidth = max[0] - min[0];
	                var bbHeight = max[1] - min[1];
	
	                var viewWidth = viewRect.width;
	                var viewHeight = viewRect.height;
	
	                var viewCoordSys = seriesModel.coordinateSystem = new View();
	                viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');
	
	                viewCoordSys.setBoundingRect(
	                    min[0], min[1], bbWidth, bbHeight
	                );
	                viewCoordSys.setViewRect(
	                    viewRect.x, viewRect.y, viewWidth, viewHeight
	                );
	
	                // Update roam info
	                viewCoordSys.setCenter(seriesModel.get('center'));
	                viewCoordSys.setZoom(seriesModel.get('zoom'));
	
	                viewList.push(viewCoordSys);
	            }
	        });
	        return viewList;
	    };


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	
	    __webpack_require__(240);
	    __webpack_require__(241);


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var List = __webpack_require__(119);
	    var SeriesModel = __webpack_require__(49);
	    var zrUtil = __webpack_require__(25);
	
	    var GaugeSeries = SeriesModel.extend({
	
	        type: 'series.gauge',
	
	        getInitialData: function (option, ecModel) {
	            var list = new List(['value'], this);
	            var dataOpt = option.data || [];
	            if (!zrUtil.isArray(dataOpt)) {
	                dataOpt = [dataOpt];
	            }
	            // Only use the first data item
	            list.initData(dataOpt);
	            return list;
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            // 默认全局居中
	            center: ['50%', '50%'],
	            legendHoverLink: true,
	            radius: '75%',
	            startAngle: 225,
	            endAngle: -45,
	            clockwise: true,
	            // 最小值
	            min: 0,
	            // 最大值
	            max: 100,
	            // 分割段数，默认为10
	            splitNumber: 10,
	            // 坐标轴线
	            axisLine: {
	                // 默认显示，属性show控制显示与否
	                show: true,
	                lineStyle: {       // 属性lineStyle控制线条样式
	                    color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
	                    width: 30
	                }
	            },
	            // 分隔线
	            splitLine: {
	                // 默认显示，属性show控制显示与否
	                show: true,
	                // 属性length控制线长
	                length: 30,
	                // 属性lineStyle（详见lineStyle）控制线条样式
	                lineStyle: {
	                    color: '#eee',
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            // 坐标轴小标记
	            axisTick: {
	                // 属性show控制显示与否，默认不显示
	                show: true,
	                // 每份split细分多少段
	                splitNumber: 5,
	                // 属性length控制线长
	                length: 8,
	                // 属性lineStyle控制线条样式
	                lineStyle: {
	                    color: '#eee',
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            axisLabel: {
	                show: true,
	                distance: 5,
	                // formatter: null,
	                textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: 'auto'
	                }
	            },
	            pointer: {
	                show: true,
	                length: '80%',
	                width: 8
	            },
	            itemStyle: {
	                normal: {
	                    color: 'auto'
	                }
	            },
	            title: {
	                show: true,
	                // x, y，单位px
	                offsetCenter: [0, '-40%'],
	                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                textStyle: {
	                    color: '#333',
	                    fontSize: 15
	                }
	            },
	            detail: {
	                show: true,
	                backgroundColor: 'rgba(0,0,0,0)',
	                borderWidth: 0,
	                borderColor: '#ccc',
	                width: 100,
	                height: 40,
	                // x, y，单位px
	                offsetCenter: [0, '40%'],
	                // formatter: null,
	                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                textStyle: {
	                    color: 'auto',
	                    fontSize: 30
	                }
	            }
	        }
	    });
	
	    module.exports = GaugeSeries;


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var PointerPath = __webpack_require__(242);
	
	    var graphic = __webpack_require__(64);
	    var numberUtil = __webpack_require__(28);
	    var parsePercent = numberUtil.parsePercent;
	
	    function parsePosition(seriesModel, api) {
	        var center = seriesModel.get('center');
	        var width = api.getWidth();
	        var height = api.getHeight();
	        var size = Math.min(width, height);
	        var cx = parsePercent(center[0], api.getWidth());
	        var cy = parsePercent(center[1], api.getHeight());
	        var r = parsePercent(seriesModel.get('radius'), size / 2);
	
	        return {
	            cx: cx,
	            cy: cy,
	            r: r
	        };
	    }
	
	    function formatLabel(label, labelFormatter) {
	        if (labelFormatter) {
	            if (typeof labelFormatter === 'string') {
	                label = labelFormatter.replace('{value}', label != null ? label : '');
	            }
	            else if (typeof labelFormatter === 'function') {
	                label = labelFormatter(label);
	            }
	        }
	
	        return label;
	    }
	
	    var PI2 = Math.PI * 2;
	
	    var GaugeView = __webpack_require__(63).extend({
	
	        type: 'gauge',
	
	        render: function (seriesModel, ecModel, api) {
	
	            this.group.removeAll();
	
	            var colorList = seriesModel.get('axisLine.lineStyle.color');
	            var posInfo = parsePosition(seriesModel, api);
	
	            this._renderMain(
	                seriesModel, ecModel, api, colorList, posInfo
	            );
	        },
	
	        dispose: function () {},
	
	        _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {
	            var group = this.group;
	
	            var axisLineModel = seriesModel.getModel('axisLine');
	            var lineStyleModel = axisLineModel.getModel('lineStyle');
	
	            var clockwise = seriesModel.get('clockwise');
	            var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
	            var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;
	
	            var angleRangeSpan = (endAngle - startAngle) % PI2;
	
	            var prevEndAngle = startAngle;
	            var axisLineWidth = lineStyleModel.get('width');
	
	            for (var i = 0; i < colorList.length; i++) {
	                // Clamp
	                var percent = Math.min(Math.max(colorList[i][0], 0), 1);
	                var endAngle = startAngle + angleRangeSpan * percent;
	                var sector = new graphic.Sector({
	                    shape: {
	                        startAngle: prevEndAngle,
	                        endAngle: endAngle,
	                        cx: posInfo.cx,
	                        cy: posInfo.cy,
	                        clockwise: clockwise,
	                        r0: posInfo.r - axisLineWidth,
	                        r: posInfo.r
	                    },
	                    silent: true
	                });
	
	                sector.setStyle({
	                    fill: colorList[i][1]
	                });
	
	                sector.setStyle(lineStyleModel.getLineStyle(
	                    // Because we use sector to simulate arc
	                    // so the properties for stroking are useless
	                    ['color', 'borderWidth', 'borderColor']
	                ));
	
	                group.add(sector);
	
	                prevEndAngle = endAngle;
	            }
	
	            var getColor = function (percent) {
	                // Less than 0
	                if (percent <= 0) {
	                    return colorList[0][1];
	                }
	                for (var i = 0; i < colorList.length; i++) {
	                    if (colorList[i][0] >= percent
	                        && (i === 0 ? 0 : colorList[i - 1][0]) < percent
	                    ) {
	                        return colorList[i][1];
	                    }
	                }
	                // More than 1
	                return colorList[i - 1][1];
	            };
	
	            if (!clockwise) {
	                var tmp = startAngle;
	                startAngle = endAngle;
	                endAngle = tmp;
	            }
	
	            this._renderTicks(
	                seriesModel, ecModel, api, getColor, posInfo,
	                startAngle, endAngle, clockwise
	            );
	
	            this._renderPointer(
	                seriesModel, ecModel, api, getColor, posInfo,
	                startAngle, endAngle, clockwise
	            );
	
	            this._renderTitle(
	                seriesModel, ecModel, api, getColor, posInfo
	            );
	            this._renderDetail(
	                seriesModel, ecModel, api, getColor, posInfo
	            );
	        },
	
	        _renderTicks: function (
	            seriesModel, ecModel, api, getColor, posInfo,
	            startAngle, endAngle, clockwise
	        ) {
	            var group = this.group;
	            var cx = posInfo.cx;
	            var cy = posInfo.cy;
	            var r = posInfo.r;
	
	            var minVal = +seriesModel.get('min');
	            var maxVal = +seriesModel.get('max');
	
	            var splitLineModel = seriesModel.getModel('splitLine');
	            var tickModel = seriesModel.getModel('axisTick');
	            var labelModel = seriesModel.getModel('axisLabel');
	
	            var splitNumber = seriesModel.get('splitNumber');
	            var subSplitNumber = tickModel.get('splitNumber');
	
	            var splitLineLen = parsePercent(
	                splitLineModel.get('length'), r
	            );
	            var tickLen = parsePercent(
	                tickModel.get('length'), r
	            );
	
	            var angle = startAngle;
	            var step = (endAngle - startAngle) / splitNumber;
	            var subStep = step / subSplitNumber;
	
	            var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
	            var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();
	            var textStyleModel = labelModel.getModel('textStyle');
	
	            for (var i = 0; i <= splitNumber; i++) {
	                var unitX = Math.cos(angle);
	                var unitY = Math.sin(angle);
	                // Split line
	                if (splitLineModel.get('show')) {
	                    var splitLine = new graphic.Line({
	                        shape: {
	                            x1: unitX * r + cx,
	                            y1: unitY * r + cy,
	                            x2: unitX * (r - splitLineLen) + cx,
	                            y2: unitY * (r - splitLineLen) + cy
	                        },
	                        style: splitLineStyle,
	                        silent: true
	                    });
	                    if (splitLineStyle.stroke === 'auto') {
	                        splitLine.setStyle({
	                            stroke: getColor(i / splitNumber)
	                        });
	                    }
	
	                    group.add(splitLine);
	                }
	
	                // Label
	                if (labelModel.get('show')) {
	                    var label = formatLabel(
	                        numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal),
	                        labelModel.get('formatter')
	                    );
	                    var distance = labelModel.get('distance');
	
	                    var text = new graphic.Text({
	                        style: {
	                            text: label,
	                            x: unitX * (r - splitLineLen - distance) + cx,
	                            y: unitY * (r - splitLineLen - distance) + cy,
	                            fill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont(),
	                            textVerticalAlign: unitY < -0.4 ? 'top' : (unitY > 0.4 ? 'bottom' : 'middle'),
	                            textAlign: unitX < -0.4 ? 'left' : (unitX > 0.4 ? 'right' : 'center')
	                        },
	                        silent: true
	                    });
	                    if (text.style.fill === 'auto') {
	                        text.setStyle({
	                            fill: getColor(i / splitNumber)
	                        });
	                    }
	
	                    group.add(text);
	                }
	
	                // Axis tick
	                if (tickModel.get('show') && i !== splitNumber) {
	                    for (var j = 0; j <= subSplitNumber; j++) {
	                        var unitX = Math.cos(angle);
	                        var unitY = Math.sin(angle);
	                        var tickLine = new graphic.Line({
	                            shape: {
	                                x1: unitX * r + cx,
	                                y1: unitY * r + cy,
	                                x2: unitX * (r - tickLen) + cx,
	                                y2: unitY * (r - tickLen) + cy
	                            },
	                            silent: true,
	                            style: tickLineStyle
	                        });
	
	                        if (tickLineStyle.stroke === 'auto') {
	                            tickLine.setStyle({
	                                stroke: getColor((i + j / subSplitNumber) / splitNumber)
	                            });
	                        }
	
	                        group.add(tickLine);
	                        angle += subStep;
	                    }
	                    angle -= subStep;
	                }
	                else {
	                    angle += step;
	                }
	            }
	        },
	
	        _renderPointer: function (
	            seriesModel, ecModel, api, getColor, posInfo,
	            startAngle, endAngle, clockwise
	        ) {
	
	            var group = this.group;
	            var oldData = this._data;
	
	            if (!seriesModel.get('pointer.show')) {
	                // Remove old element
	                oldData.eachItemGraphicEl(function (el) {
	                    group.remove(el);
	                });
	                return;
	            }
	
	            var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
	            var angleExtent = [startAngle, endAngle];
	
	            var data = seriesModel.getData();
	
	            data.diff(oldData)
	                .add(function (idx) {
	                    var pointer = new PointerPath({
	                        shape: {
	                            angle: startAngle
	                        }
	                    });
	
	                    graphic.updateProps(pointer, {
	                        shape: {
	                            angle: numberUtil.linearMap(data.get('value', idx), valueExtent, angleExtent, true)
	                        }
	                    }, seriesModel);
	
	                    group.add(pointer);
	                    data.setItemGraphicEl(idx, pointer);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var pointer = oldData.getItemGraphicEl(oldIdx);
	
	                    graphic.updateProps(pointer, {
	                        shape: {
	                            angle: numberUtil.linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)
	                        }
	                    }, seriesModel);
	
	                    group.add(pointer);
	                    data.setItemGraphicEl(newIdx, pointer);
	                })
	                .remove(function (idx) {
	                    var pointer = oldData.getItemGraphicEl(idx);
	                    group.remove(pointer);
	                })
	                .execute();
	
	            data.eachItemGraphicEl(function (pointer, idx) {
	                var itemModel = data.getItemModel(idx);
	                var pointerModel = itemModel.getModel('pointer');
	
	                pointer.setShape({
	                    x: posInfo.cx,
	                    y: posInfo.cy,
	                    width: parsePercent(
	                        pointerModel.get('width'), posInfo.r
	                    ),
	                    r: parsePercent(pointerModel.get('length'), posInfo.r)
	                });
	
	                pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());
	
	                if (pointer.style.fill === 'auto') {
	                    pointer.setStyle('fill', getColor(
	                        (data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])
	                    ));
	                }
	
	                graphic.setHoverStyle(
	                    pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle()
	                );
	            });
	
	            this._data = data;
	        },
	
	        _renderTitle: function (
	            seriesModel, ecModel, api, getColor, posInfo
	        ) {
	            var titleModel = seriesModel.getModel('title');
	            if (titleModel.get('show')) {
	                var textStyleModel = titleModel.getModel('textStyle');
	                var offsetCenter = titleModel.get('offsetCenter');
	                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	                var text = new graphic.Text({
	                    style: {
	                        x: x,
	                        y: y,
	                        // FIXME First data name ?
	                        text: seriesModel.getData().getName(0),
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textAlign: 'center',
	                        textVerticalAlign: 'middle'
	                    }
	                });
	                this.group.add(text);
	            }
	        },
	
	        _renderDetail: function (
	            seriesModel, ecModel, api, getColor, posInfo
	        ) {
	            var detailModel = seriesModel.getModel('detail');
	            var minVal = +seriesModel.get('min');
	            var maxVal = +seriesModel.get('max');
	            if (detailModel.get('show')) {
	                var textStyleModel = detailModel.getModel('textStyle');
	                var offsetCenter = detailModel.get('offsetCenter');
	                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	                var width = parsePercent(detailModel.get('width'), posInfo.r);
	                var height = parsePercent(detailModel.get('height'), posInfo.r);
	                var value = seriesModel.getData().get('value', 0);
	                var rect = new graphic.Rect({
	                    shape: {
	                        x: x - width / 2,
	                        y: y - height / 2,
	                        width: width,
	                        height: height
	                    },
	                    style: {
	                        text: formatLabel(
	                            // FIXME First data name ?
	                            value, detailModel.get('formatter')
	                        ),
	                        fill: detailModel.get('backgroundColor'),
	                        textFill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    }
	                });
	                if (rect.style.textFill === 'auto') {
	                    rect.setStyle('textFill', getColor(
	                        numberUtil.linearMap(value, [minVal, maxVal], [0, 1], true)
	                    ));
	                }
	                rect.setStyle(detailModel.getItemStyle(['color']));
	                this.group.add(rect);
	            }
	        }
	    });
	
	    module.exports = GaugeView;


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(66).extend({
	
	        type: 'echartsGaugePointer',
	
	        shape: {
	            angle: 0,
	
	            width: 10,
	
	            r: 10,
	
	            x: 0,
	
	            y: 0
	        },
	
	        buildPath: function (ctx, shape) {
	            var mathCos = Math.cos;
	            var mathSin = Math.sin;
	
	            var r = shape.r;
	            var width = shape.width;
	            var angle = shape.angle;
	            var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
	            var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);
	
	            angle = shape.angle - Math.PI / 2;
	            ctx.moveTo(x, y);
	            ctx.lineTo(
	                shape.x + mathCos(angle) * width,
	                shape.y + mathSin(angle) * width
	            );
	            ctx.lineTo(
	                shape.x + mathCos(shape.angle) * r,
	                shape.y + mathSin(shape.angle) * r
	            );
	            ctx.lineTo(
	                shape.x - mathCos(angle) * width,
	                shape.y - mathSin(angle) * width
	            );
	            ctx.lineTo(x, y);
	            return;
	        }
	    });


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(244);
	    __webpack_require__(245);
	
	    echarts.registerVisual(zrUtil.curry(__webpack_require__(167), 'funnel'));
	    echarts.registerLayout(__webpack_require__(246));
	
	    echarts.registerProcessor(zrUtil.curry(__webpack_require__(170), 'funnel'));


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var List = __webpack_require__(119);
	    var modelUtil = __webpack_require__(26);
	    var completeDimensions = __webpack_require__(124);
	
	    var FunnelSeries = __webpack_require__(22).extendSeriesModel({
	
	        type: 'series.funnel',
	
	        init: function (option) {
	            FunnelSeries.superApply(this, 'init', arguments);
	
	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	            // Extend labelLine emphasis
	            this._defaultLabelLine(option);
	        },
	
	        getInitialData: function (option, ecModel) {
	            var dimensions = completeDimensions(['value'], option.data);
	            var list = new List(dimensions, this);
	            list.initData(option.data);
	            return list;
	        },
	
	        _defaultLabelLine: function (option) {
	            // Extend labelLine emphasis
	            modelUtil.defaultEmphasis(option.labelLine, ['show']);
	
	            var labelLineNormalOpt = option.labelLine.normal;
	            var labelLineEmphasisOpt = option.labelLine.emphasis;
	            // Not show label line if `label.normal.show = false`
	            labelLineNormalOpt.show = labelLineNormalOpt.show
	                && option.label.normal.show;
	            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
	                && option.label.emphasis.show;
	        },
	
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            legendHoverLink: true,
	            left: 80,
	            top: 60,
	            right: 80,
	            bottom: 60,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,
	
	            // 默认取数据最小最大值
	            // min: 0,
	            // max: 100,
	            minSize: '0%',
	            maxSize: '100%',
	            sort: 'descending', // 'ascending', 'descending'
	            gap: 0,
	            funnelAlign: 'center',
	            label: {
	                normal: {
	                    show: true,
	                    position: 'outer'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            labelLine: {
	                normal: {
	                    show: true,
	                    length: 20,
	                    lineStyle: {
	                        // color: 各异,
	                        width: 1,
	                        type: 'solid'
	                    }
	                },
	                emphasis: {}
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderColor: '#fff',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    // color: 各异,
	                }
	            }
	        }
	    });
	
	    module.exports = FunnelSeries;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function FunnelPiece(data, idx) {
	
	        graphic.Group.call(this);
	
	        var polygon = new graphic.Polygon();
	        var labelLine = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(polygon);
	        this.add(labelLine);
	        this.add(text);
	
	        this.updateData(data, idx, true);
	
	        // Hover to change label and labelLine
	        function onEmphasis() {
	            labelLine.ignore = labelLine.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            labelLine.ignore = labelLine.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis)
	            .on('normal', onNormal)
	            .on('mouseover', onEmphasis)
	            .on('mouseout', onNormal);
	    }
	
	    var funnelPieceProto = FunnelPiece.prototype;
	
	    function getLabelStyle(data, idx, state, labelModel) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var position = labelModel.get('position');
	        var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';
	        return {
	            fill: textStyleModel.getTextColor()
	                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(
	                data.hostModel.getFormattedLabel(idx, state),
	                data.getName(idx)
	            )
	        };
	    }
	
	    var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];
	    funnelPieceProto.updateData = function (data, idx, firstCreate) {
	
	        var polygon = this.childAt(0);
	
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var opacity = data.getItemModel(idx).get(opacityAccessPath);
	        opacity = opacity == null ? 1 : opacity;
	
	        // Reset style
	        polygon.useStyle({});
	
	        if (firstCreate) {
	            polygon.setShape({
	                points: layout.points
	            });
	            polygon.setStyle({ opacity : 0 });
	            graphic.initProps(polygon, {
	                style: {
	                    opacity: opacity
	                }
	            }, seriesModel, idx);
	        }
	        else {
	            graphic.updateProps(polygon, {
	                style: {
	                    opacity: opacity
	                },
	                shape: {
	                    points: layout.points
	                }
	            }, seriesModel, idx);
	        }
	
	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');
	
	        polygon.setStyle(
	            zrUtil.defaults(
	                {
	                    lineJoin: 'round',
	                    fill: visualColor
	                },
	                itemStyleModel.getModel('normal').getItemStyle(['opacity'])
	            )
	        );
	        polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	
	        this._updateLabel(data, idx);
	
	        graphic.setHoverStyle(this);
	    };
	
	    funnelPieceProto._updateLabel = function (data, idx) {
	
	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);
	
	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');
	
	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || labelLayout.linePoints
	            }
	        }, seriesModel, idx);
	
	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel, idx);
	        labelText.attr({
	            style: {
	                textAlign: labelLayout.textAlign,
	                textVerticalAlign: labelLayout.verticalAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [labelLayout.x, labelLayout.y],
	            z2: 10
	        });
	
	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	
	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));
	
	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');
	
	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');
	
	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	
	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	    };
	
	    zrUtil.inherits(FunnelPiece, graphic.Group);
	
	
	    var Funnel = __webpack_require__(63).extend({
	
	        type: 'funnel',
	
	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var oldData = this._data;
	
	            var group = this.group;
	
	            data.diff(oldData)
	                .add(function (idx) {
	                    var funnelPiece = new FunnelPiece(data, idx);
	
	                    data.setItemGraphicEl(idx, funnelPiece);
	
	                    group.add(funnelPiece);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);
	
	                    piePiece.updateData(data, newIdx);
	
	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                })
	                .remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                })
	                .execute();
	
	            this._data = data;
	        },
	
	        remove: function () {
	            this.group.removeAll();
	            this._data = null;
	        },
	
	        dispose: function () {}
	    });
	
	    module.exports = Funnel;


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var layout = __webpack_require__(42);
	    var number = __webpack_require__(28);
	
	    var parsePercent = number.parsePercent;
	
	    function getViewRect(seriesModel, api) {
	        return layout.getLayoutRect(
	            seriesModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }
	        );
	    }
	
	    function getSortedIndices(data, sort) {
	        var valueArr = data.mapArray('value', function (val) {
	            return val;
	        });
	        var indices = [];
	        var isAscending = sort === 'ascending';
	        for (var i = 0, len = data.count(); i < len; i++) {
	            indices[i] = i;
	        }
	        indices.sort(function (a, b) {
	            return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
	        });
	        return indices;
	    }
	
	    function labelLayout (data) {
	        data.each(function (idx) {
	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            var labelPosition = labelModel.get('position');
	
	            var labelLineModel = itemModel.getModel('labelLine.normal');
	
	            var layout = data.getItemLayout(idx);
	            var points = layout.points;
	
	            var isLabelInside = labelPosition === 'inner'
	                || labelPosition === 'inside' || labelPosition === 'center';
	
	            var textAlign;
	            var textX;
	            var textY;
	            var linePoints;
	
	            if (isLabelInside) {
	                textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
	                textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
	                textAlign = 'center';
	                linePoints = [
	                    [textX, textY], [textX, textY]
	                ];
	            }
	            else {
	                var x1;
	                var y1;
	                var x2;
	                var labelLineLen = labelLineModel.get('length');
	                if (labelPosition === 'left') {
	                    // Left side
	                    x1 = (points[3][0] + points[0][0]) / 2;
	                    y1 = (points[3][1] + points[0][1]) / 2;
	                    x2 = x1 - labelLineLen;
	                    textX = x2 - 5;
	                    textAlign = 'right';
	                }
	                else {
	                    // Right side
	                    x1 = (points[1][0] + points[2][0]) / 2;
	                    y1 = (points[1][1] + points[2][1]) / 2;
	                    x2 = x1 + labelLineLen;
	                    textX = x2 + 5;
	                    textAlign = 'left';
	                }
	                var y2 = y1;
	
	                linePoints = [[x1, y1], [x2, y2]];
	                textY = y2;
	            }
	
	            layout.label = {
	                linePoints: linePoints,
	                x: textX,
	                y: textY,
	                verticalAlign: 'middle',
	                textAlign: textAlign,
	                inside: isLabelInside
	            };
	        });
	    }
	
	    module.exports = function (ecModel, api, payload) {
	        ecModel.eachSeriesByType('funnel', function (seriesModel) {
	            var data = seriesModel.getData();
	            var sort = seriesModel.get('sort');
	            var viewRect = getViewRect(seriesModel, api);
	            var indices = getSortedIndices(data, sort);
	
	            var sizeExtent = [
	                parsePercent(seriesModel.get('minSize'), viewRect.width),
	                parsePercent(seriesModel.get('maxSize'), viewRect.width)
	            ];
	            var dataExtent = data.getDataExtent('value');
	            var min = seriesModel.get('min');
	            var max = seriesModel.get('max');
	            if (min == null) {
	                min = Math.min(dataExtent[0], 0);
	            }
	            if (max == null) {
	                max = dataExtent[1];
	            }
	
	            var funnelAlign = seriesModel.get('funnelAlign');
	            var gap = seriesModel.get('gap');
	            var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();
	
	            var y = viewRect.y;
	
	            var getLinePoints = function (idx, offY) {
	                // End point index is data.count() and we assign it 0
	                var val = data.get('value', idx) || 0;
	                var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);
	                var x0;
	                switch (funnelAlign) {
	                    case 'left':
	                        x0 = viewRect.x;
	                        break;
	                    case 'center':
	                        x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
	                        break;
	                    case 'right':
	                        x0 = viewRect.x + viewRect.width - itemWidth;
	                        break;
	                }
	                return [
	                    [x0, offY],
	                    [x0 + itemWidth, offY]
	                ];
	            };
	
	            if (sort === 'ascending') {
	                // From bottom to top
	                itemHeight = -itemHeight;
	                gap = -gap;
	                y += viewRect.height;
	                indices = indices.reverse();
	            }
	
	            for (var i = 0; i < indices.length; i++) {
	                var idx = indices[i];
	                var nextIdx = indices[i + 1];
	                var start = getLinePoints(idx, y);
	                var end = getLinePoints(nextIdx, y + itemHeight);
	
	                y += itemHeight + gap;
	
	                data.setItemLayout(idx, {
	                    points: start.concat(end.slice().reverse())
	                });
	            }
	
	            labelLayout(data);
	        });
	    };


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(248);
	
	    __webpack_require__(259);
	    __webpack_require__(260);
	
	    echarts.registerVisual(__webpack_require__(261));
	


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(249);
	    __webpack_require__(252);
	    __webpack_require__(254);
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    var CLICK_THRESHOLD = 5; // > 4
	
	    // Parallel view
	    echarts.extendComponentView({
	        type: 'parallel',
	
	        render: function (parallelModel, ecModel, api) {
	            var zr = api.getZr();
	
	            if (!this.__onMouseDown) {
	                // FIXME
	                // click: mousemove check. otherwise confilct with drag brush.
	                var mousedownPoint;
	                zr.on('mousedown', this.__onMouseDown = function (e) {
	                    mousedownPoint = [e.offsetX, e.offsetY];
	                });
	                zr.on('mouseup', this.__onMouseUp = function (e) {
	                    var point = [e.offsetX, e.offsetY];
	                    var dist = Math.pow(mousedownPoint[0] - point[0], 2)
	                        + Math.pow(mousedownPoint[1] - point[1], 2);
	
	                    if (!parallelModel.get('axisExpandable') || dist > CLICK_THRESHOLD) {
	                        return;
	                    }
	
	                    var coordSys = parallelModel.coordinateSystem;
	                    var closestDim = coordSys.findClosestAxisDim(point);
	                    if (closestDim) {
	                        var axisIndex = zrUtil.indexOf(coordSys.dimensions, closestDim);
	                        api.dispatchAction({
	                            type: 'parallelAxisExpand',
	                            axisExpandCenter: axisIndex
	                        });
	                    }
	                });
	            }
	        },
	
	        dispose: function (ecModel, api) {
	            api.getZr().off(this.__onMouseDown);
	            api.getZr().off(this.__onMouseUp);
	        }
	    });
	
	    echarts.registerPreprocessor(
	        __webpack_require__(258)
	    );
	


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parallel coordinate system creater.
	 */
	
	
	    var Parallel = __webpack_require__(250);
	
	    function create(ecModel, api) {
	        var coordSysList = [];
	
	        ecModel.eachComponent('parallel', function (parallelModel, idx) {
	            var coordSys = new Parallel(parallelModel, ecModel, api);
	
	            coordSys.name = 'parallel_' + idx;
	            coordSys.resize(parallelModel, api);
	
	            parallelModel.coordinateSystem = coordSys;
	            coordSys.model = parallelModel;
	
	            coordSysList.push(coordSys);
	        });
	
	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'parallel') {
	                var parallelModel = ecModel.queryComponents({
	                    mainType: 'parallel',
	                    index: seriesModel.get('parallelIndex'),
	                    id: seriesModel.get('parallelId')
	                })[0];
	                seriesModel.coordinateSystem = parallelModel.coordinateSystem;
	            }
	        });
	
	        return coordSysList;
	    }
	
	    __webpack_require__(47).register('parallel', {create: create});
	


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parallel Coordinates
	 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
	 */
	
	
	    var layout = __webpack_require__(42);
	    var axisHelper = __webpack_require__(136);
	    var zrUtil = __webpack_require__(25);
	    var ParallelAxis = __webpack_require__(251);
	    var graphic = __webpack_require__(64);
	    var matrix = __webpack_require__(32);
	
	    var each = zrUtil.each;
	
	    var PI = Math.PI;
	
	    function Parallel(parallelModel, ecModel, api) {
	
	        /**
	         * key: dimension
	         * @type {Object.<string, module:echarts/coord/parallel/Axis>}
	         * @private
	         */
	        this._axesMap = {};
	
	        /**
	         * key: dimension
	         * value: {position: [], rotation, }
	         * @type {Object.<string, Object>}
	         * @private
	         */
	        this._axesLayout = {};
	
	        /**
	         * Always follow axis order.
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        this.dimensions = parallelModel.dimensions;
	
	        /**
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._rect;
	
	        /**
	         * @type {module:echarts/coord/parallel/ParallelModel}
	         */
	        this._model = parallelModel;
	
	        this._init(parallelModel, ecModel, api);
	    }
	
	    Parallel.prototype = {
	
	        type: 'parallel',
	
	        constructor: Parallel,
	
	        /**
	         * Initialize cartesian coordinate systems
	         * @private
	         */
	        _init: function (parallelModel, ecModel, api) {
	
	            var dimensions = parallelModel.dimensions;
	            var parallelAxisIndex = parallelModel.parallelAxisIndex;
	
	            each(dimensions, function (dim, idx) {
	
	                var axisIndex = parallelAxisIndex[idx];
	                var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
	
	                var axis = this._axesMap[dim] = new ParallelAxis(
	                    dim,
	                    axisHelper.createScaleByModel(axisModel),
	                    [0, 0],
	                    axisModel.get('type'),
	                    axisIndex
	                );
	
	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');
	
	                // Inject axis into axisModel
	                axisModel.axis = axis;
	
	                // Inject axisModel into axis
	                axis.model = axisModel;
	            }, this);
	        },
	
	        /**
	         * Update axis scale after data processed
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        update: function (ecModel, api) {
	            this._updateAxesFromSeries(this._model, ecModel);
	        },
	
	        /**
	         * Update properties from series
	         * @private
	         */
	        _updateAxesFromSeries: function (parallelModel, ecModel) {
	            ecModel.eachSeries(function (seriesModel) {
	
	                if (!parallelModel.contains(seriesModel, ecModel)) {
	                    return;
	                }
	
	                var data = seriesModel.getData();
	
	                each(this.dimensions, function (dim) {
	                    var axis = this._axesMap[dim];
	                    axis.scale.unionExtentFromData(data, dim);
	                    axisHelper.niceScaleExtent(axis, axis.model);
	                }, this);
	            }, this);
	        },
	
	        /**
	         * Resize the parallel coordinate system.
	         * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
	         * @param {module:echarts/ExtensionAPI} api
	         */
	        resize: function (parallelModel, api) {
	            this._rect = layout.getLayoutRect(
	                parallelModel.getBoxLayoutParams(),
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );
	
	            this._layoutAxes(parallelModel);
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getRect: function () {
	            return this._rect;
	        },
	
	        /**
	         * @private
	         */
	        _layoutAxes: function (parallelModel) {
	            var rect = this._rect;
	            var layout = parallelModel.get('layout');
	            var axes = this._axesMap;
	            var dimensions = this.dimensions;
	
	            var size = [rect.width, rect.height];
	            var sizeIdx = layout === 'horizontal' ? 0 : 1;
	            var layoutLength = size[sizeIdx];
	            var axisLength = size[1 - sizeIdx];
	            var axisExtent = [0, axisLength];
	
	            each(axes, function (axis) {
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
	            });
	
	            var axisExpandable = parallelModel.get('axisExpandable');
	            var axisExpandWidth = parallelModel.get('axisExpandWidth');
	            var axisExpandCenter = parallelModel.get('axisExpandCenter');
	            var axisExpandCount = parallelModel.get('axisExpandCount') || 0;
	            var axisExpandWindow;
	
	            if (axisExpandCenter != null) {
	                // Clamp
	                var left = Math.max(0, Math.floor(axisExpandCenter - (axisExpandCount - 1) / 2));
	                var right = left + axisExpandCount - 1;
	                if (right >= dimensions.length) {
	                    right = dimensions.length - 1;
	                    left = Math.max(0, Math.floor(right - axisExpandCount + 1));
	                }
	                axisExpandWindow = [left, right];
	            }
	
	            var calcPos = (axisExpandable && axisExpandWindow && axisExpandWidth)
	                ? function (axisIndex, layoutLength, axisCount) {
	                    var peekIntervalCount = axisExpandWindow[1] - axisExpandWindow[0];
	                    var otherWidth = (
	                        layoutLength - axisExpandWidth * peekIntervalCount
	                    ) / (axisCount - 1 - peekIntervalCount);
	
	                    var position;
	
	                    if (axisIndex < axisExpandWindow[0]) {
	                        position = (axisIndex - 1) * otherWidth;
	                    }
	                    else if (axisIndex <= axisExpandWindow[1]) {
	                        position = axisExpandWindow[0] * otherWidth
	                            + (axisIndex - axisExpandWindow[0]) * axisExpandWidth;
	                    }
	                    else if (axisIndex === axisCount - 1) {
	                        position = layoutLength;
	                    }
	                    else {
	                        position = axisExpandWindow[0] * otherWidth
	                            + peekIntervalCount * axisExpandWidth
	                            + (axisIndex - axisExpandWindow[1]) * otherWidth;
	                    }
	
	                    return {
	                        position: position,
	                        axisNameAvailableWidth: (
	                            axisExpandWindow[0] < axisIndex && axisIndex < axisExpandWindow[1]
	                        ) ? axisExpandWidth : otherWidth
	                    };
	                }
	                : function (axisIndex, layoutLength, axisCount) {
	                    var step = layoutLength / (axisCount - 1);
	                    return {
	                        position: step * axisIndex,
	                        axisNameAvailableWidth: step
	                    };
	                };
	
	            each(dimensions, function (dim, idx) {
	                var posInfo = calcPos(idx, layoutLength, dimensions.length);
	
	                var positionTable = {
	                    horizontal: {
	                        x: posInfo.position,
	                        y: axisLength
	                    },
	                    vertical: {
	                        x: 0,
	                        y: posInfo.position
	                    }
	                };
	                var rotationTable = {
	                    horizontal: PI / 2,
	                    vertical: 0
	                };
	
	                var position = [
	                    positionTable[layout].x + rect.x,
	                    positionTable[layout].y + rect.y
	                ];
	
	                var rotation = rotationTable[layout];
	                var transform = matrix.create();
	                matrix.rotate(transform, transform, rotation);
	                matrix.translate(transform, transform, position);
	
	                // TODO
	                // tick等排布信息。
	
	                // TODO
	                // 根据axis order 更新 dimensions顺序。
	
	                this._axesLayout[dim] = {
	                    position: position,
	                    rotation: rotation,
	                    transform: transform,
	                    axisNameAvailableWidth: posInfo.axisNameAvailableWidth,
	                    tickDirection: 1,
	                    labelDirection: 1,
	                    axisExpandWindow: axisExpandWindow
	                };
	            }, this);
	        },
	
	        /**
	         * Get axis by dim.
	         * @param {string} dim
	         * @return {module:echarts/coord/parallel/ParallelAxis} [description]
	         */
	        getAxis: function (dim) {
	            return this._axesMap[dim];
	        },
	
	        /**
	         * Convert a dim value of a single item of series data to Point.
	         * @param {*} value
	         * @param {string} dim
	         * @return {Array}
	         */
	        dataToPoint: function (value, dim) {
	            return this.axisCoordToPoint(
	                this._axesMap[dim].dataToCoord(value),
	                dim
	            );
	        },
	
	        /**
	         * Travel data for one time, get activeState of each data item.
	         * @param {module:echarts/data/List} data
	         * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
	         *                            {number} dataIndex
	         * @param {Object} context
	         */
	        eachActiveState: function (data, callback, context) {
	            var dimensions = this.dimensions;
	            var axesMap = this._axesMap;
	            var hasActiveSet = this.hasAxisbrushed();
	
	            for (var i = 0, len = data.count(); i < len; i++) {
	                var values = data.getValues(dimensions, i);
	                var activeState;
	
	                if (!hasActiveSet) {
	                    activeState = 'normal';
	                }
	                else {
	                    activeState = 'active';
	                    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                        var dimName = dimensions[j];
	                        var state = axesMap[dimName].model.getActiveState(values[j], j);
	
	                        if (state === 'inactive') {
	                            activeState = 'inactive';
	                            break;
	                        }
	                    }
	                }
	
	                callback.call(context, activeState, i);
	            }
	        },
	
	        /**
	         * Whether has any activeSet.
	         * @return {boolean}
	         */
	        hasAxisbrushed: function () {
	            var dimensions = this.dimensions;
	            var axesMap = this._axesMap;
	            var hasActiveSet = false;
	
	            for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {
	                    hasActiveSet = true;
	                }
	            }
	
	            return hasActiveSet;
	        },
	
	        /**
	         * Convert coords of each axis to Point.
	         *  Return point. For example: [10, 20]
	         * @param {Array.<number>} coords
	         * @param {string} dim
	         * @return {Array.<number>}
	         */
	        axisCoordToPoint: function (coord, dim) {
	            var axisLayout = this._axesLayout[dim];
	            return graphic.applyTransform([coord, 0], axisLayout.transform);
	        },
	
	        /**
	         * Get axis layout.
	         */
	        getAxisLayout: function (dim) {
	            return zrUtil.clone(this._axesLayout[dim]);
	        },
	
	        findClosestAxisDim: function (point) {
	            var axisDim;
	            var minDist = Infinity;
	
	            zrUtil.each(this._axesLayout, function (axisLayout, dim) {
	                var localPoint = graphic.applyTransform(point, axisLayout.transform, true);
	                var extent = this._axesMap[dim].getExtent();
	
	                if (localPoint[0] < extent[0] || localPoint[0] > extent[1]) {
	                    return;
	                }
	
	                var dist = Math.abs(localPoint[1]);
	                if (dist < minDist) {
	                    minDist = dist;
	                    axisDim = dim;
	                }
	            }, this);
	
	            return axisDim;
	        }
	
	    };
	
	    module.exports = Parallel;


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	
	    /**
	     * @constructor module:echarts/coord/parallel/ParallelAxis
	     * @extends {module:echarts/coord/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     */
	    var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {
	
	        Axis.call(this, dim, scale, coordExtent);
	
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';
	
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.axisIndex = axisIndex;
	    };
	
	    ParallelAxis.prototype = {
	
	        constructor: ParallelAxis,
	
	        /**
	         * Axis model
	         * @param {module:echarts/coord/parallel/AxisModel}
	         */
	        model: null
	
	    };
	
	    zrUtil.inherits(ParallelAxis, Axis);
	
	    module.exports = ParallelAxis;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Component = __webpack_require__(40);
	
	    __webpack_require__(253);
	
	    Component.extend({
	
	        type: 'parallel',
	
	        dependencies: ['parallelAxis'],
	
	        /**
	         * @type {module:echarts/coord/parallel/Parallel}
	         */
	        coordinateSystem: null,
	
	        /**
	         * Each item like: 'dim0', 'dim1', 'dim2', ...
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,
	
	        /**
	         * Coresponding to dimensions.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        parallelAxisIndex: null,
	
	        layoutMode: 'box',
	
	        defaultOption: {
	            zlevel: 0,
	            z: 0,
	            left: 80,
	            top: 60,
	            right: 80,
	            bottom: 60,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,
	
	            layout: 'horizontal',      // 'horizontal' or 'vertical'
	
	            // FIXME
	            // naming?
	            axisExpandable: false,
	            axisExpandCenter: null,
	            axisExpandCount: 0,
	            axisExpandWidth: 50,      // FIXME '10%' ?
	
	            parallelAxisDefault: null
	        },
	
	        /**
	         * @override
	         */
	        init: function () {
	            Component.prototype.init.apply(this, arguments);
	
	            this.mergeOption({});
	        },
	
	        /**
	         * @override
	         */
	        mergeOption: function (newOption) {
	            var thisOption = this.option;
	
	            newOption && zrUtil.merge(thisOption, newOption, true);
	
	            this._initDimensions();
	        },
	
	        /**
	         * Whether series or axis is in this coordinate system.
	         * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
	         * @param {module:echarts/model/Global} ecModel
	         */
	        contains: function (model, ecModel) {
	            var parallelIndex = model.get('parallelIndex');
	            return parallelIndex != null
	                && ecModel.getComponent('parallel', parallelIndex) === this;
	        },
	
	        setAxisExpand: function (opt) {
	            zrUtil.each(
	                ['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth'],
	                function (name) {
	                    if (opt.hasOwnProperty(name)) {
	                        this.option[name] = opt[name];
	                    }
	                },
	                this
	            );
	        },
	
	        /**
	         * @private
	         */
	        _initDimensions: function () {
	            var dimensions = this.dimensions = [];
	            var parallelAxisIndex = this.parallelAxisIndex = [];
	
	            var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
	                // Can not use this.contains here, because
	                // initialization has not been completed yet.
	                return axisModel.get('parallelIndex') === this.componentIndex;
	            });
	
	            zrUtil.each(axisModels, function (axisModel) {
	                dimensions.push('dim' + axisModel.get('dim'));
	                parallelAxisIndex.push(axisModel.componentIndex);
	            });
	        }
	
	    });
	


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var ComponentModel = __webpack_require__(40);
	    var zrUtil = __webpack_require__(25);
	    var makeStyleMapper = __webpack_require__(36);
	    var axisModelCreator = __webpack_require__(149);
	    var numberUtil = __webpack_require__(28);
	
	    var AxisModel = ComponentModel.extend({
	
	        type: 'baseParallelAxis',
	
	        /**
	         * @type {module:echarts/coord/parallel/Axis}
	         */
	        axis: null,
	
	        /**
	         * @type {Array.<Array.<number>}
	         * @readOnly
	         */
	        activeIntervals: [],
	
	        /**
	         * @return {Object}
	         */
	        getAreaSelectStyle: function () {
	            return makeStyleMapper(
	                [
	                    ['fill', 'color'],
	                    ['lineWidth', 'borderWidth'],
	                    ['stroke', 'borderColor'],
	                    ['width', 'width'],
	                    ['opacity', 'opacity']
	                ]
	            ).call(this.getModel('areaSelectStyle'));
	        },
	
	        /**
	         * The code of this feature is put on AxisModel but not ParallelAxis,
	         * because axisModel can be alive after echarts updating but instance of
	         * ParallelAxis having been disposed. this._activeInterval should be kept
	         * when action dispatched (i.e. legend click).
	         *
	         * @param {Array.<Array<number>>} intervals interval.length === 0
	         *                                          means set all active.
	         * @public
	         */
	        setActiveIntervals: function (intervals) {
	            var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);
	
	            // Normalize
	            if (activeIntervals) {
	                for (var i = activeIntervals.length - 1; i >= 0; i--) {
	                    numberUtil.asc(activeIntervals[i]);
	                }
	            }
	        },
	
	        /**
	         * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
	         *                         value can not be input.
	         * @return {string} 'normal': no activeIntervals set,
	         *                  'active',
	         *                  'inactive'.
	         * @public
	         */
	        getActiveState: function (value) {
	            var activeIntervals = this.activeIntervals;
	
	            if (!activeIntervals.length) {
	                return 'normal';
	            }
	
	            if (value == null) {
	                return 'inactive';
	            }
	
	            for (var i = 0, len = activeIntervals.length; i < len; i++) {
	                if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
	                    return 'active';
	                }
	            }
	            return 'inactive';
	        }
	
	    });
	
	    var defaultOption = {
	
	        type: 'value',
	
	        /**
	         * @type {Array.<number>}
	         */
	        dim: null, // 0, 1, 2, ...
	
	        // parallelIndex: null,
	
	        areaSelectStyle: {
	            width: 20,
	            borderWidth: 1,
	            borderColor: 'rgba(160,197,232)',
	            color: 'rgba(160,197,232)',
	            opacity: 0.3
	        },
	
	        realtime: true, // Whether realtime update view when select.
	
	        z: 10
	    };
	
	    zrUtil.merge(AxisModel.prototype, __webpack_require__(151));
	
	    function getAxisType(axisName, option) {
	        return option.type || (option.data ? 'category' : 'value');
	    }
	
	    axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);
	
	    module.exports = AxisModel;


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(249);
	    __webpack_require__(255);
	    __webpack_require__(256);
	


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    /**
	     * @payload
	     * @property {string} parallelAxisId
	     * @property {Array.<Array.<number>>} intervals
	     */
	    var actionInfo = {
	        type: 'axisAreaSelect',
	        event: 'axisAreaSelected',
	        update: 'updateVisual'
	    };
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	        ecModel.eachComponent(
	            {mainType: 'parallelAxis', query: payload},
	            function (parallelAxisModel) {
	                parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
	            }
	        );
	    });
	
	    /**
	     * @payload
	     */
	    echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {
	        ecModel.eachComponent(
	            {mainType: 'parallel', query: payload},
	            function (parallelModel) {
	                parallelModel.setAxisExpand(payload);
	            }
	        );
	
	    });


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var AxisBuilder = __webpack_require__(154);
	    var BrushController = __webpack_require__(257);
	    var graphic = __webpack_require__(64);
	
	    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	
	    var AxisView = __webpack_require__(22).extendComponentView({
	
	        type: 'parallelAxis',
	
	        /**
	         * @override
	         */
	        init: function (ecModel, api) {
	            AxisView.superApply(this, 'init', arguments);
	
	            /**
	             * @type {module:echarts/component/helper/BrushController}
	             */
	            (this._brushController = new BrushController(api.getZr()))
	                .on('brush', zrUtil.bind(this._onBrush, this));
	        },
	
	        /**
	         * @override
	         */
	        render: function (axisModel, ecModel, api, payload) {
	            if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
	                return;
	            }
	
	            this.axisModel = axisModel;
	            this.api = api;
	
	            this.group.removeAll();
	
	            var oldAxisGroup = this._axisGroup;
	            this._axisGroup = new graphic.Group();
	            this.group.add(this._axisGroup);
	
	            if (!axisModel.get('show')) {
	                return;
	            }
	
	            var coordSys = ecModel.getComponent(
	                'parallel', axisModel.get('parallelIndex')
	            ).coordinateSystem;
	
	            var areaSelectStyle = axisModel.getAreaSelectStyle();
	            var areaWidth = areaSelectStyle.width;
	
	            var dim = axisModel.axis.dim;
	            var axisLayout = coordSys.getAxisLayout(dim);
	
	            // Fetch from axisModel by default.
	            var axisLabelShow;
	            var axisIndex = zrUtil.indexOf(coordSys.dimensions, dim);
	
	            var axisExpandWindow = axisLayout.axisExpandWindow;
	            if (axisExpandWindow
	                && (axisIndex <= axisExpandWindow[0] || axisIndex >= axisExpandWindow[1])
	            ) {
	                axisLabelShow = false;
	            }
	
	            var builderOpt = zrUtil.extend(
	                {
	                    axisLabelShow: axisLabelShow,
	                    strokeContainThreshold: areaWidth
	                },
	                axisLayout
	            );
	
	            var axisBuilder = new AxisBuilder(axisModel, builderOpt);
	
	            zrUtil.each(elementList, axisBuilder.add, axisBuilder);
	
	            this._axisGroup.add(axisBuilder.getGroup());
	
	            this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth);
	
	            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	        },
	
	        _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, areaWidth) {
	            // After filtering, axis may change, select area needs to be update.
	            var axis = axisModel.axis;
	            var coverInfoList = zrUtil.map(axisModel.activeIntervals, function (interval) {
	                return {
	                    brushType: 'lineX',
	                    panelId: 'pl',
	                    range: [
	                        axis.dataToCoord(interval[0], true),
	                        axis.dataToCoord(interval[1], true)
	                    ]
	                };
	            });
	
	            var extent = axis.getExtent();
	            var extentLen = extent[1] - extent[0];
	            var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.
	
	            // width/height might be negative, which will be
	            // normalized in BoundingRect.
	            var rect = graphic.BoundingRect.create({
	                x: extent[0],
	                y: -areaWidth / 2,
	                width: extentLen,
	                height: areaWidth
	            });
	            rect.x -= extra;
	            rect.width += 2 * extra;
	
	            this._brushController
	                .mount({
	                    enableGlobalPan: true,
	                    rotation: builderOpt.rotation,
	                    position: builderOpt.position
	                })
	                .setPanels([{
	                    panelId: 'pl',
	                    rect: rect
	                }])
	                .enableBrush({
	                    brushType: 'lineX',
	                    brushStyle: areaSelectStyle,
	                    removeOnClick: true
	                })
	                .updateCovers(coverInfoList);
	        },
	
	        _onBrush: function (coverInfoList, opt) {
	            // Do not cache these object, because the mey be changed.
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;
	
	            var intervals = zrUtil.map(coverInfoList, function (coverInfo) {
	                return [
	                    axis.coordToData(coverInfo.range[0], true),
	                    axis.coordToData(coverInfo.range[1], true)
	                ];
	            });
	
	            // If realtime is true, action is not dispatched on drag end, because
	            // the drag end emits the same params with the last drag move event,
	            // and may have some delay when using touch pad.
	            if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) { // jshint ignore:line
	                this.api.dispatchAction({
	                    type: 'axisAreaSelect',
	                    parallelAxisId: axisModel.id,
	                    intervals: intervals
	                });
	            }
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            this._brushController.dispose();
	        }
	    });
	
	    function fromAxisAreaSelect(axisModel, ecModel, payload) {
	        return payload
	            && payload.type === 'axisAreaSelect'
	            && ecModel.findComponents(
	                {mainType: 'parallelAxis', query: payload}
	            )[0] === axisModel;
	    }
	
	    module.exports = AxisView;


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Box selection tool.
	 *
	 * @module echarts/component/helper/BrushController
	 */
	
	
	
	    var Eventful = __webpack_require__(54);
	    var zrUtil = __webpack_require__(25);
	    var BoundingRect = __webpack_require__(30);
	    var graphic = __webpack_require__(64);
	    var interactionMutex = __webpack_require__(199);
	    var DataDiffer = __webpack_require__(120);
	
	    var curry = zrUtil.curry;
	    var each = zrUtil.each;
	    var map = zrUtil.map;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathPow = Math.pow;
	
	    var COVER_Z = 10000;
	    var UNSELECT_THRESHOLD = 6;
	    var MIN_RESIZE_LINE_WIDTH = 6;
	    var MUTEX_RESOURCE_KEY = 'globalPan';
	
	    var DIRECTION_MAP = {
	        w: [0, 0],
	        e: [0, 1],
	        n: [1, 0],
	        s: [1, 1]
	    };
	    var CURSOR_MAP = {
	        w: 'ew',
	        e: 'ew',
	        n: 'ns',
	        s: 'ns',
	        ne: 'nesw',
	        sw: 'nesw',
	        nw: 'nwse',
	        se: 'nwse'
	    };
	    var DEFAULT_BRUSH_OPT = {
	        brushStyle: {
	            lineWidth: 2,
	            stroke: 'rgba(0,0,0,0.3)',
	            fill: 'rgba(0,0,0,0.1)'
	        },
	        transformable: true,
	        brushMode: 'single',
	        removeOnClick: false
	    };
	
	    var baseUID = 0;
	
	    /**
	     * @alias module:echarts/component/helper/BrushController
	     * @constructor
	     * @mixin {module:zrender/mixin/Eventful}
	     * @event module:echarts/component/helper/BrushController#brush
	     *        params:
	     *            areas: Array.<Array>, coord relates to container group,
	     *                                    If no container specified, to global.
	     *            opt {
	     *                isEnd: boolean,
	     *                removeOnClick: boolean
	     *            }
	     *
	     * @param {module:zrender/zrender~ZRender} zr
	     */
	    function BrushController(zr) {
	
	        if (__DEV__) {
	            zrUtil.assert(zr);
	        }
	
	        Eventful.call(this);
	
	        /**
	         * @type {module:zrender/zrender~ZRender}
	         * @private
	         */
	        this._zr = zr;
	
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new graphic.Group();
	
	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {string}
	         */
	        this._brushType;
	
	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {Object}
	         */
	        this._brushOption;
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._panels;
	
	        /**
	         * @private
	         * @type {Array.<nubmer>}
	         */
	        this._track = [];
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._dragging;
	
	        /**
	         * @private
	         * @type {Array}
	         */
	        this._covers = [];
	
	        /**
	         * @private
	         * @type {moudule:zrender/container/Group}
	         */
	        this._creatingCover;
	
	        /**
	         * true means global panel
	         * @private
	         * @type {module:zrender/container/Group|boolean}
	         */
	        this._creatingPanel;
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._enableGlobalPan;
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        if (__DEV__) {
	            this._mounted;
	        }
	
	        /**
	         * @private
	         * @type {string}
	         */
	        this._uid = 'brushController_' + baseUID++;
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._handlers = {};
	        each(mouseHandlers, function (handler, eventName) {
	            this._handlers[eventName] = zrUtil.bind(handler, this);
	        }, this);
	    }
	
	    BrushController.prototype = {
	
	        constructor: BrushController,
	
	        /**
	         * If set to null/undefined/false, select disabled.
	         * @param {Object} brushOption
	         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false
	         *                          If pass false/null/undefined, disable brush.
	         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'
	         * @param {boolean} [brushOption.transformable=true]
	         * @param {boolean} [brushOption.removeOnClick=false]
	         * @param {Object} [brushOption.brushStyle]
	         * @param {number} [brushOption.brushStyle.width]
	         * @param {number} [brushOption.brushStyle.lineWidth]
	         * @param {string} [brushOption.brushStyle.stroke]
	         * @param {string} [brushOption.brushStyle.fill]
	         */
	        enableBrush: function (brushOption) {
	            if (__DEV__) {
	                zrUtil.assert(this._mounted);
	            }
	
	            this._brushType && doDisableBrush(this);
	            brushOption.brushType && doEnableBrush(this, brushOption);
	
	            return this;
	        },
	
	        /**
	         * @param {Array.<Object>} panelOpts If not pass, it is global brush.
	         *        Each items: {panelId, rect}
	         */
	        setPanels: function (panelOpts) {
	            var oldPanels = this._panels || {};
	            var newPanels = this._panels = panelOpts && panelOpts.length && {};
	            var thisGroup = this.group;
	
	            newPanels && each(panelOpts, function (panelOpt) {
	                var panelId = panelOpt.panelId;
	                var panel = oldPanels[panelId];
	                if (!panel) {
	                    panel = new graphic.Rect({
	                        silent: true,
	                        invisible: true
	                    });
	                    thisGroup.add(panel);
	                }
	
	                var rect = panelOpt.rect;
	                // Using BoundingRect to normalize negative width/height.
	                if (!(rect instanceof BoundingRect)) {
	                    rect = BoundingRect.create(rect);
	                }
	
	                panel.attr('shape', rect.plain());
	                panel.__brushPanelId = panelId;
	                newPanels[panelId] = panel;
	                oldPanels[panelId] = null;
	            });
	
	            each(oldPanels, function (panel) {
	                panel && thisGroup.remove(panel);
	            });
	
	            return this;
	        },
	
	        /**
	         * @param {Object} [opt]
	         * @return {boolean} [opt.enableGlobalPan=false]
	         * @return {boolean} [opt.position=[0, 0]]
	         * @return {boolean} [opt.rotation=0]
	         * @return {boolean} [opt.scale=[1, 1]]
	         */
	        mount: function (opt) {
	            opt = opt || {};
	
	            if (__DEV__) {
	                this._mounted = true; // should be at first.
	            }
	
	            this._enableGlobalPan = opt.enableGlobalPan;
	
	            var thisGroup = this.group;
	            this._zr.add(thisGroup);
	
	            thisGroup.attr({
	                position: opt.position || [0, 0],
	                rotation: opt.rotation || 0,
	                scale: opt.scale || [1, 1]
	            });
	
	            return this;
	        },
	
	        eachCover: function (cb, context) {
	            each(this._covers, cb, context);
	        },
	
	        /**
	         * Update covers.
	         * @param {Array.<Object>} brushOptionList Like:
	         *        [
	         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},
	         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},
	         *            ...
	         *        ]
	         *        `brushType` is required in each cover info.
	         *        `id` is not mandatory.
	         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.
	         *        If brushOptionList is null/undefined, all covers removed.
	         */
	        updateCovers: function (brushOptionList) {
	            if (__DEV__) {
	                zrUtil.assert(this._mounted);
	            }
	
	            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	            });
	
	            var tmpIdPrefix = '\0-brush-index-';
	            var oldCovers = this._covers;
	            var newCovers = this._covers = [];
	            var controller = this;
	            var creatingCover = this._creatingCover;
	
	            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))
	                .add(addOrUpdate)
	                .update(addOrUpdate)
	                .remove(remove)
	                .execute();
	
	            return this;
	
	            function getKey(brushOption, index) {
	                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)
	                    + '-' + brushOption.brushType;
	            }
	
	            function oldGetKey(cover, index) {
	                return getKey(cover.__brushOption, index);
	            }
	
	            function addOrUpdate(newIndex, oldIndex) {
	                var newBrushOption = brushOptionList[newIndex];
	                // Consider setOption in event listener of brushSelect,
	                // where updating cover when creating should be forbiden.
	                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	                    newCovers[newIndex] = oldCovers[oldIndex];
	                }
	                else {
	                    var cover = newCovers[newIndex] = oldIndex != null
	                        ? (
	                            oldCovers[oldIndex].__brushOption = newBrushOption,
	                            oldCovers[oldIndex]
	                        )
	                        : endCreating(controller, createCover(controller, newBrushOption));
	                    updateCoverAfterCreation(controller, cover);
	                }
	            }
	
	            function remove(oldIndex) {
	                if (oldCovers[oldIndex] !== creatingCover) {
	                    controller.group.remove(oldCovers[oldIndex]);
	                }
	            }
	        },
	
	        unmount: function () {
	            this.enableBrush(false);
	
	            // container may 'removeAll' outside.
	            clearCovers(this);
	            this._zr.remove(this.group);
	
	            if (__DEV__) {
	                this._mounted = false; // should be at last.
	            }
	
	            return this;
	        },
	
	        dispose: function () {
	            this.unmount();
	            this.off();
	        }
	    };
	
	    zrUtil.mixin(BrushController, Eventful);
	
	
	    function doEnableBrush(controller, brushOption) {
	        var zr = controller._zr;
	
	        // Consider roam, which takes globalPan too.
	        if (!controller._enableGlobalPan) {
	            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	        }
	
	        each(controller._handlers, function (handler, eventName) {
	            zr.on(eventName, handler);
	        });
	
	        controller._brushType = brushOption.brushType;
	        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	    }
	
	    function doDisableBrush(controller) {
	        var zr = controller._zr;
	
	        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);
	
	        each(controller._handlers, function (handler, eventName) {
	            zr.off(eventName, handler);
	        });
	
	        controller._brushType = controller._brushOption = null;
	    }
	
	    function createCover(controller, brushOption) {
	        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	        updateZ(cover);
	        cover.__brushOption = brushOption;
	        controller.group.add(cover);
	        return cover;
	    }
	
	    function endCreating(controller, creatingCover) {
	        var coverRenderer = getCoverRenderer(creatingCover);
	        if (coverRenderer.endCreating) {
	            coverRenderer.endCreating(controller, creatingCover);
	            updateZ(creatingCover);
	        }
	        return creatingCover;
	    }
	
	    function updateCoverShape(controller, cover) {
	        var brushOption = cover.__brushOption;
	        getCoverRenderer(cover).updateCoverShape(
	            controller, cover, brushOption.range, brushOption
	        );
	    }
	
	    function updateZ(group) {
	        group.traverse(function (el) {
	            el.z = COVER_Z;
	            el.z2 = COVER_Z; // Consider in given container.
	        });
	    }
	
	    function updateCoverAfterCreation(controller, cover) {
	        getCoverRenderer(cover).updateCommon(controller, cover);
	        updateCoverShape(controller, cover);
	    }
	
	    function getCoverRenderer(cover) {
	        return coverRenderers[cover.__brushOption.brushType];
	    }
	
	    function getPanelByPoint(controller, x, y) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true; // Global panel
	        }
	        var panel;
	        each(panels, function (pn) {
	            pn.contain(x, y) && (panel = pn);
	        });
	        return panel;
	    }
	
	    function getPanelByCover(controller, cover) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true; // Global panel
	        }
	        var panelId = cover.__brushOption.panelId;
	        // User may give cover without coord sys info,
	        // which is then treated as global panel.
	        return panelId != null ? panels[panelId] : true;
	    }
	
	    function clearCovers(controller) {
	        var covers = controller._covers;
	        var originalLength = covers.length;
	        each(covers, function (cover) {
	            controller.group.remove(cover);
	        }, controller);
	        covers.length = 0;
	
	        return !!originalLength;
	    }
	
	    function trigger(controller, opt) {
	        var areas = map(controller._covers, function (cover) {
	            var brushOption = cover.__brushOption;
	            var range = zrUtil.clone(brushOption.range);
	
	            return {
	                brushType: brushOption.brushType,
	                panelId: brushOption.panelId,
	                range: range
	            };
	        });
	
	        controller.trigger('brush', areas, {
	            isEnd: !!opt.isEnd,
	            removeOnClick: !!opt.removeOnClick
	        });
	    }
	
	    function shouldShowCover(controller) {
	        var track = controller._track;
	
	        if (!track.length) {
	            return false;
	        }
	
	        var p2 = track[track.length - 1];
	        var p1 = track[0];
	        var dx = p2[0] - p1[0];
	        var dy = p2[1] - p1[1];
	        var dist = mathPow(dx * dx + dy * dy, 0.5);
	
	        return dist > UNSELECT_THRESHOLD;
	    }
	
	    function getTrackEnds(track) {
	        var tail = track.length - 1;
	        tail < 0 && (tail = 0);
	        return [track[0], track[tail]];
	    }
	
	    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	        var cover = new graphic.Group();
	
	        cover.add(new graphic.Rect({
	            name: 'main',
	            style: makeStyle(brushOption),
	            silent: true,
	            draggable: true,
	            cursor: 'move',
	            drift: curry(doDrift, controller, cover, 'nswe'),
	            ondragend: curry(trigger, controller, {isEnd: true})
	        }));
	
	        each(
	            edgeNames,
	            function (name) {
	                cover.add(new graphic.Rect({
	                    name: name,
	                    style: {opacity: 0},
	                    draggable: true,
	                    silent: true,
	                    invisible: true,
	                    drift: curry(doDrift, controller, cover, name),
	                    ondragend: curry(trigger, controller, {isEnd: true})
	                }));
	            }
	        );
	
	        return cover;
	    }
	
	    function updateBaseRect(controller, cover, localRange, brushOption) {
	        var lineWidth = brushOption.brushStyle.lineWidth || 0;
	        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	        var x = localRange[0][0];
	        var y = localRange[1][0];
	        var xa = x - lineWidth / 2;
	        var ya = y - lineWidth / 2;
	        var x2 = localRange[0][1];
	        var y2 = localRange[1][1];
	        var x2a = x2 - handleSize + lineWidth / 2;
	        var y2a = y2 - handleSize + lineWidth / 2;
	        var width = x2 - x;
	        var height = y2 - y;
	        var widtha = width + lineWidth;
	        var heighta = height + lineWidth;
	
	        updateRectShape(controller, cover, 'main', x, y, width, height);
	
	        if (brushOption.transformable) {
	            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);
	
	            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	        }
	    }
	
	    function updateCommon(controller, cover) {
	        var brushOption = cover.__brushOption;
	        var transformable = brushOption.transformable;
	
	        var mainEl = cover.childAt(0);
	        mainEl.useStyle(makeStyle(brushOption));
	        mainEl.attr({
	            silent: !transformable,
	            cursor: transformable ? 'move' : 'default'
	        });
	
	        each(
	            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],
	            function (name) {
	                var el = cover.childOfName(name);
	                var globalDir = getGlobalDirection(controller, name);
	
	                el && el.attr({
	                    silent: !transformable,
	                    invisible: !transformable,
	                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	                });
	            }
	        );
	    }
	
	    function updateRectShape(controller, cover, name, x, y, w, h) {
	        var el = cover.childOfName(name);
	        el && el.setShape(pointsToRect(
	            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])
	        ));
	    }
	
	    function makeStyle(brushOption) {
	        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);
	    }
	
	    function formatRectRange(x, y, x2, y2) {
	        var min = [mathMin(x, x2), mathMin(y, y2)];
	        var max = [mathMax(x, x2), mathMax(y, y2)];
	
	        return [
	            [min[0], max[0]], // x range
	            [min[1], max[1]] // y range
	        ];
	    }
	
	    function getTransform(controller) {
	        return graphic.getTransform(controller.group);
	    }
	
	    function getGlobalDirection(controller, localDirection) {
	        if (localDirection.length > 1) {
	            localDirection = localDirection.split('');
	            var globalDir = [
	                getGlobalDirection(controller, localDirection[0]),
	                getGlobalDirection(controller, localDirection[1])
	            ];
	            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	            return globalDir.join('');
	        }
	        else {
	            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};
	            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};
	            var globalDir = graphic.transformDirection(
	                map[localDirection], getTransform(controller)
	            );
	            return inverseMap[globalDir];
	        }
	    }
	
	    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	        var brushOption = cover.__brushOption;
	        var rectRange = toRectRange(brushOption.range);
	        var localDelta = toLocalDelta(controller, dx, dy);
	
	        each(name.split(''), function (namePart) {
	            var ind = DIRECTION_MAP[namePart];
	            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	        });
	
	        brushOption.range = fromRectRange(formatRectRange(
	            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]
	        ));
	
	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, {isEnd: false});
	    }
	
	    function driftPolygon(controller, cover, dx, dy, e) {
	        var range = cover.__brushOption.range;
	        var localDelta = toLocalDelta(controller, dx, dy);
	
	        each(range, function (point) {
	            point[0] += localDelta[0];
	            point[1] += localDelta[1];
	        });
	
	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, {isEnd: false});
	    }
	
	    function toLocalDelta(controller, dx, dy) {
	        var thisGroup = controller.group;
	        var localD = thisGroup.transformCoordToLocal(dx, dy);
	        var localZero = thisGroup.transformCoordToLocal(0, 0);
	
	        return [localD[0] - localZero[0], localD[1] - localZero[1]];
	    }
	
	    function clipByPanel(controller, cover, data) {
	        var panel = getPanelByCover(controller, cover);
	        if (panel === true) { // Global panel
	            return zrUtil.clone(data);
	        }
	
	        var panelRect = panel.getBoundingRect();
	
	        return zrUtil.map(data, function (point) {
	            var x = point[0];
	            x = mathMax(x, panelRect.x);
	            x = mathMin(x, panelRect.x + panelRect.width);
	            var y = point[1];
	            y = mathMax(y, panelRect.y);
	            y = mathMin(y, panelRect.y + panelRect.height);
	            return [x, y];
	        });
	    }
	
	    function pointsToRect(points) {
	        var xmin = mathMin(points[0][0], points[1][0]);
	        var ymin = mathMin(points[0][1], points[1][1]);
	        var xmax = mathMax(points[0][0], points[1][0]);
	        var ymax = mathMax(points[0][1], points[1][1]);
	
	        return {
	            x: xmin,
	            y: ymin,
	            width: xmax - xmin,
	            height: ymax - ymin
	        };
	    }
	
	    function resetCursor(controller, e) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var zr = controller._zr;
	
	        if (controller._brushType) { // If active
	            var panels = controller._panels;
	            var covers = controller._covers;
	            var inCover;
	
	            for (var i = 0; i < covers.length; i++) {
	                if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {
	                    inCover = true;
	                    break;
	                }
	            }
	
	            if (!inCover) {
	                if (panels) { // Brush on panels
	                    each(panels, function (panel) {
	                        panel.contain(x, y) && zr.setCursorStyle('crosshair');
	                    });
	                }
	                else { // Global brush
	                    zr.setCursorStyle('crosshair');
	                }
	            }
	        }
	    }
	
	    function preventDefault(e) {
	        var rawE = e.event;
	        rawE.preventDefault && rawE.preventDefault();
	    }
	
	    function mainShapeContain(cover, x, y) {
	        return cover.childOfName('main').contain(x, y);
	    }
	
	    function updateCoverByMouse(controller, e, isEnd) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var creatingCover = controller._creatingCover;
	        var panel = controller._creatingPanel;
	        var thisBrushOption = controller._brushOption;
	        var eventParams;
	
	        controller._track.push(controller.group.transformCoordToLocal(x, y));
	
	        if (shouldShowCover(controller) || creatingCover) {
	
	            if (panel && !creatingCover) {
	                thisBrushOption.brushMode === 'single' && clearCovers(controller);
	                var brushOption = zrUtil.clone(thisBrushOption);
	                brushOption.panelId = panel === true ? null : panel.__brushPanelId;
	                creatingCover = controller._creatingCover = createCover(controller, brushOption);
	                controller._covers.push(creatingCover);
	            }
	
	            if (creatingCover) {
	                var coverRenderer = coverRenderers[controller._brushType];
	                var coverBrushOption = creatingCover.__brushOption;
	
	                coverBrushOption.range = coverRenderer.getCreatingRange(
	                    clipByPanel(controller, creatingCover, controller._track)
	                );
	
	                if (isEnd) {
	                    endCreating(controller, creatingCover);
	                    coverRenderer.updateCommon(controller, creatingCover);
	                }
	
	                updateCoverShape(controller, creatingCover);
	
	                eventParams = {isEnd: isEnd};
	            }
	        }
	        else if (
	            isEnd
	            && thisBrushOption.brushMode === 'single'
	            && thisBrushOption.removeOnClick
	        ) {
	            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	            // But a single click do not clear covers, because user may have casual
	            // clicks (for example, click on other component and do not expect covers
	            // disappear).
	            // Only some cover removed, trigger action, but not every click trigger action.
	            if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {
	                eventParams = {isEnd: isEnd, removeOnClick: true};
	            }
	        }
	
	        return eventParams;
	    }
	
	    var mouseHandlers = {
	
	        mousedown: function (e) {
	            if (this._dragging) {
	                // In case some browser do not support globalOut,
	                // and release mose out side the browser.
	                handleDragEnd.call(this, e);
	            }
	            else if (!e.target || !e.target.draggable) {
	
	                preventDefault(e);
	
	                var x = e.offsetX;
	                var y = e.offsetY;
	
	                this._creatingCover = null;
	                var panel = this._creatingPanel = getPanelByPoint(this, x, y);
	
	                if (panel) {
	                    this._dragging = true;
	                    this._track = [this.group.transformCoordToLocal(x, y)];
	                }
	            }
	        },
	
	        mousemove: function (e) {
	            // set Cursor
	            resetCursor(this, e);
	
	            if (this._dragging) {
	
	                preventDefault(e);
	
	                var eventParams = updateCoverByMouse(this, e, false);
	
	                eventParams && trigger(this, eventParams);
	            }
	        },
	
	        mouseup: handleDragEnd //,
	
	        // FIXME
	        // in tooltip, globalout should not be triggered.
	        // globalout: handleDragEnd
	    };
	
	    function handleDragEnd(e) {
	        if (this._dragging) {
	
	            preventDefault(e);
	
	            var eventParams = updateCoverByMouse(this, e, true);
	
	            this._dragging = false;
	            this._track = [];
	            this._creatingCover = null;
	
	            // trigger event shoule be at final, after procedure will be nested.
	            eventParams && trigger(this, eventParams);
	        }
	    }
	
	    /**
	     * key: brushType
	     * @type {Object}
	     */
	    var coverRenderers = {
	
	        lineX: getLineRenderer(0),
	
	        lineY: getLineRenderer(1),
	
	        rect: {
	            createCover: function (controller, brushOption) {
	                return createBaseRectCover(
	                    curry(
	                        driftRect,
	                        function (range) {
	                            return range;
	                        },
	                        function (range) {
	                            return range;
	                        }
	                    ),
	                    controller,
	                    brushOption,
	                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']
	                );
	            },
	            getCreatingRange: function (localTrack) {
	                var ends = getTrackEnds(localTrack);
	                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                updateBaseRect(controller, cover, localRange, brushOption);
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        },
	
	        polygon: {
	            createCover: function (controller, brushOption) {
	                var cover = new graphic.Group();
	
	                // Do not use graphic.Polygon because graphic.Polyline do not close the
	                // border of the shape when drawing, which is a better experience for user.
	                cover.add(new graphic.Polyline({
	                    name: 'main',
	                    style: makeStyle(brushOption),
	                    silent: true
	                }));
	
	                return cover;
	            },
	            getCreatingRange: function (localTrack) {
	                return localTrack;
	            },
	            endCreating: function (controller, cover) {
	                cover.remove(cover.childAt(0));
	                // Use graphic.Polygon close the shape.
	                cover.add(new graphic.Polygon({
	                    name: 'main',
	                    draggable: true,
	                    drift: curry(driftPolygon, controller, cover),
	                    ondragend: curry(trigger, controller, {isEnd: true})
	                }));
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                cover.childAt(0).setShape({
	                    points: clipByPanel(controller, cover, localRange)
	                });
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        }
	    };
	
	    function getLineRenderer(xyIndex) {
	        return {
	            createCover: function (controller, brushOption) {
	                return createBaseRectCover(
	                    curry(
	                        driftRect,
	                        function (range) {
	                            var rectRange = [range, [0, 100]];
	                            xyIndex && rectRange.reverse();
	                            return rectRange;
	                        },
	                        function (rectRange) {
	                            return rectRange[xyIndex];
	                        }
	                    ),
	                    controller,
	                    brushOption,
	                    [['w', 'e'], ['n', 's']][xyIndex]
	                );
	            },
	            getCreatingRange: function (localTrack) {
	                var ends = getTrackEnds(localTrack);
	                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);
	
	                return [min, max];
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                var brushWidth = brushOption.brushStyle.width;
	                var otherExtent;
	                // If brushWidth not specified, fit the panel.
	                if (brushWidth == null) {
	                    var panel = getPanelByCover(controller, cover);
	                    var base = 0;
	                    if (panel !== true) {
	                        var rect = panel.getBoundingRect();
	                        brushWidth = xyIndex ? rect.width : rect.height;
	                        base = xyIndex ? rect.x : rect.y;
	                    }
	                    // FIXME
	                    // do not support global panel yet.
	                    otherExtent = [base, base + (brushWidth || 0)];
	                }
	                else {
	                    otherExtent = [-brushWidth / 2, brushWidth / 2];
	                }
	                var rectRange = [localRange, otherExtent];
	                xyIndex && rectRange.reverse();
	
	                updateBaseRect(controller, cover, rectRange, brushOption);
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        };
	    }
	
	    module.exports = BrushController;


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	
	    module.exports = function (option) {
	        createParallelIfNeeded(option);
	        mergeAxisOptionFromParallel(option);
	    };
	
	    /**
	     * Create a parallel coordinate if not exists.
	     * @inner
	     */
	    function createParallelIfNeeded(option) {
	        if (option.parallel) {
	            return;
	        }
	
	        var hasParallelSeries = false;
	
	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt && seriesOpt.type === 'parallel') {
	                hasParallelSeries = true;
	            }
	        });
	
	        if (hasParallelSeries) {
	            option.parallel = [{}];
	        }
	    }
	
	    /**
	     * Merge aixs definition from parallel option (if exists) to axis option.
	     * @inner
	     */
	    function mergeAxisOptionFromParallel(option) {
	        var axes = modelUtil.normalizeToArray(option.parallelAxis);
	
	        zrUtil.each(axes, function (axisOption) {
	            if (!zrUtil.isObject(axisOption)) {
	                return;
	            }
	
	            var parallelIndex = axisOption.parallelIndex || 0;
	            var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];
	
	            if (parallelOption && parallelOption.parallelAxisDefault) {
	                zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
	            }
	        });
	    }
	


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var SeriesModel = __webpack_require__(49);
	    var completeDimensions = __webpack_require__(124);
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.parallel',
	
	        dependencies: ['parallel'],
	
	        getInitialData: function (option, ecModel) {
	            var parallelModel = ecModel.getComponent(
	                'parallel', this.get('parallelIndex')
	            );
	            var parallelAxisIndices = parallelModel.parallelAxisIndex;
	
	            var rawData = option.data;
	            var modelDims = parallelModel.dimensions;
	
	            var dataDims = generateDataDims(modelDims, rawData);
	
	            var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {
	
	                var modelDimsIndex = zrUtil.indexOf(modelDims, dim);
	                var axisModel = modelDimsIndex >= 0 && ecModel.getComponent(
	                    'parallelAxis', parallelAxisIndices[modelDimsIndex]
	                );
	
	                if (axisModel && axisModel.get('type') === 'category') {
	                    translateCategoryValue(axisModel, dim, rawData);
	                    return {name: dim, type: 'ordinal'};
	                }
	                else if (modelDimsIndex < 0) {
	                    return completeDimensions.guessOrdinal(rawData, dimIndex)
	                        ? {name: dim, type: 'ordinal'}
	                        : dim;
	                }
	                else {
	                    return dim;
	                }
	            });
	
	            var list = new List(dataDimsInfo, this);
	            list.initData(rawData);
	
	            // Anication is forbiden in progressive data mode.
	            if (this.option.progressive) {
	                this.option.animation = false;
	            }
	
	            return list;
	        },
	
	        /**
	         * User can get data raw indices on 'axisAreaSelected' event received.
	         *
	         * @public
	         * @param {string} activeState 'active' or 'inactive' or 'normal'
	         * @return {Array.<number>} Raw indices
	         */
	        getRawIndicesByActiveState: function (activeState) {
	            var coordSys = this.coordinateSystem;
	            var data = this.getData();
	            var indices = [];
	
	            coordSys.eachActiveState(data, function (theActiveState, dataIndex) {
	                if (activeState === theActiveState) {
	                    indices.push(data.getRawIndex(dataIndex));
	                }
	            });
	
	            return indices;
	        },
	
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	
	            coordinateSystem: 'parallel',
	            parallelIndex: 0,
	
	            label: {
	                normal: {
	                    show: false
	                },
	                emphasis: {
	                    show: false
	                }
	            },
	
	            inactiveOpacity: 0.05,
	            activeOpacity: 1,
	
	            lineStyle: {
	                normal: {
	                    width: 1,
	                    opacity: 0.45,
	                    type: 'solid'
	                }
	            },
	            progressive: false, // 100
	            smooth: false,
	
	            animationEasing: 'linear'
	        }
	    });
	
	    function translateCategoryValue(axisModel, dim, rawData) {
	        var axisData = axisModel.get('data');
	        var numberDim = convertDimNameToNumber(dim);
	
	        if (axisData && axisData.length) {
	            zrUtil.each(rawData, function (dataItem) {
	                if (!dataItem) {
	                    return;
	                }
	                // FIXME
	                // time consuming, should use hash?
	                var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
	                dataItem[numberDim] = index >= 0 ? index : NaN;
	            });
	        }
	        // FIXME
	        // 如果没有设置axis data, 应自动算出，或者提示。
	    }
	
	    function convertDimNameToNumber(dimName) {
	        return +dimName.replace('dim', '');
	    }
	
	    function generateDataDims(modelDims, rawData) {
	        // parallelModel.dimension should not be regarded as data
	        // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];
	
	        // We detect max dim by parallelModel.dimensions and fist
	        // item in rawData arbitrarily.
	        var maxDimNum = 0;
	        zrUtil.each(modelDims, function (dimName) {
	            var numberDim = convertDimNameToNumber(dimName);
	            numberDim > maxDimNum && (maxDimNum = numberDim);
	        });
	
	        var firstItem = rawData[0];
	        if (firstItem && firstItem.length - 1 > maxDimNum) {
	            maxDimNum = firstItem.length - 1;
	        }
	
	        var dataDims = [];
	        for (var i = 0; i <= maxDimNum; i++) {
	            dataDims.push('dim' + i);
	        }
	
	        return dataDims;
	    }


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    var SMOOTH = 0.3;
	
	    var ParallelView = __webpack_require__(63).extend({
	
	        type: 'parallel',
	
	        init: function () {
	
	            /**
	             * @type {module:zrender/container/Group}
	             * @private
	             */
	            this._dataGroup = new graphic.Group();
	
	            this.group.add(this._dataGroup);
	
	            /**
	             * @type {module:echarts/data/List}
	             */
	            this._data;
	        },
	
	        /**
	         * @override
	         */
	        render: function (seriesModel, ecModel, api, payload) {
	            this._renderForNormal(seriesModel);
	            // this[
	            //     seriesModel.option.progressive
	            //         ? '_renderForProgressive'
	            //         : '_renderForNormal'
	            // ](seriesModel);
	        },
	
	        dispose: function () {},
	
	        /**
	         * @private
	         */
	        _renderForNormal: function (seriesModel) {
	            var dataGroup = this._dataGroup;
	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var coordSys = seriesModel.coordinateSystem;
	            var dimensions = coordSys.dimensions;
	            var option = seriesModel.option;
	            var smooth = option.smooth ? SMOOTH : null;
	
	            // Consider switch between progressive and not.
	            // oldData && oldData.__plProgressive && dataGroup.removeAll();
	
	            data.diff(oldData)
	                .add(add)
	                .update(update)
	                .remove(remove)
	                .execute();
	
	            // Update style
	            updateElCommon(data, smooth);
	
	            // First create
	            if (!this._data) {
	                var clipPath = createGridClipShape(
	                    coordSys, seriesModel, function () {
	                        // Callback will be invoked immediately if there is no animation
	                        setTimeout(function () {
	                            dataGroup.removeClipPath();
	                        });
	                    }
	                );
	                dataGroup.setClipPath(clipPath);
	            }
	
	            this._data = data;
	
	            function add(newDataIndex) {
	                addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);
	            }
	
	            function update(newDataIndex, oldDataIndex) {
	                var line = oldData.getItemGraphicEl(oldDataIndex);
	                var points = createLinePoints(data, newDataIndex, dimensions, coordSys);
	                data.setItemGraphicEl(newDataIndex, line);
	                graphic.updateProps(line, {shape: {points: points}}, seriesModel, newDataIndex);
	            }
	
	            function remove(oldDataIndex) {
	                var line = oldData.getItemGraphicEl(oldDataIndex);
	                dataGroup.remove(line);
	            }
	
	        },
	
	        /**
	         * @private
	         */
	        // _renderForProgressive: function (seriesModel) {
	        //     var dataGroup = this._dataGroup;
	        //     var data = seriesModel.getData();
	        //     var oldData = this._data;
	        //     var coordSys = seriesModel.coordinateSystem;
	        //     var dimensions = coordSys.dimensions;
	        //     var option = seriesModel.option;
	        //     var progressive = option.progressive;
	        //     var smooth = option.smooth ? SMOOTH : null;
	
	        //     // In progressive animation is disabled, so use simple data diff,
	        //     // which effects performance less.
	        //     // (Typically performance for data with length 7000+ like:
	        //     // simpleDiff: 60ms, addEl: 184ms,
	        //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))
	        //     if (simpleDiff(oldData, data, dimensions)) {
	        //         dataGroup.removeAll();
	        //         data.each(function (dataIndex) {
	        //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);
	        //         });
	        //     }
	
	        //     updateElCommon(data, progressive, smooth);
	
	        //     // Consider switch between progressive and not.
	        //     data.__plProgressive = true;
	        //     this._data = data;
	        // },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            this._dataGroup && this._dataGroup.removeAll();
	            this._data = null;
	        }
	    });
	
	    function createGridClipShape(coordSys, seriesModel, cb) {
	        var parallelModel = coordSys.model;
	        var rect = coordSys.getRect();
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x,
	                y: rect.y,
	                width: rect.width,
	                height: rect.height
	            }
	        });
	
	        var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
	        rectEl.setShape(dim, 0);
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width,
	                height: rect.height
	            }
	        }, seriesModel, cb);
	        return rectEl;
	    }
	
	    function createLinePoints(data, dataIndex, dimensions, coordSys) {
	        var points = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimName = dimensions[i];
	            var value = data.get(dimName, dataIndex);
	            if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {
	                points.push(coordSys.dataToPoint(value, dimName));
	            }
	        }
	        return points;
	    }
	
	    function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {
	        var points = createLinePoints(data, dataIndex, dimensions, coordSys);
	        var line = new graphic.Polyline({
	            shape: {points: points},
	            silent: true,
	            z2: 10
	        });
	        dataGroup.add(line);
	        data.setItemGraphicEl(dataIndex, line);
	    }
	
	    function updateElCommon(data, smooth) {
	        var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');
	        var lineStyle = seriesStyleModel.getLineStyle();
	        data.eachItemGraphicEl(function (line, dataIndex) {
	            if (data.hasItemOption) {
	                var itemModel = data.getItemModel(dataIndex);
	                var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);
	                lineStyle = lineStyleModel.getLineStyle();
	            }
	
	            line.useStyle(zrUtil.extend(
	                lineStyle,
	                {
	                    fill: null,
	                    stroke: data.getItemVisual(dataIndex, 'color'),
	                    opacity: data.getItemVisual(dataIndex, 'opacity')
	                }
	            ));
	            line.shape.smooth = smooth;
	        });
	    }
	
	    // function simpleDiff(oldData, newData, dimensions) {
	    //     var oldLen;
	    //     if (!oldData
	    //         || !oldData.__plProgressive
	    //         || (oldLen = oldData.count()) !== newData.count()
	    //     ) {
	    //         return true;
	    //     }
	
	    //     var dimLen = dimensions.length;
	    //     for (var i = 0; i < oldLen; i++) {
	    //         for (var j = 0; j < dimLen; j++) {
	    //             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {
	    //                 return true;
	    //             }
	    //         }
	    //     }
	
	    //     return false;
	    // }
	
	    // FIXME
	    // 公用方法?
	    function isEmptyValue(val, axisType) {
	        return axisType === 'category'
	            ? val == null
	            : (val == null || isNaN(val)); // axisType === 'value'
	    }
	
	    module.exports = ParallelView;


/***/ },
/* 261 */
/***/ function(module, exports) {

	
	
	    module.exports = function (ecModel) {
	
	        ecModel.eachSeriesByType('parallel', function (seriesModel) {
	
	            var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var globalColors = ecModel.get('color');
	
	            var color = lineStyleModel.get('color')
	                || itemStyleModel.get('color')
	                || globalColors[seriesModel.seriesIndex % globalColors.length];
	            var inactiveOpacity = seriesModel.get('inactiveOpacity');
	            var activeOpacity = seriesModel.get('activeOpacity');
	            var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();
	
	            var coordSys = seriesModel.coordinateSystem;
	            var data = seriesModel.getData();
	
	            var opacityMap = {
	                normal: lineStyle.opacity,
	                active: activeOpacity,
	                inactive: inactiveOpacity
	            };
	
	            coordSys.eachActiveState(data, function (activeState, dataIndex) {
	                data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);
	            });
	
	            data.setVisual('color', color);
	        });
	    };


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(263);
	    __webpack_require__(264);
	    echarts.registerLayout(__webpack_require__(265));
	    echarts.registerVisual(__webpack_require__(267));


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Get initial data and define sankey view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */
	
	
	    var SeriesModel = __webpack_require__(49);
	    var createGraphFromNodeEdge = __webpack_require__(220);
	    var encodeHTML = __webpack_require__(27).encodeHTML;
	
	    var SankeySeries = SeriesModel.extend({
	
	        type: 'series.sankey',
	
	        layoutInfo: null,
	
	        /**
	         * Init a graph data structure from data in option series
	         *
	         * @param  {Object} option  the object used to config echarts view
	         * @return {module:echarts/data/List} storage initial data
	         */
	        getInitialData: function (option) {
	            var links = option.edges || option.links;
	            var nodes = option.data || option.nodes;
	            if (nodes && links) {
	                var graph = createGraphFromNodeEdge(nodes, links, this, true);
	                return graph.data;
	            }
	        },
	
	        /**
	         * Return the graphic data structure
	         *
	         * @return {module:echarts/data/Graph} graphic data structure
	         */
	        getGraph: function () {
	            return this.getData().graph;
	        },
	
	        /**
	         * Get edge data of graphic data structure
	         *
	         * @return {module:echarts/data/List} data structure of list
	         */
	        getEdgeData: function () {
	            return this.getGraph().edgeData;
	        },
	
	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            // dataType === 'node' or empty do not show tooltip by default
	            if (dataType === 'edge') {
	                var params = this.getDataParams(dataIndex, dataType);
	                var rawDataOpt = params.data;
	                var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;
	                if (params.value) {
	                    html += ' : ' + params.value;
	                }
	                return encodeHTML(html);
	            }
	
	            return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	
	            coordinateSystem: 'view',
	
	            layout: null,
	
	            // the position of the whole view
	            left: '5%',
	            top: '5%',
	            right: '20%',
	            bottom: '5%',
	
	            // the dx of the node
	            nodeWidth: 20,
	
	            // the vertical distance between two nodes
	            nodeGap: 8,
	
	            // the number of iterations to change the position of the node
	            layoutIterations: 32,
	
	            label: {
	                normal: {
	                    show: true,
	                    position: 'right',
	                    textStyle: {
	                        color: '#000',
	                        fontSize: 12
	                    }
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	
	            itemStyle: {
	                normal: {
	                    borderWidth: 1,
	                    borderColor: '#333'
	                }
	            },
	
	            lineStyle: {
	                normal: {
	                    color: '#314656',
	                    opacity: 0.2,
	                    curveness: 0.5
	                },
	                emphasis: {
	                    opacity: 0.6
	                }
	            },
	
	            animationEasing: 'linear',
	
	            animationDuration: 1000
	        }
	
	    });
	
	    module.exports = SankeySeries;
	


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file  The file used to draw sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    var SankeyShape = graphic.extendShape({
	        shape: {
	            x1: 0, y1: 0,
	            x2: 0, y2: 0,
	            cpx1: 0, cpy1: 0,
	            cpx2: 0, cpy2: 0,
	
	            extent: 0
	        },
	
	        buildPath: function (ctx, shape) {
	            var halfExtent = shape.extent / 2;
	            ctx.moveTo(shape.x1, shape.y1 - halfExtent);
	            ctx.bezierCurveTo(
	                shape.cpx1, shape.cpy1 - halfExtent,
	                shape.cpx2, shape.cpy2 - halfExtent,
	                shape.x2, shape.y2 - halfExtent
	            );
	            ctx.lineTo(shape.x2, shape.y2 + halfExtent);
	            ctx.bezierCurveTo(
	                shape.cpx2, shape.cpy2 + halfExtent,
	                shape.cpx1, shape.cpy1 + halfExtent,
	                shape.x1, shape.y1 + halfExtent
	            );
	            ctx.closePath();
	        }
	    });
	
	    module.exports = __webpack_require__(22).extendChartView({
	
	        type: 'sankey',
	
	        /**
	         * @private
	         * @type {module:echarts/chart/sankey/SankeySeries}
	         */
	        _model: null,
	
	        render: function (seriesModel, ecModel, api) {
	            var graph = seriesModel.getGraph();
	            var group = this.group;
	            var layoutInfo = seriesModel.layoutInfo;
	            var nodeData = seriesModel.getData();
	            var edgeData = seriesModel.getData('edge');
	
	            this._model = seriesModel;
	
	            group.removeAll();
	
	            group.position = [layoutInfo.x, layoutInfo.y];
	
	            // generate a bezire Curve for each edge
	            graph.eachEdge(function (edge) {
	                var curve = new SankeyShape();
	
	                curve.dataIndex = edge.dataIndex;
	                curve.seriesIndex = seriesModel.seriesIndex;
	                curve.dataType = 'edge';
	
	                var lineStyleModel = edge.getModel('lineStyle.normal');
	                var curvature = lineStyleModel.get('curveness');
	                var n1Layout = edge.node1.getLayout();
	                var n2Layout = edge.node2.getLayout();
	                var edgeLayout = edge.getLayout();
	
	                curve.shape.extent = Math.max(1, edgeLayout.dy);
	
	                var x1 = n1Layout.x + n1Layout.dx;
	                var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
	                var x2 = n2Layout.x;
	                var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;
	                var cpx1 = x1 * (1 - curvature) + x2 * curvature;
	                var cpy1 = y1;
	                var cpx2 = x1 * curvature + x2 * (1 - curvature);
	                var cpy2 = y2;
	
	                curve.setShape({
	                    x1: x1,
	                    y1: y1,
	                    x2: x2,
	                    y2: y2,
	                    cpx1: cpx1,
	                    cpy1: cpy1,
	                    cpx2: cpx2,
	                    cpy2: cpy2
	                });
	
	                curve.setStyle(lineStyleModel.getItemStyle());
	                // Special color, use source node color or target node color
	                switch (curve.style.fill) {
	                    case 'source':
	                        curve.style.fill = edge.node1.getVisual('color');
	                        break;
	                    case 'target':
	                        curve.style.fill = edge.node2.getVisual('color');
	                        break;
	                }
	
	                graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());
	
	                group.add(curve);
	
	                edgeData.setItemGraphicEl(edge.dataIndex, curve);
	            });
	
	            // generate a rect  for each node
	            graph.eachNode(function (node) {
	                var layout = node.getLayout();
	                var itemModel = node.getModel();
	                var labelModel = itemModel.getModel('label.normal');
	                var textStyleModel = labelModel.getModel('textStyle');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                var textStyleHoverModel = labelHoverModel.getModel('textStyle');
	
	                var rect = new graphic.Rect({
	                    shape: {
	                        x: layout.x,
	                        y: layout.y,
	                        width: node.getLayout().dx,
	                        height: node.getLayout().dy
	                    },
	                    style: {
	                        // Get formatted label in label.normal option
	                        //  Use node id if it is not specified
	                        text: labelModel.get('show')
	                            ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id
	                            // Use empty string to hide the label
	                            : '',
	                        textFont: textStyleModel.getFont(),
	                        textFill: textStyleModel.getTextColor(),
	                        textPosition: labelModel.get('position')
	                    }
	                });
	
	                rect.setStyle(zrUtil.defaults(
	                    {
	                        fill: node.getVisual('color')
	                    },
	                    itemModel.getModel('itemStyle.normal').getItemStyle()
	                ));
	
	                graphic.setHoverStyle(rect, zrUtil.extend(
	                    node.getModel('itemStyle.emphasis'),
	                    {
	                        text: labelHoverModel.get('show')
	                            ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id
	                            : '',
	                        textFont: textStyleHoverModel.getFont(),
	                        textFill: textStyleHoverModel.getTextColor(),
	                        textPosition: labelHoverModel.get('position')
	                    }
	                ));
	
	                group.add(rect);
	
	                nodeData.setItemGraphicEl(node.dataIndex, rect);
	
	                rect.dataType = 'node';
	            });
	
	            if (!this._data && seriesModel.get('animation')) {
	                group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
	                    group.removeClipPath();
	                }));
	            }
	
	            this._data = seriesModel.getData();
	        },
	
	        dispose: function () {}
	    });
	
	    // add animation to the view
	    function createGridClipShape(rect, seriesModel, cb) {
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x - 10,
	                y: rect.y - 10,
	                width: 0,
	                height: rect.height + 20
	            }
	        });
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width + 20,
	                height: rect.height + 20
	            }
	        }, seriesModel, cb);
	
	        return rectEl;
	    }
	


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file The layout algorithm of sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	
	
	    var layout = __webpack_require__(42);
	    var nest = __webpack_require__(266);
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (ecModel, api, payload) {
	
	        ecModel.eachSeriesByType('sankey', function (seriesModel) {
	
	            var nodeWidth = seriesModel.get('nodeWidth');
	            var nodeGap = seriesModel.get('nodeGap');
	
	            var layoutInfo = getViewRect(seriesModel, api);
	
	            seriesModel.layoutInfo = layoutInfo;
	
	            var width = layoutInfo.width;
	            var height = layoutInfo.height;
	
	            var graph = seriesModel.getGraph();
	
	            var nodes = graph.nodes;
	            var edges = graph.edges;
	
	            computeNodeValues(nodes);
	
	            var filteredNodes = nodes.filter(function (node) {
	                return node.getLayout().value === 0;
	            });
	
	            var iterations = filteredNodes.length !== 0
	                ? 0 : seriesModel.get('layoutIterations');
	
	            layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
	        });
	    };
	
	    /**
	     * Get the layout position of the whole view
	     *
	     * @param {module:echarts/model/Series} seriesModel  the model object of sankey series
	     * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call
	     * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view
	     */
	    function getViewRect(seriesModel, api) {
	        return layout.getLayoutRect(
	            seriesModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }
	        );
	    }
	
	    function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
	        computeNodeBreadths(nodes, nodeWidth, width);
	        computeNodeDepths(nodes, edges, height, nodeGap, iterations);
	        computeEdgeDepths(nodes);
	    }
	
	    /**
	     * Compute the value of each node by summing the associated edge's value
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     */
	    function computeNodeValues(nodes) {
	        zrUtil.each(nodes, function (node) {
	            var value1 = sum(node.outEdges, getEdgeValue);
	            var value2 = sum(node.inEdges, getEdgeValue);
	            var value = Math.max(value1, value2);
	            node.setLayout({value: value}, true);
	        });
	    }
	
	    /**
	     * Compute the x-position for each node
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param  {number} nodeWidth  the dx of the node
	     * @param  {number} width  the whole width of the area to draw the view
	     */
	    function computeNodeBreadths(nodes, nodeWidth, width) {
	        var remainNodes = nodes;
	        var nextNode = null;
	        var x = 0;
	        var kx = 0;
	
	        while (remainNodes.length) {
	            nextNode = [];
	            for (var i = 0, len = remainNodes.length; i < len; i++) {
	                var node = remainNodes[i];
	                node.setLayout({x: x}, true);
	                node.setLayout({dx: nodeWidth}, true);
	                for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
	                    nextNode.push(node.outEdges[j].node2);
	                }
	            }
	            remainNodes = nextNode;
	            ++x;
	        }
	
	        moveSinksRight(nodes, x);
	        kx = (width - nodeWidth) / (x - 1);
	
	        scaleNodeBreadths(nodes, kx);
	    }
	
	    /**
	     * All the node without outEgdes are assigned maximum x-position and
	     *     be aligned in the last column.
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {number} x  value (x-1) use to assign to node without outEdges
	     *     as x-position
	     */
	    function moveSinksRight(nodes, x) {
	        zrUtil.each(nodes, function (node) {
	            if (!node.outEdges.length) {
	                node.setLayout({x: x - 1}, true);
	            }
	        });
	    }
	
	    /**
	     * Scale node x-position to the width
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {number} kx   multiple used to scale nodes
	     */
	    function scaleNodeBreadths(nodes, kx) {
	        zrUtil.each(nodes, function (node) {
	            var nodeX = node.getLayout().x * kx;
	            node.setLayout({x: nodeX}, true);
	        });
	    }
	
	    /**
	     * Using Gauss-Seidel iterations method to compute the node depth(y-position)
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	     * @param {number} height  the whole height of the area to draw the view
	     * @param {numbber} nodeGap  the vertical distance between two nodes
	     *     in the same column.
	     * @param {number} iterations  the number of iterations for the algorithm
	     */
	    function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
	        var nodesByBreadth = nest()
	            .key(function (d) {
	                return d.getLayout().x;
	            })
	            .sortKeys(ascending)
	            .entries(nodes)
	            .map(function (d) {
	                return d.values;
	            });
	
	        initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
	        resolveCollisions(nodesByBreadth, nodeGap, height);
	
	        for (var alpha = 1; iterations > 0; iterations--) {
	            // 0.99 is a experience parameter, ensure that each iterations of
	            // changes as small as possible.
	            alpha *= 0.99;
	            relaxRightToLeft(nodesByBreadth, alpha);
	            resolveCollisions(nodesByBreadth, nodeGap, height);
	            relaxLeftToRight(nodesByBreadth, alpha);
	            resolveCollisions(nodesByBreadth, nodeGap, height);
	        }
	    }
	
	    /**
	     * Compute the original y-position for each node
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the nodes x-position.
	     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	     * @param {number} height  the whole height of the area to draw the view
	     * @param {number} nodeGap  the vertical distance between two nodes
	     */
	    function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
	        var kyArray = [];
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            var n = nodes.length;
	            var sum = 0;
	            zrUtil.each(nodes, function (node) {
	                sum += node.getLayout().value;
	            });
	            var ky = (height - (n - 1) * nodeGap) / sum;
	            kyArray.push(ky);
	        });
	
	        kyArray.sort(function (a, b) {
	            return a - b;
	        });
	        var ky0 = kyArray[0];
	
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            zrUtil.each(nodes, function (node, i) {
	                node.setLayout({y: i}, true);
	                var nodeDy = node.getLayout().value * ky0;
	                node.setLayout({dy: nodeDy}, true);
	            });
	        });
	
	        zrUtil.each(edges, function (edge) {
	            var edgeDy = +edge.getValue() * ky0;
	            edge.setLayout({dy: edgeDy}, true);
	        });
	    }
	
	    /**
	     * Resolve the collision of initialized depth (y-position)
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the nodes x-position.
	     * @param {number} nodeGap  the vertical distance between two nodes
	     * @param {number} height  the whole height of the area to draw the view
	     */
	    function resolveCollisions(nodesByBreadth, nodeGap, height) {
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            var node;
	            var dy;
	            var y0 = 0;
	            var n = nodes.length;
	            var i;
	
	            nodes.sort(ascendingDepth);
	
	            for (i = 0; i < n; i++) {
	                node = nodes[i];
	                dy = y0 - node.getLayout().y;
	                if (dy > 0) {
	                    var nodeY = node.getLayout().y + dy;
	                    node.setLayout({y: nodeY}, true);
	                }
	                y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
	            }
	
	            // if the bottommost node goes outside the bounds, push it back up
	            dy = y0 - nodeGap - height;
	            if (dy > 0) {
	                var nodeY = node.getLayout().y - dy;
	                node.setLayout({y: nodeY}, true);
	                y0 = node.getLayout().y;
	                for (i = n - 2; i >= 0; --i) {
	                    node = nodes[i];
	                    dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;
	                    if (dy > 0) {
	                        nodeY = node.getLayout().y - dy;
	                        node.setLayout({y: nodeY}, true);
	                    }
	                    y0 = node.getLayout().y;
	                }
	            }
	        });
	    }
	
	    /**
	     * Change the y-position of the nodes, except most the right side nodes
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the node x-position.
	     * @param {number} alpha  parameter used to adjust the nodes y-position
	     */
	    function relaxRightToLeft(nodesByBreadth, alpha) {
	        zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
	            zrUtil.each(nodes, function (node) {
	                if (node.outEdges.length) {
	                    var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
	                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                    node.setLayout({y: nodeY}, true);
	                }
	            });
	        });
	    }
	
	    function weightedTarget(edge) {
	        return center(edge.node2) * edge.getValue();
	    }
	
	    /**
	     * Change the y-position of the nodes, except most the left side nodes
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the node x-position.
	     * @param {number} alpha  parameter used to adjust the nodes y-position
	     */
	    function relaxLeftToRight(nodesByBreadth, alpha) {
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            zrUtil.each(nodes, function (node) {
	                if (node.inEdges.length) {
	                    var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
	                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                    node.setLayout({y: nodeY}, true);
	                }
	            });
	        });
	    }
	
	    function weightedSource(edge) {
	        return center(edge.node1) * edge.getValue();
	    }
	
	    /**
	     * Compute the depth(y-position) of each edge
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     */
	    function computeEdgeDepths(nodes) {
	        zrUtil.each(nodes, function (node) {
	            node.outEdges.sort(ascendingTargetDepth);
	            node.inEdges.sort(ascendingSourceDepth);
	        });
	        zrUtil.each(nodes, function (node) {
	            var sy = 0;
	            var ty = 0;
	            zrUtil.each(node.outEdges, function (edge) {
	                edge.setLayout({sy: sy}, true);
	                sy += edge.getLayout().dy;
	            });
	            zrUtil.each(node.inEdges, function (edge) {
	                edge.setLayout({ty: ty}, true);
	                ty += edge.getLayout().dy;
	            });
	        });
	    }
	
	    function ascendingTargetDepth(a, b) {
	        return a.node2.getLayout().y - b.node2.getLayout().y;
	    }
	
	    function ascendingSourceDepth(a, b) {
	        return a.node1.getLayout().y - b.node1.getLayout().y;
	    }
	
	    function sum(array, f) {
	        var sum = 0;
	        var len = array.length;
	        var i = -1;
	        while (++i < len) {
	            var value = +f.call(array, array[i], i);
	            if (!isNaN(value)) {
	                sum += value;
	            }
	        }
	        return sum;
	    }
	
	    function center(node) {
	        return node.getLayout().y + node.getLayout().dy / 2;
	    }
	
	    function ascendingDepth(a, b) {
	        return a.getLayout().y - b.getLayout().y;
	    }
	
	    function ascending(a, b) {
	        return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;
	    }
	
	    function getEdgeValue(edge) {
	        return edge.getValue();
	    }
	


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * nest helper used to group by the array.
	     * can specified the keys and sort the keys.
	     */
	    function nest() {
	
	        var keysFunction = [];
	        var sortKeysFunction = [];
	
	        /**
	         * map an Array into the mapObject.
	         * @param {Array} array
	         * @param {number} depth
	         */
	        function map(array, depth) {
	            if (depth >= keysFunction.length) {
	                return array;
	            }
	            var i = -1;
	            var n = array.length;
	            var keyFunction = keysFunction[depth++];
	            var mapObject = {};
	            var valuesByKey = {};
	
	            while (++i < n) {
	                var keyValue = keyFunction(array[i]);
	                var values = valuesByKey[keyValue];
	
	                if (values) {
	                    values.push(array[i]);
	                }
	                else {
	                    valuesByKey[keyValue] = [array[i]];
	                }
	            }
	
	            zrUtil.each(valuesByKey, function (value, key) {
	                mapObject[key] = map(value, depth);
	            });
	
	            return mapObject;
	        }
	
	        /**
	         * transform the Map Object to multidimensional Array
	         * @param {Object} map
	         * @param {number} depth
	         */
	        function entriesMap(mapObject, depth) {
	            if (depth >= keysFunction.length) {
	                return mapObject;
	            }
	            var array = [];
	            var sortKeyFunction = sortKeysFunction[depth++];
	
	            zrUtil.each(mapObject, function (value, key) {
	                array.push({
	                    key: key, values: entriesMap(value, depth)
	                });
	            });
	
	            if (sortKeyFunction) {
	                return array.sort(function (a, b) {
	                    return sortKeyFunction(a.key, b.key);
	                });
	            }
	            else {
	                return array;
	            }
	        }
	
	        return {
	            /**
	             * specified the key to groupby the arrays.
	             * users can specified one more keys.
	             * @param {Function} d
	             */
	            key: function (d) {
	                keysFunction.push(d);
	                return this;
	            },
	
	            /**
	             * specified the comparator to sort the keys
	             * @param {Function} order
	             */
	            sortKeys: function (order) {
	                sortKeysFunction[keysFunction.length - 1] = order;
	                return this;
	            },
	
	            /**
	             * the array to be grouped by.
	             * @param {Array} array
	             */
	            entries: function (array) {
	                return entriesMap(map(array, 0), 0);
	            }
	        };
	    }
	    module.exports = nest;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual encoding for sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	
	
	    var VisualMapping = __webpack_require__(216);
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (ecModel, payload) {
	        ecModel.eachSeriesByType('sankey', function (seriesModel) {
	            var graph = seriesModel.getGraph();
	            var nodes = graph.nodes;
	
	            nodes.sort(function (a, b) {
	                return a.getLayout().value - b.getLayout().value;
	            });
	
	            var minValue = nodes[0].getLayout().value;
	            var maxValue = nodes[nodes.length - 1].getLayout().value;
	
	            zrUtil.each(nodes, function (node) {
	                var mapping = new VisualMapping({
	                    type: 'color',
	                    mappingMethod: 'linear',
	                    dataExtent: [minValue, maxValue],
	                    visual: seriesModel.get('color')
	                });
	
	                var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
	                node.setVisual('color', mapValueToColor);
	                // If set itemStyle.normal.color
	                var itemModel = node.getModel();
	                var customColor = itemModel.get('itemStyle.normal.color');
	                if (customColor != null) {
	                    node.setVisual('color', customColor);
	                }
	            });
	
	        });
	    };
	


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(269);
	    __webpack_require__(272);
	
	    echarts.registerVisual(__webpack_require__(273));
	    echarts.registerLayout(__webpack_require__(274));
	


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var SeriesModel = __webpack_require__(49);
	    var whiskerBoxCommon = __webpack_require__(270);
	
	    var BoxplotSeries = SeriesModel.extend({
	
	        type: 'series.boxplot',
	
	        dependencies: ['xAxis', 'yAxis', 'grid'],
	
	        // TODO
	        // box width represents group size, so dimension should have 'size'.
	
	        /**
	         * @see <https://en.wikipedia.org/wiki/Box_plot>
	         * The meanings of 'min' and 'max' depend on user,
	         * and echarts do not need to know it.
	         * @readOnly
	         */
	        valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],
	
	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,
	
	        /**
	         * @override
	         */
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            layout: null,               // 'horizontal' or 'vertical'
	            boxWidth: [7, 50],       // [min, max] can be percent of band width.
	
	            itemStyle: {
	                normal: {
	                    color: '#fff',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    borderWidth: 2,
	                    shadowBlur: 5,
	                    shadowOffsetX: 2,
	                    shadowOffsetY: 2,
	                    shadowColor: 'rgba(0,0,0,0.4)'
	                }
	            },
	
	            animationEasing: 'elasticOut',
	            animationDuration: 800
	        }
	    });
	
	    zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);
	
	    module.exports = BoxplotSeries;
	


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var List = __webpack_require__(119);
	    var completeDimensions = __webpack_require__(124);
	    var WhiskerBoxDraw = __webpack_require__(271);
	    var zrUtil = __webpack_require__(25);
	
	    function getItemValue(item) {
	        return item.value == null ? item : item.value;
	    }
	
	    var seriesModelMixin = {
	
	        /**
	         * @private
	         * @type {string}
	         */
	        _baseAxisDim: null,
	
	        /**
	         * @override
	         */
	        getInitialData: function (option, ecModel) {
	            // When both types of xAxis and yAxis are 'value', layout is
	            // needed to be specified by user. Otherwise, layout can be
	            // judged by which axis is category.
	
	            var categories;
	
	            var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
	            var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
	            var xAxisType = xAxisModel.get('type');
	            var yAxisType = yAxisModel.get('type');
	            var addOrdinal;
	
	            // FIXME
	            // 考虑时间轴
	
	            if (xAxisType === 'category') {
	                option.layout = 'horizontal';
	                categories = xAxisModel.getCategories();
	                addOrdinal = true;
	            }
	            else if (yAxisType  === 'category') {
	                option.layout = 'vertical';
	                categories = yAxisModel.getCategories();
	                addOrdinal = true;
	            }
	            else {
	                option.layout = option.layout || 'horizontal';
	            }
	
	            this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';
	
	            var data = option.data;
	            var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);
	            completeDimensions(dimensions, data);
	
	            var list = new List(dimensions, this);
	            list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {
	                var value = getItemValue(dataItem);
	                return addOrdinal ? (dimName === 'base' ? idx : value[dimIdx - 1]) : value[dimIdx];
	            });
	
	            return list;
	        },
	
	        /**
	         * Used by Gird.
	         * @param {string} axisDim 'x' or 'y'
	         * @return {Array.<string>} dimensions on the axis.
	         */
	        coordDimToDataDim: function (axisDim) {
	            var dims = this.valueDimensions.slice();
	            var baseDim = ['base'];
	            var map = {
	                horizontal: {x: baseDim, y: dims},
	                vertical: {x: dims, y: baseDim}
	            };
	            return map[this.get('layout')][axisDim];
	        },
	
	        /**
	         * @override
	         * @param {string|number} dataDim
	         * @return {string} coord dimension
	         */
	        dataDimToCoordDim: function (dataDim) {
	            var dim;
	
	            zrUtil.each(['x', 'y'], function (coordDim, index) {
	                var dataDims = this.coordDimToDataDim(coordDim);
	                if (zrUtil.indexOf(dataDims, dataDim) >= 0) {
	                    dim = coordDim;
	                }
	            }, this);
	
	            return dim;
	        },
	
	        /**
	         * If horizontal, base axis is x, otherwise y.
	         * @override
	         */
	        getBaseAxis: function () {
	            var dim = this._baseAxisDim;
	            return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
	        }
	    };
	
	    var viewMixin = {
	
	        init: function () {
	            /**
	             * Old data.
	             * @private
	             * @type {module:echarts/chart/helper/WhiskerBoxDraw}
	             */
	            var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(
	                this.getStyleUpdater()
	            );
	            this.group.add(whiskerBoxDraw.group);
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            this._whiskerBoxDraw.updateData(seriesModel.getData());
	        },
	
	        remove: function (ecModel) {
	            this._whiskerBoxDraw.remove();
	        }
	    };
	
	    module.exports = {
	        seriesModelMixin: seriesModelMixin,
	        viewMixin: viewMixin
	    };


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Symbol
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var Path = __webpack_require__(66);
	
	    var WhiskerPath = Path.extend({
	
	        type: 'whiskerInBox',
	
	        shape: {},
	
	        buildPath: function (ctx, shape) {
	            for (var i in shape) {
	                if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {
	                    var pts = shape[i];
	                    ctx.moveTo(pts[0][0], pts[0][1]);
	                    ctx.lineTo(pts[1][0], pts[1][1]);
	                }
	            }
	        }
	    });
	
	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/WhiskerBox}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @param {Function} styleUpdater
	     * @param {boolean} isInit
	     * @extends {module:zrender/graphic/Group}
	     */
	    function WhiskerBox(data, idx, styleUpdater, isInit) {
	        graphic.Group.call(this);
	
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.bodyIndex;
	
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.whiskerIndex;
	
	        /**
	         * @type {Function}
	         */
	        this.styleUpdater = styleUpdater;
	
	        this._createContent(data, idx, isInit);
	
	        this.updateData(data, idx, isInit);
	
	        /**
	         * Last series model.
	         * @type {module:echarts/model/Series}
	         */
	        this._seriesModel;
	    }
	
	    var whiskerBoxProto = WhiskerBox.prototype;
	
	    whiskerBoxProto._createContent = function (data, idx, isInit) {
	        var itemLayout = data.getItemLayout(idx);
	        var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
	        var count = 0;
	
	        // Whisker element.
	        this.add(new graphic.Polygon({
	            shape: {
	                points: isInit
	                    ? transInit(itemLayout.bodyEnds, constDim, itemLayout)
	                    : itemLayout.bodyEnds
	            },
	            style: {strokeNoScale: true},
	            z2: 100
	        }));
	        this.bodyIndex = count++;
	
	        // Box element.
	        var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
	            return isInit ? transInit(ends, constDim, itemLayout) : ends;
	        });
	        this.add(new WhiskerPath({
	            shape: makeWhiskerEndsShape(whiskerEnds),
	            style: {strokeNoScale: true},
	            z2: 100
	        }));
	        this.whiskerIndex = count++;
	    };
	
	    function transInit(points, dim, itemLayout) {
	        return zrUtil.map(points, function (point) {
	            point = point.slice();
	            point[dim] = itemLayout.initBaseline;
	            return point;
	        });
	    }
	
	    function makeWhiskerEndsShape(whiskerEnds) {
	        // zr animation only support 2-dim array.
	        var shape = {};
	        zrUtil.each(whiskerEnds, function (ends, i) {
	            shape['ends' + i] = ends;
	        });
	        return shape;
	    }
	
	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    whiskerBoxProto.updateData = function (data, idx, isInit) {
	        var seriesModel = this._seriesModel = data.hostModel;
	        var itemLayout = data.getItemLayout(idx);
	        var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];
	        // this.childAt(this.bodyIndex).stopAnimation(true);
	        // this.childAt(this.whiskerIndex).stopAnimation(true);
	        updateMethod(
	            this.childAt(this.bodyIndex),
	            {shape: {points: itemLayout.bodyEnds}},
	            seriesModel, idx
	        );
	        updateMethod(
	            this.childAt(this.whiskerIndex),
	            {shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)},
	            seriesModel, idx
	        );
	
	        this.styleUpdater.call(null, this, data, idx);
	    };
	
	    zrUtil.inherits(WhiskerBox, graphic.Group);
	
	
	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/WhiskerBoxDraw
	     */
	    function WhiskerBoxDraw(styleUpdater) {
	        this.group = new graphic.Group();
	        this.styleUpdater = styleUpdater;
	    }
	
	    var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;
	
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    whiskerBoxDrawProto.updateData = function (data) {
	        var group = this.group;
	        var oldData = this._data;
	        var styleUpdater = this.styleUpdater;
	
	        data.diff(oldData)
	            .add(function (newIdx) {
	                if (data.hasValue(newIdx)) {
	                    var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
	                    data.setItemGraphicEl(newIdx, symbolEl);
	                    group.add(symbolEl);
	                }
	            })
	            .update(function (newIdx, oldIdx) {
	                var symbolEl = oldData.getItemGraphicEl(oldIdx);
	
	                // Empty data
	                if (!data.hasValue(newIdx)) {
	                    group.remove(symbolEl);
	                    return;
	                }
	
	                if (!symbolEl) {
	                    symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
	                }
	                else {
	                    symbolEl.updateData(data, newIdx);
	                }
	
	                // Add back
	                group.add(symbolEl);
	
	                data.setItemGraphicEl(newIdx, symbolEl);
	            })
	            .remove(function (oldIdx) {
	                var el = oldData.getItemGraphicEl(oldIdx);
	                el && group.remove(el);
	            })
	            .execute();
	
	        this._data = data;
	    };
	
	    /**
	     * Remove symbols.
	     * @param {module:echarts/data/List} data
	     */
	    whiskerBoxDrawProto.remove = function () {
	        var group = this.group;
	        var data = this._data;
	        this._data = null;
	        data && data.eachItemGraphicEl(function (el) {
	            el && group.remove(el);
	        });
	    };
	
	    module.exports = WhiskerBoxDraw;


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var ChartView = __webpack_require__(63);
	    var graphic = __webpack_require__(64);
	    var whiskerBoxCommon = __webpack_require__(270);
	
	    var BoxplotView = ChartView.extend({
	
	        type: 'boxplot',
	
	        getStyleUpdater: function () {
	            return updateStyle;
	        },
	
	        dispose: zrUtil.noop
	    });
	
	    zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);
	
	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	
	    function updateStyle(itemGroup, data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	        var borderColor = data.getItemVisual(idx, 'color');
	
	        // Exclude borderColor.
	        var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);
	
	        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	        whiskerEl.style.set(itemStyle);
	        whiskerEl.style.stroke = borderColor;
	        whiskerEl.dirty();
	
	        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	        bodyEl.style.set(itemStyle);
	        bodyEl.style.stroke = borderColor;
	        bodyEl.dirty();
	
	        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	        graphic.setHoverStyle(itemGroup, hoverStyle);
	    }
	
	    module.exports = BoxplotView;
	


/***/ },
/* 273 */
/***/ function(module, exports) {

	
	
	    var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	
	    module.exports = function (ecModel, api) {
	
	        var globalColors = ecModel.get('color');
	
	        ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {
	
	            var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
	            var data = seriesModel.getData();
	
	            data.setVisual({
	                legendSymbol: 'roundRect',
	                // Use name 'color' but not 'borderColor' for legend usage and
	                // visual coding from other component like dataRange.
	                color: seriesModel.get(borderColorQuery) || defaulColor
	            });
	
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    data.setItemVisual(
	                        idx,
	                        {color: itemModel.get(borderColorQuery, true)}
	                    );
	                });
	            }
	        });
	
	    };


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;
	
	    module.exports = function (ecModel) {
	
	        var groupResult = groupSeriesByAxis(ecModel);
	
	        each(groupResult, function (groupItem) {
	            var seriesModels = groupItem.seriesModels;
	
	            if (!seriesModels.length) {
	                return;
	            }
	
	            calculateBase(groupItem);
	
	            each(seriesModels, function (seriesModel, idx) {
	                layoutSingleSeries(
	                    seriesModel,
	                    groupItem.boxOffsetList[idx],
	                    groupItem.boxWidthList[idx]
	                );
	            });
	        });
	    };
	
	    /**
	     * Group series by axis.
	     */
	    function groupSeriesByAxis(ecModel) {
	        var result = [];
	        var axisList = [];
	
	        ecModel.eachSeriesByType('boxplot', function (seriesModel) {
	            var baseAxis = seriesModel.getBaseAxis();
	            var idx = zrUtil.indexOf(axisList, baseAxis);
	
	            if (idx < 0) {
	                idx = axisList.length;
	                axisList[idx] = baseAxis;
	                result[idx] = {axis: baseAxis, seriesModels: []};
	            }
	
	            result[idx].seriesModels.push(seriesModel);
	        });
	
	        return result;
	    }
	
	    /**
	     * Calculate offset and box width for each series.
	     */
	    function calculateBase(groupItem) {
	        var extent;
	        var baseAxis = groupItem.axis;
	        var seriesModels = groupItem.seriesModels;
	        var seriesCount = seriesModels.length;
	
	        var boxWidthList = groupItem.boxWidthList = [];
	        var boxOffsetList = groupItem.boxOffsetList = [];
	        var boundList = [];
	
	        var bandWidth;
	        if (baseAxis.type === 'category') {
	            bandWidth = baseAxis.getBandWidth();
	        }
	        else {
	            var maxDataCount = 0;
	            each(seriesModels, function (seriesModel) {
	                maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
	            });
	            extent = baseAxis.getExtent(),
	            Math.abs(extent[1] - extent[0]) / maxDataCount;
	        }
	
	        each(seriesModels, function (seriesModel) {
	            var boxWidthBound = seriesModel.get('boxWidth');
	            if (!zrUtil.isArray(boxWidthBound)) {
	                boxWidthBound = [boxWidthBound, boxWidthBound];
	            }
	            boundList.push([
	                parsePercent(boxWidthBound[0], bandWidth) || 0,
	                parsePercent(boxWidthBound[1], bandWidth) || 0
	            ]);
	        });
	
	        var availableWidth = bandWidth * 0.8 - 2;
	        var boxGap = availableWidth / seriesCount * 0.3;
	        var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
	        var base = boxWidth / 2 - availableWidth / 2;
	
	        each(seriesModels, function (seriesModel, idx) {
	            boxOffsetList.push(base);
	            base += boxGap + boxWidth;
	
	            boxWidthList.push(
	                Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1])
	            );
	        });
	    }
	
	    /**
	     * Calculate points location for each series.
	     */
	    function layoutSingleSeries(seriesModel, offset, boxWidth) {
	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();
	        var dimensions = seriesModel.dimensions;
	        var chartLayout = seriesModel.get('layout');
	        var halfWidth = boxWidth / 2;
	
	        data.each(dimensions, function () {
	            var args = arguments;
	            var dimLen = dimensions.length;
	            var axisDimVal = args[0];
	            var idx = args[dimLen];
	            var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	            var constDim = 1 - variableDim;
	
	            var median = getPoint(args[3]);
	            var end1 = getPoint(args[1]);
	            var end5 = getPoint(args[5]);
	            var whiskerEnds = [
	                [end1, getPoint(args[2])],
	                [end5, getPoint(args[4])]
	            ];
	            layEndLine(end1);
	            layEndLine(end5);
	            layEndLine(median);
	
	            var bodyEnds = [];
	            addBodyEnd(whiskerEnds[0][1], 0);
	            addBodyEnd(whiskerEnds[1][1], 1);
	
	            data.setItemLayout(idx, {
	                chartLayout: chartLayout,
	                initBaseline: median[constDim],
	                median: median,
	                bodyEnds: bodyEnds,
	                whiskerEnds: whiskerEnds
	            });
	
	            function getPoint(val) {
	                var p = [];
	                p[variableDim] = axisDimVal;
	                p[constDim] = val;
	                var point;
	                if (isNaN(axisDimVal) || isNaN(val)) {
	                    point = [NaN, NaN];
	                }
	                else {
	                    point = coordSys.dataToPoint(p);
	                    point[variableDim] += offset;
	                }
	                return point;
	            }
	
	            function addBodyEnd(point, start) {
	                var point1 = point.slice();
	                var point2 = point.slice();
	                point1[variableDim] += halfWidth;
	                point2[variableDim] -= halfWidth;
	                start
	                    ? bodyEnds.push(point1, point2)
	                    : bodyEnds.push(point2, point1);
	            }
	
	            function layEndLine(endCenter) {
	                var line = [endCenter.slice(), endCenter.slice()];
	                line[0][variableDim] -= halfWidth;
	                line[1][variableDim] += halfWidth;
	                whiskerEnds.push(line);
	            }
	        });
	    }
	


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(276);
	    __webpack_require__(277);
	
	    echarts.registerPreprocessor(
	        __webpack_require__(278)
	    );
	
	    echarts.registerVisual(__webpack_require__(279));
	    echarts.registerLayout(__webpack_require__(280));
	


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var SeriesModel = __webpack_require__(49);
	    var whiskerBoxCommon = __webpack_require__(270);
	    var formatUtil = __webpack_require__(27);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;
	
	    var CandlestickSeries = SeriesModel.extend({
	
	        type: 'series.candlestick',
	
	        dependencies: ['xAxis', 'yAxis', 'grid'],
	
	        /**
	         * @readOnly
	         */
	        valueDimensions: ['open', 'close', 'lowest', 'highest'],
	
	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,
	
	        /**
	         * @override
	         */
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            layout: null, // 'horizontal' or 'vertical'
	
	            itemStyle: {
	                normal: {
	                    color: '#c23531', // 阳线 positive
	                    color0: '#314656', // 阴线 negative     '#c23531', '#314656'
	                    borderWidth: 1,
	                    // FIXME
	                    // ec2中使用的是lineStyle.color 和 lineStyle.color0
	                    borderColor: '#c23531',
	                    borderColor0: '#314656'
	                },
	                emphasis: {
	                    borderWidth: 2
	                }
	            },
	
	            barMaxWidth: null,
	            barMinWidth: null,
	            barWidth: null,
	
	            animationUpdate: false,
	            animationEasing: 'linear',
	            animationDuration: 300
	        },
	
	        /**
	         * Get dimension for shadow in dataZoom
	         * @return {string} dimension name
	         */
	        getShadowDim: function () {
	            return 'open';
	        },
	
	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, mutipleSeries) {
	            // It rearly use mutiple candlestick series in one cartesian,
	            // so only consider one series in this default tooltip.
	            var valueHTML = zrUtil.map(this.valueDimensions, function (dim) {
	                return encodeHTML(dim + ': ' + addCommas(this.getData().get(dim, dataIndex)));
	            }, this).join('<br />');
	
	            var html = [];
	            this.name != null && html.push(encodeHTML(this.name));
	            valueHTML != null && html.push(valueHTML);
	
	            return html.join('<br />');
	        },
	
	        brushSelector: function (itemLayout, selectors) {
	            return selectors.rect(itemLayout.brushRect);
	        }
	
	    });
	
	    zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);
	
	    module.exports = CandlestickSeries;
	


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var ChartView = __webpack_require__(63);
	    var graphic = __webpack_require__(64);
	    var whiskerBoxCommon = __webpack_require__(270);
	
	    var CandlestickView = ChartView.extend({
	
	        type: 'candlestick',
	
	        getStyleUpdater: function () {
	            return updateStyle;
	        },
	
	        dispose: zrUtil.noop
	    });
	
	    zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);
	
	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	
	    function updateStyle(itemGroup, data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	        var color = data.getItemVisual(idx, 'color');
	        var borderColor = data.getItemVisual(idx, 'borderColor') || color;
	
	        // Color must be excluded.
	        // Because symbol provide setColor individually to set fill and stroke
	        var itemStyle = normalItemStyleModel.getItemStyle(
	            ['color', 'color0', 'borderColor', 'borderColor0']
	        );
	
	        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	        whiskerEl.useStyle(itemStyle);
	        whiskerEl.style.stroke = borderColor;
	
	        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	        bodyEl.useStyle(itemStyle);
	        bodyEl.style.fill = color;
	        bodyEl.style.stroke = borderColor;
	
	        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	        graphic.setHoverStyle(itemGroup, hoverStyle);
	    }
	
	
	    module.exports = CandlestickView;
	


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (option) {
	        if (!option || !zrUtil.isArray(option.series)) {
	            return;
	        }
	
	        // Translate 'k' to 'candlestick'.
	        zrUtil.each(option.series, function (seriesItem) {
	            if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
	                seriesItem.type = 'candlestick';
	            }
	        });
	    };
	


/***/ },
/* 279 */
/***/ function(module, exports) {

	
	
	    var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	    var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
	    var positiveColorQuery = ['itemStyle', 'normal', 'color'];
	    var negativeColorQuery = ['itemStyle', 'normal', 'color0'];
	
	    module.exports = function (ecModel, api) {
	
	        ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {
	
	            var data = seriesModel.getData();
	
	            data.setVisual({
	                legendSymbol: 'roundRect'
	            });
	
	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var sign = data.getItemLayout(idx).sign;
	
	                    data.setItemVisual(
	                        idx,
	                        {
	                            color: itemModel.get(
	                                sign > 0 ? positiveColorQuery : negativeColorQuery
	                            ),
	                            borderColor: itemModel.get(
	                                sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery
	                            )
	                        }
	                    );
	                });
	            }
	        });
	
	    };


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var retrieve = __webpack_require__(25).retrieve;
	    var parsePercent = __webpack_require__(28).parsePercent;
	
	    module.exports = function (ecModel) {
	
	        ecModel.eachSeriesByType('candlestick', function (seriesModel) {
	
	            var coordSys = seriesModel.coordinateSystem;
	            var data = seriesModel.getData();
	            var dimensions = seriesModel.dimensions;
	            var chartLayout = seriesModel.get('layout');
	
	            var candleWidth = calculateCandleWidth(seriesModel, data);
	
	            data.each(dimensions, function () {
	                var args = arguments;
	                var dimLen = dimensions.length;
	                var axisDimVal = args[0];
	                var idx = args[dimLen];
	                var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	                var constDim = 1 - variableDim;
	
	                var openVal = args[1];
	                var closeVal = args[2];
	                var lowestVal = args[3];
	                var highestVal = args[4];
	
	                var ocLow = Math.min(openVal, closeVal);
	                var ocHigh = Math.max(openVal, closeVal);
	
	                var ocLowPoint = getPoint(ocLow);
	                var ocHighPoint = getPoint(ocHigh);
	                var lowestPoint = getPoint(lowestVal);
	                var highestPoint = getPoint(highestVal);
	
	                var whiskerEnds = [
	                    [highestPoint, ocHighPoint],
	                    [lowestPoint, ocLowPoint]
	                ];
	
	                var bodyEnds = [];
	                addBodyEnd(ocHighPoint, 0);
	                addBodyEnd(ocLowPoint, 1);
	
	                data.setItemLayout(idx, {
	                    chartLayout: chartLayout,
	                    sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,
	                    initBaseline: openVal > closeVal
	                        ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.
	                    bodyEnds: bodyEnds,
	                    whiskerEnds: whiskerEnds,
	                    brushRect: makeBrushRect()
	                });
	
	                function getPoint(val) {
	                    var p = [];
	                    p[variableDim] = axisDimVal;
	                    p[constDim] = val;
	                    return (isNaN(axisDimVal) || isNaN(val))
	                        ? [NaN, NaN]
	                        : coordSys.dataToPoint(p);
	                }
	
	                function addBodyEnd(point, start) {
	                    var point1 = point.slice();
	                    var point2 = point.slice();
	                    point1[variableDim] += candleWidth / 2;
	                    point2[variableDim] -= candleWidth / 2;
	                    start
	                        ? bodyEnds.push(point1, point2)
	                        : bodyEnds.push(point2, point1);
	                }
	
	                function makeBrushRect() {
	                    var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));
	                    var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));
	
	                    pmin[variableDim] -= candleWidth / 2;
	                    pmax[variableDim] -= candleWidth / 2;
	
	                    return {
	                        x: pmin[0],
	                        y: pmin[1],
	                        width: constDim ? candleWidth : pmax[0] - pmin[0],
	                        height: constDim ? pmax[1] - pmin[1] : candleWidth
	                    };
	                }
	
	            }, true);
	        });
	    };
	
	    function calculateCandleWidth(seriesModel, data) {
	        var baseAxis = seriesModel.getBaseAxis();
	        var extent;
	
	        var bandWidth = baseAxis.type === 'category'
	            ? baseAxis.getBandWidth()
	            : (
	                extent = baseAxis.getExtent(),
	                Math.abs(extent[1] - extent[0]) / data.count()
	            );
	
	        var barMaxWidth = parsePercent(
	            retrieve(seriesModel.get('barMaxWidth'), bandWidth),
	            bandWidth
	        );
	        var barMinWidth = parsePercent(
	            retrieve(seriesModel.get('barMinWidth'), 1),
	            bandWidth
	        );
	        var barWidth = seriesModel.get('barWidth');
	        return barWidth != null
	            ? parsePercent(barWidth, bandWidth)
	            // Put max outer to ensure bar visible in spite of overlap.
	            : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);
	    }
	


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var echarts = __webpack_require__(22);
	
	    __webpack_require__(282);
	    __webpack_require__(283);
	
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'effectScatter', 'circle', null
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(132), 'effectScatter'
	    ));


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var createListFromArray = __webpack_require__(123);
	    var SeriesModel = __webpack_require__(49);
	
	    module.exports = SeriesModel.extend({
	
	        type: 'series.effectScatter',
	
	        dependencies: ['grid', 'polar'],
	
	        getInitialData: function (option, ecModel) {
	            var list = createListFromArray(option.data, this, ecModel);
	            return list;
	        },
	
	        brushSelector: 'point',
	
	        defaultOption: {
	            coordinateSystem: 'cartesian2d',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,
	
	            effectType: 'ripple',
	
	            progressive: 0,
	
	            // When to show the effect, option: 'render'|'emphasis'
	            showEffectOn: 'render',
	
	            // Ripple effect config
	            rippleEffect: {
	                period: 4,
	                // Scale of ripple
	                scale: 2.5,
	                // Brush type can be fill or stroke
	                brushType: 'fill'
	            },
	
	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            // Polar coordinate system
	            // polarIndex: 0,
	
	            // Geo coordinate system
	            // geoIndex: 0,
	
	            // symbol: null,        // 图形类型
	            symbolSize: 10          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null,  // 图形旋转控制
	
	            // large: false,
	            // Available when large is true
	            // largeThreshold: 2000,
	
	            // itemStyle: {
	            //     normal: {
	            //         opacity: 1
	            //     }
	            // }
	        }
	
	    });


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var SymbolDraw = __webpack_require__(126);
	    var EffectSymbol = __webpack_require__(284);
	
	    __webpack_require__(22).extendChartView({
	
	        type: 'effectScatter',
	
	        init: function () {
	            this._symbolDraw = new SymbolDraw(EffectSymbol);
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var effectSymbolDraw = this._symbolDraw;
	            effectSymbolDraw.updateData(data);
	            this.group.add(effectSymbolDraw.group);
	        },
	
	        updateLayout: function () {
	            this._symbolDraw.updateLayout();
	        },
	
	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove(api);
	        },
	
	        dispose: function () {}
	    });


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Symbol with ripple effect
	 * @module echarts/chart/helper/EffectSymbol
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var symbolUtil = __webpack_require__(128);
	    var graphic = __webpack_require__(64);
	    var numberUtil = __webpack_require__(28);
	    var Symbol = __webpack_require__(127);
	    var Group = graphic.Group;
	
	    var EFFECT_RIPPLE_NUMBER = 3;
	
	    function normalizeSymbolSize(symbolSize) {
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [+symbolSize, +symbolSize];
	        }
	        return symbolSize;
	    }
	
	    function updateRipplePath(rippleGroup, effectCfg) {
	        rippleGroup.eachChild(function (ripplePath) {
	            ripplePath.attr({
	                z: effectCfg.z,
	                zlevel: effectCfg.zlevel,
	                style: {
	                    stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,
	                    fill: effectCfg.brushType === 'fill' ? effectCfg.color : null
	                }
	            });
	        });
	    }
	    /**
	     * @constructor
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function EffectSymbol(data, idx) {
	        Group.call(this);
	
	        var symbol = new Symbol(data, idx);
	        var rippleGroup = new Group();
	        this.add(symbol);
	        this.add(rippleGroup);
	
	        rippleGroup.beforeUpdate = function () {
	            this.attr(symbol.getScale());
	        };
	        this.updateData(data, idx);
	    }
	
	    var effectSymbolProto = EffectSymbol.prototype;
	
	    effectSymbolProto.stopEffectAnimation = function () {
	        this.childAt(1).removeAll();
	    };
	
	    effectSymbolProto.startEffectAnimation = function (effectCfg) {
	        var symbolType = effectCfg.symbolType;
	        var color = effectCfg.color;
	        var rippleGroup = this.childAt(1);
	
	        for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
	            // var ripplePath = symbolUtil.createSymbol(
	            //     symbolType, -0.5, -0.5, 1, 1, color
	            // );
	            // If width/height are set too small (e.g., set to 1) on ios10
	            // and macOS Sierra, a circle stroke become a rect, no matter what
	            // the scale is set. So we set width/height as 2. See #4136.
	            var ripplePath = symbolUtil.createSymbol(
	                symbolType, -1, -1, 2, 2, color
	            );
	            ripplePath.attr({
	                style: {
	                    strokeNoScale: true
	                },
	                z2: 99,
	                silent: true,
	                scale: [0.5, 0.5]
	            });
	
	            var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;
	            // TODO Configurable effectCfg.period
	            ripplePath.animate('', true)
	                .when(effectCfg.period, {
	                    scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]
	                })
	                .delay(delay)
	                .start();
	            ripplePath.animateStyle(true)
	                .when(effectCfg.period, {
	                    opacity: 0
	                })
	                .delay(delay)
	                .start();
	
	            rippleGroup.add(ripplePath);
	        }
	
	        updateRipplePath(rippleGroup, effectCfg);
	    };
	
	    /**
	     * Update effect symbol
	     */
	    effectSymbolProto.updateEffectAnimation = function (effectCfg) {
	        var oldEffectCfg = this._effectCfg;
	        var rippleGroup = this.childAt(1);
	
	        // Must reinitialize effect if following configuration changed
	        var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];
	        for (var i = 0; i < DIFFICULT_PROPS; i++) {
	            var propName = DIFFICULT_PROPS[i];
	            if (oldEffectCfg[propName] !== effectCfg[propName]) {
	                this.stopEffectAnimation();
	                this.startEffectAnimation(effectCfg);
	                return;
	            }
	        }
	
	        updateRipplePath(rippleGroup, effectCfg);
	    };
	
	    /**
	     * Highlight symbol
	     */
	    effectSymbolProto.highlight = function () {
	        this.trigger('emphasis');
	    };
	
	    /**
	     * Downplay symbol
	     */
	    effectSymbolProto.downplay = function () {
	        this.trigger('normal');
	    };
	
	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    effectSymbolProto.updateData = function (data, idx) {
	        var seriesModel = data.hostModel;
	
	        this.childAt(0).updateData(data, idx);
	
	        var rippleGroup = this.childAt(1);
	        var itemModel = data.getItemModel(idx);
	        var symbolType = data.getItemVisual(idx, 'symbol');
	        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        var color = data.getItemVisual(idx, 'color');
	
	        rippleGroup.attr('scale', symbolSize);
	
	        rippleGroup.traverse(function (ripplePath) {
	            ripplePath.attr({
	                fill: color
	            });
	        });
	
	        var symbolOffset = itemModel.getShallow('symbolOffset');
	        if (symbolOffset) {
	            var pos = rippleGroup.position;
	            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	        }
	        rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;
	
	        var effectCfg = {};
	
	        effectCfg.showEffectOn = seriesModel.get('showEffectOn');
	        effectCfg.rippleScale = itemModel.get('rippleEffect.scale');
	        effectCfg.brushType = itemModel.get('rippleEffect.brushType');
	        effectCfg.period = itemModel.get('rippleEffect.period') * 1000;
	        effectCfg.effectOffset = idx / data.count();
	        effectCfg.z = itemModel.getShallow('z') || 0;
	        effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;
	        effectCfg.symbolType = symbolType;
	        effectCfg.color = color;
	
	        this.off('mouseover').off('mouseout').off('emphasis').off('normal');
	
	        if (effectCfg.showEffectOn === 'render') {
	            this._effectCfg
	                ? this.updateEffectAnimation(effectCfg)
	                : this.startEffectAnimation(effectCfg);
	
	            this._effectCfg = effectCfg;
	        }
	        else {
	            // Not keep old effect config
	            this._effectCfg = null;
	
	            this.stopEffectAnimation();
	            var symbol = this.childAt(0);
	            var onEmphasis = function () {
	                symbol.trigger('emphasis');
	                if (effectCfg.showEffectOn !== 'render') {
	                    this.startEffectAnimation(effectCfg);
	                }
	            };
	            var onNormal = function () {
	                symbol.trigger('normal');
	                if (effectCfg.showEffectOn !== 'render') {
	                    this.stopEffectAnimation();
	                }
	            };
	            this.on('mouseover', onEmphasis, this)
	                .on('mouseout', onNormal, this)
	                .on('emphasis', onEmphasis, this)
	                .on('normal', onNormal, this);
	        }
	
	        this._effectCfg = effectCfg;
	    };
	
	    effectSymbolProto.fadeOut = function (cb) {
	        this.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        cb && cb();
	    };
	
	    zrUtil.inherits(EffectSymbol, Group);
	
	    module.exports = EffectSymbol;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(286);
	    __webpack_require__(287);
	
	    var echarts = __webpack_require__(22);
	    echarts.registerLayout(
	        __webpack_require__(292)
	    );
	    echarts.registerVisual(
	        __webpack_require__(293)
	    );


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var SeriesModel = __webpack_require__(49);
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var formatUtil = __webpack_require__(27);
	    var CoordinateSystem = __webpack_require__(47);
	
	    // Convert [ [{coord: []}, {coord: []}] ]
	    // to [ { coords: [[]] } ]
	    function preprocessOption (seriesOpt) {
	        var data = seriesOpt.data;
	        if (data && data[0] && data[0][0] && data[0][0].coord) {
	            if (__DEV__) {
	                console.warn('Lines data configuration has been changed to'
	                    + ' { coords:[[1,2],[2,3]] }');
	            }
	            seriesOpt.data = zrUtil.map(data, function (itemOpt) {
	                var coords = [
	                    itemOpt[0].coord, itemOpt[1].coord
	                ];
	                var target = {
	                    coords: coords
	                };
	                if (itemOpt[0].name) {
	                    target.fromName = itemOpt[0].name;
	                }
	                if (itemOpt[1].name) {
	                    target.toName = itemOpt[1].name;
	                }
	                return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);
	            });
	        }
	    }
	
	    var LinesSeries = SeriesModel.extend({
	
	        type: 'series.lines',
	
	        dependencies: ['grid', 'polar'],
	
	        visualColorAccessPath: 'lineStyle.normal.color',
	
	        init: function (option) {
	            // Not using preprocessor because mergeOption may not have series.type
	            preprocessOption(option);
	
	            LinesSeries.superApply(this, 'init', arguments);
	        },
	
	        mergeOption: function (option) {
	            preprocessOption(option);
	
	            LinesSeries.superApply(this, 'mergeOption', arguments);
	        },
	
	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var CoordSys = CoordinateSystem.get(option.coordinateSystem);
	                if (!CoordSys) {
	                    throw new Error('Unkown coordinate system ' + option.coordinateSystem);
	                }
	            }
	
	            var lineData = new List(['value'], this);
	            lineData.hasItemOption = false;
	            lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
	                // dataItem is simply coords
	                if (dataItem instanceof Array) {
	                    return NaN;
	                }
	                else {
	                    lineData.hasItemOption = true;
	                    var value = dataItem.value;
	                    if (value != null) {
	                        return value instanceof Array ? value[dimIndex] : value;
	                    }
	                }
	            });
	
	            return lineData;
	        },
	
	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var itemModel = data.getItemModel(dataIndex);
	            var name = itemModel.get('name');
	            if (name) {
	                return name;
	            }
	            var fromName = itemModel.get('fromName');
	            var toName = itemModel.get('toName');
	            var html = [];
	            fromName != null && html.push(fromName);
	            toName != null && html.push(toName);
	
	            return formatUtil.encodeHTML(html.join(' > '));
	        },
	
	        defaultOption: {
	            coordinateSystem: 'geo',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,
	
	            hoverAnimation: true,
	            // Cartesian coordinate system
	            xAxisIndex: 0,
	            yAxisIndex: 0,
	
	            symbol: ['none', 'none'],
	            symbolSize: [10, 10],
	            // Geo coordinate system
	            geoIndex: 0,
	
	            effect: {
	                show: false,
	                period: 4,
	                // Animation delay. support callback
	                // delay: 0,
	                // If move with constant speed px/sec
	                // period will be ignored if this property is > 0,
	                constantSpeed: 0,
	                symbol: 'circle',
	                symbolSize: 3,
	                loop: true,
	                // Length of trail, 0 - 1
	                trailLength: 0.2
	                // Same with lineStyle.normal.color
	                // color
	            },
	
	            large: false,
	            // Available when large is true
	            largeThreshold: 2000,
	
	            // If lines are polyline
	            // polyline not support curveness, label, animation
	            polyline: false,
	
	            label: {
	                normal: {
	                    show: false,
	                    position: 'end'
	                    // distance: 5,
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                }
	            },
	
	            lineStyle: {
	                normal: {
	                    opacity: 0.5
	                }
	            }
	        }
	    });


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var LineDraw = __webpack_require__(223);
	    var EffectLine = __webpack_require__(288);
	    var Line = __webpack_require__(224);
	    var Polyline = __webpack_require__(289);
	    var EffectPolyline = __webpack_require__(290);
	    var LargeLineDraw = __webpack_require__(291);
	
	    __webpack_require__(22).extendChartView({
	
	        type: 'lines',
	
	        init: function () {},
	
	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var lineDraw = this._lineDraw;
	
	            var hasEffect = seriesModel.get('effect.show');
	            var isPolyline = seriesModel.get('polyline');
	            var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');
	
	            if (__DEV__) {
	                if (hasEffect && isLarge) {
	                    console.warn('Large lines not support effect');
	                }
	            }
	            if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {
	                if (lineDraw) {
	                    lineDraw.remove();
	                }
	                lineDraw = this._lineDraw = isLarge
	                    ? new LargeLineDraw()
	                    : new LineDraw(
	                        isPolyline
	                            ? (hasEffect ? EffectPolyline : Polyline)
	                            : (hasEffect ? EffectLine : Line)
	                    );
	                this._hasEffet = hasEffect;
	                this._isPolyline = isPolyline;
	                this._isLarge = isLarge;
	            }
	
	            var zlevel = seriesModel.get('zlevel');
	            var trailLength = seriesModel.get('effect.trailLength');
	
	            var zr = api.getZr();
	            // Avoid the drag cause ghost shadow
	            // FIXME Better way ?
	            zr.painter.getLayer(zlevel).clear(true);
	            // Config layer with motion blur
	            if (this._lastZlevel != null) {
	                zr.configLayer(this._lastZlevel, {
	                    motionBlur: false
	                });
	            }
	            if (hasEffect && trailLength) {
	                if (__DEV__) {
	                    var notInIndividual = false;
	                    ecModel.eachSeries(function (otherSeriesModel) {
	                        if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {
	                            notInIndividual = true;
	                        }
	                    });
	                    notInIndividual && console.warn('Lines with trail effect should have an individual zlevel');
	                }
	
	                zr.configLayer(zlevel, {
	                    motionBlur: true,
	                    lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
	                });
	            }
	
	            this.group.add(lineDraw.group);
	
	            lineDraw.updateData(data);
	
	            this._lastZlevel = zlevel;
	        },
	
	        updateLayout: function (seriesModel, ecModel, api) {
	            this._lineDraw.updateLayout(seriesModel);
	            // Not use motion when dragging or zooming
	            var zr = api.getZr();
	            zr.painter.getLayer(this._lastZlevel).clear(true);
	        },
	
	        remove: function (ecModel, api) {
	            this._lineDraw && this._lineDraw.remove(api, true);
	        },
	
	        dispose: function () {}
	    });


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */
	
	
	    var graphic = __webpack_require__(64);
	    var Line = __webpack_require__(224);
	    var zrUtil = __webpack_require__(25);
	    var symbolUtil = __webpack_require__(128);
	    var vec2 = __webpack_require__(31);
	
	    var curveUtil = __webpack_require__(71);
	
	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Line}
	     */
	    function EffectLine(lineData, idx, seriesScope) {
	        graphic.Group.call(this);
	
	        this.add(this.createLine(lineData, idx, seriesScope));
	
	        this._updateEffectSymbol(lineData, idx);
	    }
	
	    var effectLineProto = EffectLine.prototype;
	
	    effectLineProto.createLine = function (lineData, idx, seriesScope) {
	        return new Line(lineData, idx, seriesScope);
	    };
	
	    effectLineProto._updateEffectSymbol = function (lineData, idx) {
	        var itemModel = lineData.getItemModel(idx);
	        var effectModel = itemModel.getModel('effect');
	        var size = effectModel.get('symbolSize');
	        var symbolType = effectModel.get('symbol');
	        if (!zrUtil.isArray(size)) {
	            size = [size, size];
	        }
	        var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
	        var symbol = this.childAt(1);
	
	        if (this._symbolType !== symbolType) {
	            // Remove previous
	            this.remove(symbol);
	
	            symbol = symbolUtil.createSymbol(
	                symbolType, -0.5, -0.5, 1, 1, color
	            );
	            symbol.z2 = 100;
	            symbol.culling = true;
	
	            this.add(symbol);
	        }
	
	        // Symbol may be removed if loop is false
	        if (!symbol) {
	            return;
	        }
	
	        // Shadow color is same with color in default
	        symbol.setStyle('shadowColor', color);
	        symbol.setStyle(effectModel.getItemStyle(['color']));
	
	        symbol.attr('scale', size);
	
	        symbol.setColor(color);
	        symbol.attr('scale', size);
	
	        this._symbolType = symbolType;
	
	        this._updateEffectAnimation(lineData, effectModel, idx);
	    };
	
	    effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {
	
	        var symbol = this.childAt(1);
	        if (!symbol) {
	            return;
	        }
	
	        var self = this;
	
	        var points = lineData.getItemLayout(idx);
	
	        var period = effectModel.get('period') * 1000;
	        var loop = effectModel.get('loop');
	        var constantSpeed = effectModel.get('constantSpeed');
	        var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {
	            return idx / lineData.count() * period / 3;
	        });
	        var isDelayFunc = typeof delayExpr === 'function';
	
	        // Ignore when updating
	        symbol.ignore = true;
	
	        this.updateAnimationPoints(symbol, points);
	
	        if (constantSpeed > 0) {
	            period = this.getLineLength(symbol) / constantSpeed * 1000;
	        }
	
	        if (period !== this._period || loop !== this._loop) {
	
	            symbol.stopAnimation();
	
	            var delay = delayExpr;
	            if (isDelayFunc) {
	                delay = delayExpr(idx);
	            }
	            if (symbol.__t > 0) {
	                delay = -period * symbol.__t;
	            }
	            symbol.__t = 0;
	            var animator = symbol.animate('', loop)
	                .when(period, {
	                    __t: 1
	                })
	                .delay(delay)
	                .during(function () {
	                    self.updateSymbolPosition(symbol);
	                });
	            if (!loop) {
	                animator.done(function () {
	                    self.remove(symbol);
	                });
	            }
	            animator.start();
	        }
	
	        this._period = period;
	        this._loop = loop;
	    };
	
	    effectLineProto.getLineLength = function (symbol) {
	        // Not so accurate
	        return (vec2.dist(symbol.__p1, symbol.__cp1)
	            + vec2.dist(symbol.__cp1, symbol.__p2));
	    };
	
	    effectLineProto.updateAnimationPoints = function (symbol, points) {
	        symbol.__p1 = points[0];
	        symbol.__p2 = points[1];
	        symbol.__cp1 = points[2] || [
	            (points[0][0] + points[1][0]) / 2,
	            (points[0][1] + points[1][1]) / 2
	        ];
	    };
	
	    effectLineProto.updateData = function (lineData, idx, seriesScope) {
	        this.childAt(0).updateData(lineData, idx, seriesScope);
	        this._updateEffectSymbol(lineData, idx);
	    };
	
	    effectLineProto.updateSymbolPosition = function (symbol) {
	        var p1 = symbol.__p1;
	        var p2 = symbol.__p2;
	        var cp1 = symbol.__cp1;
	        var t = symbol.__t;
	        var pos = symbol.position;
	        var quadraticAt = curveUtil.quadraticAt;
	        var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
	        pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
	        pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);
	
	        // Tangent
	        var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
	        var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);
	
	        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
	
	        symbol.ignore = false;
	    };
	
	
	    effectLineProto.updateLayout = function (lineData, idx) {
	        this.childAt(0).updateLayout(lineData, idx);
	
	        var effectModel = lineData.getItemModel(idx).getModel('effect');
	        this._updateEffectAnimation(lineData, effectModel, idx);
	    };
	
	    zrUtil.inherits(EffectLine, graphic.Group);
	
	    module.exports = EffectLine;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Line
	 */
	
	
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Polyline}
	     */
	    function Polyline(lineData, idx, seriesScope) {
	        graphic.Group.call(this);
	
	        this._createPolyline(lineData, idx, seriesScope);
	    }
	
	    var polylineProto = Polyline.prototype;
	
	    polylineProto._createPolyline = function (lineData, idx, seriesScope) {
	        // var seriesModel = lineData.hostModel;
	        var points = lineData.getItemLayout(idx);
	
	        var line = new graphic.Polyline({
	            shape: {
	                points: points
	            }
	        });
	
	        this.add(line);
	
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	
	    polylineProto.updateData = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	
	        var line = this.childAt(0);
	        var target = {
	            shape: {
	                points: lineData.getItemLayout(idx)
	            }
	        };
	        graphic.updateProps(line, target, seriesModel, idx);
	
	        this._updateCommonStl(lineData, idx, seriesScope);
	    };
	
	    polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	        var line = this.childAt(0);
	        var itemModel = lineData.getItemModel(idx);
	
	        var visualColor = lineData.getItemVisual(idx, 'color');
	
	        var lineStyle = seriesScope && seriesScope.lineStyle;
	        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	
	        if (!seriesScope || lineData.hasItemOption) {
	            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	        }
	        line.useStyle(zrUtil.defaults(
	            {
	                strokeNoScale: true,
	                fill: 'none',
	                stroke: visualColor
	            },
	            lineStyle
	        ));
	        line.hoverStyle = hoverLineStyle;
	
	        graphic.setHoverStyle(this);
	    };
	
	    polylineProto.updateLayout = function (lineData, idx) {
	        var polyline = this.childAt(0);
	        polyline.setShape('points', lineData.getItemLayout(idx));
	    };
	
	    zrUtil.inherits(Polyline, graphic.Group);
	
	    module.exports = Polyline;


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */
	
	
	    var Polyline = __webpack_require__(289);
	    var zrUtil = __webpack_require__(25);
	    var EffectLine = __webpack_require__(288);
	    var vec2 = __webpack_require__(31);
	
	    /**
	     * @constructor
	     * @extends {module:echarts/chart/helper/EffectLine}
	     * @alias {module:echarts/chart/helper/Polyline}
	     */
	    function EffectPolyline(lineData, idx, seriesScope) {
	        EffectLine.call(this, lineData, idx, seriesScope);
	        this._lastFrame = 0;
	        this._lastFramePercent = 0;
	    }
	
	    var effectPolylineProto = EffectPolyline.prototype;
	
	    // Overwrite
	    effectPolylineProto.createLine = function (lineData, idx, seriesScope) {
	        return new Polyline(lineData, idx, seriesScope);
	    };
	
	    // Overwrite
	    effectPolylineProto.updateAnimationPoints = function (symbol, points) {
	        this._points = points;
	        var accLenArr = [0];
	        var len = 0;
	        for (var i = 1; i < points.length; i++) {
	            var p1 = points[i - 1];
	            var p2 = points[i];
	            len += vec2.dist(p1, p2);
	            accLenArr.push(len);
	        }
	        if (len === 0) {
	            return;
	        }
	
	        for (var i = 0; i < accLenArr.length; i++) {
	            accLenArr[i] /= len;
	        }
	        this._offsets = accLenArr;
	        this._length = len;
	    };
	
	    // Overwrite
	    effectPolylineProto.getLineLength = function (symbol) {
	        return this._length;
	    };
	
	    // Overwrite
	    effectPolylineProto.updateSymbolPosition = function (symbol) {
	        var t = symbol.__t;
	        var points = this._points;
	        var offsets = this._offsets;
	        var len = points.length;
	
	        if (!offsets) {
	            // Has length 0
	            return;
	        }
	
	        var lastFrame = this._lastFrame;
	        var frame;
	
	        if (t < this._lastFramePercent) {
	            // Start from the next frame
	            // PENDING start from lastFrame ?
	            var start = Math.min(lastFrame + 1, len - 1);
	            for (frame = start; frame >= 0; frame--) {
	                if (offsets[frame] <= t) {
	                    break;
	                }
	            }
	            // PENDING really need to do this ?
	            frame = Math.min(frame, len - 2);
	        }
	        else {
	            for (var frame = lastFrame; frame < len; frame++) {
	                if (offsets[frame] > t) {
	                    break;
	                }
	            }
	            frame = Math.min(frame - 1, len - 2);
	        }
	
	        vec2.lerp(
	            symbol.position, points[frame], points[frame + 1],
	            (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame])
	        );
	
	        var tx = points[frame + 1][0] - points[frame][0];
	        var ty = points[frame + 1][1] - points[frame][1];
	        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
	
	        this._lastFrame = frame;
	        this._lastFramePercent = t;
	
	        symbol.ignore = false;
	    };
	
	    zrUtil.inherits(EffectPolyline, EffectLine);
	
	    module.exports = EffectPolyline;


/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Batch by color
	
	
	
	    var graphic = __webpack_require__(64);
	
	    var quadraticContain = __webpack_require__(76);
	    var lineContain = __webpack_require__(74);
	
	    var LargeLineShape = graphic.extendShape({
	        shape: {
	            polyline: false,
	
	            segs: []
	        },
	
	        buildPath: function (path, shape) {
	            var segs = shape.segs;
	            var isPolyline = shape.polyline;
	
	            for (var i = 0; i < segs.length; i++) {
	                var seg = segs[i];
	                if (isPolyline) {
	                    path.moveTo(seg[0][0], seg[0][1]);
	                    for (var j = 1; j < seg.length; j++) {
	                        path.lineTo(seg[j][0], seg[j][1]);
	                    }
	                }
	                else {
	                    path.moveTo(seg[0][0], seg[0][1]);
	                    if (seg.length > 2) {
	                        path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);
	                    }
	                    else {
	                        path.lineTo(seg[1][0], seg[1][1]);
	                    }
	                }
	            }
	        },
	
	        findDataIndex: function (x, y) {
	            var shape = this.shape;
	            var segs = shape.segs;
	            var isPolyline = shape.polyline;
	            var lineWidth = Math.max(this.style.lineWidth, 1);
	
	            // Not consider transform
	            for (var i = 0; i < segs.length; i++) {
	                var seg = segs[i];
	                if (isPolyline) {
	                    for (var j = 1; j < seg.length; j++) {
	                        if (lineContain.containStroke(
	                            seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                }
	                else {
	                    if (seg.length > 2) {
	                        if (quadraticContain.containStroke(
	                            seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                    else {
	                        if (lineContain.containStroke(
	                            seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                }
	            }
	
	            return -1;
	        }
	    });
	
	    function LargeLineDraw() {
	        this.group = new graphic.Group();
	
	        this._lineEl = new LargeLineShape();
	    }
	
	    var largeLineProto = LargeLineDraw.prototype;
	
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    largeLineProto.updateData = function (data) {
	        this.group.removeAll();
	
	        var lineEl = this._lineEl;
	
	        var seriesModel = data.hostModel;
	
	        lineEl.setShape({
	            segs: data.mapArray(data.getItemLayout),
	            polyline: seriesModel.get('polyline')
	        });
	
	        lineEl.useStyle(
	            seriesModel.getModel('lineStyle.normal').getLineStyle()
	        );
	
	        var visualColor = data.getVisual('color');
	        if (visualColor) {
	            lineEl.setStyle('stroke', visualColor);
	        }
	        lineEl.setStyle('fill');
	
	        // Enable tooltip
	        // PENDING May have performance issue when path is extremely large
	        lineEl.seriesIndex = seriesModel.seriesIndex;
	        lineEl.on('mousemove', function (e) {
	            lineEl.dataIndex = null;
	            var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);
	            if (dataIndex > 0) {
	                // Provide dataIndex for tooltip
	                lineEl.dataIndex = dataIndex;
	            }
	        });
	
	        // Add back
	        this.group.add(lineEl);
	    };
	
	    largeLineProto.updateLayout = function (seriesModel) {
	        var data = seriesModel.getData();
	        this._lineEl.setShape({
	            segs: data.mapArray(data.getItemLayout)
	        });
	    };
	
	    largeLineProto.remove = function () {
	        this.group.removeAll();
	    };
	
	    module.exports = LargeLineDraw;


/***/ },
/* 292 */
/***/ function(module, exports) {

	
	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('lines', function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	            var lineData = seriesModel.getData();
	
	            // FIXME Use data dimensions ?
	            lineData.each(function (idx) {
	                var itemModel = lineData.getItemModel(idx);
	                // TODO Support pure array
	                var coords = (itemModel.option instanceof Array) ?
	                    itemModel.option : itemModel.get('coords');
	
	                if (__DEV__) {
	                    if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
	                        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
	                    }
	                }
	                var pts = [];
	
	                if (seriesModel.get('polyline')) {
	                    for (var i = 0; i < coords.length; i++) {
	                        pts.push(coordSys.dataToPoint(coords[i]));
	                    }
	                }
	                else {
	                    pts[0] = coordSys.dataToPoint(coords[0]);
	                    pts[1] = coordSys.dataToPoint(coords[1]);
	
	                    var curveness = itemModel.get('lineStyle.normal.curveness');
	                    if (+curveness) {
	                        pts[2] = [
	                            (pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness,
	                            (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness
	                        ];
	                    }
	                }
	                lineData.setItemLayout(idx, pts);
	            });
	        });
	    };


/***/ },
/* 293 */
/***/ function(module, exports) {

	
	
	    function normalize(a) {
	        if (!(a instanceof Array)) {
	            a = [a, a];
	        }
	        return a;
	    }
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('lines', function (seriesModel) {
	            var data = seriesModel.getData();
	            var symbolType = normalize(seriesModel.get('symbol'));
	            var symbolSize = normalize(seriesModel.get('symbolSize'));
	
	            var opacityQuery = 'lineStyle.normal.opacity'.split('.');
	
	            data.setVisual('fromSymbol', symbolType && symbolType[0]);
	            data.setVisual('toSymbol', symbolType && symbolType[1]);
	            data.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	            data.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	            data.setVisual('opacity', seriesModel.get(opacityQuery));
	
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var symbolType = normalize(itemModel.getShallow('symbol', true));
	                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	                var opacity = itemModel.get(opacityQuery);
	
	                symbolType[0] && data.setItemVisual(idx, 'fromSymbol', symbolType[0]);
	                symbolType[1] && data.setItemVisual(idx, 'toSymbol', symbolType[1]);
	                symbolSize[0] && data.setItemVisual(idx, 'fromSymbolSize', symbolSize[0]);
	                symbolSize[1] && data.setItemVisual(idx, 'toSymbolSize', symbolSize[1]);
	
	                data.setItemVisual(idx, 'opacity', opacity);
	            });
	        });
	    };


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(295);
	    __webpack_require__(296);


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var SeriesModel = __webpack_require__(49);
	    var createListFromArray = __webpack_require__(123);
	
	    module.exports = SeriesModel.extend({
	        type: 'series.heatmap',
	
	        getInitialData: function (option, ecModel) {
	            return createListFromArray(option.data, this, ecModel);
	        },
	
	        defaultOption: {
	
	            // Cartesian2D or geo
	            coordinateSystem: 'cartesian2d',
	
	            zlevel: 0,
	
	            z: 2,
	
	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	
	            // Geo coordinate system
	            geoIndex: 0,
	
	            blurSize: 30,
	
	            pointSize: 20,
	
	            maxOpacity: 1,
	
	            minOpacity: 0
	        }
	    });


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var graphic = __webpack_require__(64);
	    var HeatmapLayer = __webpack_require__(297);
	    var zrUtil = __webpack_require__(25);
	
	    function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
	        var dataSpan = dataExtent[1] - dataExtent[0];
	        pieceList = zrUtil.map(pieceList, function (piece) {
	            return {
	                interval: [
	                    (piece.interval[0] - dataExtent[0]) / dataSpan,
	                    (piece.interval[1] - dataExtent[0]) / dataSpan
	                ]
	            };
	        });
	        var len = pieceList.length;
	        var lastIndex = 0;
	        return function (val) {
	            // Try to find in the location of the last found
	            for (var i = lastIndex; i < len; i++) {
	                var interval = pieceList[i].interval;
	                if (interval[0] <= val && val <= interval[1]) {
	                    lastIndex = i;
	                    break;
	                }
	            }
	            if (i === len) { // Not found, back interation
	                for (var i = lastIndex - 1; i >= 0; i--) {
	                    var interval = pieceList[i].interval;
	                    if (interval[0] <= val && val <= interval[1]) {
	                        lastIndex = i;
	                        break;
	                    }
	                }
	            }
	            return i >= 0 && i < len && selected[i];
	        };
	    }
	
	    function getIsInContinuousRange(dataExtent, range) {
	        var dataSpan = dataExtent[1] - dataExtent[0];
	        range = [
	            (range[0] - dataExtent[0]) / dataSpan,
	            (range[1] - dataExtent[0]) / dataSpan
	        ];
	        return function (val) {
	            return val >= range[0] && val <= range[1];
	        };
	    }
	
	    function isGeoCoordSys(coordSys) {
	        var dimensions = coordSys.dimensions;
	        // Not use coorSys.type === 'geo' because coordSys maybe extended
	        return dimensions[0] === 'lng' && dimensions[1] === 'lat';
	    }
	
	    module.exports = __webpack_require__(22).extendChartView({
	
	        type: 'heatmap',
	
	        render: function (seriesModel, ecModel, api) {
	            var visualMapOfThisSeries;
	            ecModel.eachComponent('visualMap', function (visualMap) {
	                visualMap.eachTargetSeries(function (targetSeries) {
	                    if (targetSeries === seriesModel) {
	                        visualMapOfThisSeries = visualMap;
	                    }
	                });
	            });
	
	            if (__DEV__) {
	                if (!visualMapOfThisSeries) {
	                    throw new Error('Heatmap must use with visualMap');
	                }
	            }
	
	            this.group.removeAll();
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys.type === 'cartesian2d') {
	                this._renderOnCartesian(coordSys, seriesModel, api);
	            }
	            else if (isGeoCoordSys(coordSys)) {
	                this._renderOnGeo(
	                    coordSys, seriesModel, visualMapOfThisSeries, api
	                );
	            }
	        },
	
	        dispose: function () {},
	
	        _renderOnCartesian: function (cartesian, seriesModel, api) {
	            var xAxis = cartesian.getAxis('x');
	            var yAxis = cartesian.getAxis('y');
	            var group = this.group;
	
	            if (__DEV__) {
	                if (!(xAxis.type === 'category' && yAxis.type === 'category')) {
	                    throw new Error('Heatmap on cartesian must have two category axes');
	                }
	                if (!(xAxis.onBand && yAxis.onBand)) {
	                    throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');
	                }
	            }
	
	            var width = xAxis.getBandWidth();
	            var height = yAxis.getBandWidth();
	
	            var data = seriesModel.getData();
	
	            var itemStyleQuery = 'itemStyle.normal';
	            var hoverItemStyleQuery = 'itemStyle.emphasis';
	            var labelQuery = 'label.normal';
	            var hoverLabelQuery = 'label.emphasis';
	            var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);
	            var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();
	            var labelModel = seriesModel.getModel('label.normal');
	            var hoverLabelModel = seriesModel.getModel('label.emphasis');
	
	            data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	                var itemModel = data.getItemModel(idx);
	                var point = cartesian.dataToPoint([x, y]);
	                // Ignore empty data
	                if (isNaN(z)) {
	                    return;
	                }
	                var rect = new graphic.Rect({
	                    shape: {
	                        x: point[0] - width / 2,
	                        y: point[1] - height / 2,
	                        width: width,
	                        height: height
	                    },
	                    style: {
	                        fill: data.getItemVisual(idx, 'color'),
	                        opacity: data.getItemVisual(idx, 'opacity')
	                    }
	                });
	                // Optimization for large datset
	                if (data.hasItemOption) {
	                    style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);
	                    hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();
	                    labelModel = itemModel.getModel(labelQuery);
	                    hoverLabelModel = itemModel.getModel(hoverLabelQuery);
	                }
	
	                var rawValue = seriesModel.getRawValue(idx);
	                var defaultText = '-';
	                if (rawValue && rawValue[2] != null) {
	                    defaultText = rawValue[2];
	                }
	                if (labelModel.getShallow('show')) {
	                    graphic.setText(style, labelModel);
	                    style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;
	                }
	                if (hoverLabelModel.getShallow('show')) {
	                    graphic.setText(hoverStl, hoverLabelModel);
	                    hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;
	                }
	
	                rect.setStyle(style);
	
	                graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));
	
	                group.add(rect);
	                data.setItemGraphicEl(idx, rect);
	            });
	        },
	
	        _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {
	            var inRangeVisuals = visualMapModel.targetVisuals.inRange;
	            var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
	            // if (!visualMapping) {
	            //     throw new Error('Data range must have color visuals');
	            // }
	
	            var data = seriesModel.getData();
	            var hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer());
	            hmLayer.blurSize = seriesModel.get('blurSize');
	            hmLayer.pointSize = seriesModel.get('pointSize');
	            hmLayer.minOpacity = seriesModel.get('minOpacity');
	            hmLayer.maxOpacity = seriesModel.get('maxOpacity');
	
	            var rect = geo.getViewRect().clone();
	            var roamTransform = geo.getRoamTransform().transform;
	            rect.applyTransform(roamTransform);
	
	            // Clamp on viewport
	            var x = Math.max(rect.x, 0);
	            var y = Math.max(rect.y, 0);
	            var x2 = Math.min(rect.width + rect.x, api.getWidth());
	            var y2 = Math.min(rect.height + rect.y, api.getHeight());
	            var width = x2 - x;
	            var height = y2 - y;
	
	            var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
	                var pt = geo.dataToPoint([lng, lat]);
	                pt[0] -= x;
	                pt[1] -= y;
	                pt.push(value);
	                return pt;
	            });
	
	            var dataExtent = visualMapModel.getExtent();
	            var isInRange = visualMapModel.type === 'visualMap.continuous'
	                ? getIsInContinuousRange(dataExtent, visualMapModel.option.range)
	                : getIsInPiecewiseRange(
	                    dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected
	                );
	
	            hmLayer.update(
	                points, width, height,
	                inRangeVisuals.color.getNormalizer(),
	                {
	                    inRange: inRangeVisuals.color.getColorMapper(),
	                    outOfRange: outOfRangeVisuals.color.getColorMapper()
	                },
	                isInRange
	            );
	            var img = new graphic.Image({
	                style: {
	                    width: width,
	                    height: height,
	                    x: x,
	                    y: y,
	                    image: hmLayer.canvas
	                },
	                silent: true
	            });
	            this.group.add(img);
	        }
	    });


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file defines echarts Heatmap Chart
	 * @author Ovilia (me@zhangwenli.com)
	 * Inspired by https://github.com/mourner/simpleheat
	 *
	 * @module
	 */
	
	
	    var GRADIENT_LEVELS = 256;
	    var zrUtil = __webpack_require__(25);
	
	    /**
	     * Heatmap Chart
	     *
	     * @class
	     */
	    function Heatmap() {
	        var canvas = zrUtil.createCanvas();
	        this.canvas = canvas;
	
	        this.blurSize = 30;
	        this.pointSize = 20;
	
	        this.maxOpacity = 1;
	        this.minOpacity = 0;
	
	        this._gradientPixels = {};
	    }
	
	    Heatmap.prototype = {
	        /**
	         * Renders Heatmap and returns the rendered canvas
	         * @param {Array} data array of data, each has x, y, value
	         * @param {number} width canvas width
	         * @param {number} height canvas height
	         */
	        update: function(data, width, height, normalize, colorFunc, isInRange) {
	            var brush = this._getBrush();
	            var gradientInRange = this._getGradient(data, colorFunc, 'inRange');
	            var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');
	            var r = this.pointSize + this.blurSize;
	
	            var canvas = this.canvas;
	            var ctx = canvas.getContext('2d');
	            var len = data.length;
	            canvas.width = width;
	            canvas.height = height;
	            for (var i = 0; i < len; ++i) {
	                var p = data[i];
	                var x = p[0];
	                var y = p[1];
	                var value = p[2];
	
	                // calculate alpha using value
	                var alpha = normalize(value);
	
	                // draw with the circle brush with alpha
	                ctx.globalAlpha = alpha;
	                ctx.drawImage(brush, x - r, y - r);
	            }
	
	            // colorize the canvas using alpha value and set with gradient
	            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
	            var pixels = imageData.data;
	            var offset = 0;
	            var pixelLen = pixels.length;
	            var minOpacity = this.minOpacity;
	            var maxOpacity = this.maxOpacity;
	            var diffOpacity = maxOpacity - minOpacity;
	
	            while(offset < pixelLen) {
	                var alpha = pixels[offset + 3] / 256;
	                var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
	                // Simple optimize to ignore the empty data
	                if (alpha > 0) {
	                    var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
	                    // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]
	                    alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
	                    pixels[offset++] = gradient[gradientOffset];
	                    pixels[offset++] = gradient[gradientOffset + 1];
	                    pixels[offset++] = gradient[gradientOffset + 2];
	                    pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
	                }
	                else {
	                    offset += 4;
	                }
	            }
	            ctx.putImageData(imageData, 0, 0);
	
	            return canvas;
	        },
	
	        /**
	         * get canvas of a black circle brush used for canvas to draw later
	         * @private
	         * @returns {Object} circle brush canvas
	         */
	        _getBrush: function() {
	            var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());
	            // set brush size
	            var r = this.pointSize + this.blurSize;
	            var d = r * 2;
	            brushCanvas.width = d;
	            brushCanvas.height = d;
	
	            var ctx = brushCanvas.getContext('2d');
	            ctx.clearRect(0, 0, d, d);
	
	            // in order to render shadow without the distinct circle,
	            // draw the distinct circle in an invisible place,
	            // and use shadowOffset to draw shadow in the center of the canvas
	            ctx.shadowOffsetX = d;
	            ctx.shadowBlur = this.blurSize;
	            // draw the shadow in black, and use alpha and shadow blur to generate
	            // color in color map
	            ctx.shadowColor = '#000';
	
	            // draw circle in the left to the canvas
	            ctx.beginPath();
	            ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
	            ctx.closePath();
	            ctx.fill();
	            return brushCanvas;
	        },
	
	        /**
	         * get gradient color map
	         * @private
	         */
	        _getGradient: function (data, colorFunc, state) {
	            var gradientPixels = this._gradientPixels;
	            var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
	            var color = [];
	            var off = 0;
	            for (var i = 0; i < 256; i++) {
	                colorFunc[state](i / 255, true, color);
	                pixelsSingleState[off++] = color[0];
	                pixelsSingleState[off++] = color[1];
	                pixelsSingleState[off++] = color[2];
	                pixelsSingleState[off++] = color[3];
	            }
	            return pixelsSingleState;
	        }
	    };
	
	    module.exports = Heatmap;
	


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	
	    __webpack_require__(135);
	
	    __webpack_require__(299);
	    __webpack_require__(300);
	
	    var barLayoutGrid = __webpack_require__(161);
	    var echarts = __webpack_require__(22);
	
	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'pictorialBar'));
	
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(131), 'pictorialBar', 'roundRect', null
	    ));
	
	    // In case developer forget to include grid component
	    __webpack_require__(134);


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var PictorialBarSeries = __webpack_require__(157).extend({
	
	        type: 'series.pictorialBar',
	
	        dependencies: ['grid'],
	
	        defaultOption: {
	            symbol: 'circle',     // Customized bar shape
	            symbolSize: null,     // Can be ['100%', '100%'], null means auto.
	            symbolRotate: null,
	
	            symbolPosition: null, // 'start' or 'end' or 'center', null means auto.
	            symbolOffset: null,
	            symbolMargin: null,   // start margin and end margin. Can be a number or a percent string.
	                                  // Auto margin by defualt.
	            symbolRepeat: false,  // false/null/undefined, means no repeat.
	                                  // Can be true, means auto calculate repeat times and cut by data.
	                                  // Can be a number, specifies repeat times, and do not cut by data.
	                                  // Can be 'fixed', means auto calculate repeat times but do not cut by data.
	            symbolRepeatDirection: 'end', // 'end' means from 'start' to 'end'.
	
	            symbolClip: false,
	            symbolBoundingData: null,
	            symbolPatternSize: 400, // 400 * 400 px
	
	            barGap: '-100%',      // In most case, overlap is needed.
	
	            // z can be set in data item, which is z2 actually.
	
	            // Disable progressive
	            progressive: 0,
	            hoverAnimation: false // Open only when needed.
	        },
	
	        getInitialData: function (option) {
	            // Disable stack.
	            option.stack = null;
	            return PictorialBarSeries.superApply(this, 'getInitialData', arguments);
	        }
	    });
	
	    module.exports = PictorialBarSeries;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var symbolUtil = __webpack_require__(128);
	    var numberUtil = __webpack_require__(28);
	    var helper = __webpack_require__(159);
	
	    var parsePercent = numberUtil.parsePercent;
	
	    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'borderWidth'];
	
	    // index: +isHorizontal
	    var LAYOUT_ATTRS = [
	        {xy: 'x', wh: 'width', index: 0, posDesc: ['left', 'right']},
	        {xy: 'y', wh: 'height', index: 1, posDesc: ['top', 'bottom']}
	    ];
	
	    var pathForLineWidth = new graphic.Circle();
	
	    var BarView = __webpack_require__(22).extendChartView({
	
	        type: 'pictorialBar',
	
	        render: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;
	
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = !!baseAxis.isHorizontal();
	            var coordSysRect = cartesian.grid.getRect();
	
	            var opt = {
	                ecSize: {width: api.getWidth(), height: api.getHeight()},
	                seriesModel: seriesModel,
	                coordSys: cartesian,
	                coordSysExtent: [
	                    [coordSysRect.x, coordSysRect.x + coordSysRect.width],
	                    [coordSysRect.y, coordSysRect.y + coordSysRect.height]
	                ],
	                isHorizontal: isHorizontal,
	                valueDim: LAYOUT_ATTRS[+isHorizontal],
	                categoryDim: LAYOUT_ATTRS[1 - isHorizontal]
	            };
	
	            data.diff(oldData)
	                .add(function (dataIndex) {
	                    if (!data.hasValue(dataIndex)) {
	                        return;
	                    }
	
	                    var itemModel = getItemModel(data, dataIndex);
	                    var symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);
	
	                    var bar = createBar(data, opt, symbolMeta);
	
	                    data.setItemGraphicEl(dataIndex, bar);
	                    group.add(bar);
	
	                    updateCommon(bar, opt, symbolMeta);
	                })
	                .update(function (newIndex, oldIndex) {
	                    var bar = oldData.getItemGraphicEl(oldIndex);
	
	                    if (!data.hasValue(newIndex)) {
	                        group.remove(bar);
	                        return;
	                    }
	
	                    var itemModel = getItemModel(data, newIndex);
	                    var symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);
	
	                    var pictorialShapeStr = getShapeStr(data, symbolMeta);
	                    if (bar && pictorialShapeStr !== bar.__pictorialShapeStr) {
	                        group.remove(bar);
	                        data.setItemGraphicEl(newIndex, null);
	                        bar = null;
	                    }
	
	                    if (bar) {
	                        updateBar(bar, opt, symbolMeta);
	                    }
	                    else {
	                        bar = createBar(data, opt, symbolMeta, true);
	                    }
	
	                    data.setItemGraphicEl(newIndex, bar);
	                    bar.__pictorialSymbolMeta = symbolMeta;
	                    // Add back
	                    group.add(bar);
	
	                    updateCommon(bar, opt, symbolMeta);
	                })
	                .remove(function (dataIndex) {
	                    var bar = oldData.getItemGraphicEl(dataIndex);
	                    bar && removeBar(oldData, dataIndex, bar.__pictorialSymbolMeta.animationModel, bar);
	                })
	                .execute();
	
	            this._data = data;
	
	            return this.group;
	        },
	
	        dispose: zrUtil.noop,
	
	        remove: function (ecModel, api) {
	            var group = this.group;
	            var data = this._data;
	            if (ecModel.get('animation')) {
	                if (data) {
	                    data.eachItemGraphicEl(function (bar) {
	                        removeBar(data, bar.dataIndex, ecModel, bar);
	                    });
	                }
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    });
	
	
	    // Set or calculate default value about symbol, and calculate layout info.
	    function getSymbolMeta(data, dataIndex, itemModel, opt) {
	        var layout = data.getItemLayout(dataIndex);
	        var symbolRepeat = itemModel.get('symbolRepeat');
	        var symbolClip = itemModel.get('symbolClip');
	        var symbolPosition = itemModel.get('symbolPosition') || 'start';
	        var symbolRotate = itemModel.get('symbolRotate');
	        var rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	        var symbolPatternSize = itemModel.get('symbolPatternSize') || 2;
	        var isAnimationEnabled = itemModel.isAnimationEnabled();
	
	        var symbolMeta = {
	            dataIndex: dataIndex,
	            layout: layout,
	            itemModel: itemModel,
	            symbolType: data.getItemVisual(dataIndex, 'symbol') || 'circle',
	            color: data.getItemVisual(dataIndex, 'color'),
	            symbolClip: symbolClip,
	            symbolRepeat: symbolRepeat,
	            symbolRepeatDirection: itemModel.get('symbolRepeatDirection'),
	            symbolPatternSize: symbolPatternSize,
	            rotation: rotation,
	            animationModel: isAnimationEnabled ? itemModel : null,
	            hoverAnimation: isAnimationEnabled && itemModel.get('hoverAnimation'),
	            z2: itemModel.getShallow('z', true) || 0
	        };
	
	        prepareBarLength(itemModel, symbolRepeat, layout, opt, symbolMeta);
	
	        prepareSymbolSize(
	            data, dataIndex, layout, symbolRepeat, symbolClip, symbolMeta.boundingLength,
	            symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta
	        );
	
	        prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);
	
	        var symbolSize = symbolMeta.symbolSize;
	        var symbolOffset = itemModel.get('symbolOffset');
	        if (zrUtil.isArray(symbolOffset)) {
	            symbolOffset = [
	                parsePercent(symbolOffset[0], symbolSize[0]),
	                parsePercent(symbolOffset[1], symbolSize[1])
	            ];
	        }
	
	        prepareLayoutInfo(
	            itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,
	            symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength,
	            opt, symbolMeta
	        );
	
	        return symbolMeta;
	    }
	
	    // bar length can be negative.
	    function prepareBarLength(itemModel, symbolRepeat, layout, opt, output) {
	        var valueDim = opt.valueDim;
	        var symbolBoundingData = itemModel.get('symbolBoundingData');
	        var valueAxis = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());
	        var zeroPx = valueAxis.toGlobalCoord(valueAxis.dataToCoord(0));
	
	        var boundingLength = output.boundingLength = symbolBoundingData != null
	            ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.scale.parse(symbolBoundingData))) - zeroPx
	            : symbolRepeat
	            ? opt.coordSysExtent[valueDim.index][1 - +(layout[valueDim.wh] <= 0)] - zeroPx
	            : layout[valueDim.wh];
	
	        if (symbolRepeat) {
	            output.repeatCutLength = layout[valueDim.wh];
	        }
	
	        output.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;
	    }
	
	    // Support ['100%', '100%']
	    function prepareSymbolSize(
	        data, dataIndex, layout, symbolRepeat, symbolClip, boundingLength,
	        pxSign, symbolPatternSize, opt, output
	    ) {
	        var valueDim = opt.valueDim;
	        var categoryDim = opt.categoryDim;
	        var categorySize = Math.abs(layout[categoryDim.wh]);
	
	        var symbolSize = data.getItemVisual(dataIndex, 'symbolSize');
	        if (zrUtil.isArray(symbolSize)) {
	            symbolSize = symbolSize.slice();
	        }
	        else {
	            if (symbolSize == null) {
	                symbolSize = '100%';
	            }
	            symbolSize = [symbolSize, symbolSize];
	        }
	
	        // Note: percentage symbolSize (like '100%') do not consider lineWidth, because it is
	        // to complicated to calculate real percent value if considering scaled lineWidth.
	        // So the actual size will bigger than layout size if lineWidth is bigger than zero,
	        // which can be tolerated in pictorial chart.
	
	        symbolSize[categoryDim.index] = parsePercent(
	            symbolSize[categoryDim.index],
	            categorySize
	        );
	        symbolSize[valueDim.index] = parsePercent(
	            symbolSize[valueDim.index],
	            symbolRepeat ? categorySize : Math.abs(boundingLength)
	        );
	
	        output.symbolSize = symbolSize;
	
	        // If x or y is less than zero, show reversed shape.
	        var symbolScale = output.symbolScale = [
	            symbolSize[0] / symbolPatternSize,
	            symbolSize[1] / symbolPatternSize
	        ];
	        // Follow convention, 'right' and 'top' is the normal scale.
	        symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;
	    }
	
	    function prepareLineWidth(itemModel, symbolScale, rotation, opt, output) {
	        // In symbols are drawn with scale, so do not need to care about the case that width
	        // or height are too small. But symbol use strokeNoScale, where acture lineWidth should
	        // be calculated.
	        var valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	
	        if (valueLineWidth) {
	            pathForLineWidth.attr({
	                scale: symbolScale.slice(),
	                rotation: rotation
	            });
	            pathForLineWidth.updateTransform();
	            valueLineWidth /= pathForLineWidth.getLineScale();
	            valueLineWidth *= symbolScale[opt.valueDim.index];
	        }
	
	        output.valueLineWidth = valueLineWidth;
	    }
	
	    function prepareLayoutInfo(
	        itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,
	        symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, output
	    ) {
	        var categoryDim = opt.categoryDim;
	        var valueDim = opt.valueDim;
	        var pxSign = output.pxSign;
	
	        var unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);
	        var pathLen = unitLength;
	
	        // Note: rotation will not effect the layout of symbols, because user may
	        // want symbols to rotate on its center, which should not be translated
	        // when rotating.
	
	        if (symbolRepeat) {
	            var absBoundingLength = Math.abs(boundingLength);
	
	            var symbolMargin = zrUtil.retrieve(itemModel.get('symbolMargin'), '15%') + '';
	            var hasEndGap = false;
	            if (symbolMargin.lastIndexOf('!') === symbolMargin.length - 1) {
	                hasEndGap = true;
	                symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);
	            }
	            symbolMargin = parsePercent(symbolMargin, symbolSize[valueDim.index]);
	
	            var uLenWithMargin = Math.max(unitLength + symbolMargin * 2, 0);
	
	            // When symbol margin is less than 0, margin at both ends will be subtracted
	            // to ensure that all of the symbols will not be overflow the given area.
	            var endFix = hasEndGap ? 0 : symbolMargin * 2;
	
	            // Both final repeatTimes and final symbolMargin area calculated based on
	            // boundingLength.
	            var repeatSpecified = numberUtil.isNumeric(symbolRepeat);
	            var repeatTimes = repeatSpecified
	                ? symbolRepeat
	                : toIntTimes((absBoundingLength + endFix) / uLenWithMargin);
	
	            // Adjust calculate margin, to ensure each symbol is displayed
	            // entirely in the given layout area.
	            var mDiff = absBoundingLength - repeatTimes * unitLength;
	            symbolMargin = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);
	            uLenWithMargin = unitLength + symbolMargin * 2;
	            endFix = hasEndGap ? 0 : symbolMargin * 2;
	
	            // Update repeatTimes when not all symbol will be shown.
	            if (!repeatSpecified && symbolRepeat !== 'fixed') {
	                repeatTimes = repeatCutLength
	                    ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin)
	                    : 0;
	            }
	
	            pathLen = repeatTimes * uLenWithMargin - endFix;
	            output.repeatTimes = repeatTimes;
	            output.symbolMargin = symbolMargin;
	        }
	
	        var sizeFix = pxSign * (pathLen / 2);
	        var pathPosition = output.pathPosition = [];
	        pathPosition[categoryDim.index] = layout[categoryDim.wh] / 2;
	        pathPosition[valueDim.index] = symbolPosition === 'start'
	            ? sizeFix
	            : symbolPosition === 'end'
	            ? boundingLength - sizeFix
	            : boundingLength / 2; // 'center'
	        if (symbolOffset) {
	            pathPosition[0] += symbolOffset[0];
	            pathPosition[1] += symbolOffset[1];
	        }
	
	        var bundlePosition = output.bundlePosition = [];
	        bundlePosition[categoryDim.index] = layout[categoryDim.xy];
	        bundlePosition[valueDim.index] = layout[valueDim.xy];
	
	        var barRectShape = output.barRectShape = zrUtil.extend({}, layout);
	        barRectShape[valueDim.wh] = pxSign * Math.max(
	            Math.abs(layout[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix)
	        );
	        barRectShape[categoryDim.wh] = layout[categoryDim.wh];
	
	        var clipShape = output.clipShape = {};
	        // Consider that symbol may be overflow layout rect.
	        clipShape[categoryDim.xy] = -layout[categoryDim.xy];
	        clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];
	        clipShape[valueDim.xy] = 0;
	        clipShape[valueDim.wh] = layout[valueDim.wh];
	    }
	
	    function createPath(symbolMeta) {
	        var symbolPatternSize = symbolMeta.symbolPatternSize;
	        var path = symbolUtil.createSymbol(
	            // Consider texture img, make a big size.
	            symbolMeta.symbolType,
	            -symbolPatternSize / 2,
	            -symbolPatternSize / 2,
	            symbolPatternSize,
	            symbolPatternSize,
	            symbolMeta.color
	        );
	        path.attr({
	            culling: true
	        });
	        path.type !== 'image' && path.setStyle({
	            strokeNoScale: true
	        });
	
	        return path;
	    }
	
	    function createOrUpdateRepeatSymbols(bar, opt, symbolMeta, isUpdate) {
	        var bundle = bar.__pictorialBundle;
	        var symbolSize = symbolMeta.symbolSize;
	        var valueLineWidth = symbolMeta.valueLineWidth;
	        var pathPosition = symbolMeta.pathPosition;
	        var valueDim = opt.valueDim;
	        var repeatTimes = symbolMeta.repeatTimes || 0;
	
	        var index = 0;
	        var unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;
	
	        eachPath(bar, function (path) {
	            path.__pictorialAnimationIndex = index;
	            path.__pictorialRepeatTimes = repeatTimes;
	            if (index < repeatTimes) {
	                updateAttr(path, null, makeTarget(index), symbolMeta, isUpdate);
	            }
	            else {
	                updateAttr(path, null, {scale: [0, 0]}, symbolMeta, isUpdate, function () {
	                    bundle.remove(path);
	                });
	            }
	
	            updateHoverAnimation(path, symbolMeta);
	
	            index++;
	        });
	
	        for (; index < repeatTimes; index++) {
	            var path = createPath(symbolMeta);
	            path.__pictorialAnimationIndex = index;
	            path.__pictorialRepeatTimes = repeatTimes;
	            bundle.add(path);
	
	            var target = makeTarget(index, true);
	
	            updateAttr(
	                path,
	                {
	                    position: target.position,
	                    scale: [0, 0]
	                },
	                {
	                    scale: target.scale,
	                    rotation: target.rotation
	                },
	                symbolMeta,
	                isUpdate
	            );
	
	            // FIXME
	            // If all emphasis/normal through action.
	            path
	                .on('mouseover', onMouseOver)
	                .on('mouseout', onMouseOut);
	
	            updateHoverAnimation(path, symbolMeta);
	        }
	
	        function makeTarget(index) {
	            var position = pathPosition.slice();
	            // (start && pxSign > 0) || (end && pxSign < 0): i = repeatTimes - index
	            // Otherwise: i = index;
	            var pxSign = symbolMeta.pxSign;
	            var i = index;
	            if (symbolMeta.symbolRepeatDirection === 'start' ? pxSign > 0 : pxSign < 0) {
	                i = repeatTimes - 1 - index;
	            }
	            position[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];
	
	            return {
	                position: position,
	                scale: symbolMeta.symbolScale.slice(),
	                rotation: symbolMeta.rotation
	            };
	        }
	
	        function onMouseOver() {
	            eachPath(bar, function (path) {
	                path.trigger('emphasis');
	            });
	        }
	
	        function onMouseOut() {
	            eachPath(bar, function (path) {
	                path.trigger('normal');
	            });
	        }
	    }
	
	    function createOrUpdateSingleSymbol(bar, opt, symbolMeta, isUpdate) {
	        var bundle = bar.__pictorialBundle;
	        var mainPath = bar.__pictorialMainPath;
	
	        if (!mainPath) {
	            mainPath = bar.__pictorialMainPath = createPath(symbolMeta);
	            bundle.add(mainPath);
	
	            updateAttr(
	                mainPath,
	                {
	                    position: symbolMeta.pathPosition.slice(),
	                    scale: [0, 0],
	                    rotation: symbolMeta.rotation
	                },
	                {
	                    scale: symbolMeta.symbolScale.slice()
	                },
	                symbolMeta,
	                isUpdate
	            );
	
	            mainPath
	                .on('mouseover', onMouseOver)
	                .on('mouseout', onMouseOut);
	        }
	        else {
	            updateAttr(
	                mainPath,
	                null,
	                {
	                    position: symbolMeta.pathPosition.slice(),
	                    scale: symbolMeta.symbolScale.slice(),
	                    rotation: symbolMeta.rotation
	                },
	                symbolMeta,
	                isUpdate
	            );
	        }
	
	        updateHoverAnimation(mainPath, symbolMeta);
	
	        function onMouseOver() {
	            this.trigger('emphasis');
	        }
	
	        function onMouseOut() {
	            this.trigger('normal');
	        }
	    }
	
	    // bar rect is used for label.
	    function createOrUpdateBarRect(bar, symbolMeta, isUpdate) {
	        var rectShape = zrUtil.extend({}, symbolMeta.barRectShape);
	
	        var barRect = bar.__pictorialBarRect;
	        if (!barRect) {
	            barRect = bar.__pictorialBarRect = new graphic.Rect({
	                z2: 2,
	                shape: rectShape,
	                silent: true,
	                style: {
	                    stroke: 'transparent',
	                    fill: 'transparent',
	                    lineWidth: 0
	                }
	            });
	
	            bar.add(barRect);
	        }
	        else {
	            updateAttr(barRect, null, {shape: rectShape}, symbolMeta, isUpdate);
	        }
	    }
	
	    function createOrUpdateClip(bar, opt, symbolMeta, isUpdate) {
	        // If not clip, symbol will be remove and rebuilt.
	        if (symbolMeta.symbolClip) {
	            var clipPath = bar.__pictorialClipPath;
	            var clipShape = zrUtil.extend({}, symbolMeta.clipShape);
	            var valueDim = opt.valueDim;
	            var animationModel = symbolMeta.animationModel;
	            var dataIndex = symbolMeta.dataIndex;
	
	            if (clipPath) {
	                graphic.updateProps(
	                    clipPath, {shape: clipShape}, animationModel, dataIndex
	                );
	            }
	            else {
	                clipShape[valueDim.wh] = 0;
	                clipPath = new graphic.Rect({shape: clipShape});
	                bar.__pictorialBundle.setClipPath(clipPath);
	                bar.__pictorialClipPath = clipPath;
	
	                var target = {};
	                target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];
	
	                graphic[isUpdate ? 'updateProps' : 'initProps'](
	                    clipPath, {shape: target}, animationModel, dataIndex
	                );
	            }
	        }
	    }
	
	    function getItemModel(data, dataIndex) {
	        var itemModel = data.getItemModel(dataIndex);
	        itemModel.getAnimationDelayParams = getAnimationDelayParams;
	        itemModel.isAnimationEnabled = isAnimationEnabled;
	        return itemModel;
	    }
	
	    function getAnimationDelayParams(path) {
	        // The order is the same as the z-order, see `symbolRepeatDiretion`.
	        return {
	            index: path.__pictorialAnimationIndex,
	            count: path.__pictorialRepeatTimes
	        };
	    }
	
	    function isAnimationEnabled() {
	        // `animation` prop can be set on itemModel in pictorial bar chart.
	        return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');
	    }
	
	    function updateHoverAnimation(path, symbolMeta) {
	        path.off('emphasis').off('normal');
	
	        var scale = symbolMeta.symbolScale.slice();
	
	        symbolMeta.hoverAnimation && path
	            .on('emphasis', function() {
	                this.animateTo({
	                    scale: [scale[0] * 1.1, scale[1] * 1.1]
	                }, 400, 'elasticOut');
	            })
	            .on('normal', function() {
	                this.animateTo({
	                    scale: scale.slice()
	                }, 400, 'elasticOut');
	            });
	    }
	
	    function createBar(data, opt, symbolMeta, isUpdate) {
	        // bar is the main element for each data.
	        var bar = new graphic.Group();
	        // bundle is used for location and clip.
	        var bundle = new graphic.Group();
	        bar.add(bundle);
	        bar.__pictorialBundle = bundle;
	        bundle.attr('position', symbolMeta.bundlePosition.slice());
	
	        if (symbolMeta.symbolRepeat) {
	            createOrUpdateRepeatSymbols(bar, opt, symbolMeta);
	        }
	        else {
	            createOrUpdateSingleSymbol(bar, opt, symbolMeta);
	        }
	
	        createOrUpdateBarRect(bar, symbolMeta, isUpdate);
	
	        createOrUpdateClip(bar, opt, symbolMeta, isUpdate);
	
	        bar.__pictorialShapeStr = getShapeStr(data, symbolMeta);
	        bar.__pictorialSymbolMeta = symbolMeta;
	
	        return bar;
	    }
	
	    function updateBar(bar, opt, symbolMeta) {
	        var animationModel = symbolMeta.animationModel;
	        var dataIndex = symbolMeta.dataIndex;
	        var bundle = bar.__pictorialBundle;
	
	        graphic.updateProps(
	            bundle, {position: symbolMeta.bundlePosition.slice()}, animationModel, dataIndex
	        );
	
	        if (symbolMeta.symbolRepeat) {
	            createOrUpdateRepeatSymbols(bar, opt, symbolMeta, true);
	        }
	        else {
	            createOrUpdateSingleSymbol(bar, opt, symbolMeta, true);
	        }
	
	        createOrUpdateBarRect(bar, symbolMeta, true);
	
	        createOrUpdateClip(bar, opt, symbolMeta, true);
	    }
	
	    function removeBar(data, dataIndex, animationModel, bar) {
	        // Not show text when animating
	        var labelRect = bar.__pictorialBarRect;
	        labelRect && (labelRect.style.text = '');
	
	        var pathes = [];
	        eachPath(bar, function (path) {
	            pathes.push(path);
	        });
	        bar.__pictorialMainPath && pathes.push(bar.__pictorialMainPath);
	
	        // I do not find proper remove animation for clip yet.
	        bar.__pictorialClipPath && (animationModel = null);
	
	        zrUtil.each(pathes, function (path) {
	            graphic.updateProps(
	                path, {scale: [0, 0]}, animationModel, dataIndex,
	                function () {
	                    bar.parent && bar.parent.remove(bar);
	                }
	            );
	        });
	
	        data.setItemGraphicEl(dataIndex, null);
	    }
	
	    function getShapeStr(data, symbolMeta) {
	        return [
	            data.getItemVisual(symbolMeta.dataIndex, 'symbol') || 'none',
	            !!symbolMeta.symbolRepeat,
	            !!symbolMeta.symbolClip
	        ].join(':');
	    }
	
	    function eachPath(bar, cb, context) {
	        // Do not use Group#eachChild, because it do not support remove.
	        zrUtil.each(bar.__pictorialBundle.children(), function (el) {
	            el !== bar.__pictorialBarRect && cb.call(context, el);
	        });
	    }
	
	    function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {
	        immediateAttrs && el.attr(immediateAttrs);
	        // when symbolCip used, only clip path has init animation, otherwise it would be weird effect.
	        if (symbolMeta.symbolClip && !isUpdate) {
	            animationAttrs && el.attr(animationAttrs);
	        }
	        else {
	            animationAttrs && graphic[isUpdate ? 'updateProps' : 'initProps'](
	                el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb
	            );
	        }
	    }
	
	    function updateCommon(bar, opt, symbolMeta) {
	        var color = symbolMeta.color;
	        var dataIndex = symbolMeta.dataIndex;
	        var itemModel = symbolMeta.itemModel;
	        // Color must be excluded.
	        // Because symbol provide setColor individually to set fill and stroke
	        var normalStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	
	        eachPath(bar, function (path) {
	            // PENDING setColor should be before setStyle!!!
	            path.setColor(color);
	            path.setStyle(zrUtil.defaults(
	                {
	                    fill: color,
	                    opacity: symbolMeta.opacity
	                },
	                normalStyle
	            ));
	            graphic.setHoverStyle(path, hoverStyle);
	
	            path.z2 = symbolMeta.z2;
	        });
	
	        var barRectHoverStyle = {};
	        var barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];
	        var barRect = bar.__pictorialBarRect;
	
	        helper.setLabel(
	            barRect.style, barRectHoverStyle, itemModel,
	            color, opt.seriesModel, dataIndex, barPositionOutside
	        );
	
	        graphic.setHoverStyle(barRect, barRectHoverStyle);
	    }
	
	    function toIntTimes(times) {
	        var roundedTimes = Math.round(times);
	        // Escapse accurate error
	        return Math.abs(times - roundedTimes) < 1e-4
	            ? roundedTimes
	            : Math.ceil(times);
	    }
	
	    module.exports = BarView;


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    __webpack_require__(302);
	
	    __webpack_require__(308);
	
	    __webpack_require__(309);
	
	    echarts.registerLayout(__webpack_require__(311));
	
	    echarts.registerVisual(__webpack_require__(312));
	
	    echarts.registerProcessor(
	        zrUtil.curry(__webpack_require__(170), 'themeRiver')
	    );


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(303);
	    __webpack_require__(306);
	    __webpack_require__(307);
	
	    var echarts = __webpack_require__(22);
	
	    echarts.extendComponentView({
	        type: 'single'
	    });
	


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Single coordinate system creator.
	 */
	
	
	    var Single = __webpack_require__(304);
	
	    /**
	     * Create single coordinate system and inject it into seriesModel.
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     * @return {Array.<module:echarts/coord/single/Single>}
	     */
	    function create(ecModel, api) {
	        var singles = [];
	
	        ecModel.eachComponent('singleAxis', function(axisModel, idx) {
	
	            var single = new Single(axisModel, ecModel, api);
	            single.name = 'single_' + idx;
	            single.resize(axisModel, api);
	            axisModel.coordinateSystem = single;
	            singles.push(single);
	
	        });
	
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'singleAxis') {
	                var singleAxisModel = ecModel.queryComponents({
	                    mainType: 'singleAxis',
	                    index: seriesModel.get('singleAxisIndex'),
	                    id: seriesModel.get('singleAxisId')
	                })[0];
	                seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;
	            }
	        });
	
	        return singles;
	    }
	
	    __webpack_require__(47).register('single', {
	        create: create,
	        dimensions: Single.prototype.dimensions
	    });


/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Single coordinates system.
	 */
	
	
	    var SingleAxis = __webpack_require__(305);
	    var axisHelper = __webpack_require__(136);
	    var layout = __webpack_require__(42);
	
	    /**
	     * Create a single coordinates system.
	     *
	     * @param {module:echarts/coord/single/AxisModel} axisModel
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function Single(axisModel, ecModel, api) {
	
	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.dimension = 'single';
	
	        /**
	         * Add it just for draw tooltip.
	         *
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        this.dimensions = ['single'];
	
	        /**
	         * @private
	         * @type {module:echarts/coord/single/SingleAxis}.
	         */
	        this._axis = null;
	
	        /**
	         * @private
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._rect;
	
	        this._init(axisModel, ecModel, api);
	
	        /**
	         * @type {module:echarts/coord/single/AxisModel}
	         */
	        this._model = axisModel;
	    }
	
	    Single.prototype = {
	
	        type: 'singleAxis',
	
	        constructor: Single,
	
	        /**
	         * Initialize single coordinate system.
	         *
	         * @param  {module:echarts/coord/single/AxisModel} axisModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @private
	         */
	        _init: function (axisModel, ecModel, api) {
	
	            var dim = this.dimension;
	
	            var axis = new SingleAxis(
	                dim,
	                axisHelper.createScaleByModel(axisModel),
	                [0, 0],
	                axisModel.get('type'),
	                axisModel.get('position')
	            );
	
	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');
	            axis.orient = axisModel.get('orient');
	
	            axisModel.axis = axis;
	            axis.model = axisModel;
	            this._axis = axis;
	        },
	
	        /**
	         * Update axis scale after data processed
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        update: function (ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.coordinateSystem === this) {
	                    var data = seriesModel.getData();
	                    var dim = this.dimension;
	                    this._axis.scale.unionExtentFromData(
	                        data, seriesModel.coordDimToDataDim(dim)
	                    );
	                    axisHelper.niceScaleExtent(this._axis, this._axis.model);
	                }
	            }, this);
	        },
	
	        /**
	         * Resize the single coordinate system.
	         *
	         * @param  {module:echarts/coord/single/AxisModel} axisModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        resize: function (axisModel, api) {
	            this._rect = layout.getLayoutRect(
	                {
	                    left: axisModel.get('left'),
	                    top: axisModel.get('top'),
	                    right: axisModel.get('right'),
	                    bottom: axisModel.get('bottom'),
	                    width: axisModel.get('width'),
	                    height: axisModel.get('height')
	                },
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );
	
	            this._adjustAxis();
	        },
	
	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getRect: function () {
	            return this._rect;
	        },
	
	        /**
	         * @private
	         */
	        _adjustAxis: function () {
	
	            var rect = this._rect;
	            var axis = this._axis;
	
	            var isHorizontal = axis.isHorizontal();
	            var extent = isHorizontal ? [0, rect.width] : [0, rect.height];
	            var idx =  axis.reverse ? 1 : 0;
	
	            axis.setExtent(extent[idx], extent[1 - idx]);
	
	            this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);
	
	        },
	
	        /**
	         * @param  {module:echarts/coord/single/SingleAxis} axis
	         * @param  {number} coordBase
	         */
	        _updateAxisTransform: function (axis, coordBase) {
	
	            var axisExtent = axis.getExtent();
	            var extentSum = axisExtent[0] + axisExtent[1];
	            var isHorizontal = axis.isHorizontal();
	
	            axis.toGlobalCoord = isHorizontal ?
	                function (coord) {
	                    return coord + coordBase;
	                } :
	                function (coord) {
	                    return extentSum - coord + coordBase;
	                };
	
	            axis.toLocalCoord = isHorizontal ?
	                function (coord) {
	                    return coord - coordBase;
	                } :
	                function (coord) {
	                    return extentSum - coord + coordBase;
	                };
	        },
	
	        /**
	         * Get axis.
	         *
	         * @return {module:echarts/coord/single/SingleAxis}
	         */
	        getAxis: function () {
	            return this._axis;
	        },
	
	        /**
	         * Get axis, add it just for draw tooltip.
	         *
	         * @return {[type]} [description]
	         */
	        getBaseAxis: function () {
	            return this._axis;
	        },
	
	        /**
	         * If contain point.
	         *
	         * @param  {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var rect = this.getRect();
	            var axis = this.getAxis();
	            var orient = axis.orient;
	            if (orient === 'horizontal') {
	                return axis.contain(axis.toLocalCoord(point[0]))
	                && (point[1] >= rect.y && point[1] <= (rect.y + rect.height));
	            }
	            else {
	                return axis.contain(axis.toLocalCoord(point[1]))
	                && (point[0] >= rect.y && point[0] <= (rect.y + rect.height));
	            }
	        },
	
	        /**
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToData: function (point) {
	            var axis = this.getAxis();
	            return [axis.coordToData(axis.toLocalCoord(
	                point[axis.orient === 'horizontal' ? 0 : 1]
	            ))];
	        },
	
	        /**
	         * Convert the series data to concrete point.
	         *
	         * @param  {number|Array.<number>} val
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (val) {
	            var axis = this.getAxis();
	            var rect = this.getRect();
	            var pt = [];
	            var idx = axis.orient === 'horizontal' ? 0 : 1;
	            pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));
	            pt[1 - idx] = idx === 0 ? (rect.y + rect.height / 2) : (rect.x + rect.width / 2);
	            return pt;
	        }
	    };
	
	    module.exports = Single;
	


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	    var axisHelper = __webpack_require__(136);
	
	    /**
	     * @constructor  module:echarts/coord/single/SingleAxis
	     * @extends {module:echarts/coord/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var SingleAxis = function (dim, scale, coordExtent, axisType, position) {
	
	        Axis.call(this, dim, scale, coordExtent);
	
	        /**
	         * Axis type
	         * - 'category'
	         * - 'value'
	         * - 'time'
	         * - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';
	
	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         *  @type {string}
	         */
	        this.position = position || 'bottom';
	
	        /**
	         * Axis orient
	         *  - 'horizontal'
	         *  - 'vertical'
	         * @type {[type]}
	         */
	        this.orient = null;
	
	        /**
	         * @type {number}
	         */
	        this._labelInterval = null;
	
	    };
	
	    SingleAxis.prototype = {
	
	        constructor: SingleAxis,
	
	        /**
	         * Axis model
	         * @type {module:echarts/coord/single/AxisModel}
	         */
	        model: null,
	
	        /**
	         * Judge the orient of the axis.
	         * @return {boolean}
	         */
	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';
	
	        },
	
	        /**
	         * Get interval of the axis label.
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                var axisModel = this.model;
	                var labelModel = axisModel.getModel('axisLabel');
	                var interval = labelModel.get('interval');
	                if (!(this.type === 'category' && interval === 'auto')) {
	
	                    labelInterval = this._labelInterval = interval === 'auto' ? 0 : interval;
	                    return labelInterval;
	                }
	                labelInterval = this._labelInterval =
	                    axisHelper.getAxisLabelInterval(
	                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),
	                        axisModel.getFormattedLabels(),
	                        labelModel.getModel('textStyle').getFont(),
	                        this.isHorizontal()
	                    );
	            }
	            return labelInterval;
	        },
	
	        /**
	         * Convert the local coord(processed by dataToCoord())
	         * to global coord(concrete pixel coord).
	         * designated by module:echarts/coord/single/Single.
	         * @type {Function}
	         */
	        toGlobalCoord: null,
	
	        /**
	         * Convert the global coord to local coord.
	         * designated by module:echarts/coord/single/Single.
	         * @type {Function}
	         */
	        toLocalCoord: null
	
	    };
	
	    zrUtil.inherits(SingleAxis, Axis);
	
	    module.exports = SingleAxis;


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var AxisBuilder = __webpack_require__(154);
	    var zrUtil =  __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var getInterval = AxisBuilder.getInterval;
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	
	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	
	    var selfBuilderAttr = 'splitLine';
	
	    var AxisView = __webpack_require__(22).extendComponentView({
	
	        type: 'singleAxis',
	
	        render: function (axisModel, ecModel) {
	
	            var group = this.group;
	
	            group.removeAll();
	
	            var layout =  axisLayout(axisModel);
	
	            var axisBuilder = new AxisBuilder(axisModel, layout);
	
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	
	            group.add(axisBuilder.getGroup());
	
	            if (axisModel.get(selfBuilderAttr + '.show')) {
	                this['_' + selfBuilderAttr](axisModel, layout.labelInterval);
	            }
	        },
	
	        _splitLine: function(axisModel, labelInterval) {
	            var axis = axisModel.axis;
	
	            if (axis.isBlank()) {
	                return;
	            }
	
	            var splitLineModel = axisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineWidth = lineStyleModel.get('width');
	            var lineColors = lineStyleModel.get('color');
	            var lineInterval = getInterval(splitLineModel, labelInterval);
	
	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	
	            var gridRect = axisModel.coordinateSystem.getRect();
	            var isHorizontal = axis.isHorizontal();
	
	            var splitLines = [];
	            var lineCount = 0;
	
	            var ticksCoords = axis.getTicksCoords();
	
	            var p1 = [];
	            var p2 = [];
	
	            for (var i = 0; i < ticksCoords.length; ++i) {
	                if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                    continue;
	                }
	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	                if (isHorizontal) {
	                    p1[0] = tickCoord;
	                    p1[1] = gridRect.y;
	                    p2[0] = tickCoord;
	                    p2[1] = gridRect.y + gridRect.height;
	                }
	                else {
	                    p1[0] = gridRect.x;
	                    p1[1] = tickCoord;
	                    p2[0] = gridRect.x + gridRect.width;
	                    p2[1] = tickCoord;
	                }
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Line(
	                    graphic.subPixelOptimizeLine({
	                        shape: {
	                            x1: p1[0],
	                            y1: p1[1],
	                            x2: p2[0],
	                            y2: p2[1]
	                        },
	                        style: {
	                            lineWidth: lineWidth
	                        },
	                        silent: true
	                    })));
	            }
	
	            for (var i = 0; i < splitLines.length; ++i) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: {
	                        stroke: lineColors[i % lineColors.length],
	                        lineDash: lineStyleModel.getLineDash(lineWidth),
	                        lineWidth: lineWidth
	                    },
	                    silent: true
	                }));
	            }
	        }
	    });
	
	    function axisLayout(axisModel) {
	
	        var single = axisModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};
	
	        var axisPosition = axis.position;
	        var orient = axis.orient;
	
	        var rect = single.getRect();
	        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	
	        var positionMap = {
	            horizontal: {top: rectBound[2], bottom: rectBound[3]},
	            vertical: {left: rectBound[0], right: rectBound[1]}
	        };
	
	        layout.position = [
	            orient === 'vertical'
	                ? positionMap.vertical[axisPosition]
	                : rectBound[0],
	            orient === 'horizontal'
	                ? positionMap.horizontal[axisPosition]
	                : rectBound[3]
	        ];
	
	        var r = {horizontal: 0, vertical: 1};
	        layout.rotation = Math.PI / 2 * r[orient];
	
	        var directionMap = {top: -1, bottom: 1, right: 1, left: -1};
	
	        layout.labelDirection = layout.tickDirection
	            = layout.nameDirection
	            = directionMap[axisPosition];
	
	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }
	
	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }
	
	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;
	
	        layout.labelInterval = axis.getLabelInterval();
	
	        layout.z2 = 1;
	
	        return layout;
	    }
	
	    module.exports = AxisView;
	


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var ComponentModel = __webpack_require__(40);
	    var axisModelCreator = __webpack_require__(149);
	    var zrUtil =  __webpack_require__(25);
	
	    var AxisModel = ComponentModel.extend({
	
	        type: 'singleAxis',
	
	        layoutMode: 'box',
	
	        /**
	         * @type {module:echarts/coord/single/SingleAxis}
	         */
	        axis: null,
	
	        /**
	         * @type {module:echarts/coord/single/Single}
	         */
	        coordinateSystem: null,
	
	        /**
	         * @override
	         */
	        getCoordSysModel: function () {
	            return this;
	        }
	
	    });
	
	    var defaultOption = {
	
	        left: '5%',
	        top: '5%',
	        right: '5%',
	        bottom: '5%',
	
	        type: 'value',
	
	        position: 'bottom',
	
	        orient: 'horizontal',
	
	        axisLine: {
	            show: true,
	            lineStyle: {
	                width: 2,
	                type: 'solid'
	            }
	        },
	
	        axisTick: {
	            show: true,
	            length: 6,
	            lineStyle: {
	                width: 2
	            }
	        },
	
	        axisLabel: {
	            show: true,
	            interval: 'auto'
	        },
	
	        splitLine: {
	            show: true,
	            lineStyle: {
	                type: 'dashed',
	                opacity: 0.2
	            }
	        }
	    };
	
	    function getAxisType(axisName, option) {
	        return option.type || (option.data ? 'category' : 'value');
	    }
	
	    zrUtil.merge(AxisModel.prototype, __webpack_require__(151));
	
	    axisModelCreator('single', AxisModel, getAxisType, defaultOption);
	
	    module.exports = AxisModel;


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @file  Define the themeRiver view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */
	
	
	    var completeDimensions = __webpack_require__(124);
	    var SeriesModel = __webpack_require__(49);
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var formatUtil = __webpack_require__(27);
	    var encodeHTML = formatUtil.encodeHTML;
	    var nest = __webpack_require__(266);
	
	    var DATA_NAME_INDEX = 2;
	
	    var ThemeRiverSeries = SeriesModel.extend({
	
	        type: 'series.themeRiver',
	
	        dependencies: ['singleAxis'],
	
	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        nameMap: null,
	
	        /**
	         * @override
	         */
	        init: function (option) {
	            ThemeRiverSeries.superApply(this, 'init', arguments);
	
	            // Put this function here is for the sake of consistency of code
	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	        },
	
	        /**
	         * If there is no value of a certain point in the time for some event,set it value to 0.
	         *
	         * @param {Array} data  initial data in the option
	         * @return {Array}
	         */
	        fixData: function (data) {
	            var rawDataLength = data.length;
	
	            // grouped data by name
	            var dataByName = nest()
	                .key(function (dataItem) {
	                    return dataItem[2];
	                })
	                .entries(data);
	
	            // data group in each layer
	            var layData = zrUtil.map(dataByName, function (d) {
	                return {
	                    name: d.key,
	                    dataList: d.values
	                };
	            });
	
	            var layerNum = layData.length;
	            var largestLayer = -1;
	            var index = -1;
	            for (var i = 0; i < layerNum; ++i) {
	                var len = layData[i].dataList.length;
	                if (len > largestLayer) {
	                    largestLayer = len;
	                    index = i;
	                }
	            }
	
	            for (var k = 0; k < layerNum; ++k) {
	                if (k === index) {
	                    continue;
	                }
	                var name = layData[k].name;
	                for (var j = 0; j < largestLayer; ++j) {
	                    var timeValue = layData[index].dataList[j][0];
	                    var length = layData[k].dataList.length;
	                    var keyIndex = -1;
	                    for (var l = 0; l < length; ++l) {
	                        var value = layData[k].dataList[l][0];
	                        if (value === timeValue) {
	                            keyIndex = l;
	                            break;
	                        }
	                    }
	                    if (keyIndex === -1) {
	                        data[rawDataLength] = [];
	                        data[rawDataLength][0] = timeValue;
	                        data[rawDataLength][1] = 0;
	                        data[rawDataLength][2] = name;
	                        rawDataLength++;
	
	                    }
	                }
	            }
	            return data;
	        },
	
	        /**
	         * @override
	         * @param  {Object} option  the initial option that user gived
	         * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option
	         * @return {module:echarts/data/List}
	         */
	        getInitialData: function (option, ecModel) {
	
	            var dimensions = [];
	
	            var singleAxisModel = ecModel.queryComponents({
	                mainType: 'singleAxis',
	                index: this.get('singleAxisIndex'),
	                id: this.get('singleAxisId')
	            })[0];
	
	            var axisType = singleAxisModel.get('type');
	
	            dimensions = [
	                {
	                    name: 'time',
	                    // FIXME common?
	                    type: axisType === 'category'
	                        ? 'ordinal'
	                        : axisType === 'time'
	                        ? 'time'
	                        : 'float'
	                },
	                {
	                    name: 'value',
	                    type: 'float'
	                },
	                {
	                    name: 'name',
	                    type: 'ordinal'
	                }
	            ];
	
	            // filter the data item with the value of label is undefined
	            var filterData = zrUtil.filter(option.data, function (dataItem) {
	                return dataItem[2] !== undefined;
	            });
	
	            var data = this.fixData(filterData || []);
	            var nameList = [];
	            var nameMap = this.nameMap = {};
	            var count = 0;
	
	            for (var i = 0; i < data.length; ++i) {
	                nameList.push(data[i][DATA_NAME_INDEX]);
	                if (!nameMap[data[i][DATA_NAME_INDEX]]) {
	                    nameMap[data[i][DATA_NAME_INDEX]] = count++;
	                }
	            }
	
	            completeDimensions(dimensions, data);
	
	            var list = new List(dimensions, this);
	
	            list.initData(data, nameList);
	
	            return list;
	        },
	
	        /**
	         * Used by single coordinate
	         *
	         * @param {string} axisDim  the dimension for single coordinate
	         * @return {Array.<string> } specified dimensions on the axis.
	         */
	        coordDimToDataDim: function (axisDim) {
	            return ['time'];
	        },
	
	        /**
	         * The raw data is divided into multiple layers and each layer
	         *     has same name.
	         *
	         * @return {Array.<Array.<number>>}
	         */
	        getLayerSeries: function () {
	            var data = this.getData();
	            var lenCount = data.count();
	            var indexArr = [];
	
	            for (var i = 0; i < lenCount; ++i) {
	                indexArr[i] = i;
	            }
	            // data group by name
	            var dataByName = nest()
	                .key(function (index) {
	                    return data.get('name', index);
	                })
	                .entries(indexArr);
	
	            var layerSeries = zrUtil.map(dataByName, function (d) {
	                return {
	                    name: d.key,
	                    indices: d.values
	                };
	            });
	
	            for (var j = 0; j < layerSeries.length; ++j) {
	                layerSeries[j].indices.sort(comparer);
	            }
	
	            function comparer(index1, index2) {
	                return data.get('time', index1) - data.get('time', index2);
	            }
	
	            return layerSeries;
	        },
	
	        /**
	         * Get data indices for show tooltip content
	         *
	         * @param {Array.<string>|string} dim  single coordinate dimension
	         * @param {Array.<number>} value  coordinate value
	         * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used
	         *     the themeRiver.
	         * @return {Array.<number>}
	         */
	        getAxisTooltipDataIndex: function (dim, value, baseAxis) {
	            if (!zrUtil.isArray(dim)) {
	                dim = dim ? [dim] : [];
	            }
	
	            var data = this.getData();
	
	            if (baseAxis.orient === 'horizontal') {
	                value = value[0];
	            }
	            else {
	                value = value[1];
	            }
	
	            var layerSeries = this.getLayerSeries();
	            var indices = [];
	            var layerNum = layerSeries.length;
	
	            for (var i = 0; i < layerNum; ++i) {
	                var minDist = Number.MAX_VALUE;
	                var nearestIdx = -1;
	                var pointNum = layerSeries[i].indices.length;
	                for (var j = 0; j < pointNum; ++j) {
	                    var dist = Math.abs(data.get(dim[0], layerSeries[i].indices[j]) - value);
	                    if (dist <= minDist) {
	                        minDist = dist;
	                        nearestIdx = layerSeries[i].indices[j];
	                    }
	                }
	                indices.push(nearestIdx);
	            }
	            return indices;
	        },
	
	        /**
	         * @override
	         * @param {Array.<number>} dataIndexs  index of data
	         */
	        formatTooltip: function (dataIndexs) {
	            var data = this.getData();
	            var len = dataIndexs.length;
	            var time = data.get('time', dataIndexs[0]);
	            var single = this.coordinateSystem;
	            var axis = single.getAxis();
	
	            if (axis.scale.type === 'time') {
	                time = formatUtil.formatTime('yyyy-MM-dd', time);
	            }
	
	            var html = encodeHTML(time) + '<br />';
	            for (var i = 0; i < len; ++i) {
	                var htmlName = data.get('name', dataIndexs[i]);
	                var htmlValue = data.get('value', dataIndexs[i]);
	                if (isNaN(htmlValue) || htmlValue == null) {
	                    htmlValue = '-';
	                }
	                html += encodeHTML(htmlName + ' : ' + htmlValue) + '<br />';
	            }
	            return html;
	        },
	
	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	
	            coordinateSystem: 'singleAxis',
	
	            // gap in axis's orthogonal orientation
	            boundaryGap: ['10%', '10%'],
	
	            // legendHoverLink: true,
	
	            singleAxisIndex: 0,
	
	            animationEasing: 'linear',
	
	            label: {
	                normal: {
	                    margin: 4,
	                    textAlign: 'right',
	                    show: true,
	                    position: 'left',
	                    textStyle: {
	                        color: '#000',
	                        fontSize: 11
	                    }
	                },
	                emphasis: {
	                    show: true
	                }
	            }
	        }
	    });
	
	    module.exports = ThemeRiverSeries;
	


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * @file  The file used to draw themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	
	
	    var poly = __webpack_require__(130);
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var DataDiffer = __webpack_require__(120);
	
	    module.exports = __webpack_require__(22).extendChartView({
	
	        type: 'themeRiver',
	
	        init: function () {
	            this._layers = [];
	        },
	
	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var rawData = seriesModel.getRawData();
	
	            if (!data.count()) {
	                return;
	            }
	
	            var group = this.group;
	
	            var layerSeries = seriesModel.getLayerSeries();
	
	            var layoutInfo = data.getLayout('layoutInfo');
	            var rect = layoutInfo.rect;
	            var boundaryGap = layoutInfo.boundaryGap;
	
	            group.attr('position', [0, rect.y + boundaryGap[0]]);
	
	            function keyGetter(item) {
	                return item.name;
	            }
	            var dataDiffer = new DataDiffer(
	                this._layersSeries || [], layerSeries,
	                keyGetter, keyGetter
	            );
	
	            var newLayersGroups = {};
	
	            dataDiffer.add(zrUtil.bind(zrUtil.curry(process, 'add'), this))
	                .update(zrUtil.bind(zrUtil.curry(process, 'update'), this))
	                .remove(zrUtil.bind(zrUtil.curry(process, 'remove'), this))
	                .execute();
	
	            function process(status, idx, oldIdx) {
	                var oldLayersGroups = this._layers;
	                if (status === 'remove') {
	                    group.remove(oldLayersGroups[idx]);
	                    return;
	                }
	                var points0 = [];
	                var points1 = [];
	                var color;
	                var indices = layerSeries[idx].indices;
	                for (var j = 0; j < indices.length; j++) {
	                    var layout = data.getItemLayout(indices[j]);
	                    var x = layout.x;
	                    var y0 = layout.y0;
	                    var y = layout.y;
	
	                    points0.push([x, y0]);
	                    points1.push([x, y0 + y]);
	
	                    color = rawData.getItemVisual(indices[j], 'color');
	                }
	
	                var polygon;
	                var text;
	                var textLayout = data.getItemLayout(indices[0]);
	                var itemModel = data.getItemModel(indices[j - 1]);
	                var labelModel = itemModel.getModel('label.normal');
	                var margin = labelModel.get('margin');
	                if (status === 'add') {
	                    var layerGroup = newLayersGroups[idx] = new graphic.Group();
	                    polygon = new poly.Polygon({
	                        shape: {
	                            points: points0,
	                            stackedOnPoints: points1,
	                            smooth: 0.4,
	                            stackedOnSmooth: 0.4,
	                            smoothConstraint: false
	                        },
	                        z2: 0
	                    });
	                    text = new graphic.Text({
	                        style: {
	                            x: textLayout.x - margin,
	                            y: textLayout.y0 + textLayout.y / 2
	                        }
	                    });
	                    layerGroup.add(polygon);
	                    layerGroup.add(text);
	                    group.add(layerGroup);
	
	                    polygon.setClipPath(createGridClipShape(polygon.getBoundingRect(), seriesModel, function () {
	                        polygon.removeClipPath();
	                    }));
	                }
	                else {
	                    var layerGroup = oldLayersGroups[oldIdx];
	                    polygon = layerGroup.childAt(0);
	                    text = layerGroup.childAt(1);
	                    group.add(layerGroup);
	
	                    newLayersGroups[idx] = layerGroup;
	
	                    graphic.updateProps(polygon, {
	                        shape: {
	                            points: points0,
	                            stackedOnPoints: points1
	                        }
	                    }, seriesModel);
	
	                    graphic.updateProps(text, {
	                        style: {
	                            x: textLayout.x - margin,
	                            y: textLayout.y0 + textLayout.y / 2
	                        }
	                    }, seriesModel);
	                }
	
	                var hoverItemStyleModel = itemModel.getModel('itemStyle.emphasis');
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');
	                var textStyleModel = labelModel.getModel('textStyle');
	
	                text.setStyle({
	                    text: labelModel.get('show')
	                        ? seriesModel.getFormattedLabel(indices[j - 1], 'normal')
	                            || data.getName(indices[j - 1])
	                        : '',
	                    textFont: textStyleModel.getFont(),
	                    textAlign: labelModel.get('textAlign'),
	                    textVerticalAlign: 'middle'
	                });
	
	                polygon.setStyle(zrUtil.extend({
	                    fill: color
	                }, itemStyleModel.getItemStyle(['color'])));
	
	                graphic.setHoverStyle(polygon, hoverItemStyleModel.getItemStyle());
	            }
	
	            this._layersSeries = layerSeries;
	            this._layers = newLayersGroups;
	        },
	
	        dispose: function () {}
	    });
	
	    // add animation to the view
	    function createGridClipShape(rect, seriesModel, cb) {
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x - 10,
	                y: rect.y - 10,
	                width: 0,
	                height: rect.height + 20
	            }
	        });
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width + 20,
	                height: rect.height + 20
	            }
	        }, seriesModel, cb);
	
	        return rectEl;
	    }
	
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(310)))

/***/ },
/* 310 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file  Using layout algorithm transform the raw data to layout information.
	 * @author Deqing Li(annong035@gmail.com)
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil =  __webpack_require__(28);
	
	
	    module.exports = function (ecModel, api) {
	
	        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	
	            var data = seriesModel.getData();
	
	            var single = seriesModel.coordinateSystem;
	
	            var layoutInfo = {};
	
	            // use the axis boundingRect for view
	            var rect = single.getRect();
	
	            layoutInfo.rect = rect;
	
	            var boundaryGap = seriesModel.get('boundaryGap');
	
	            var axis = single.getAxis();
	
	            layoutInfo.boundaryGap = boundaryGap;
	
	            if (axis.orient === 'horizontal') {
	                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);
	                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);
	                var height = rect.height - boundaryGap[0] - boundaryGap[1];
	                themeRiverLayout(data, seriesModel, height);
	            }
	            else {
	                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);
	                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);
	                var width = rect.width - boundaryGap[0] - boundaryGap[1];
	                themeRiverLayout(data, seriesModel, width);
	            }
	
	            data.setLayout('layoutInfo', layoutInfo);
	        });
	    };
	
	    /**
	     * The layout information about themeriver
	     *
	     * @param {module:echarts/data/List} data  data in the series
	     * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series
	     * @param {number} height  value used to compute every series height
	     */
	    function themeRiverLayout(data, seriesModel, height) {
	        if (!data.count()) {
	            return;
	        }
	        var coordSys = seriesModel.coordinateSystem;
	        // the data in each layer are organized into a series.
	        var layerSeries = seriesModel.getLayerSeries();
	
	        // the points in each layer.
	        var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {
	            return zrUtil.map(singleLayer.indices, function (idx) {
	                var pt = coordSys.dataToPoint(data.get('time', idx));
	                pt[1] = data.get('value', idx);
	                return pt;
	            });
	        });
	
	        var base = computeBaseline(layerPoints);
	        var baseLine = base.y0;
	        var ky = height / base.max;
	
	        // set layout information for each item.
	        var n = layerSeries.length;
	        var m = layerSeries[0].indices.length;
	        var baseY0;
	        for (var j = 0; j < m; ++j) {
	            baseY0 = baseLine[j] * ky;
	            data.setItemLayout(layerSeries[0].indices[j], {
	                layerIndex: 0,
	                x: layerPoints[0][j][0],
	                y0: baseY0,
	                y: layerPoints[0][j][1] * ky
	            });
	            for (var i = 1; i < n; ++i) {
	                baseY0 += layerPoints[i - 1][j][1] * ky;
	                data.setItemLayout(layerSeries[i].indices[j], {
	                    layerIndex: i,
	                    x: layerPoints[i][j][0],
	                    y0: baseY0,
	                    y: layerPoints[i][j][1] * ky
	                });
	            }
	        }
	    }
	
	    /**
	     * Compute the baseLine of the rawdata
	     * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics
	     *
	     * @param  {Array.<Array>} data  the points in each layer
	     * @return {Array}
	     */
	    function computeBaseline(data) {
	        var layerNum = data.length;
	        var pointNum = data[0].length;
	        var sums = [];
	        var y0 = [];
	        var max = 0;
	        var temp;
	        var base = {};
	
	        for (var i = 0; i < pointNum; ++i) {
	            for (var j = 0, temp = 0; j < layerNum; ++j) {
	                temp += data[j][i][1];
	            }
	            if (temp > max) {
	                max = temp;
	            }
	            sums.push(temp);
	        }
	
	        for (var k = 0; k < pointNum; ++k) {
	            y0[k] = (max - sums[k]) / 2;
	        }
	        max = 0;
	
	        for (var l = 0; l < pointNum; ++l) {
	            var sum = sums[l] + y0[l];
	            if (sum > max) {
	                max = sum;
	            }
	        }
	        base.y0 = y0;
	        base.max = max;
	
	        return base;
	    }
	


/***/ },
/* 312 */
/***/ function(module, exports) {

	/**
	 * @file Visual encoding for themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */
	
	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	            var data = seriesModel.getData();
	            var rawData = seriesModel.getRawData();
	            var colorList = seriesModel.get('color');
	
	            data.each(function (index) {
	                var name = data.getName(index);
	                var color = colorList[(seriesModel.nameMap[name] - 1) % colorList.length];
	                rawData.setItemVisual(index, 'color', color);
	            });
	        });
	    };
	


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	    var graphicUtil = __webpack_require__(64);
	    var layoutUtil = __webpack_require__(42);
	
	    // -------------
	    // Preprocessor
	    // -------------
	
	    echarts.registerPreprocessor(function (option) {
	        var graphicOption = option && option.graphic;
	
	        // Convert
	        // {graphic: [{left: 10, type: 'circle'}, ...]}
	        // or
	        // {graphic: {left: 10, type: 'circle'}}
	        // to
	        // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}
	        if (zrUtil.isArray(graphicOption)) {
	            if (!graphicOption[0] || !graphicOption[0].elements) {
	                option.graphic = [{elements: graphicOption}];
	            }
	            else {
	                // Only one graphic instance can be instantiated. (We dont
	                // want that too many views are created in echarts._viewMap)
	                option.graphic = [option.graphic[0]];
	            }
	        }
	        else if (graphicOption && !graphicOption.elements) {
	            option.graphic = [{elements: [graphicOption]}];
	        }
	    });
	
	    // ------
	    // Model
	    // ------
	
	    var GraphicModel = echarts.extendComponentModel({
	
	        type: 'graphic',
	
	        defaultOption: {
	
	            // Extra properties for each elements:
	            //
	            // left/right/top/bottom: (like 12, '22%', 'center', default undefined)
	            //      If left/rigth is set, shape.x/shape.cx/position will not be used.
	            //      If top/bottom is set, shape.y/shape.cy/position will not be used.
	            //      This mechanism is useful when you want to position a group/element
	            //      against the right side or the center of this container.
	            //
	            // width/height: (can only be pixel value, default 0)
	            //      Only be used to specify contianer(group) size, if needed. And
	            //      can not be percentage value (like '33%'). See the reason in the
	            //      layout algorithm below.
	            //
	            // bounding: (enum: 'all' (default) | 'raw')
	            //      Specify how to calculate boundingRect when locating.
	            //      'all': Get uioned and transformed boundingRect
	            //          from both itself and its descendants.
	            //          This mode simplies confining a group of elements in the bounding
	            //          of their ancester container (e.g., using 'right: 0').
	            //      'raw': Only use the boundingRect of itself and before transformed.
	            //          This mode is similar to css behavior, which is useful when you
	            //          want an element to be able to overflow its container. (Consider
	            //          a rotated circle needs to be located in a corner.)
	
	            // Note: elements is always behind its ancestors in this elements array.
	            elements: [],
	            parentId: null
	        },
	
	        /**
	         * Save el options for the sake of the performance (only update modified graphics).
	         * The order is the same as those in option. (ancesters -> descendants)
	         *
	         * @private
	         * @type {Array.<Object>}
	         */
	        _elOptionsToUpdate: null,
	
	        /**
	         * @override
	         */
	        mergeOption: function (option) {
	            // Prevent default merge to elements
	            var elements = this.option.elements;
	            this.option.elements = null;
	
	            GraphicModel.superApply(this, 'mergeOption', arguments);
	
	            this.option.elements = elements;
	        },
	
	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;
	            var newList = (isInit ? thisOption : newOption).elements;
	            var existList = thisOption.elements = isInit ? [] : thisOption.elements;
	
	            var flattenedList = [];
	            this._flatten(newList, flattenedList);
	
	            var mappingResult = modelUtil.mappingToExists(existList, flattenedList);
	            modelUtil.makeIdAndName(mappingResult);
	
	            // Clear elOptionsToUpdate
	            var elOptionsToUpdate = this._elOptionsToUpdate = [];
	
	            zrUtil.each(mappingResult, function (resultItem, index) {
	                var existElOption = resultItem.exist;
	                var newElOption = resultItem.option;
	
	                if (__DEV__) {
	                    zrUtil.assert(
	                        zrUtil.isObject(newElOption) || existElOption,
	                        'Empty graphic option definition'
	                    );
	                }
	
	                if (!newElOption) {
	                    return;
	                }
	
	                // Set id and parent id after id assigned.
	                newElOption.id = resultItem.keyInfo.id;
	                var newElParentId = newElOption.parentId;
	                var newElParentOption = newElOption.parentOption;
	                var existElParentId = existElOption && existElOption.parentId;
	                !newElOption.type && existElOption && (newElOption.type = existElOption.type);
	                newElOption.parentId = newElParentId // parent id specified
	                    ? newElParentId
	                    : newElParentOption
	                    ? newElParentOption.id
	                    : existElParentId // parent not specified
	                    ? existElParentId
	                    : null;
	                newElOption.parentOption = null; // Clear
	                elOptionsToUpdate.push(newElOption);
	
	                // Update existing options, for `getOption` feature.
	                var newElOptCopy = zrUtil.extend({}, newElOption);
	                var $action = newElOption.$action;
	                if (!$action || $action === 'merge') {
	                    if (existElOption) {
	
	                        if (__DEV__) {
	                            var newType = newElOption.type;
	                            zrUtil.assert(
	                                !newType || existElOption.type === newType,
	                                'Please set $action: "replace" to change `type`'
	                            );
	                        }
	
	                        // We can ensure that newElOptCopy and existElOption are not
	                        // the same object, so `merge` will not change newElOptCopy.
	                        zrUtil.merge(existElOption, newElOptCopy, true);
	                        // Rigid body, use ignoreSize.
	                        layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {ignoreSize: true});
	                        // Will be used in render.
	                        layoutUtil.copyLayoutParams(newElOption, existElOption);
	                    }
	                    else {
	                        existList[index] = newElOptCopy;
	                    }
	                }
	                else if ($action === 'replace') {
	                    existList[index] = newElOptCopy;
	                }
	                else if ($action === 'remove') {
	                    // null will be cleaned later.
	                    existElOption && (existList[index] = null);
	                }
	
	                if (existList[index]) {
	                    existList[index].hv = newElOption.hv = [
	                        // Rigid body, dont care `width`.
	                        isSetLoc(newElOption, ['left', 'right']),
	                        // Rigid body, dont care `height`.
	                        isSetLoc(newElOption, ['top', 'bottom'])
	                    ];
	                    // Give default group size. Otherwise layout error may occur.
	                    if (existList[index].type === 'group') {
	                        existList[index].width == null && (existList[index].width = newElOption.width = 0);
	                        existList[index].height == null && (existList[index].height = newElOption.height = 0);
	                    }
	                }
	
	            }, this);
	
	            // Clean
	            for (var i = existList.length - 1; i >= 0; i--) {
	                if (existList[i] == null) {
	                    existList.splice(i, 1);
	                }
	                else {
	                    // $action should be volatile, otherwise option gotten from
	                    // `getOption` will contain unexpected $action.
	                    delete existList[i].$action;
	                }
	            }
	        },
	
	        /**
	         * Convert
	         * [{
	         *  type: 'group',
	         *  id: 'xx',
	         *  children: [{type: 'circle'}, {type: 'polygon'}]
	         * }]
	         * to
	         * [
	         *  {type: 'group', id: 'xx'},
	         *  {type: 'circle', parentId: 'xx'},
	         *  {type: 'polygon', parentId: 'xx'}
	         * ]
	         *
	         * @private
	         * @param {Array.<Object>} optionList option list
	         * @param {Array.<Object>} result result of flatten
	         * @param {Object} parentOption parent option
	         */
	        _flatten: function (optionList, result, parentOption) {
	            zrUtil.each(optionList, function (option) {
	                if (option) {
	                    if (parentOption) {
	                        option.parentOption = parentOption;
	                    }
	
	                    result.push(option);
	
	                    var children = option.children;
	                    if (option.type === 'group' && children) {
	                        this._flatten(children, result, option);
	                    }
	                    // Deleting for JSON output, and for not affecting group creation.
	                    delete option.children;
	                }
	            }, this);
	        },
	
	        // FIXME
	        // Pass to view using payload? setOption has a payload?
	        useElOptionsToUpdate: function () {
	            var els = this._elOptionsToUpdate;
	            // Clear to avoid render duplicately when zooming.
	            this._elOptionsToUpdate = null;
	            return els;
	        }
	    });
	
	    // -----
	    // View
	    // -----
	
	    echarts.extendComponentView({
	
	        type: 'graphic',
	
	        /**
	         * @override
	         */
	        init: function (ecModel, api) {
	
	            /**
	             * @private
	             * @type {Object}
	             */
	            this._elMap = {};
	
	            /**
	             * @private
	             * @type {module:echarts/graphic/GraphicModel}
	             */
	            this._lastGraphicModel;
	        },
	
	        /**
	         * @override
	         */
	        render: function (graphicModel, ecModel, api) {
	
	            // Having leveraged between use cases and algorithm complexity, a very
	            // simple layout mechanism is used:
	            // The size(width/height) can be determined by itself or its parent (not
	            // implemented yet), but can not by its children. (Top-down travel)
	            // The location(x/y) can be determined by the bounding rect of itself
	            // (can including its descendants or not) and the size of its parent.
	            // (Bottom-up travel)
	
	            // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,
	            // view will be reused.
	            if (graphicModel !== this._lastGraphicModel) {
	                this._clear();
	            }
	            this._lastGraphicModel = graphicModel;
	
	            this._updateElements(graphicModel, api);
	            this._relocate(graphicModel, api);
	        },
	
	        /**
	         * Update graphic elements.
	         *
	         * @private
	         * @param {Object} graphicModel graphic model
	         * @param {module:echarts/ExtensionAPI} api extension API
	         */
	        _updateElements: function (graphicModel, api) {
	            var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();
	
	            if (!elOptionsToUpdate) {
	                return;
	            }
	
	            var elMap = this._elMap;
	            var rootGroup = this.group;
	
	            // Top-down tranverse to assign graphic settings to each elements.
	            zrUtil.each(elOptionsToUpdate, function (elOption) {
	                var $action = elOption.$action;
	                var id = elOption.id;
	                var existEl = elMap[id];
	                var parentId = elOption.parentId;
	                var targetElParent = parentId != null ? elMap[parentId] : rootGroup;
	
	                // In top/bottom mode, textVertical should not be used. And textBaseline
	                // should not be 'alphabetic', which cause inaccurately locating.
	                if (elOption.hv && elOption.hv[1] && elOption.type === 'text') {
	                    elOption.style = zrUtil.defaults({textBaseline: 'middle'}, elOption.style);
	                    elOption.style.textVerticalAlign = null;
	                }
	
	                // Remove unnecessary props to avoid potential problems.
	                var elOptionCleaned = getCleanedElOption(elOption);
	
	                // For simple, do not support parent change, otherwise reorder is needed.
	                if (__DEV__) {
	                    existEl && zrUtil.assert(
	                        targetElParent === existEl.parent,
	                        'Changing parent is not supported.'
	                    );
	                }
	
	                if (!$action || $action === 'merge') {
	                    existEl
	                        ? existEl.attr(elOptionCleaned)
	                        : createEl(id, targetElParent, elOptionCleaned, elMap);
	                }
	                else if ($action === 'replace') {
	                    removeEl(existEl, elMap);
	                    createEl(id, targetElParent, elOptionCleaned, elMap);
	                }
	                else if ($action === 'remove') {
	                    removeEl(existEl, elMap);
	                }
	
	                if (elMap[id]) {
	                    elMap[id].__ecGraphicWidth = elOption.width;
	                    elMap[id].__ecGraphicHeight = elOption.height;
	                }
	            });
	        },
	
	        /**
	         * Locate graphic elements.
	         *
	         * @private
	         * @param {Object} graphicModel graphic model
	         * @param {module:echarts/ExtensionAPI} api extension API
	         */
	        _relocate: function (graphicModel, api) {
	            var elOptions = graphicModel.option.elements;
	            var rootGroup = this.group;
	            var elMap = this._elMap;
	
	            // Bottom-up tranvese all elements (consider ec resize) to locate elements.
	            for (var i = elOptions.length - 1; i >= 0; i--) {
	                var elOption = elOptions[i];
	                var el = elMap[elOption.id];
	
	                if (!el) {
	                    continue;
	                }
	
	                var parentEl = el.parent;
	                var containerInfo = parentEl === rootGroup
	                    ? {
	                        width: api.getWidth(),
	                        height: api.getHeight()
	                    }
	                    : { // Like 'position:absolut' in css, default 0.
	                        width: parentEl.__ecGraphicWidth || 0,
	                        height: parentEl.__ecGraphicHeight || 0
	                    };
	
	                layoutUtil.positionElement(
	                    el, elOption, containerInfo, null,
	                    {hv: elOption.hv, boundingMode: elOption.bounding}
	                );
	            }
	        },
	
	        /**
	         * Clear all elements.
	         *
	         * @private
	         */
	        _clear: function () {
	            var elMap = this._elMap;
	            zrUtil.each(elMap, function (el) {
	                removeEl(el, elMap);
	            });
	            this._elMap = {};
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clear();
	        }
	    });
	
	    function createEl(id, targetElParent, elOption, elMap) {
	        var graphicType = elOption.type;
	
	        if (__DEV__) {
	            zrUtil.assert(graphicType, 'graphic type MUST be set');
	        }
	
	        var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];
	
	        if (__DEV__) {
	            zrUtil.assert(Clz, 'graphic type can not be found');
	        }
	
	        var el = new Clz(elOption);
	        targetElParent.add(el);
	        elMap[id] = el;
	        el.__ecGraphicId = id;
	    }
	
	    function removeEl(existEl, elMap) {
	        var existElParent = existEl && existEl.parent;
	        if (existElParent) {
	            existEl.type === 'group' && existEl.traverse(function (el) {
	                removeEl(el, elMap);
	            });
	            delete elMap[existEl.__ecGraphicId];
	            existElParent.remove(existEl);
	        }
	    }
	
	    // Remove unnecessary props to avoid potential problems.
	    function getCleanedElOption(elOption) {
	        elOption = zrUtil.extend({}, elOption);
	        zrUtil.each(
	            ['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS),
	            function (name) {
	                delete elOption[name];
	            }
	        );
	        return elOption;
	    }
	
	    function isSetLoc(obj, props) {
	        var isSet;
	        zrUtil.each(props, function (prop) {
	            obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);
	        });
	        return isSet;
	    }
	


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Legend component entry file8
	 */
	
	
	    __webpack_require__(315);
	    __webpack_require__(316);
	    __webpack_require__(317);
	
	    var echarts = __webpack_require__(22);
	    // Series Filter
	    echarts.registerProcessor(__webpack_require__(319));


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var Model = __webpack_require__(33);
	
	    var LegendModel = __webpack_require__(22).extendComponentModel({
	
	        type: 'legend',
	
	        dependencies: ['series'],
	
	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },
	
	        init: function (option, parentModel, ecModel) {
	            this.mergeDefaultAndTheme(option, ecModel);
	
	            option.selected = option.selected || {};
	        },
	
	        mergeOption: function (option) {
	            LegendModel.superCall(this, 'mergeOption', option);
	        },
	
	        optionUpdated: function () {
	            this._updateData(this.ecModel);
	
	            var legendData = this._data;
	
	            // If selectedMode is single, try to select one
	            if (legendData[0] && this.get('selectedMode') === 'single') {
	                var hasSelected = false;
	                // If has any selected in option.selected
	                for (var i = 0; i < legendData.length; i++) {
	                    var name = legendData[i].get('name');
	                    if (this.isSelected(name)) {
	                        // Force to unselect others
	                        this.select(name);
	                        hasSelected = true;
	                        break;
	                    }
	                }
	                // Try select the first if selectedMode is single
	                !hasSelected && this.select(legendData[0].get('name'));
	            }
	        },
	
	        _updateData: function (ecModel) {
	            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	                // Can be string or number
	                if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	                    dataItem = {
	                        name: dataItem
	                    };
	                }
	                return new Model(dataItem, this, this.ecModel);
	            }, this);
	            this._data = legendData;
	
	            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	                return series.name;
	            });
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.legendDataProvider) {
	                    var data = seriesModel.legendDataProvider();
	                    availableNames = availableNames.concat(data.mapArray(data.getName));
	                }
	            });
	            /**
	             * @type {Array.<string>}
	             * @private
	             */
	            this._availableNames = availableNames;
	        },
	
	        /**
	         * @return {Array.<module:echarts/model/Model>}
	         */
	        getData: function () {
	            return this._data;
	        },
	
	        /**
	         * @param {string} name
	         */
	        select: function (name) {
	            var selected = this.option.selected;
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                var data = this._data;
	                zrUtil.each(data, function (dataItem) {
	                    selected[dataItem.get('name')] = false;
	                });
	            }
	            selected[name] = true;
	        },
	
	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            if (this.get('selectedMode') !== 'single') {
	                this.option.selected[name] = false;
	            }
	        },
	
	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var selected = this.option.selected;
	            // Default is true
	            if (!selected.hasOwnProperty(name)) {
	                selected[name] = true;
	            }
	            this[selected[name] ? 'unSelect' : 'select'](name);
	        },
	
	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var selected = this.option.selected;
	            return !(selected.hasOwnProperty(name) && !selected[name])
	                && zrUtil.indexOf(this._availableNames, name) >= 0;
	        },
	
	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 4,
	            show: true,
	
	            // 布局方式，默认为水平布局，可选为：
	            // 'horizontal' | 'vertical'
	            orient: 'horizontal',
	
	            left: 'center',
	            // right: 'center',
	
	            top: 'top',
	            // bottom: 'top',
	
	            // 水平对齐
	            // 'auto' | 'left' | 'right'
	            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	            align: 'auto',
	
	            backgroundColor: 'rgba(0,0,0,0)',
	            // 图例边框颜色
	            borderColor: '#ccc',
	            // 图例边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,
	            // 图例内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,
	            // 各个item之间的间隔，单位px，默认为10，
	            // 横向布局时为水平间隔，纵向布局时为纵向间隔
	            itemGap: 10,
	            // 图例图形宽度
	            itemWidth: 25,
	            // 图例图形高度
	            itemHeight: 14,
	
	            // 图例关闭时候的颜色
	            inactiveColor: '#ccc',
	
	            textStyle: {
	                // 图例文字颜色
	                color: '#333'
	            },
	            // formatter: '',
	            // 选择模式，默认开启图例开关
	            selectedMode: true,
	            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	            // selected: null,
	            // 图例内容（详见legend.data，数组中每一项代表一个item
	            // data: [],
	
	            // Tooltip 相关配置
	            tooltip: {
	                show: false
	            }
	        }
	    });
	
	    module.exports = LegendModel;


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Legend action
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    function legendSelectActionHandler(methodName, payload, ecModel) {
	        var selectedMap = {};
	        var isToggleSelect = methodName === 'toggleSelected';
	        var isSelected;
	        // Update all legend components
	        ecModel.eachComponent('legend', function (legendModel) {
	            if (isToggleSelect && isSelected != null) {
	                // Force other legend has same selected status
	                // Or the first is toggled to true and other are toggled to false
	                // In the case one legend has some item unSelected in option. And if other legend
	                // doesn't has the item, they will assume it is selected.
	                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	            }
	            else {
	                legendModel[methodName](payload.name);
	                isSelected = legendModel.isSelected(payload.name);
	            }
	            var legendData = legendModel.getData();
	            zrUtil.each(legendData, function (model) {
	                var name = model.get('name');
	                // Wrap element
	                if (name === '\n' || name === '') {
	                    return;
	                }
	                var isItemSelected = legendModel.isSelected(name);
	                if (name in selectedMap) {
	                    // Unselected if any legend is unselected
	                    selectedMap[name] = selectedMap[name] && isItemSelected;
	                }
	                else {
	                    selectedMap[name] = isItemSelected;
	                }
	            });
	        });
	        // Return the event explicitly
	        return {
	            name: payload.name,
	            selected: selectedMap
	        };
	    }
	    /**
	     * @event legendToggleSelect
	     * @type {Object}
	     * @property {string} type 'legendToggleSelect'
	     * @property {string} [from]
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendToggleSelect', 'legendselectchanged',
	        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')
	    );
	
	    /**
	     * @event legendSelect
	     * @type {Object}
	     * @property {string} type 'legendSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendSelect', 'legendselected',
	        zrUtil.curry(legendSelectActionHandler, 'select')
	    );
	
	    /**
	     * @event legendUnSelect
	     * @type {Object}
	     * @property {string} type 'legendUnSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendUnSelect', 'legendunselected',
	        zrUtil.curry(legendSelectActionHandler, 'unSelect')
	    );


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var symbolCreator = __webpack_require__(128);
	    var graphic = __webpack_require__(64);
	    var listComponentHelper = __webpack_require__(318);
	
	    var curry = zrUtil.curry;
	
	    function dispatchSelectAction(name, api) {
	        api.dispatchAction({
	            type: 'legendToggleSelect',
	            name: name
	        });
	    }
	
	    function dispatchHighlightAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'highlight',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }
	
	    function dispatchDownplayAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'downplay',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }
	
	    module.exports = __webpack_require__(22).extendComponentView({
	
	        type: 'legend',
	
	        init: function () {
	            this._symbolTypeStore = {};
	        },
	
	        render: function (legendModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();
	
	            if (!legendModel.get('show')) {
	                return;
	            }
	
	            var selectMode = legendModel.get('selectedMode');
	            var itemAlign = legendModel.get('align');
	
	            if (itemAlign === 'auto') {
	                itemAlign = (legendModel.get('left') === 'right'
	                    && legendModel.get('orient') === 'vertical')
	                    ? 'right' : 'left';
	            }
	
	            var legendDrawedMap = {};
	
	            zrUtil.each(legendModel.getData(), function (itemModel) {
	                var name = itemModel.get('name');
	
	                // Use empty string or \n as a newline string
	                if (name === '' || name === '\n') {
	                    group.add(new graphic.Group({
	                        newline: true
	                    }));
	                    return;
	                }
	
	                var seriesModel = ecModel.getSeriesByName(name)[0];
	
	                if (legendDrawedMap[name]) {
	                    // Have been drawed
	                    return;
	                }
	
	                // Series legend
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var color = data.getVisual('color');
	
	                    // If color is a callback function
	                    if (typeof color === 'function') {
	                        // Use the first data
	                        color = color(seriesModel.getDataParams(0));
	                    }
	
	                    // Using rect symbol defaultly
	                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	                    var symbolType = data.getVisual('symbol');
	
	                    var itemGroup = this._createItem(
	                        name, itemModel, legendModel,
	                        legendSymbolType, symbolType,
	                        itemAlign, color,
	                        selectMode
	                    );
	
	                    itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))
	                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));
	
	                    legendDrawedMap[name] = true;
	                }
	                else {
	                    // Data legend of pie, funnel
	                    ecModel.eachRawSeries(function (seriesModel) {
	                        // In case multiple series has same data name
	                        if (legendDrawedMap[name]) {
	                            return;
	                        }
	                        if (seriesModel.legendDataProvider) {
	                            var data = seriesModel.legendDataProvider();
	                            var idx = data.indexOfName(name);
	                            if (idx < 0) {
	                                return;
	                            }
	
	                            var color = data.getItemVisual(idx, 'color');
	
	                            var legendSymbolType = 'roundRect';
	
	                            var itemGroup = this._createItem(
	                                name, itemModel, legendModel,
	                                legendSymbolType, null,
	                                itemAlign, color,
	                                selectMode
	                            );
	
	                            itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                                // FIXME Should not specify the series name
	                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))
	                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));
	
	                            legendDrawedMap[name] = true;
	                        }
	                    }, this);
	                }
	
	                if (__DEV__) {
	                    if (!legendDrawedMap[name]) {
	                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');
	                    }
	                }
	            }, this);
	
	            listComponentHelper.layout(group, legendModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, legendModel);
	        },
	
	        _createItem: function (
	            name, itemModel, legendModel,
	            legendSymbolType, symbolType,
	            itemAlign, color, selectMode
	        ) {
	            var itemWidth = legendModel.get('itemWidth');
	            var itemHeight = legendModel.get('itemHeight');
	            var inactiveColor = legendModel.get('inactiveColor');
	
	            var isSelected = legendModel.isSelected(name);
	            var itemGroup = new graphic.Group();
	
	            var textStyleModel = itemModel.getModel('textStyle');
	
	            var itemIcon = itemModel.get('icon');
	
	            var tooltipModel = itemModel.getModel('tooltip');
	            var legendGlobalTooltipModel = tooltipModel.parentModel;
	
	            // Use user given icon first
	            legendSymbolType = itemIcon || legendSymbolType;
	            itemGroup.add(symbolCreator.createSymbol(
	                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor
	            ));
	
	            // Compose symbols
	            // PENDING
	            if (!itemIcon && symbolType
	                // At least show one symbol, can't be all none
	                && ((symbolType !== legendSymbolType) || symbolType == 'none')
	            ) {
	                var size = itemHeight * 0.8;
	                if (symbolType === 'none') {
	                    symbolType = 'circle';
	                }
	                // Put symbol in the center
	                itemGroup.add(symbolCreator.createSymbol(
	                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,
	                    isSelected ? color : inactiveColor
	                ));
	            }
	
	            // Text
	            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	            var textAlign = itemAlign;
	
	            var formatter = legendModel.get('formatter');
	            var content = name;
	            if (typeof formatter === 'string' && formatter) {
	                content = formatter.replace('{name}', name != null ? name : '');
	            }
	            else if (typeof formatter === 'function') {
	                content = formatter(name);
	            }
	
	            var text = new graphic.Text({
	                style: {
	                    text: content,
	                    x: textX,
	                    y: itemHeight / 2,
	                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	                    textFont: textStyleModel.getFont(),
	                    textAlign: textAlign,
	                    textVerticalAlign: 'middle'
	                }
	            });
	            itemGroup.add(text);
	
	            // Add a invisible rect to increase the area of mouse hover
	            var hitRect = new graphic.Rect({
	                shape: itemGroup.getBoundingRect(),
	                invisible: true,
	                tooltip: tooltipModel.get('show') ? zrUtil.extend({
	                    content: name,
	                    // Defaul formatter
	                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	                        return name;
	                    },
	                    formatterParams: {
	                        componentType: 'legend',
	                        legendIndex: legendModel.componentIndex,
	                        name: name,
	                        $vars: ['name']
	                    }
	                }, tooltipModel.option) : null
	            });
	            itemGroup.add(hitRect);
	
	            itemGroup.eachChild(function (child) {
	                child.silent = true;
	            });
	
	            hitRect.silent = !selectMode;
	
	
	
	            this.group.add(itemGroup);
	
	            graphic.setHoverStyle(itemGroup);
	
	            return itemGroup;
	        }
	    });


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	
	    // List layout
	    var layout = __webpack_require__(42);
	    var formatUtil = __webpack_require__(27);
	    var graphic = __webpack_require__(64);
	
	    function positionGroup(group, model, api) {
	        layout.positionElement(
	            group, model.getBoxLayoutParams(),
	            {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            model.get('padding')
	        );
	    }
	
	    module.exports = {
	        /**
	         * Layout list like component.
	         * It will box layout each items in group of component and then position the whole group in the viewport
	         * @param {module:zrender/group/Group} group
	         * @param {module:echarts/model/Component} componentModel
	         * @param {module:echarts/ExtensionAPI}
	         */
	        layout: function (group, componentModel, api) {
	            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }, componentModel.get('padding'));
	            layout.box(
	                componentModel.get('orient'),
	                group,
	                componentModel.get('itemGap'),
	                rect.width,
	                rect.height
	            );
	
	            positionGroup(group, componentModel, api);
	        },
	
	        addBackground: function (group, componentModel) {
	            var padding = formatUtil.normalizeCssArray(
	                componentModel.get('padding')
	            );
	            var boundingRect = group.getBoundingRect();
	            var style = componentModel.getItemStyle(['color', 'opacity']);
	            style.fill = componentModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                shape: {
	                    x: boundingRect.x - padding[3],
	                    y: boundingRect.y - padding[0],
	                    width: boundingRect.width + padding[1] + padding[3],
	                    height: boundingRect.height + padding[0] + padding[2]
	                },
	                style: style,
	                silent: true,
	                z2: -1
	            });
	            graphic.subPixelOptimizeRect(rect);
	
	            group.add(rect);
	        }
	    };


/***/ },
/* 319 */
/***/ function(module, exports) {

	
	   module.exports = function (ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (legendModels && legendModels.length) {
	            ecModel.filterSeries(function (series) {
	                // If in any legend component the status is not selected.
	                // Because in legend series is assumed selected when it is not in the legend data.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(series.name)) {
	                        return false;
	                    }
	                }
	                return true;
	            });
	        }
	    };


/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	// FIXME Better way to pack data in graphic element
	
	
	    __webpack_require__(321);
	
	    __webpack_require__(322);
	
	    // Show tip action
	    /**
	     * @action
	     * @property {string} type
	     * @property {number} seriesIndex
	     * @property {number} dataIndex
	     * @property {number} [x]
	     * @property {number} [y]
	     */
	    __webpack_require__(22).registerAction(
	        {
	            type: 'showTip',
	            event: 'showTip',
	            update: 'tooltip:manuallyShowTip'
	        },
	        // noop
	        function () {}
	    );
	    // Hide tip action
	    __webpack_require__(22).registerAction(
	        {
	            type: 'hideTip',
	            event: 'hideTip',
	            update: 'tooltip:manuallyHideTip'
	        },
	        // noop
	        function () {}
	    );


/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(22).extendComponentModel({
	
	        type: 'tooltip',
	
	        defaultOption: {
	            zlevel: 0,
	
	            z: 8,
	
	            show: true,
	
	            // tooltip主体内容
	            showContent: true,
	
	            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	            trigger: 'item',
	
	            // 触发条件，支持 'click' | 'mousemove' | 'none'
	            triggerOn: 'mousemove',
	
	            // 是否永远显示 content
	            alwaysShowContent: false,
	
	            // 位置 {Array} | {Function}
	            // position: null
	
	            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	            confine: false,
	
	            // 内容格式器：{string}（Template） ¦ {Function}
	            // formatter: null
	
	            showDelay: 0,
	
	            // 隐藏延迟，单位ms
	            hideDelay: 100,
	
	            // 动画变换时间，单位s
	            transitionDuration: 0.4,
	
	            enterable: false,
	
	            // 提示背景颜色，默认为透明度为0.7的黑色
	            backgroundColor: 'rgba(50,50,50,0.7)',
	
	            // 提示边框颜色
	            borderColor: '#333',
	
	            // 提示边框圆角，单位px，默认为4
	            borderRadius: 4,
	
	            // 提示边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,
	
	            // 提示内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,
	
	            // Extra css text
	            extraCssText: '',
	
	            // 坐标轴指示器，坐标轴触发有效
	            axisPointer: {
	                // 默认为直线
	                // 可选为：'line' | 'shadow' | 'cross'
	                type: 'line',
	
	                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	                // 极坐标系会默认选择 angle 轴
	                axis: 'auto',
	
	                animation: true,
	                animationDurationUpdate: 200,
	                animationEasingUpdate: 'exponentialOut',
	
	                // 直线指示器样式设置
	                lineStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'solid'
	                },
	
	                crossStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'dashed',
	
	                    // TODO formatter
	                    textStyle: {}
	                },
	
	                // 阴影指示器样式设置
	                shadowStyle: {
	                    color: 'rgba(150,150,150,0.3)'
	                }
	            },
	            textStyle: {
	                color: '#fff',
	                fontSize: 14
	            }
	        }
	    });


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var TooltipContent = __webpack_require__(323);
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var formatUtil = __webpack_require__(27);
	    var numberUtil = __webpack_require__(28);
	    var modelUtil = __webpack_require__(26);
	    var parsePercent = numberUtil.parsePercent;
	    var env = __webpack_require__(23);
	    var Model = __webpack_require__(33);
	
	    function dataEqual(a, b) {
	        if (!a || !b) {
	            return false;
	        }
	        var round = numberUtil.round;
	        return round(a[0]) === round(b[0])
	            && round(a[1]) === round(b[1]);
	    }
	    /**
	     * @inner
	     */
	    function makeLineShape(x1, y1, x2, y2) {
	        return {
	            x1: x1,
	            y1: y1,
	            x2: x2,
	            y2: y2
	        };
	    }
	
	    /**
	     * @inner
	     */
	    function makeRectShape(x, y, width, height) {
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        };
	    }
	
	    /**
	     * @inner
	     */
	    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	        return {
	            cx: cx,
	            cy: cy,
	            r0: r0,
	            r: r,
	            startAngle: startAngle,
	            endAngle: endAngle,
	            clockwise: true
	        };
	    }
	
	    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;
	        var gap = 20;
	
	        if (x + width + gap > viewWidth) {
	            x -= width + gap;
	        }
	        else {
	            x += gap;
	        }
	        if (y + height + gap > viewHeight) {
	            y -= height + gap;
	        }
	        else {
	            y += gap;
	        }
	        return [x, y];
	    }
	
	    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;
	
	        x = Math.min(x + width, viewWidth) - width;
	        y = Math.min(y + height, viewHeight) - height;
	        x = Math.max(x, 0);
	        y = Math.max(y, 0);
	
	        return [x, y];
	    }
	
	    function calcTooltipPosition(position, rect, dom) {
	        var domWidth = dom.clientWidth;
	        var domHeight = dom.clientHeight;
	        var gap = 5;
	        var x = 0;
	        var y = 0;
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;
	        switch (position) {
	            case 'inside':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'top':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y - domHeight - gap;
	                break;
	            case 'bottom':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight + gap;
	                break;
	            case 'left':
	                x = rect.x - domWidth - gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'right':
	                x = rect.x + rectWidth + gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	        }
	        return [x, y];
	    }
	
	    /**
	     * @param  {string|Function|Array.<number>} positionExpr
	     * @param  {number} x Mouse x
	     * @param  {number} y Mouse y
	     * @param  {boolean} confine Whether confine tooltip content in view rect.
	     * @param  {module:echarts/component/tooltip/TooltipContent} content
	     * @param  {Object|<Array.<Object>} params
	     * @param  {module:zrender/Element} el target element
	     * @param  {module:echarts/ExtensionAPI} api
	     * @return {Array.<number>}
	     */
	    function updatePosition(positionExpr, x, y, confine, content, params, el, api) {
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();
	
	        var rect = el && el.getBoundingRect().clone();
	        el && rect.applyTransform(el.transform);
	        if (typeof positionExpr === 'function') {
	            // Callback of position can be an array or a string specify the position
	            positionExpr = positionExpr([x, y], params, content.el, rect);
	        }
	
	        if (zrUtil.isArray(positionExpr)) {
	            x = parsePercent(positionExpr[0], viewWidth);
	            y = parsePercent(positionExpr[1], viewHeight);
	        }
	        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	        else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(
	                positionExpr, rect, content.el
	            );
	            x = pos[0];
	            y = pos[1];
	        }
	        else {
	            var pos = refixTooltipPosition(
	                x, y, content.el, viewWidth, viewHeight
	            );
	            x = pos[0];
	            y = pos[1];
	        }
	
	        if (confine) {
	            var pos = confineTooltipPosition(
	                x, y, content.el, viewWidth, viewHeight
	            );
	            x = pos[0];
	            y = pos[1];
	        }
	
	        content.moveTo(x, y);
	    }
	
	    function ifSeriesSupportAxisTrigger(seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var trigger = seriesModel.get('tooltip.trigger', true);
	        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	        return !(!coordSys
	            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')
	            || trigger === 'item');
	    }
	
	    __webpack_require__(22).extendComponentView({
	
	        type: 'tooltip',
	
	        _axisPointers: {},
	
	        init: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var tooltipContent = new TooltipContent(api.getDom(), api);
	            this._tooltipContent = tooltipContent;
	        },
	
	        render: function (tooltipModel, ecModel, api) {
	            if (env.node) {
	                return;
	            }
	
	            // Reset
	            this.group.removeAll();
	
	            /**
	             * @type {Object}
	             * @private
	             */
	            this._axisPointers = {};
	
	            /**
	             * @private
	             * @type {module:echarts/component/tooltip/TooltipModel}
	             */
	            this._tooltipModel = tooltipModel;
	
	            /**
	             * @private
	             * @type {module:echarts/model/Global}
	             */
	            this._ecModel = ecModel;
	
	            /**
	             * @private
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this._api = api;
	
	            /**
	             * @type {Object}
	             * @private
	             */
	            this._lastHover = {
	                // data
	                // payloadBatch
	            };
	
	            var tooltipContent = this._tooltipContent;
	            tooltipContent.update();
	            tooltipContent.enterable = tooltipModel.get('enterable');
	            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	
	            /**
	             * @type {Object.<string, Array>}
	             */
	            this._seriesGroupByAxis = this._prepareAxisTriggerData(
	                tooltipModel, ecModel
	            );
	
	            var crossText = this._crossText;
	            if (crossText) {
	                this.group.add(crossText);
	            }
	
	            var triggerOn = tooltipModel.get('triggerOn');
	
	            // Try to keep the tooltip show when refreshing
	            if (this._lastX != null
	                && this._lastY != null
	                // When user is willing to control tooltip totally using API,
	                // self.manuallyShowTip({x, y}) might cause tooltip hide,
	                // which is not expected.
	                && triggerOn !== 'none'
	            ) {
	                var self = this;
	                clearTimeout(this._refreshUpdateTimeout);
	                this._refreshUpdateTimeout = setTimeout(function () {
	                    // Show tip next tick after other charts are rendered
	                    // In case highlight action has wrong result
	                    // FIXME
	                    self.manuallyShowTip(tooltipModel, ecModel, api, {
	                        x: self._lastX,
	                        y: self._lastY
	                    });
	                });
	            }
	
	            var zr = this._api.getZr();
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	
	            if (triggerOn === 'click') {
	                zr.on('click', this._tryShow, this);
	            }
	            else if (triggerOn === 'mousemove') {
	                zr.on('mousemove', this._mousemove, this);
	                zr.on('mouseout', this._hide, this);
	                zr.on('globalout', this._hide, this);
	            }
	            // else triggerOn is 'none', which enable user
	            // to control tooltip totally using API.
	        },
	
	        _mousemove: function (e) {
	            var showDelay = this._tooltipModel.get('showDelay');
	            var self = this;
	            clearTimeout(this._showTimeout);
	            if (showDelay > 0) {
	                this._showTimeout = setTimeout(function () {
	                    self._tryShow(e);
	                }, showDelay);
	            }
	            else {
	                this._tryShow(e);
	            }
	        },
	
	        /**
	         * Show tip manually by
	         * dispatchAction({
	         *     type: 'showTip',
	         *     x: 10,
	         *     y: 10
	         * });
	         * Or
	         * dispatchAction({
	         *      type: 'showTip',
	         *      seriesIndex: 0,
	         *      dataIndex or dataIndexInside or name
	         * });
	         *
	         *  TODO Batch
	         */
	        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
	            // From self
	            if (payload.from === this.uid) {
	                return;
	            }
	
	            var ecModel = this._ecModel;
	            var seriesIndex = payload.seriesIndex;
	            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	            var api = this._api;
	
	            var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';
	            function seriesHaveDataOnIndex(_series) {
	                var data = _series.getData();
	                var dataIndex = modelUtil.queryDataIndex(data, payload);
	                // Have single dataIndex
	                if (dataIndex != null && !zrUtil.isArray(dataIndex)
	                    && data.hasValue(dataIndex)
	                ) {
	                    return true;
	                }
	            }
	
	            if (payload.x == null || payload.y == null) {
	                if (isTriggerAxis) {
	                    // Find another series.
	                    if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {
	                        seriesModel = null;
	                    }
	                    if (!seriesModel) {
	                        // Find the first series can use axis trigger And data is not null
	                        ecModel.eachSeries(function (_series) {
	                            if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                                if (seriesHaveDataOnIndex(_series)) {
	                                    seriesModel = _series;
	                                }
	                            }
	                        });
	                    }
	                }
	                else {
	                    // Use the first series by default.
	                    seriesModel = seriesModel || ecModel.getSeriesByIndex(0);
	                }
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var dataIndex = modelUtil.queryDataIndex(data, payload);
	
	                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {
	                        return;
	                    }
	
	                    var el = data.getItemGraphicEl(dataIndex);
	                    var cx;
	                    var cy;
	                    // Try to get the point in coordinate system
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (seriesModel.getTooltipPosition) {
	                        var point = seriesModel.getTooltipPosition(dataIndex) || [];
	                        cx = point[0];
	                        cy = point[1];
	                    }
	                    else if (coordSys && coordSys.dataToPoint) {
	                        var point = coordSys.dataToPoint(
	                            data.getValues(
	                                zrUtil.map(coordSys.dimensions, function (dim) {
	                                    return seriesModel.coordDimToDataDim(dim)[0];
	                                }), dataIndex, true
	                            )
	                        );
	                        cx = point && point[0];
	                        cy = point && point[1];
	                    }
	                    else if (el) {
	                        // Use graphic bounding rect
	                        var rect = el.getBoundingRect().clone();
	                        rect.applyTransform(el.transform);
	                        cx = rect.x + rect.width / 2;
	                        cy = rect.y + rect.height / 2;
	                    }
	
	                    if (cx != null && cy != null) {
	                        this._tryShow({
	                            offsetX: cx,
	                            offsetY: cy,
	                            position: payload.position,
	                            target: el,
	                            event: {}
	                        });
	                    }
	                }
	            }
	            else {
	                var el = api.getZr().handler.findHover(payload.x, payload.y);
	                this._tryShow({
	                    offsetX: payload.x,
	                    offsetY: payload.y,
	                    position: payload.position,
	                    target: el,
	                    event: {}
	                });
	            }
	        },
	
	        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
	            if (payload.from === this.uid) {
	                return;
	            }
	
	            this._hide();
	        },
	
	        _prepareAxisTriggerData: function (tooltipModel, ecModel) {
	            // Prepare data for axis trigger
	            var seriesGroupByAxis = {};
	            ecModel.eachSeries(function (seriesModel) {
	                if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                    var coordSys = seriesModel.coordinateSystem;
	                    var baseAxis;
	                    var key;
	
	                    // Only cartesian2d, polar and single support axis trigger
	                    if (coordSys.type === 'cartesian2d') {
	                        // FIXME `axisPointer.axis` is not baseAxis
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + baseAxis.index;
	                    }
	                    else if (coordSys.type === 'singleAxis') {
	                        baseAxis = coordSys.getAxis();
	                        key = baseAxis.dim + baseAxis.type;
	                    }
	                    else {
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + coordSys.name;
	                    }
	
	                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                        coordSys: [],
	                        series: []
	                    };
	                    seriesGroupByAxis[key].coordSys.push(coordSys);
	                    seriesGroupByAxis[key].series.push(seriesModel);
	                }
	            }, this);
	
	            return seriesGroupByAxis;
	        },
	
	        /**
	         * mousemove handler
	         * @param {Object} e
	         * @private
	         */
	        _tryShow: function (e) {
	            var el = e.target;
	            var tooltipModel = this._tooltipModel;
	            var globalTrigger = tooltipModel.get('trigger');
	            var ecModel = this._ecModel;
	            var api = this._api;
	
	            if (!tooltipModel) {
	                return;
	            }
	
	            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	            this._lastX = e.offsetX;
	            this._lastY = e.offsetY;
	
	            // Always show item tooltip if mouse is on the element with dataIndex
	            if (el && el.dataIndex != null) {
	                // Use dataModel in element if possible
	                // Used when mouseover on a element like markPoint or edge
	                // In which case, the data is not main data in series.
	                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                var data = dataModel.getData();
	                var itemModel = data.getItemModel(dataIndex);
	                // Series or single data may use item trigger when global is axis trigger
	                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }
	                else {
	                    // Reset ticket
	                    this._ticket = '';
	                    // If either single data or series use item trigger
	                    this._hideAxisPointer();
	                    // Reset last hover and dispatch downplay action
	                    this._resetLastHover();
	
	                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);
	                }
	
	                api.dispatchAction({
	                    type: 'showTip',
	                    from: this.uid,
	                    dataIndexInside: dataIndex,
	                    dataIndex: data.getRawIndex(dataIndex), // expose to user.
	                    seriesIndex: el.seriesIndex
	                });
	            }
	            // Tooltip provided directly. Like legend
	            else if (el && el.tooltip) {
	                var tooltipOpt = el.tooltip;
	                if (typeof tooltipOpt === 'string') {
	                    var content = tooltipOpt;
	                    tooltipOpt = {
	                        content: content,
	                        // Fixed formatter
	                        formatter: content
	                    };
	                }
	                var subTooltipModel = new Model(tooltipOpt, tooltipModel);
	                var defaultHtml = subTooltipModel.get('content');
	                var asyncTicket = Math.random();
	                this._showTooltipContent(
	                    // TODO params
	                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},
	                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api
	                );
	            }
	            else {
	                if (globalTrigger === 'item') {
	                    this._hide();
	                }
	                else {
	                    // Try show axis tooltip
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }
	
	                // Action of cross pointer
	                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	                if (tooltipModel.get('axisPointer.type') === 'cross') {
	                    api.dispatchAction({
	                        type: 'showTip',
	                        from: this.uid,
	                        x: e.offsetX,
	                        y: e.offsetY
	                    });
	                }
	            }
	        },
	
	        /**
	         * Show tooltip on axis
	         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Object} e
	         * @private
	         */
	        _showAxisTooltip: function (tooltipModel, ecModel, e) {
	            var axisPointerModel = tooltipModel.getModel('axisPointer');
	            var axisPointerType = axisPointerModel.get('type');
	
	            if (axisPointerType === 'cross') {
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                    var dataIndex = el.dataIndex;
	                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);
	                }
	            }
	
	            this._showAxisPointer();
	            var allNotShow = true;
	            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	                // Try show the axis pointer
	                var allCoordSys = seriesCoordSysSameAxis.coordSys;
	                var coordSys = allCoordSys[0];
	
	                // If mouse position is not in the grid or polar
	                var point = [e.offsetX, e.offsetY];
	
	                if (!coordSys.containPoint(point)) {
	                    // Hide axis pointer
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }
	
	                allNotShow = false;
	                // Make sure point is discrete on cateogry axis
	                var dimensions = coordSys.dimensions;
	                var value = coordSys.pointToData(point, true);
	                point = coordSys.dataToPoint(value);
	
	                var baseAxis = coordSys.getBaseAxis();
	                var axisType = axisPointerModel.get('axis');
	                if (axisType === 'auto') {
	                    axisType = baseAxis.dim;
	                }
	
	                if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }
	
	                var contentNotChange = false;
	                var lastHover = this._lastHover;
	                if (axisPointerType === 'cross') {
	                    // If hover data not changed
	                    // Possible when two axes are all category
	                    if (dataEqual(lastHover.data, value)) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value;
	                }
	                else {
	                    var valIndex = zrUtil.indexOf(dimensions, axisType);
	
	                    // If hover data not changed on the axis dimension
	                    if (lastHover.data === value[valIndex]) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value[valIndex];
	                }
	
	                var enableAnimation = tooltipModel.get('animation');
	
	                if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                    this._showCartesianPointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }
	                else if (coordSys.type === 'polar' && !contentNotChange) {
	                    this._showPolarPointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }
	                else if (coordSys.type === 'singleAxis' && !contentNotChange) {
	                    this._showSinglePointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }
	
	                if (axisPointerType !== 'cross') {
	                    this._dispatchAndShowSeriesTooltipContent(
	                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position
	                    );
	                }
	            }, this);
	
	            if (!this._tooltipModel.get('show')) {
	                this._hideAxisPointer();
	            }
	
	            if (allNotShow) {
	                this._hide();
	            }
	        },
	
	        /**
	         * Show tooltip on axis of cartesian coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         * @private
	         */
	        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point, enableAnimation) {
	            var self = this;
	
	            var axisPointerType = axisPointerModel.get('type');
	            var baseAxis = cartesian.getBaseAxis();
	            var moveAnimation = enableAnimation
	                && axisPointerType !== 'cross'
	                && baseAxis.type === 'category'
	                && baseAxis.getBandWidth() > 20;
	
	            if (axisPointerType === 'cross') {
	                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());
	
	                this._updateCrossText(cartesian, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	                var otherExtent = otherAxis.getGlobalExtent();
	
	                if (cartesian.type === 'cartesian2d') {
	                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(
	                        axisType, point, otherExtent
	                    );
	                }
	            }
	
	            /**
	             * @inner
	             */
	            function moveGridLine(axisType, point, otherExtent) {
	                var targetShape = axisType === 'x'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	
	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                graphic.subPixelOptimizeLine({
	                    shape: targetShape,
	                    style: pointerEl.style
	                });
	
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	
	            /**
	             * @inner
	             */
	            function moveGridShadow(axisType, point, otherExtent) {
	                var axis = cartesian.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	                var span = otherExtent[1] - otherExtent[0];
	                var targetShape = axisType === 'x'
	                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)
	                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);
	
	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },
	
	        _showSinglePointer: function (axisPointerModel, single, axisType, point, enableAnimation) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var moveAnimation =
	                enableAnimation
	                && axisPointerType !== 'cross'
	                && single.getBaseAxis().type === 'category';
	            var rect = single.getRect();
	            var otherExtent = [rect.y, rect.y + rect.height];
	
	            moveSingleLine(axisType, point, otherExtent);
	
	            /**
	             * @inner
	             */
	            function moveSingleLine(axisType, point, otherExtent) {
	                var axis = single.getAxis();
	                var orient = axis.orient;
	
	                var targetShape = orient === 'horizontal'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	
	                var pointerEl = self._getPointerElement(
	                    single, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	
	        },
	
	        /**
	         * Show tooltip on axis of polar coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {Array.<module:echarts/coord/polar/Polar>} polar
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         */
	        _showPolarPointer: function (axisPointerModel, polar, axisType, point, enableAnimation) {
	            var self = this;
	
	            var axisPointerType = axisPointerModel.get('type');
	
	            var angleAxis = polar.getAngleAxis();
	            var radiusAxis = polar.getRadiusAxis();
	
	            var moveAnimation = enableAnimation
	                && axisPointerType !== 'cross'
	                && polar.getBaseAxis().type === 'category';
	
	            if (axisPointerType === 'cross') {
	                movePolarLine('angle', point, radiusAxis.getExtent());
	                movePolarLine('radius', point, angleAxis.getExtent());
	
	                this._updateCrossText(polar, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	                var otherExtent = otherAxis.getExtent();
	
	                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(
	                    axisType, point, otherExtent
	                );
	            }
	            /**
	             * @inner
	             */
	            function movePolarLine(axisType, point, otherExtent) {
	                var mouseCoord = polar.pointToCoord(point);
	
	                var targetShape;
	
	                if (axisType === 'angle') {
	                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
	                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
	                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	                }
	                else {
	                    targetShape = {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: mouseCoord[0]
	                    };
	                }
	
	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );
	
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	
	            /**
	             * @inner
	             */
	            function movePolarShadow(axisType, point, otherExtent) {
	                var axis = polar.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	
	                var mouseCoord = polar.pointToCoord(point);
	
	                var targetShape;
	
	                var radian = Math.PI / 180;
	
	                if (axisType === 'angle') {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        otherExtent[0], otherExtent[1],
	                        // In ECharts y is negative if angle is positive
	                        (-mouseCoord[1] - bandWidth / 2) * radian,
	                        (-mouseCoord[1] + bandWidth / 2) * radian
	                    );
	                }
	                else {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        mouseCoord[0] - bandWidth / 2,
	                        mouseCoord[0] + bandWidth / 2,
	                        0, Math.PI * 2
	                    );
	                }
	
	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },
	
	        _updateCrossText: function (coordSys, point, axisPointerModel) {
	            var crossStyleModel = axisPointerModel.getModel('crossStyle');
	            var textStyleModel = crossStyleModel.getModel('textStyle');
	
	            var tooltipModel = this._tooltipModel;
	
	            var text = this._crossText;
	            if (!text) {
	                text = this._crossText = new graphic.Text({
	                    style: {
	                        textAlign: 'left',
	                        textVerticalAlign: 'bottom'
	                    }
	                });
	                this.group.add(text);
	            }
	
	            var value = coordSys.pointToData(point);
	
	            var dims = coordSys.dimensions;
	            value = zrUtil.map(value, function (val, idx) {
	                var axis = coordSys.getAxis(dims[idx]);
	                if (axis.type === 'category' || axis.type === 'time') {
	                    val = axis.scale.getLabel(val);
	                }
	                else {
	                    val = formatUtil.addCommas(
	                        val.toFixed(axis.getPixelPrecision())
	                    );
	                }
	                return val;
	            });
	
	            text.setStyle({
	                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	                textFont: textStyleModel.getFont(),
	                text: value.join(', '),
	                x: point[0] + 5,
	                y: point[1] - 5
	            });
	            text.z = tooltipModel.get('z');
	            text.zlevel = tooltipModel.get('zlevel');
	        },
	
	        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {
	            var tooltipModel = this._tooltipModel;
	            var z = tooltipModel.get('z');
	            var zlevel = tooltipModel.get('zlevel');
	            var axisPointers = this._axisPointers;
	            var coordSysName = coordSys.name;
	            axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	            if (axisPointers[coordSysName][axisType]) {
	                return axisPointers[coordSysName][axisType];
	            }
	
	            // Create if not exists
	            var pointerType = pointerModel.get('type');
	            var styleModel = pointerModel.getModel(pointerType + 'Style');
	            var isShadow = pointerType === 'shadow';
	            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();
	
	            var elementType = coordSys.type === 'polar'
	                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))
	                : (isShadow ? 'Rect' : 'Line');
	
	            isShadow ? (style.stroke = null) : (style.fill = null);
	
	            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	                style: style,
	                z: z,
	                zlevel: zlevel,
	                silent: true,
	                shape: initShape
	            });
	
	            this.group.add(el);
	            return el;
	        },
	
	        /**
	         * Dispatch actions and show tooltip on series
	         * @param {Array.<module:echarts/model/Series>} seriesList
	         * @param {Array.<number>} point
	         * @param {Array.<number>} value
	         * @param {boolean} contentNotChange
	         * @param {Array.<number>|string|Function} [positionExpr]
	         */
	        _dispatchAndShowSeriesTooltipContent: function (
	            coordSys, seriesList, point, value, contentNotChange, positionExpr
	        ) {
	
	            var rootTooltipModel = this._tooltipModel;
	
	            var baseAxis = coordSys.getBaseAxis();
	            var baseDimIndex = ({x: 1, radius: 1, single: 1})[baseAxis.dim] ? 0 : 1;
	
	            if (!seriesList.length) {
	                return;
	            }
	
	            var payloadBatch = zrUtil.map(seriesList, function (series) {
	                return {
	                    seriesIndex: series.seriesIndex,
	                    dataIndexInside: series.getAxisTooltipDataIndex
	                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)
	                        : series.getData().indexOfNearest(
	                            series.coordDimToDataDim(baseAxis.dim)[0],
	                            value[baseDimIndex],
	                            // Add a threshold to avoid find the wrong dataIndex when data length is not same
	                            false, baseAxis.type === 'category' ? 0.5 : null
	                        )
	                };
	            });
	            var sampleSeriesIndex;
	            zrUtil.each(payloadBatch, function (payload, idx) {
	                if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {
	                    sampleSeriesIndex = idx;
	                }
	            });
	            // Fallback to 0.
	            sampleSeriesIndex = sampleSeriesIndex || 0;
	
	            var lastHover = this._lastHover;
	            var api = this._api;
	            // Dispatch downplay action
	            if (lastHover.payloadBatch && !contentNotChange) {
	                api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Dispatch highlight action
	            if (!contentNotChange) {
	                api.dispatchAction({
	                    type: 'highlight',
	                    batch: payloadBatch
	                });
	                lastHover.payloadBatch = payloadBatch;
	            }
	            // Dispatch showTip action
	            var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;
	            api.dispatchAction({
	                type: 'showTip',
	                dataIndexInside: dataIndex,
	                // expose to user.
	                dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),
	                seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,
	                from: this.uid
	            });
	
	            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {
	                var paramsList = zrUtil.map(seriesList, function (series, index) {
	                    return series.getDataParams(payloadBatch[index].dataIndexInside);
	                });
	
	                if (!contentNotChange) {
	                    // Update html content
	                    var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;
	
	                    // Default tooltip content
	                    // FIXME
	                    // (1) shold be the first data which has name?
	                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                    var firstLine = baseAxis.type === 'time'
	                        ? baseAxis.scale.getLabel(value[baseDimIndex])
	                        : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);
	                    var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')
	                        + zrUtil.map(seriesList, function (series, index) {
	                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);
	                        }).join('<br />');
	
	                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;
	
	                    this._showTooltipContent(
	                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,
	                        point[0], point[1], positionExpr, null, api
	                    );
	                }
	                else {
	                    updatePosition(
	                        positionExpr || rootTooltipModel.get('position'),
	                        point[0], point[1],
	                        rootTooltipModel.get('confine'),
	                        this._tooltipContent, paramsList, null, api
	                    );
	                }
	            }
	        },
	
	        /**
	         * Show tooltip on item
	         * @param {module:echarts/model/Series} seriesModel
	         * @param {number} dataIndex
	         * @param {string} dataType
	         * @param {Object} e
	         */
	        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {
	            // FIXME Graph data
	            var api = this._api;
	            var data = seriesModel.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);
	
	            var tooltipOpt = itemModel.get('tooltip', true);
	            if (typeof tooltipOpt === 'string') {
	                // In each data item tooltip can be simply write:
	                // {
	                //  value: 10,
	                //  tooltip: 'Something you need to know'
	                // }
	                var tooltipContent = tooltipOpt;
	                tooltipOpt = {
	                    formatter: tooltipContent
	                };
	            }
	            var rootTooltipModel = this._tooltipModel;
	            var seriesTooltipModel = seriesModel.getModel(
	                'tooltip', rootTooltipModel
	            );
	            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);
	
	            var params = seriesModel.getDataParams(dataIndex, dataType);
	            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);
	
	            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;
	
	            this._showTooltipContent(
	                tooltipModel, defaultHtml, params, asyncTicket,
	                e.offsetX, e.offsetY, e.position, e.target, api
	            );
	        },
	
	        _showTooltipContent: function (
	            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api
	        ) {
	            // Reset ticket
	            this._ticket = '';
	
	            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {
	                var tooltipContent = this._tooltipContent;
	                var confine = tooltipModel.get('confine');
	
	                var formatter = tooltipModel.get('formatter');
	                positionExpr = positionExpr || tooltipModel.get('position');
	                var html = defaultHtml;
	
	                if (formatter) {
	                    if (typeof formatter === 'string') {
	                        html = formatUtil.formatTpl(formatter, params, true);
	                    }
	                    else if (typeof formatter === 'function') {
	                        var self = this;
	                        var ticket = asyncTicket;
	                        var callback = function (cbTicket, html) {
	                            if (cbTicket === self._ticket) {
	                                tooltipContent.setContent(html);
	
	                                updatePosition(
	                                    positionExpr, x, y, confine,
	                                    tooltipContent, params, target, api
	                                );
	                            }
	                        };
	                        self._ticket = ticket;
	                        html = formatter(params, ticket, callback);
	                    }
	                }
	
	                tooltipContent.show(tooltipModel);
	                tooltipContent.setContent(html);
	
	                updatePosition(
	                    positionExpr, x, y, confine,
	                    tooltipContent, params, target, api
	                );
	            }
	        },
	
	        /**
	         * Show axis pointer
	         * @param {string} [coordSysName]
	         */
	        _showAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.show();
	                });
	            }
	            else {
	                this.group.eachChild(function (child) {
	                    child.show();
	                });
	                this.group.show();
	            }
	        },
	
	        _resetLastHover: function () {
	            var lastHover = this._lastHover;
	            if (lastHover.payloadBatch) {
	                this._api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Reset lastHover
	            this._lastHover = {};
	        },
	        /**
	         * Hide axis pointer
	         * @param {string} [coordSysName]
	         */
	        _hideAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.hide();
	                });
	            }
	            else {
	                if (this.group.children().length) {
	                    this.group.hide();
	                }
	            }
	        },
	
	        _hide: function () {
	            clearTimeout(this._showTimeout);
	
	            this._hideAxisPointer();
	            this._resetLastHover();
	            if (!this._alwaysShowContent) {
	                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	            }
	
	            this._api.dispatchAction({
	                type: 'hideTip',
	                from: this.uid
	            });
	
	            this._lastX = this._lastY = null;
	        },
	
	        dispose: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var zr = api.getZr();
	            this._tooltipContent.hide();
	
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	        }
	    });


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/tooltip/TooltipContent
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var zrColor = __webpack_require__(60);
	    var eventUtil = __webpack_require__(109);
	    var formatUtil = __webpack_require__(27);
	    var each = zrUtil.each;
	    var toCamelCase = formatUtil.toCamelCase;
	    var env = __webpack_require__(23);
	
	    var vendors = ['', '-webkit-', '-moz-', '-o-'];
	
	    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';
	
	    /**
	     * @param {number} duration
	     * @return {string}
	     * @inner
	     */
	    function assembleTransition(duration) {
	        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','
	                            + 'top ' + duration + 's ' + transitionCurve;
	        return zrUtil.map(vendors, function (vendorPrefix) {
	            return vendorPrefix + 'transition:' + transitionText;
	        }).join(';');
	    }
	
	    /**
	     * @param {Object} textStyle
	     * @return {string}
	     * @inner
	     */
	    function assembleFont(textStyleModel) {
	        var cssText = [];
	
	        var fontSize = textStyleModel.get('fontSize');
	        var color = textStyleModel.getTextColor();
	
	        color && cssText.push('color:' + color);
	
	        cssText.push('font:' + textStyleModel.getFont());
	
	        fontSize &&
	            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	
	        each(['decoration', 'align'], function (name) {
	            var val = textStyleModel.get(name);
	            val && cssText.push('text-' + name + ':' + val);
	        });
	
	        return cssText.join(';');
	    }
	
	    /**
	     * @param {Object} tooltipModel
	     * @return {string}
	     * @inner
	     */
	    function assembleCssText(tooltipModel) {
	
	        tooltipModel = tooltipModel;
	
	        var cssText = [];
	
	        var transitionDuration = tooltipModel.get('transitionDuration');
	        var backgroundColor = tooltipModel.get('backgroundColor');
	        var textStyleModel = tooltipModel.getModel('textStyle');
	        var padding = tooltipModel.get('padding');
	
	        // Animation transition
	        transitionDuration &&
	            cssText.push(assembleTransition(transitionDuration));
	
	        if (backgroundColor) {
	            if (env.canvasSupported) {
	                cssText.push('background-Color:' + backgroundColor);
	            }
	            else {
	                // for ie
	                cssText.push(
	                    'background-Color:#' + zrColor.toHex(backgroundColor)
	                );
	                cssText.push('filter:alpha(opacity=70)');
	            }
	        }
	
	        // Border style
	        each(['width', 'color', 'radius'], function (name) {
	            var borderName = 'border-' + name;
	            var camelCase = toCamelCase(borderName);
	            var val = tooltipModel.get(camelCase);
	            val != null &&
	                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	        });
	
	        // Text style
	        cssText.push(assembleFont(textStyleModel));
	
	        // Padding
	        if (padding != null) {
	            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	        }
	
	        return cssText.join(';') + ';';
	    }
	
	    /**
	     * @alias module:echarts/component/tooltip/TooltipContent
	     * @constructor
	     */
	    function TooltipContent(container, api) {
	        var el = document.createElement('div');
	        var zr = api.getZr();
	
	        this.el = el;
	
	        this._x = api.getWidth() / 2;
	        this._y = api.getHeight() / 2;
	
	        container.appendChild(el);
	
	        this._container = container;
	
	        this._show = false;
	
	        /**
	         * @private
	         */
	        this._hideTimeout;
	
	        var self = this;
	        el.onmouseenter = function () {
	            // clear the timeout in hideLater and keep showing tooltip
	            if (self.enterable) {
	                clearTimeout(self._hideTimeout);
	                self._show = true;
	            }
	            self._inContent = true;
	        };
	        el.onmousemove = function (e) {
	            e = e || window.event;
	            if (!self.enterable) {
	                // Try trigger zrender event to avoid mouse
	                // in and out shape too frequently
	                var handler = zr.handler;
	                eventUtil.normalizeEvent(container, e, true);
	                handler.dispatch('mousemove', e);
	            }
	        };
	        el.onmouseleave = function () {
	            if (self.enterable) {
	                if (self._show) {
	                    self.hideLater(self._hideDelay);
	                }
	            }
	            self._inContent = false;
	        };
	    }
	
	    TooltipContent.prototype = {
	
	        constructor: TooltipContent,
	
	        enterable: true,
	
	        /**
	         * Update when tooltip is rendered
	         */
	        update: function () {
	            var container = this._container;
	            var stl = container.currentStyle
	                || document.defaultView.getComputedStyle(container);
	            var domStyle = container.style;
	            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	                domStyle.position = 'relative';
	            }
	            // Hide the tooltip
	            // PENDING
	            // this.hide();
	        },
	
	        show: function (tooltipModel) {
	            clearTimeout(this._hideTimeout);
	            var el = this.el;
	
	            el.style.cssText = gCssText + assembleCssText(tooltipModel)
	                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	                + ';left:' + this._x + 'px;top:' + this._y + 'px;'
	                + (tooltipModel.get('extraCssText') || '');
	
	            el.style.display = el.innerHTML ?  'block' : 'none';
	
	            this._show = true;
	        },
	
	        setContent: function (content) {
	            var el = this.el;
	            el.innerHTML = content;
	            el.style.display = content ? 'block' : 'none';
	        },
	
	        moveTo: function (x, y) {
	            var style = this.el.style;
	            style.left = x + 'px';
	            style.top = y + 'px';
	
	            this._x = x;
	            this._y = y;
	        },
	
	        hide: function () {
	            this.el.style.display = 'none';
	            this._show = false;
	        },
	
	        // showLater: function ()
	
	        hideLater: function (time) {
	            if (this._show && !(this._inContent && this.enterable)) {
	                if (time) {
	                    this._hideDelay = time;
	                    // Set show false to avoid invoke hideLater mutiple times
	                    this._show = false;
	                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	                }
	                else {
	                    this.hide();
	                }
	            }
	        },
	
	        isShow: function () {
	            return this._show;
	        }
	    };
	
	    module.exports = TooltipContent;


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    __webpack_require__(325);
	    __webpack_require__(331);
	    __webpack_require__(333);
	
	    // Polar view
	    __webpack_require__(22).extendComponentView({
	        type: 'polar'
	    });


/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Axis scale
	
	
	    var Polar = __webpack_require__(326);
	    var numberUtil = __webpack_require__(28);
	    var zrUtil = __webpack_require__(25);
	
	    var axisHelper = __webpack_require__(136);
	    var niceScaleExtent = axisHelper.niceScaleExtent;
	
	    // 依赖 PolarModel 做预处理
	    __webpack_require__(329);
	
	    /**
	     * Resize method bound to the polar
	     * @param {module:echarts/coord/polar/PolarModel} polarModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function resizePolar(polarModel, api) {
	        var center = polarModel.get('center');
	        var radius = polarModel.get('radius');
	        var width = api.getWidth();
	        var height = api.getHeight();
	        var parsePercent = numberUtil.parsePercent;
	
	        this.cx = parsePercent(center[0], width);
	        this.cy = parsePercent(center[1], height);
	
	        var radiusAxis = this.getRadiusAxis();
	        var size = Math.min(width, height) / 2;
	        // var idx = radiusAxis.inverse ? 1 : 0;
	        radiusAxis.setExtent(0, parsePercent(radius, size));
	    }
	
	    /**
	     * Update polar
	     */
	    function updatePolarScale(ecModel, api) {
	        var polar = this;
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();
	        // Reset scale
	        angleAxis.scale.setExtent(Infinity, -Infinity);
	        radiusAxis.scale.setExtent(Infinity, -Infinity);
	
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.coordinateSystem === polar) {
	                var data = seriesModel.getData();
	                radiusAxis.scale.unionExtentFromData(data, 'radius');
	                angleAxis.scale.unionExtentFromData(data, 'angle');
	            }
	        });
	
	        niceScaleExtent(angleAxis, angleAxis.model);
	        niceScaleExtent(radiusAxis, radiusAxis.model);
	
	        // Fix extent of category angle axis
	        if (angleAxis.type === 'category' && !angleAxis.onBand) {
	            var extent = angleAxis.getExtent();
	            var diff = 360 / angleAxis.scale.count();
	            angleAxis.inverse ? (extent[1] += diff) : (extent[1] -= diff);
	            angleAxis.setExtent(extent[0], extent[1]);
	        }
	    }
	
	    /**
	     * Set common axis properties
	     * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	     * @param {module:echarts/coord/polar/AxisModel}
	     * @inner
	     */
	    function setAxis(axis, axisModel) {
	        axis.type = axisModel.get('type');
	        axis.scale = axisHelper.createScaleByModel(axisModel);
	        axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';
	
	        // FIXME Radius axis not support inverse axis
	        if (axisModel.mainType === 'angleAxis') {
	            var startAngle = axisModel.get('startAngle');
	            axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');
	            axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
	        }
	
	        // Inject axis instance
	        axisModel.axis = axis;
	        axis.model = axisModel;
	    }
	
	
	    var polarCreator = {
	
	        dimensions: Polar.prototype.dimensions,
	
	        create: function (ecModel, api) {
	            var polarList = [];
	            ecModel.eachComponent('polar', function (polarModel, idx) {
	                var polar = new Polar(idx);
	                // Inject resize and update method
	                polar.resize = resizePolar;
	                polar.update = updatePolarScale;
	
	                var radiusAxis = polar.getRadiusAxis();
	                var angleAxis = polar.getAngleAxis();
	
	                var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	                var angleAxisModel = polarModel.findAxisModel('angleAxis');
	
	                setAxis(radiusAxis, radiusAxisModel);
	                setAxis(angleAxis, angleAxisModel);
	
	                polar.resize(polarModel, api);
	                polarList.push(polar);
	
	                polarModel.coordinateSystem = polar;
	            });
	            // Inject coordinateSystem to series
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.get('coordinateSystem') === 'polar') {
	                    var polarModel = ecModel.queryComponents({
	                        mainType: 'polar',
	                        index: seriesModel.get('polarIndex'),
	                        id: seriesModel.get('polarId')
	                    })[0];
	
	                    if (__DEV__) {
	                        if (!polarModel) {
	                            throw new Error(
	                                'Polar "' + zrUtil.retrieve(
	                                    seriesModel.get('polarIndex'),
	                                    seriesModel.get('polarId'),
	                                    0
	                                ) + '" not found'
	                            );
	                        }
	                    }
	                    seriesModel.coordinateSystem = polarModel.coordinateSystem;
	                }
	            });
	
	            return polarList;
	        }
	    };
	
	    __webpack_require__(47).register('polar', polarCreator);


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/coord/polar/Polar
	 */
	
	
	    var RadiusAxis = __webpack_require__(327);
	    var AngleAxis = __webpack_require__(328);
	
	    /**
	     * @alias {module:echarts/coord/polar/Polar}
	     * @constructor
	     * @param {string} name
	     */
	    var Polar = function (name) {
	
	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	
	        /**
	         * x of polar center
	         * @type {number}
	         */
	        this.cx = 0;
	
	        /**
	         * y of polar center
	         * @type {number}
	         */
	        this.cy = 0;
	
	        /**
	         * @type {module:echarts/coord/polar/RadiusAxis}
	         * @private
	         */
	        this._radiusAxis = new RadiusAxis();
	
	        /**
	         * @type {module:echarts/coord/polar/AngleAxis}
	         * @private
	         */
	        this._angleAxis = new AngleAxis();
	    };
	
	    Polar.prototype = {
	
	        constructor: Polar,
	
	        type: 'polar',
	
	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['radius', 'angle'],
	
	        /**
	         * If contain coord
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var coord = this.pointToCoord(point);
	            return this._radiusAxis.contain(coord[0])
	                && this._angleAxis.contain(coord[1]);
	        },
	
	        /**
	         * If contain data
	         * @param {Array.<number>} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this._radiusAxis.containData(data[0])
	                && this._angleAxis.containData(data[1]);
	        },
	
	        /**
	         * @param {string} axisType
	         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        getAxis: function (axisType) {
	            return this['_' + axisType + 'Axis'];
	        },
	
	        /**
	         * Get axes by type of scale
	         * @param {string} scaleType
	         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        getAxesByScale: function (scaleType) {
	            var axes = [];
	            var angleAxis = this._angleAxis;
	            var radiusAxis = this._radiusAxis;
	            angleAxis.scale.type === scaleType && axes.push(angleAxis);
	            radiusAxis.scale.type === scaleType && axes.push(radiusAxis);
	
	            return axes;
	        },
	
	        /**
	         * @return {module:echarts/coord/polar/AngleAxis}
	         */
	        getAngleAxis: function () {
	            return this._angleAxis;
	        },
	
	        /**
	         * @return {module:echarts/coord/polar/RadiusAxis}
	         */
	        getRadiusAxis: function () {
	            return this._radiusAxis;
	        },
	
	        /**
	         * @param {module:echarts/coord/polar/Axis}
	         * @return {module:echarts/coord/polar/Axis}
	         */
	        getOtherAxis: function (axis) {
	            var angleAxis = this._angleAxis;
	            return axis === angleAxis ? this._radiusAxis : angleAxis;
	        },
	
	        /**
	         * Base axis will be used on stacking.
	         *
	         * @return {module:echarts/coord/polar/Axis}
	         */
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0]
	                || this.getAxesByScale('time')[0]
	                || this.getAngleAxis();
	        },
	
	        /**
	         * Convert series data to a list of (x, y) points
	         * @param {module:echarts/data/List} data
	         * @return {Array}
	         *  Return list of coordinates. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data) {
	            return data.mapArray(this.dimensions, function (radius, angle) {
	                return this.dataToPoint([radius, angle]);
	            }, this);
	        },
	
	        /**
	         * Convert a single data item to (x, y) point.
	         * Parameter data is an array which the first element is radius and the second is angle
	         * @param {Array.<number>} data
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data, clamp) {
	            return this.coordToPoint([
	                this._radiusAxis.dataToRadius(data[0], clamp),
	                this._angleAxis.dataToAngle(data[1], clamp)
	            ]);
	        },
	
	        /**
	         * Convert a (x, y) point to data
	         * @param {Array.<number>} point
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        pointToData: function (point, clamp) {
	            var coord = this.pointToCoord(point);
	            return [
	                this._radiusAxis.radiusToData(coord[0], clamp),
	                this._angleAxis.angleToData(coord[1], clamp)
	            ];
	        },
	
	        /**
	         * Convert a (x, y) point to (radius, angle) coord
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToCoord: function (point) {
	            var dx = point[0] - this.cx;
	            var dy = point[1] - this.cy;
	            var angleAxis = this.getAngleAxis();
	            var extent = angleAxis.getExtent();
	            var minAngle = Math.min(extent[0], extent[1]);
	            var maxAngle = Math.max(extent[0], extent[1]);
	            // Fix fixed extent in polarCreator
	            // FIXME
	            angleAxis.inverse
	                ? (minAngle = maxAngle - 360)
	                : (maxAngle = minAngle + 360);
	
	            var radius = Math.sqrt(dx * dx + dy * dy);
	            dx /= radius;
	            dy /= radius;
	
	            var radian = Math.atan2(-dy, dx) / Math.PI * 180;
	
	            // move to angleExtent
	            var dir = radian < minAngle ? 1 : -1;
	            while (radian < minAngle || radian > maxAngle) {
	                radian += dir * 360;
	            }
	
	            return [radius, radian];
	        },
	
	        /**
	         * Convert a (radius, angle) coord to (x, y) point
	         * @param {Array.<number>} coord
	         * @return {Array.<number>}
	         */
	        coordToPoint: function (coord) {
	            var radius = coord[0];
	            var radian = coord[1] / 180 * Math.PI;
	            var x = Math.cos(radian) * radius + this.cx;
	            // Inverse the y
	            var y = -Math.sin(radian) * radius + this.cy;
	
	            return [x, y];
	        }
	    };
	
	    module.exports = Polar;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	
	    function RadiusAxis(scale, radiusExtent) {
	
	        Axis.call(this, 'radius', scale, radiusExtent);
	
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'category';
	    }
	
	    RadiusAxis.prototype = {
	
	        constructor: RadiusAxis,
	
	        dataToRadius: Axis.prototype.dataToCoord,
	
	        radiusToData: Axis.prototype.coordToData
	    };
	
	    zrUtil.inherits(RadiusAxis, Axis);
	
	    module.exports = RadiusAxis;


/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	
	    function AngleAxis(scale, angleExtent) {
	
	        angleExtent = angleExtent || [0, 360];
	
	        Axis.call(this, 'angle', scale, angleExtent);
	
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'category';
	    }
	
	    AngleAxis.prototype = {
	
	        constructor: AngleAxis,
	
	        dataToAngle: Axis.prototype.dataToCoord,
	
	        angleToData: Axis.prototype.coordToData
	    };
	
	    zrUtil.inherits(AngleAxis, Axis);
	
	    module.exports = AngleAxis;


/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    __webpack_require__(330);
	
	    __webpack_require__(22).extendComponentModel({
	
	        type: 'polar',
	
	        dependencies: ['polarAxis', 'angleAxis'],
	
	        /**
	         * @type {module:echarts/coord/polar/Polar}
	         */
	        coordinateSystem: null,
	
	        /**
	         * @param {string} axisType
	         * @return {module:echarts/coord/polar/AxisModel}
	         */
	        findAxisModel: function (axisType) {
	            var foundAxisModel;
	            var ecModel = this.ecModel;
	
	            ecModel.eachComponent(axisType, function (axisModel) {
	                if (axisModel.getCoordSysModel() === this) {
	                    foundAxisModel = axisModel;
	                }
	            }, this);
	            return foundAxisModel;
	        },
	
	        defaultOption: {
	
	            zlevel: 0,
	
	            z: 0,
	
	            center: ['50%', '50%'],
	
	            radius: '80%'
	        }
	    });


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var ComponentModel = __webpack_require__(40);
	    var axisModelCreator = __webpack_require__(149);
	
	    var PolarAxisModel = ComponentModel.extend({
	
	        type: 'polarAxis',
	
	        /**
	         * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        axis: null,
	
	        /**
	         * @override
	         */
	        getCoordSysModel: function () {
	            return this.ecModel.queryComponents({
	                mainType: 'polar',
	                index: this.option.polarIndex,
	                id: this.option.polarId
	            })[0];
	        }
	
	    });
	
	    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(151));
	
	    var polarAxisDefaultExtendedOption = {
	        angle: {
	            // polarIndex: 0,
	            // polarId: '',
	
	            startAngle: 90,
	
	            clockwise: true,
	
	            splitNumber: 12,
	
	            axisLabel: {
	                rotate: false
	            }
	        },
	        radius: {
	            // polarIndex: 0,
	            // polarId: '',
	
	            splitNumber: 5
	        }
	    };
	
	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }
	
	    axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
	    axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);
	


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    __webpack_require__(325);
	
	    __webpack_require__(332);


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var Model = __webpack_require__(33);
	
	    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];
	
	    function getAxisLineShape(polar, r0, r, angle) {
	        var start = polar.coordToPoint([r0, angle]);
	        var end = polar.coordToPoint([r, angle]);
	
	        return {
	            x1: start[0],
	            y1: start[1],
	            x2: end[0],
	            y2: end[1]
	        };
	    }
	    __webpack_require__(22).extendComponentView({
	
	        type: 'angleAxis',
	
	        render: function (angleAxisModel, ecModel) {
	            this.group.removeAll();
	            if (!angleAxisModel.get('show')) {
	                return;
	            }
	
	            var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));
	            var angleAxis = angleAxisModel.axis;
	            var polar = polarModel.coordinateSystem;
	            var radiusExtent = polar.getRadiusAxis().getExtent();
	            var ticksAngles = angleAxis.getTicksCoords();
	
	            if (angleAxis.type !== 'category') {
	                // Remove the last tick which will overlap the first tick
	                ticksAngles.pop();
	            }
	
	            zrUtil.each(elementList, function (name) {
	                if (angleAxisModel.get(name +'.show')
	                    && (!angleAxis.isBlank() || name === 'axisLine')
	                ) {
	                    this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
	                }
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');
	
	            var circle = new graphic.Circle({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: radiusExtent[1]
	                },
	                style: lineStyleModel.getLineStyle(),
	                z2: 1,
	                silent: true
	            });
	            circle.style.fill = null;
	
	            this.group.add(circle);
	        },
	
	        /**
	         * @private
	         */
	        _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var tickModel = angleAxisModel.getModel('axisTick');
	
	            var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');
	
	            var lines = zrUtil.map(ticksAngles, function (tickAngle) {
	                return new graphic.Line({
	                    shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)
	                });
	            });
	            this.group.add(graphic.mergePath(
	                lines, {
	                    style: zrUtil.defaults(
	                        tickModel.getModel('lineStyle').getLineStyle(),
	                        {
	                            stroke: angleAxisModel.get('axisLine.lineStyle.color')
	                        }
	                    )
	                }
	            ));
	        },
	
	        /**
	         * @private
	         */
	        _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var axis = angleAxisModel.axis;
	
	            var categoryData = angleAxisModel.get('data');
	
	            var labelModel = angleAxisModel.getModel('axisLabel');
	            var axisTextStyleModel = labelModel.getModel('textStyle');
	
	            var labels = angleAxisModel.getFormattedLabels();
	
	            var labelMargin = labelModel.get('margin');
	            var labelsAngles = axis.getLabelsCoords();
	
	            // Use length of ticksAngles because it may remove the last tick to avoid overlapping
	            for (var i = 0; i < ticksAngles.length; i++) {
	                var r = radiusExtent[1];
	                var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
	                var cx = polar.cx;
	                var cy = polar.cy;
	
	                var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3
	                    ? 'center' : (p[0] > cx ? 'left' : 'right');
	                var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3
	                    ? 'middle' : (p[1] > cy ? 'top' : 'bottom');
	
	                var textStyleModel = axisTextStyleModel;
	                if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                    textStyleModel = new Model(
	                        categoryData[i].textStyle, axisTextStyleModel
	                    );
	                }
	                this.group.add(new graphic.Text({
	                    style: {
	                        x: p[0],
	                        y: p[1],
	                        fill: textStyleModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),
	                        text: labels[i],
	                        textAlign: labelTextAlign,
	                        textVerticalAlign: labelTextBaseline,
	                        textFont: textStyleModel.getFont()
	                    },
	                    silent: true
	                }));
	            }
	        },
	
	        /**
	         * @private
	         */
	        _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var splitLineModel = angleAxisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	            var lineCount = 0;
	
	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	
	            var splitLines = [];
	
	            for (var i = 0; i < ticksAngles.length; i++) {
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Line({
	                    shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])
	                }));
	            }
	
	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitLines.length; i++) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: zrUtil.defaults({
	                        stroke: lineColors[i % lineColors.length]
	                    }, lineStyleModel.getLineStyle()),
	                    silent: true,
	                    z: angleAxisModel.get('z')
	                }));
	            }
	        },
	
	        /**
	         * @private
	         */
	        _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	
	            var splitAreaModel = angleAxisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');
	            var lineCount = 0;
	
	            areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	
	            var splitAreas = [];
	
	            var RADIAN = Math.PI / 180;
	            var prevAngle = -ticksAngles[0] * RADIAN;
	            var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
	            var r1 = Math.max(radiusExtent[0], radiusExtent[1]);
	
	            var clockwise = angleAxisModel.get('clockwise');
	
	            for (var i = 1; i < ticksAngles.length; i++) {
	                var colorIndex = (lineCount++) % areaColors.length;
	                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	                splitAreas[colorIndex].push(new graphic.Sector({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r0: r0,
	                        r: r1,
	                        startAngle: prevAngle,
	                        endAngle: -ticksAngles[i] * RADIAN,
	                        clockwise: clockwise
	                    },
	                    silent: true
	                }));
	                prevAngle = -ticksAngles[i] * RADIAN;
	            }
	
	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitAreas.length; i++) {
	                this.group.add(graphic.mergePath(splitAreas[i], {
	                    style: zrUtil.defaults({
	                        fill: areaColors[i % areaColors.length]
	                    }, areaStyleModel.getAreaStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(325);
	
	    __webpack_require__(334);


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var AxisBuilder = __webpack_require__(154);
	
	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	    var selfBuilderAttrs = [
	        'splitLine', 'splitArea'
	    ];
	
	    __webpack_require__(22).extendComponentView({
	
	        type: 'radiusAxis',
	
	        render: function (radiusAxisModel, ecModel) {
	            this.group.removeAll();
	            if (!radiusAxisModel.get('show')) {
	                return;
	            }
	            var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));
	            var angleAxis = polarModel.coordinateSystem.getAngleAxis();
	            var radiusAxis = radiusAxisModel.axis;
	            var polar = polarModel.coordinateSystem;
	            var ticksCoords = radiusAxis.getTicksCoords();
	            var axisAngle = angleAxis.getExtent()[0];
	            var radiusExtent = radiusAxis.getExtent();
	
	            var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
	            var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	            this.group.add(axisBuilder.getGroup());
	
	            zrUtil.each(selfBuilderAttrs, function (name) {
	                if (radiusAxisModel.get(name +'.show') && !radiusAxis.isBlank()) {
	                    this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
	                }
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	            var splitLineModel = radiusAxisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	            var lineCount = 0;
	
	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	
	            var splitLines = [];
	
	            for (var i = 0; i < ticksCoords.length; i++) {
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Circle({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: ticksCoords[i]
	                    },
	                    silent: true
	                }));
	            }
	
	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitLines.length; i++) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: zrUtil.defaults({
	                        stroke: lineColors[i % lineColors.length],
	                        fill: null
	                    }, lineStyleModel.getLineStyle()),
	                    silent: true
	                }));
	            }
	        },
	
	        /**
	         * @private
	         */
	        _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	
	            var splitAreaModel = radiusAxisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');
	            var lineCount = 0;
	
	            areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	
	            var splitAreas = [];
	
	            var prevRadius = ticksCoords[0];
	            for (var i = 1; i < ticksCoords.length; i++) {
	                var colorIndex = (lineCount++) % areaColors.length;
	                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	                splitAreas[colorIndex].push(new graphic.Sector({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r0: prevRadius,
	                        r: ticksCoords[i],
	                        startAngle: 0,
	                        endAngle: Math.PI * 2
	                    },
	                    silent: true
	                }));
	                prevRadius = ticksCoords[i];
	            }
	
	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitAreas.length; i++) {
	                this.group.add(graphic.mergePath(splitAreas[i], {
	                    style: zrUtil.defaults({
	                        fill: areaColors[i % areaColors.length]
	                    }, areaStyleModel.getAreaStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });
	
	    /**
	     * @inner
	     */
	    function layoutAxis(polar, radiusAxisModel, axisAngle) {
	        return {
	            position: [polar.cx, polar.cy],
	            rotation: axisAngle / 180 * Math.PI,
	            labelDirection: -1,
	            tickDirection: -1,
	            nameDirection: 1,
	            labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),
	            // Over splitLine and splitArea
	            z2: 1
	        };
	    }


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(336);
	
	    __webpack_require__(187);
	
	    __webpack_require__(337);
	
	    __webpack_require__(200);
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    function makeAction(method, actionInfo) {
	        actionInfo.update = 'updateView';
	        echarts.registerAction(actionInfo, function (payload, ecModel) {
	            var selected = {};
	
	            ecModel.eachComponent(
	                { mainType: 'geo', query: payload},
	                function (geoModel) {
	                    geoModel[method](payload.name);
	                    var geo = geoModel.coordinateSystem;
	                    zrUtil.each(geo.regions, function (region) {
	                        selected[region.name] = geoModel.isSelected(region.name) || false;
	                    });
	                }
	            );
	
	            return {
	                selected: selected,
	                name: payload.name
	            }
	        });
	    }
	
	    makeAction('toggleSelected', {
	        type: 'geoToggleSelect',
	        event: 'geoselectchanged'
	    });
	    makeAction('select', {
	        type: 'geoSelect',
	        event: 'geoselected'
	    });
	    makeAction('unSelect', {
	        type: 'geoUnSelect',
	        event: 'geounselected'
	    });


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	    var modelUtil = __webpack_require__(26);
	    var ComponentModel = __webpack_require__(40);
	    var Model = __webpack_require__(33);
	    var zrUtil = __webpack_require__(25);
	
	    var selectableMixin = __webpack_require__(164);
	
	    var geoCreator = __webpack_require__(187);
	
	    var GeoModel = ComponentModel.extend({
	
	        type: 'geo',
	
	        /**
	         * @type {module:echarts/coord/geo/Geo}
	         */
	        coordinateSystem: null,
	
	        layoutMode: 'box',
	
	        init: function (option) {
	            ComponentModel.prototype.init.apply(this, arguments);
	
	            // Default label emphasis `position` and `show`
	            modelUtil.defaultEmphasis(
	                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']
	            );
	        },
	
	        optionUpdated: function () {
	            var option = this.option;
	            var self = this;
	
	            option.regions = geoCreator.getFilledRegions(option.regions, option.map);
	
	            this._optionModelMap = zrUtil.reduce(option.regions || [], function (obj, regionOpt) {
	                if (regionOpt.name) {
	                    obj[regionOpt.name] = new Model(regionOpt, self);
	                }
	                return obj;
	            }, {});
	
	            this.updateSelectedMap(option.regions);
	        },
	
	        defaultOption: {
	
	            zlevel: 0,
	
	            z: 0,
	
	            show: true,
	
	            left: 'center',
	
	            top: 'center',
	
	
	            // width:,
	            // height:,
	            // right
	            // bottom
	
	            // Aspect is width / height. Inited to be geoJson bbox aspect
	            // This parameter is used for scale this aspect
	            aspectScale: 0.75,
	
	            ///// Layout with center and size
	            // If you wan't to put map in a fixed size box with right aspect ratio
	            // This two properties may more conveninet
	            // layoutCenter: [50%, 50%]
	            // layoutSize: 100
	
	
	            silent: false,
	
	            // Map type
	            map: '',
	
	            // Default on center of map
	            center: null,
	
	            zoom: 1,
	
	            scaleLimit: null,
	
	            // selectedMode: false
	
	            label: {
	                normal: {
	                    show: false,
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            },
	
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderWidth: 0.5,
	                    borderColor: '#444',
	                    color: '#eee'
	                },
	                emphasis: {                 // 也是选中样式
	                    color: 'rgba(255,215,0,0.8)'
	                }
	            },
	
	            regions: []
	        },
	
	        /**
	         * Get model of region
	         * @param  {string} name
	         * @return {module:echarts/model/Model}
	         */
	        getRegionModel: function (name) {
	            return this._optionModelMap[name];
	        },
	
	        /**
	         * Format label
	         * @param {string} name Region name
	         * @param {string} [status='normal'] 'normal' or 'emphasis'
	         * @return {string}
	         */
	        getFormattedLabel: function (name, status) {
	            var formatter = this.get('label.' + status + '.formatter');
	            var params = {
	                name: name
	            };
	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            }
	            else if (typeof formatter === 'string') {
	                var serName = params.seriesName;
	                return formatter.replace('{a}', serName != null ? serName : '');
	            }
	        },
	
	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },
	
	        setCenter: function (center) {
	            this.option.center = center;
	        }
	    });
	
	    zrUtil.mixin(GeoModel, selectableMixin);
	
	    module.exports = GeoModel;


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var MapDraw = __webpack_require__(197);
	
	    module.exports = __webpack_require__(22).extendComponentView({
	
	        type: 'geo',
	
	        init: function (ecModel, api) {
	            var mapDraw = new MapDraw(api, true);
	            this._mapDraw = mapDraw;
	
	            this.group.add(mapDraw.group);
	        },
	
	        render: function (geoModel, ecModel, api, payload) {
	            // Not render if it is an toggleSelect action from self
	            if (payload && payload.type === 'geoToggleSelect'
	                && payload.from === this.uid
	            ) {
	                return;
	            }
	
	            var mapDraw = this._mapDraw;
	            if (geoModel.get('show')) {
	                mapDraw.draw(geoModel, ecModel, api, this, payload);
	            }
	            else {
	                this._mapDraw.group.removeAll();
	            }
	
	            this.group.silent = geoModel.get('silent');
	        },
	
	        dispose: function () {
	            this._mapDraw && this._mapDraw.remove();
	        }
	
	    });


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Brush component entry
	 */
	
	
	    __webpack_require__(22).registerPreprocessor(
	        __webpack_require__(339)
	    );
	
	    __webpack_require__(340);
	    __webpack_require__(344);
	    __webpack_require__(345);
	    __webpack_require__(346);
	
	    __webpack_require__(347);
	


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file brush preprocessor
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];
	
	    module.exports = function (option, isNew) {
	        var brushComponents = option && option.brush;
	        if (!zrUtil.isArray(brushComponents)) {
	            brushComponents = brushComponents ? [brushComponents] : [];
	        }
	
	        if (!brushComponents.length) {
	            return;
	        }
	
	        var brushComponentSpecifiedBtns = [];
	
	        zrUtil.each(brushComponents, function (brushOpt) {
	            var tbs = brushOpt.hasOwnProperty('toolbox')
	                ? brushOpt.toolbox : [];
	
	            if (tbs instanceof Array) {
	                brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);
	            }
	        });
	
	        var toolbox = option && option.toolbox;
	
	        if (zrUtil.isArray(toolbox)) {
	            toolbox = toolbox[0];
	        }
	        if (!toolbox) {
	            toolbox = {feature: {}};
	            option.toolbox = [toolbox];
	        }
	
	        var toolboxFeature = (toolbox.feature || (toolbox.feature = {}));
	        var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});
	        var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);
	
	        brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);
	
	        removeDuplicate(brushTypes);
	
	        if (isNew && !brushTypes.length) {
	            brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);
	        }
	    };
	
	    function removeDuplicate(arr) {
	        var map = {};
	        zrUtil.each(arr, function (val) {
	            map[val] = 1;
	        });
	        arr.length = 0;
	        zrUtil.each(map, function (flag, val) {
	            arr.push(val);
	        });
	    }
	


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush visual coding.
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var visualSolution = __webpack_require__(341);
	    var zrUtil = __webpack_require__(25);
	    var BoundingRect = __webpack_require__(30);
	    var selector = __webpack_require__(342);
	    var throttle = __webpack_require__(102);
	    var brushHelper = __webpack_require__(343);
	
	    var STATE_LIST = ['inBrush', 'outOfBrush'];
	    var DISPATCH_METHOD = '__ecBrushSelect';
	    var DISPATCH_FLAG = '__ecInBrushSelectEvent';
	    var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;
	
	    /**
	     * Layout for visual, the priority higher than other layout, and before brush visual.
	     */
	    echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {
	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {
	
	            payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(
	                payload.key === 'brush' ? payload.brushOption : {brushType: false}
	            );
	
	            brushModel.coordInfoList = brushHelper.makeCoordInfoList(brushModel.option, ecModel);
	
	            brushHelper.parseInputRanges(brushModel, ecModel);
	        });
	    });
	
	    /**
	     * Register the visual encoding if this modules required.
	     */
	    echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {
	
	        var brushSelected = [];
	        var throttleType;
	        var throttleDelay;
	
	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel, brushIndex) {
	
	            var thisBrushSelected = {
	                brushId: brushModel.id,
	                brushIndex: brushIndex,
	                brushName: brushModel.name,
	                areas: zrUtil.clone(brushModel.areas),
	                selected: []
	            };
	            // Every brush component exists in event params, convenient
	            // for user to find by index.
	            brushSelected.push(thisBrushSelected);
	
	            var brushOption = brushModel.option;
	            var brushLink = brushOption.brushLink;
	            var linkedSeriesMap = [];
	            var selectedDataIndexForLink = [];
	            var rangeInfoBySeries = [];
	            var hasBrushExists = 0;
	
	            if (!brushIndex) { // Only the first throttle setting works.
	                throttleType = brushOption.throttleType;
	                throttleDelay = brushOption.throttleDelay;
	            }
	
	            // Add boundingRect and selectors to range.
	            var areas = zrUtil.map(brushModel.areas, function (area) {
	                return bindSelector(
	                    zrUtil.defaults(
	                        {boundingRect: boundingRectBuilders[area.brushType](area)},
	                        area
	                    )
	                );
	            });
	
	            var visualMappings = visualSolution.createVisualMappings(
	                brushModel.option, STATE_LIST, function (mappingOption) {
	                    mappingOption.mappingMethod = 'fixed';
	                }
	            );
	
	            zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {
	                linkedSeriesMap[seriesIndex] = 1;
	            });
	
	            function linkOthers(seriesIndex) {
	                return brushLink === 'all' || linkedSeriesMap[seriesIndex];
	            }
	
	            // If no supported brush or no brush on the series,
	            // all visuals should be in original state.
	            function brushed(rangeInfoList) {
	                return !!rangeInfoList.length;
	            }
	
	            /**
	             * Logic for each series: (If the logic has to be modified one day, do it carefully!)
	             *
	             * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.
	             *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.
	             *                └!hasBrushExist┘                                              └nothing.
	             * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.
	             *                └!hasBrushExist┘                                              └nothing.
	             * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.
	             *   !brushed┘                                                                  └nothing.
	             * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.
	             */
	
	            // Step A
	            ecModel.eachSeries(function (seriesModel, seriesIndex) {
	                var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];
	
	                seriesModel.subType === 'parallel'
	                    ? stepAParallel(seriesModel, seriesIndex, rangeInfoList)
	                    : stepAOthers(seriesModel, seriesIndex, rangeInfoList);
	            });
	
	            function stepAParallel(seriesModel, seriesIndex) {
	                var coordSys = seriesModel.coordinateSystem;
	                hasBrushExists |= coordSys.hasAxisbrushed();
	
	                linkOthers(seriesIndex) && coordSys.eachActiveState(
	                    seriesModel.getData(),
	                    function (activeState, dataIndex) {
	                        activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);
	                    }
	                );
	            }
	
	            function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {
	                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	                if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {
	                    return;
	                }
	
	                zrUtil.each(areas, function (area) {
	                    selectorsByBrushType[area.brushType]
	                        && brushHelper.controlSeries(area, brushModel, seriesModel)
	                        && rangeInfoList.push(area);
	                    hasBrushExists |= brushed(rangeInfoList);
	                });
	
	                if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {
	                    var data = seriesModel.getData();
	                    data.each(function (dataIndex) {
	                        if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {
	                            selectedDataIndexForLink[dataIndex] = 1;
	                        }
	                    });
	                }
	            }
	
	            // Step B
	            ecModel.eachSeries(function (seriesModel, seriesIndex) {
	                var seriesBrushSelected = {
	                    seriesId: seriesModel.id,
	                    seriesIndex: seriesIndex,
	                    seriesName: seriesModel.name,
	                    dataIndex: []
	                };
	                // Every series exists in event params, convenient
	                // for user to find series by seriesIndex.
	                thisBrushSelected.selected.push(seriesBrushSelected);
	
	                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	                var rangeInfoList = rangeInfoBySeries[seriesIndex];
	
	                var data = seriesModel.getData();
	                var getValueState = linkOthers(seriesIndex)
	                    ? function (dataIndex) {
	                        return selectedDataIndexForLink[dataIndex]
	                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')
	                            : 'outOfBrush';
	                    }
	                    : function (dataIndex) {
	                        return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)
	                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')
	                            : 'outOfBrush';
	                    };
	
	                // If no supported brush or no brush, all visuals are in original state.
	                (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList))
	                    && visualSolution.applyVisual(
	                        STATE_LIST, visualMappings, data, getValueState
	                    );
	            });
	
	        });
	
	        dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);
	    });
	
	    function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {
	        // This event will not be triggered when `setOpion`, otherwise dead lock may
	        // triggered when do `setOption` in event listener, which we do not find
	        // satisfactory way to solve yet. Some considered resolutions:
	        // (a) Diff with prevoius selected data ant only trigger event when changed.
	        // But store previous data and diff precisely (i.e., not only by dataIndex, but
	        // also detect value changes in selected data) might bring complexity or fragility.
	        // (b) Use spectial param like `silent` to suppress event triggering.
	        // But such kind of volatile param may be weird in `setOption`.
	        if (!payload) {
	            return;
	        }
	
	        var zr = api.getZr();
	        if (zr[DISPATCH_FLAG]) {
	            return;
	        }
	
	        if (!zr[DISPATCH_METHOD]) {
	            zr[DISPATCH_METHOD] = doDispatch;
	        }
	
	        var fn = throttle.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);
	
	        fn(api, brushSelected);
	    }
	
	    function doDispatch(api, brushSelected) {
	        if (!api.isDisposed()) {
	            var zr = api.getZr();
	            zr[DISPATCH_FLAG] = true;
	            api.dispatchAction({
	                type: 'brushSelect',
	                batch: brushSelected
	            });
	            zr[DISPATCH_FLAG] = false;
	        }
	    }
	
	    function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {
	        var itemLayout = data.getItemLayout(dataIndex);
	        for (var i = 0, len = rangeInfoList.length; i < len; i++) {
	            var area = rangeInfoList[i];
	            if (selectorsByBrushType[area.brushType](
	                itemLayout, area.selectors, area
	            )) {
	                return true;
	            }
	        }
	    }
	
	    function getSelectorsByBrushType(seriesModel) {
	        var brushSelector = seriesModel.brushSelector;
	        if (zrUtil.isString(brushSelector)) {
	            var sels = [];
	            zrUtil.each(selector, function (selectorsByElementType, brushType) {
	                sels[brushType] = selectorsByElementType[brushSelector];
	            });
	            return sels;
	        }
	        else if (zrUtil.isFunction(brushSelector)) {
	            var bSelector = {};
	            zrUtil.each(selector, function (sel, brushType) {
	                bSelector[brushType] = brushSelector;
	            });
	            return bSelector;
	        }
	        return brushSelector;
	    }
	
	    function brushModelNotControll(brushModel, seriesIndex) {
	        var seriesIndices = brushModel.option.seriesIndex;
	        return seriesIndices != null
	            && seriesIndices !== 'all'
	            && (
	                zrUtil.isArray(seriesIndices)
	                ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0
	                : seriesIndex !== seriesIndices
	            );
	    }
	
	    function bindSelector(area) {
	        var selectors = area.selectors = {};
	        zrUtil.each(selector[area.brushType], function (selFn, elType) {
	            // Do not use function binding or curry for performance.
	            selectors[elType] = function (itemLayout) {
	                return selFn(itemLayout, selectors, area);
	            };
	        });
	        return area;
	    }
	
	    var boundingRectBuilders = {
	
	        lineX: zrUtil.noop,
	
	        lineY: zrUtil.noop,
	
	        rect: function (area) {
	            return getBoundingRectFromMinMax(area.range);
	        },
	
	        polygon: function (area) {
	            var minMax;
	            var range = area.range;
	
	            for (var i = 0, len = range.length; i < len; i++) {
	                minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];
	                var rg = range[i];
	                rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);
	                rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);
	                rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);
	                rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);
	            }
	
	            return minMax && getBoundingRectFromMinMax(minMax);
	        }
	    };
	
	    function getBoundingRectFromMinMax(minMax) {
	        return new BoundingRect(
	            minMax[0][0],
	            minMax[1][0],
	            minMax[0][1] - minMax[0][0],
	            minMax[1][1] - minMax[1][0]
	        );
	    }
	


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual solution, for consistent option specification.
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var VisualMapping = __webpack_require__(216);
	    var each = zrUtil.each;
	
	    function hasKeys(obj) {
	        if (obj) {
	            for (var name in obj){
	                if (obj.hasOwnProperty(name)) {
	                    return true;
	                }
	            }
	        }
	    }
	
	    var visualSolution = {
	
	        /**
	         * @param {Object} option
	         * @param {Array.<string>} stateList
	         * @param {Function} [supplementVisualOption]
	         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>
	         */
	        createVisualMappings: function (option, stateList, supplementVisualOption) {
	            var visualMappings = {};
	
	            each(stateList, function (state) {
	                var mappings = visualMappings[state] = createMappings();
	
	                each(option[state], function (visualData, visualType) {
	                    if (!VisualMapping.isValidType(visualType)) {
	                        return;
	                    }
	                    var mappingOption = {
	                        type: visualType,
	                        visual: visualData
	                    };
	                    supplementVisualOption && supplementVisualOption(mappingOption, state);
	                    mappings[visualType] = new VisualMapping(mappingOption);
	
	                    // Prepare a alpha for opacity, for some case that opacity
	                    // is not supported, such as rendering using gradient color.
	                    if (visualType === 'opacity') {
	                        mappingOption = zrUtil.clone(mappingOption);
	                        mappingOption.type = 'colorAlpha';
	                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);
	                    }
	                });
	            });
	
	            return visualMappings;
	
	            function createMappings() {
	                var Creater = function () {};
	                // Make sure hidden fields will not be visited by
	                // object iteration (with hasOwnProperty checking).
	                Creater.prototype.__hidden = Creater.prototype;
	                var obj = new Creater();
	                return obj;
	            }
	        },
	
	        /**
	         * @param {Object} thisOption
	         * @param {Object} newOption
	         * @param {Array.<string>} keys
	         */
	        replaceVisualOption: function (thisOption, newOption, keys) {
	            // Visual attributes merge is not supported, otherwise it
	            // brings overcomplicated merge logic. See #2853. So if
	            // newOption has anyone of these keys, all of these keys
	            // will be reset. Otherwise, all keys remain.
	            var has;
	            zrUtil.each(keys, function (key) {
	                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                    has = true;
	                }
	            });
	            has && zrUtil.each(keys, function (key) {
	                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                    thisOption[key] = zrUtil.clone(newOption[key]);
	                }
	                else {
	                    delete thisOption[key];
	                }
	            });
	        },
	
	        /**
	         * @param {Array.<string>} stateList
	         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	         * @param {module:echarts/data/List} list
	         * @param {Function} getValueState param: valueOrIndex, return: state.
	         * @param {object} [scope] Scope for getValueState
	         * @param {string} [dimension] Concrete dimension, if used.
	         */
	        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {
	            var visualTypesMap = {};
	            zrUtil.each(stateList, function (state) {
	                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	                visualTypesMap[state] = visualTypes;
	            });
	
	            var dataIndex;
	
	            function getVisual(key) {
	                return data.getItemVisual(dataIndex, key);
	            }
	
	            function setVisual(key, value) {
	                data.setItemVisual(dataIndex, key, value);
	            }
	
	            if (dimension == null) {
	                data.each(eachItem, true);
	            }
	            else {
	                data.each([dimension], eachItem, true);
	            }
	
	            function eachItem(valueOrIndex, index) {
	                dataIndex = dimension == null ? valueOrIndex : index;
	
	                var rawDataItem = data.getRawDataItem(dataIndex);
	                // Consider performance
	                if (rawDataItem && rawDataItem.visualMap === false) {
	                    return;
	                }
	
	                var valueState = getValueState.call(scope, valueOrIndex);
	                var mappings = visualMappings[valueState];
	                var visualTypes = visualTypesMap[valueState];
	
	                for (var i = 0, len = visualTypes.length; i < len; i++) {
	                    var type = visualTypes[i];
	                    mappings[type] && mappings[type].applyVisual(
	                        valueOrIndex, getVisual, setVisual
	                    );
	                }
	            }
	        }
	    };
	
	    module.exports = visualSolution;
	


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var polygonContain = __webpack_require__(191).contain;
	    var BoundingRect = __webpack_require__(30);
	
	    // Key of the first level is brushType: `line`, `rect`, `polygon`.
	    // Key of the second level is chart element type: `point`, `rect`.
	    // See moudule:echarts/component/helper/BrushController
	    // function param:
	    //      {Object} itemLayout fetch from data.getItemLayout(dataIndex)
	    //      {Object} selectors {point: selector, rect: selector, ...}
	    //      {Object} area {range: [[], [], ..], boudingRect}
	    // function return:
	    //      {boolean} Whether in the given brush.
	    var selector = {
	        lineX: getLineSelectors(0),
	        lineY: getLineSelectors(1),
	        rect: {
	            point: function (itemLayout, selectors, area) {
	                return area.boundingRect.contain(itemLayout[0], itemLayout[1]);
	            },
	            rect: function (itemLayout, selectors, area) {
	                return area.boundingRect.intersect(itemLayout);
	            }
	        },
	        polygon: {
	            point: function (itemLayout, selectors, area) {
	                return area.boundingRect.contain(itemLayout[0], itemLayout[1])
	                    && polygonContain(area.range, itemLayout[0], itemLayout[1]);
	            },
	            rect: function (itemLayout, selectors, area) {
	                // FIXME
	                // 随意写的，没有考察过效率。
	                var points = area.range;
	
	                if (points.length <= 1) {
	                    return false;
	                }
	
	                var x = itemLayout.x;
	                var y = itemLayout.y;
	                var width = itemLayout.width;
	                var height = itemLayout.height;
	                var p = points[0];
	
	                if (polygonContain(points, x, y)
	                    || polygonContain(points, x + width, y)
	                    || polygonContain(points, x, y + height)
	                    || polygonContain(points, x + width, y + height)
	                    || BoundingRect.create(itemLayout).contain(p[0], p[1])
	                    || lineIntersectPolygon(x, y, x + width, y, points)
	                    || lineIntersectPolygon(x, y, x, y + height, points)
	                    || lineIntersectPolygon(x + width, y, x + width, y + height, points)
	                    || lineIntersectPolygon(x, y + height, x + width, y + height, points)
	                ) {
	                    return true;
	                }
	            }
	        }
	    };
	
	    function getLineSelectors(xyIndex) {
	        var xy = ['x', 'y'];
	        var wh = ['width', 'height'];
	
	        return {
	            point: function (itemLayout, selectors, area) {
	                var range = area.range;
	                var p = itemLayout[xyIndex];
	                return inLineRange(p, range);
	            },
	            rect: function (itemLayout, selectors, area) {
	                var range = area.range;
	                return inLineRange(itemLayout[xy[xyIndex]], range)
	                    || inLineRange(itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]], range);
	            }
	        };
	    }
	
	    function inLineRange(p, range) {
	        return range[0] <= p && p <= range[1];
	    }
	
	    // FIXME
	    // 随意写的，没考察过效率。
	    function lineIntersectPolygon(lx, ly, l2x, l2y, points) {
	        for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
	            var p = points[i];
	            if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {
	                return true;
	            }
	            p2 = p;
	        }
	    }
	
	    // Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.
	    // See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>
	    function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
	        var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);
	        if (nearZero(delta)) { // parallel
	            return false;
	        }
	        var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;
	        if (namenda < 0 || namenda > 1) {
	            return false;
	        }
	        var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;
	        if (miu < 0 || miu > 1) {
	            return false;
	        }
	        return true;
	    }
	
	    function nearZero(val) {
	        return val <= (1e-6) && val >= -(1e-6);
	    }
	
	    function determinant(v1, v2, v3, v4) {
	        return v1 * v4 - v2 * v3;
	    }
	
	    module.exports = selector;
	


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	
	    var each = zrUtil.each;
	
	    var helper = {};
	
	    var COMPONENT_NAMES = ['geo', 'xAxis', 'yAxis'];
	    var PANEL_ID_SPLIT = '--';
	    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];
	
	    helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {
	        each(areas, function (area, index) {
	            var panelId = area.panelId;
	
	            if (panelId) {
	                panelId = panelId.split(PANEL_ID_SPLIT);
	
	                area[panelId[0] + 'Index'] = +panelId[1];
	
	                var coordInfo = findCoordInfo(area, coordInfoList);
	                area.coordRange = coordConvert[area.brushType](
	                    1, coordInfo, area.range
	                );
	                rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);
	            }
	        });
	    };
	
	    helper.parseInputRanges = function (brushModel, ecModel) {
	        each(brushModel.areas, function (area) {
	            var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	
	            if (__DEV__) {
	                zrUtil.assert(
	                    !coordInfo || coordInfo === true || area.coordRange,
	                    'coordRange must be specified when coord index specified.'
	                );
	                zrUtil.assert(
	                    !coordInfo || coordInfo !== true || area.range,
	                    'range must be specified.'
	                );
	            }
	
	            area.range = area.range || [];
	
	            // convert coordRange to global range and set panelId.
	            if (coordInfo && coordInfo !== true) {
	                area.range = coordConvert[area.brushType](
	                    0, coordInfo, area.coordRange
	                );
	                area.panelId = coordInfo.panelId;
	            }
	        });
	    };
	
	    helper.makePanelOpts = function (coordInfoList) {
	        var panelOpts = [];
	
	        each(coordInfoList, function (coordInfo) {
	            var coordSys = coordInfo.coordSys;
	            var rect;
	
	            if (coordInfo.geoIndex >= 0) {
	                rect = coordSys.getBoundingRect().clone();
	                // geo roam and zoom transform
	                rect.applyTransform(graphic.getTransform(coordSys));
	            }
	            else { // xAxis or yAxis
	                // grid is not Transformable.
	                rect = coordSys.grid.getRect().clone();
	            }
	
	            panelOpts.push({panelId: coordInfo.panelId, rect: rect});
	        });
	
	        return panelOpts;
	    };
	
	    /**
	     * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Array.<Obejct>} coordInfoList
	     */
	    helper.makeCoordInfoList = function (option, ecModel) {
	        var coordInfoList = [];
	
	        each(COMPONENT_NAMES, function (componentName) {
	            var componentIndices = option[componentName + 'Index'];
	            if (componentIndices == null || componentIndices === 'none') {
	                return;
	            }
	            if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {
	                componentIndices = [componentIndices];
	            }
	
	            ecModel.eachComponent({mainType: componentName}, function (componentModel, index) {
	                if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {
	                    return;
	                }
	
	                var grid;
	                var coordSys;
	
	                (componentName === 'xAxis' || componentName === 'yAxis')
	                    ? (grid = componentModel.axis.grid)
	                    : (coordSys = componentModel.coordinateSystem); // geo
	
	                var coordInfo;
	
	                // Check duplicate and find cartesian when tranval to yAxis.
	                for (var i = 0, len = coordInfoList.length; i < len; i++) {
	                    var cInfo = coordInfoList[i];
	                    if (__DEV__) {
	                        zrUtil.assert(
	                            cInfo[componentName + 'Index'] != index,
	                            'Coord should not be defined duplicately: ' + componentName + index
	                        );
	                    }
	                    // CoordSys is always required for `rect brush` or `polygon brush`.
	                    // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.
	                    if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {
	                        var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);
	                        if (aCoordSys) { // The yAxis and xAxis are in the same cartesian.
	                            coordSys = aCoordSys;
	                            coordInfo = cInfo;
	                            break;
	                        }
	                    }
	                }
	
	                !coordInfo && coordInfoList.push(coordInfo = {});
	
	                coordInfo[componentName] = componentModel;
	                coordInfo[componentName + 'Index'] = index;
	                // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,
	                // which is enough to index panel.
	                coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;
	                coordInfo.coordSys = coordSys
	                    // If only xAxisIndex or only yAxisIndex specified, find its first cartesian.
	                    || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);
	
	                coordInfo.coordSys
	                    ? (coordInfoList[componentName + 'Has'] = true)
	                    : coordInfoList.pop(); // If a coordInfo exists originally, existance of coordSys is ensured.
	            });
	        });
	
	        return coordInfoList;
	    };
	
	    helper.controlSeries = function (area, brushModel, seriesModel) {
	        // Check whether area is bound in coord, and series do not belong to that coord.
	        // If do not do this check, some brush (like lineX) will controll all axes.
	        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	        return coordInfo === true || (coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem);
	    };
	
	    function formatMinMax(minMax) {
	        minMax[0] > minMax[1] && minMax.reverse();
	        return minMax;
	    }
	
	    /**
	     * If return Object, a coord found.
	     * If reutrn true, global found.
	     * Otherwise nothing found.
	     *
	     * @param {Object} area {<componentName>Index}
	     * @param {Array} coordInfoList
	     * @return {Obejct|boolean}
	     */
	    function findCoordInfo(area, coordInfoList) {
	        var isGlobal = true;
	        for (var j = 0; j < COMPONENT_NAMES.length; j++) {
	            var indexAttr = COMPONENT_NAMES[j] + 'Index';
	            if (area[indexAttr] >= 0) {
	                isGlobal = false;
	                for (var i = 0; i < coordInfoList.length; i++) {
	                    if (coordInfoList[i][indexAttr] === area[indexAttr]) {
	                        return coordInfoList[i];
	                    }
	                }
	            }
	        }
	        return isGlobal;
	    }
	
	    function axisConvert(axisName, to, coordInfo, coordRange) {
	        var axis = coordInfo.coordSys.getAxis(axisName);
	
	        if (__DEV__) {
	            zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');
	        }
	
	        return formatMinMax(zrUtil.map([0, 1], function (i) {
	            return to
	                ? axis.coordToData(axis.toLocalCoord(coordRange[i]))
	                : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));
	        }));
	    }
	
	    var coordConvert = {
	
	        lineX: zrUtil.curry(axisConvert, 'x'),
	
	        lineY: zrUtil.curry(axisConvert, 'y'),
	
	        rect: function (to, coordInfo, coordRange) {
	            var coordSys = coordInfo.coordSys;
	            var xminymin = coordSys[COORD_CONVERTS[to]]([coordRange[0][0], coordRange[1][0]]);
	            var xmaxymax = coordSys[COORD_CONVERTS[to]]([coordRange[0][1], coordRange[1][1]]);
	            return [
	                formatMinMax([xminymin[0], xmaxymax[0]]),
	                formatMinMax([xminymin[1], xmaxymax[1]])
	            ];
	        },
	
	        polygon: function (to, coordInfo, coordRange) {
	            var coordSys = coordInfo.coordSys;
	            return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);
	        }
	    };
	
	    module.exports = helper;
	


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush model
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	    var visualSolution = __webpack_require__(341);
	    var Model = __webpack_require__(33);
	
	    var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];
	
	    var BrushModel = echarts.extendComponentModel({
	
	        type: 'brush',
	
	        dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            // inBrush: null,
	            // outOfBrush: null,
	            toolbox: null,          // Default value see preprocessor.
	            brushLink: null,        // Series indices array, broadcast using dataIndex.
	                                    // or 'all', which means all series. 'none' or null means no series.
	            seriesIndex: 'all',     // seriesIndex array, specify series controlled by this brush component.
	            geoIndex: null,         //
	            xAxisIndex: null,
	            yAxisIndex: null,
	
	            brushType: 'rect',      // Default brushType, see BrushController.
	            brushMode: 'single',    // Default brushMode, 'single' or 'multiple'
	            transformable: true,    // Default transformable.
	            brushStyle: {           // Default brushStyle
	                borderWidth: 1,
	                color: 'rgba(120,140,180,0.3)',
	                borderColor: 'rgba(120,140,180,0.8)',
	                width: null         // do not use bursh width in line brush, but fetch from grid.
	            },
	
	            throttleType: 'fixRate',// Throttle in brushSelected event. 'fixRate' or 'debounce'.
	                                    // If null, no throttle. Valid only in the first brush component
	            throttleDelay: 0,       // Unit: ms, 0 means every event will be triggered.
	
	            // FIXME
	            // 试验效果
	            removeOnClick: true
	        },
	
	        /**
	         * @readOnly
	         * @type {Array.<Object>}
	         */
	        areas: [],
	
	        /**
	         * Current activated brush type.
	         * If null, brush is inactived.
	         * see module:echarts/component/helper/BrushController
	         * @readOnly
	         * @type {string}
	         */
	        brushType: null,
	
	        /**
	         * Current brush opt.
	         * see module:echarts/component/helper/BrushController
	         * @readOnly
	         * @type {Object}
	         */
	        brushOption: {},
	
	        /**
	         * @readOnly
	         * @type {Array.<Object>}
	         */
	        coordInfoList: [],
	
	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;
	
	            !isInit && visualSolution.replaceVisualOption(
	                thisOption, newOption, ['inBrush', 'outOfBrush']
	            );
	
	            thisOption.inBrush = thisOption.inBrush || {};
	            // Always give default visual, consider setOption at the second time.
	            thisOption.outOfBrush = thisOption.outOfBrush || {color: DEFAULT_OUT_OF_BRUSH_COLOR};
	        },
	
	        /**
	         * If ranges is null/undefined, range state remain.
	         *
	         * @param {Array.<Object>} [ranges]
	         */
	        setAreas: function (areas) {
	            if (__DEV__) {
	                zrUtil.assert(zrUtil.isArray(areas));
	                zrUtil.each(areas, function (area) {
	                    zrUtil.assert(area.brushType, 'Illegal areas');
	                });
	            }
	
	            // If ranges is null/undefined, range state remain.
	            // This helps user to dispatchAction({type: 'brush'}) with no areas
	            // set but just want to get the current brush select info from a `brush` event.
	            if (!areas) {
	                return;
	            }
	
	            this.areas = zrUtil.map(areas, function (area) {
	                return this._mergeBrushOption(area);
	            }, this);
	        },
	
	        /**
	         * see module:echarts/component/helper/BrushController
	         * @param {Object} brushOption
	         */
	        setBrushOption: function (brushOption) {
	            this.brushOption = this._mergeBrushOption(brushOption);
	            this.brushType = this.brushOption.brushType;
	        },
	
	        /**
	         * @private
	         */
	        _mergeBrushOption: function (brushOption) {
	            var option = this.option;
	            return zrUtil.merge(
	                {
	                    brushType: option.brushType,
	                    brushMode: option.brushMode,
	                    transformable: option.transformable,
	                    brushStyle: new Model(option.brushStyle).getItemStyle(),
	                    removeOnClick: option.removeOnClick
	                },
	                brushOption,
	                true
	            );
	        }
	
	    });
	
	    module.exports = BrushModel;
	


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var BrushController = __webpack_require__(257);
	    var echarts = __webpack_require__(22);
	    var brushHelper = __webpack_require__(343);
	
	    module.exports = echarts.extendComponentView({
	
	        type: 'brush',
	
	        init: function (ecModel, api) {
	
	            /**
	             * @readOnly
	             * @type {module:echarts/model/Global}
	             */
	            this.ecModel = ecModel;
	
	            /**
	             * @readOnly
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this.api = api;
	
	            /**
	             * @readOnly
	             * @type {module:echarts/component/brush/BrushModel}
	             */
	            this.model;
	
	            /**
	             * @private
	             * @type {module:echarts/component/helper/BrushController}
	             */
	            (this._brushController = new BrushController(api.getZr()))
	                .on('brush', zrUtil.bind(this._onBrush, this))
	                .mount();
	        },
	
	        /**
	         * @override
	         */
	        render: function (brushModel) {
	            this.model = brushModel;
	            return updateController.apply(this, arguments);
	        },
	
	        /**
	         * @override
	         */
	        updateView: updateController,
	
	        /**
	         * @override
	         */
	        updateLayout: updateController,
	
	        /**
	         * @override
	         */
	        updateVisual: updateController,
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            this._brushController.dispose();
	        },
	
	        /**
	         * @private
	         */
	        _onBrush: function (areas, opt) {
	            var modelId = this.model.id;
	
	            brushHelper.parseOutputRanges(areas, this.model.coordInfoList, this.ecModel);
	
	            // Action is not dispatched on drag end, because the drag end
	            // emits the same params with the last drag move event, and
	            // may have some delay when using touch pad, which makes
	            // animation not smooth (when using debounce).
	            (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({
	                type: 'brush',
	                brushId: modelId,
	                areas: zrUtil.clone(areas),
	                $from: modelId
	            });
	        }
	
	    });
	
	    function updateController(brushModel, ecModel, api, payload) {
	        // Do not update controller when drawing.
	        (!payload || payload.$from !== brushModel.id) && this._brushController
	            .setPanels(brushHelper.makePanelOpts(brushModel.coordInfoList))
	            .enableBrush(brushModel.brushOption)
	            .updateCovers(brushModel.areas.slice());
	    }
	


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush action
	 */
	
	
	    var echarts = __webpack_require__(22);
	
	    /**
	     * payload: {
	     *      brushIndex: number, or,
	     *      brushId: string, or,
	     *      brushName: string,
	     *      globalRanges: Array
	     * }
	     */
	    echarts.registerAction(
	         {type: 'brush', event: 'brush', update: 'updateView'},
	        function (payload, ecModel) {
	            ecModel.eachComponent({mainType: 'brush', query: payload}, function (brushModel) {
	                brushModel.setAreas(payload.areas);
	            });
	        }
	    );
	
	    /**
	     * payload: {
	     *      brushComponents: [
	     *          {
	     *              brushId,
	     *              brushIndex,
	     *              brushName,
	     *              series: [
	     *                  {
	     *                      seriesId,
	     *                      seriesIndex,
	     *                      seriesName,
	     *                      rawIndices: [21, 34, ...]
	     *                  },
	     *                  ...
	     *              ]
	     *          },
	     *          ...
	     *      ]
	     * }
	     */
	    echarts.registerAction(
	         {type: 'brushSelect', event: 'brushSelected', update: 'none'},
	        function () {}
	    );


/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var featureManager = __webpack_require__(348);
	    var zrUtil = __webpack_require__(25);
	
	    function Brush(model, ecModel, api) {
	        this.model = model;
	        this.ecModel = ecModel;
	        this.api = api;
	
	        /**
	         * @private
	         * @type {string}
	         */
	        this._brushType;
	
	        /**
	         * @private
	         * @type {string}
	         */
	        this._brushMode;
	    }
	
	    Brush.defaultOption = {
	        show: true,
	        type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
	        icon: {
	            rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13', // jshint ignore:line
	            polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2', // jshint ignore:line
	            lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4', // jshint ignore:line
	            lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4', // jshint ignore:line
	            keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z', // jshint ignore:line
	            clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line
	        },
	        title: {
	            rect: '矩形选择',
	            polygon: '圈选',
	            lineX: '横向选择',
	            lineY: '纵向选择',
	            keep: '保持选择',
	            clear: '清除选择'
	        }
	    };
	
	    var proto = Brush.prototype;
	
	    proto.render =
	    proto.updateView =
	    proto.updateLayout = function (featureModel, ecModel, api) {
	        var brushType;
	        var brushMode;
	        var isBrushed;
	
	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {
	            brushType = brushModel.brushType;
	            brushMode = brushModel.brushOption.brushMode || 'single';
	            isBrushed |= brushModel.areas.length;
	        });
	        this._brushType = brushType;
	        this._brushMode = brushMode;
	
	        zrUtil.each(featureModel.get('type', true), function (type) {
	            featureModel.setIconStatus(
	                type,
	                (
	                    type === 'keep'
	                    ? brushMode === 'multiple'
	                    : type === 'clear'
	                    ? isBrushed
	                    : type === brushType
	                ) ? 'emphasis' : 'normal'
	            );
	        });
	    };
	
	    proto.getIcons = function () {
	        var model = this.model;
	        var availableIcons = model.get('icon', true);
	        var icons = {};
	        zrUtil.each(model.get('type', true), function (type) {
	            if (availableIcons[type]) {
	                icons[type] = availableIcons[type];
	            }
	        });
	        return icons;
	    };
	
	    proto.onclick = function (ecModel, api, type) {
	        var api = this.api;
	        var brushType = this._brushType;
	        var brushMode = this._brushMode;
	
	        if (type === 'clear') {
	            api.dispatchAction({
	                type: 'brush',
	                // Clear all areas of all brush components.
	                areas: []
	            });
	        }
	        else {
	            api.dispatchAction({
	                type: 'takeGlobalCursor',
	                key: 'brush',
	                brushOption: {
	                    brushType: type === 'keep'
	                        ? brushType
	                        : (brushType === type ? false : type),
	                    brushMode: type === 'keep'
	                        ? (brushMode === 'multiple' ? 'single' : 'multiple')
	                        : brushMode
	                }
	            });
	        }
	    };
	
	    featureManager.register('brush', Brush);
	
	    module.exports = Brush;


/***/ },
/* 348 */
/***/ function(module, exports) {

	'use strict';
	
	
	    var features = {};
	
	    module.exports = {
	        register: function (name, ctor) {
	            features[name] = ctor;
	        },
	
	        get: function (name) {
	            return features[name];
	        }
	    };


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var echarts = __webpack_require__(22);
	    var graphic = __webpack_require__(64);
	    var layout = __webpack_require__(42);
	
	    // Model
	    echarts.extendComponentModel({
	
	        type: 'title',
	
	        layoutMode: {type: 'box', ignoreSize: true},
	
	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 6,
	            show: true,
	
	            text: '',
	            // 超链接跳转
	            // link: null,
	            // 仅支持self | blank
	            target: 'blank',
	            subtext: '',
	
	            // 超链接跳转
	            // sublink: null,
	            // 仅支持self | blank
	            subtarget: 'blank',
	
	            // 'center' ¦ 'left' ¦ 'right'
	            // ¦ {number}（x坐标，单位px）
	            left: 0,
	            // 'top' ¦ 'bottom' ¦ 'center'
	            // ¦ {number}（y坐标，单位px）
	            top: 0,
	
	            // 水平对齐
	            // 'auto' | 'left' | 'right' | 'center'
	            // 默认根据 left 的位置判断是左对齐还是右对齐
	            // textAlign: null
	            //
	            // 垂直对齐
	            // 'auto' | 'top' | 'bottom' | 'middle'
	            // 默认根据 top 位置判断是上对齐还是下对齐
	            // textBaseline: null
	
	            backgroundColor: 'rgba(0,0,0,0)',
	
	            // 标题边框颜色
	            borderColor: '#ccc',
	
	            // 标题边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,
	
	            // 标题内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,
	
	            // 主副标题纵向间隔，单位px，默认为10，
	            itemGap: 10,
	            textStyle: {
	                fontSize: 18,
	                fontWeight: 'bolder',
	                color: '#333'
	            },
	            subtextStyle: {
	                color: '#aaa'
	            }
	        }
	    });
	
	    // View
	    echarts.extendComponentView({
	
	        type: 'title',
	
	        render: function (titleModel, ecModel, api) {
	            this.group.removeAll();
	
	            if (!titleModel.get('show')) {
	                return;
	            }
	
	            var group = this.group;
	
	            var textStyleModel = titleModel.getModel('textStyle');
	            var subtextStyleModel = titleModel.getModel('subtextStyle');
	
	            var textAlign = titleModel.get('textAlign');
	            var textBaseline = titleModel.get('textBaseline');
	
	            var textEl = new graphic.Text({
	                style: {
	                    text: titleModel.get('text'),
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                },
	                z2: 10
	            });
	
	            var textRect = textEl.getBoundingRect();
	
	            var subText = titleModel.get('subtext');
	            var subTextEl = new graphic.Text({
	                style: {
	                    text: subText,
	                    textFont: subtextStyleModel.getFont(),
	                    fill: subtextStyleModel.getTextColor(),
	                    y: textRect.height + titleModel.get('itemGap'),
	                    textBaseline: 'top'
	                },
	                z2: 10
	            });
	
	            var link = titleModel.get('link');
	            var sublink = titleModel.get('sublink');
	
	            textEl.silent = !link;
	            subTextEl.silent = !sublink;
	
	            if (link) {
	                textEl.on('click', function () {
	                    window.open(link, '_' + titleModel.get('target'));
	                });
	            }
	            if (sublink) {
	                subTextEl.on('click', function () {
	                    window.open(sublink, '_' + titleModel.get('subtarget'));
	                });
	            }
	
	            group.add(textEl);
	            subText && group.add(subTextEl);
	            // If no subText, but add subTextEl, there will be an empty line.
	
	            var groupRect = group.getBoundingRect();
	            var layoutOption = titleModel.getBoxLayoutParams();
	            layoutOption.width = groupRect.width;
	            layoutOption.height = groupRect.height;
	            var layoutRect = layout.getLayoutRect(
	                layoutOption, {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }, titleModel.get('padding')
	            );
	            // Adjust text align based on position
	            if (!textAlign) {
	                // Align left if title is on the left. center and right is same
	                textAlign = titleModel.get('left') || titleModel.get('right');
	                if (textAlign === 'middle') {
	                    textAlign = 'center';
	                }
	                // Adjust layout by text align
	                if (textAlign === 'right') {
	                    layoutRect.x += layoutRect.width;
	                }
	                else if (textAlign === 'center') {
	                    layoutRect.x += layoutRect.width / 2;
	                }
	            }
	            if (!textBaseline) {
	                textBaseline = titleModel.get('top') || titleModel.get('bottom');
	                if (textBaseline === 'center') {
	                    textBaseline = 'middle';
	                }
	                if (textBaseline === 'bottom') {
	                    layoutRect.y += layoutRect.height;
	                }
	                else if (textBaseline === 'middle') {
	                    layoutRect.y += layoutRect.height / 2;
	                }
	
	                textBaseline = textBaseline || 'top';
	            }
	
	            group.attr('position', [layoutRect.x, layoutRect.y]);
	            var alignStyle = {
	                textAlign: textAlign,
	                textVerticalAlign: textBaseline
	            };
	            textEl.setStyle(alignStyle);
	            subTextEl.setStyle(alignStyle);
	
	            // Render background
	            // Get groupRect again because textAlign has been changed
	            groupRect = group.getBoundingRect();
	            var padding = layoutRect.margin;
	            var style = titleModel.getItemStyle(['color', 'opacity']);
	            style.fill = titleModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                shape: {
	                    x: groupRect.x - padding[3],
	                    y: groupRect.y - padding[0],
	                    width: groupRect.width + padding[1] + padding[3],
	                    height: groupRect.height + padding[0] + padding[2]
	                },
	                style: style,
	                silent: true
	            });
	            graphic.subPixelOptimizeRect(rect);
	
	            group.add(rect);
	        }
	    });


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */
	
	
	    __webpack_require__(351);
	
	    __webpack_require__(352);
	    __webpack_require__(355);
	
	    __webpack_require__(356);
	    __webpack_require__(357);
	
	    __webpack_require__(359);
	    __webpack_require__(360);
	
	    __webpack_require__(362);
	    __webpack_require__(363);
	


/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(40).registerSubTypeDefaulter('dataZoom', function (option) {
	        // Default 'slider' when no type specified.
	        return 'slider';
	    });
	


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var env = __webpack_require__(23);
	    var echarts = __webpack_require__(22);
	    var modelUtil = __webpack_require__(26);
	    var helper = __webpack_require__(353);
	    var AxisProxy = __webpack_require__(354);
	    var each = zrUtil.each;
	    var eachAxisDim = helper.eachAxisDim;
	
	    var DataZoomModel = echarts.extendComponentModel({
	
	        type: 'dataZoom',
	
	        dependencies: [
	            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'
	        ],
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            zlevel: 0,
	            z: 4,                   // Higher than normal component (z: 2).
	            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	            xAxisIndex: null,       // Default the first horizontal category axis.
	            yAxisIndex: null,       // Default the first vertical category axis.
	
	            filterMode: 'filter',   // Possible values: 'filter' or 'empty'.
	                                    // 'filter': data items which are out of window will be removed.
	                                    //           This option is applicable when filtering outliers.
	                                    // 'empty': data items which are out of window will be set to empty.
	                                    //          This option is applicable when user should not neglect
	                                    //          that there are some data items out of window.
	                                    // Taking line chart as an example, line will be broken in
	                                    // the filtered points when filterModel is set to 'empty', but
	                                    // be connected when set to 'filter'.
	
	            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.
	                                    // default 100. Do not throttle when use null/undefined.
	                                    // If animation === true and animationDurationUpdate > 0,
	                                    // default value is 100, otherwise 20.
	            start: 0,               // Start percent. 0 ~ 100
	            end: 100,               // End percent. 0 ~ 100
	            startValue: null,       // Start value. If startValue specified, start is ignored.
	            endValue: null          // End value. If endValue specified, end is ignored.
	        },
	
	        /**
	         * @override
	         */
	        init: function (option, parentModel, ecModel) {
	
	            /**
	             * key like x_0, y_1
	             * @private
	             * @type {Object}
	             */
	            this._dataIntervalByAxis = {};
	
	            /**
	             * @private
	             */
	            this._dataInfo = {};
	
	            /**
	             * key like x_0, y_1
	             * @private
	             */
	            this._axisProxies = {};
	
	            /**
	             * @readOnly
	             */
	            this.textStyleModel;
	
	            /**
	             * @private
	             */
	            this._autoThrottle = true;
	
	            var rawOption = retrieveRaw(option);
	
	            this.mergeDefaultAndTheme(option, ecModel);
	
	            this.doInit(rawOption);
	        },
	
	        /**
	         * @override
	         */
	        mergeOption: function (newOption) {
	            var rawOption = retrieveRaw(newOption);
	
	            //FIX #2591
	            zrUtil.merge(this.option, newOption, true);
	
	            this.doInit(rawOption);
	        },
	
	        /**
	         * @protected
	         */
	        doInit: function (rawOption) {
	            var thisOption = this.option;
	
	            // Disable realtime view update if canvas is not supported.
	            if (!env.canvasSupported) {
	                thisOption.realtime = false;
	            }
	
	            this._setDefaultThrottle(rawOption);
	
	            processRangeProp('start', 'startValue', rawOption, thisOption);
	            processRangeProp('end', 'endValue', rawOption, thisOption);
	
	            this.textStyleModel = this.getModel('textStyle');
	
	            this._resetTarget();
	
	            this._giveAxisProxies();
	        },
	
	        /**
	         * @private
	         */
	        _giveAxisProxies: function () {
	            var axisProxies = this._axisProxies;
	
	            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	                var axisModel = this.dependentModels[dimNames.axis][axisIndex];
	
	                // If exists, share axisProxy with other dataZoomModels.
	                var axisProxy = axisModel.__dzAxisProxy || (
	                    // Use the first dataZoomModel as the main model of axisProxy.
	                    axisModel.__dzAxisProxy = new AxisProxy(
	                        dimNames.name, axisIndex, this, ecModel
	                    )
	                );
	                // FIXME
	                // dispose __dzAxisProxy
	
	                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _resetTarget: function () {
	            var thisOption = this.option;
	
	            var autoMode = this._judgeAutoMode();
	
	            eachAxisDim(function (dimNames) {
	                var axisIndexName = dimNames.axisIndex;
	                thisOption[axisIndexName] = modelUtil.normalizeToArray(
	                    thisOption[axisIndexName]
	                );
	            }, this);
	
	            if (autoMode === 'axisIndex') {
	                this._autoSetAxisIndex();
	            }
	            else if (autoMode === 'orient') {
	                this._autoSetOrient();
	            }
	        },
	
	        /**
	         * @private
	         */
	        _judgeAutoMode: function () {
	            // Auto set only works for setOption at the first time.
	            // The following is user's reponsibility. So using merged
	            // option is OK.
	            var thisOption = this.option;
	
	            var hasIndexSpecified = false;
	            eachAxisDim(function (dimNames) {
	                // When user set axisIndex as a empty array, we think that user specify axisIndex
	                // but do not want use auto mode. Because empty array may be encountered when
	                // some error occured.
	                if (thisOption[dimNames.axisIndex] != null) {
	                    hasIndexSpecified = true;
	                }
	            }, this);
	
	            var orient = thisOption.orient;
	
	            if (orient == null && hasIndexSpecified) {
	                return 'orient';
	            }
	            else if (!hasIndexSpecified) {
	                if (orient == null) {
	                    thisOption.orient = 'horizontal';
	                }
	                return 'axisIndex';
	            }
	        },
	
	        /**
	         * @private
	         */
	        _autoSetAxisIndex: function () {
	            var autoAxisIndex = true;
	            var orient = this.get('orient', true);
	            var thisOption = this.option;
	            var dependentModels = this.dependentModels;
	
	            if (autoAxisIndex) {
	                // Find axis that parallel to dataZoom as default.
	                var dimName = orient === 'vertical' ? 'y' : 'x';
	
	                if (dependentModels[dimName + 'Axis'].length) {
	                    thisOption[dimName + 'AxisIndex'] = [0];
	                    autoAxisIndex = false;
	                }
	                else {
	                    each(dependentModels.singleAxis, function (singleAxisModel) {
	                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
	                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
	                            autoAxisIndex = false;
	                        }
	                    });
	                }
	            }
	
	            if (autoAxisIndex) {
	                // Find the first category axis as default. (consider polar)
	                eachAxisDim(function (dimNames) {
	                    if (!autoAxisIndex) {
	                        return;
	                    }
	                    var axisIndices = [];
	                    var axisModels = this.dependentModels[dimNames.axis];
	                    if (axisModels.length && !axisIndices.length) {
	                        for (var i = 0, len = axisModels.length; i < len; i++) {
	                            if (axisModels[i].get('type') === 'category') {
	                                axisIndices.push(i);
	                            }
	                        }
	                    }
	                    thisOption[dimNames.axisIndex] = axisIndices;
	                    if (axisIndices.length) {
	                        autoAxisIndex = false;
	                    }
	                }, this);
	            }
	
	            if (autoAxisIndex) {
	                // FIXME
	                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
	
	                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	                // dataZoom component auto adopts series that reference to
	                // both xAxis and yAxis which type is 'value'.
	                this.ecModel.eachSeries(function (seriesModel) {
	                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	                        eachAxisDim(function (dimNames) {
	                            var axisIndices = thisOption[dimNames.axisIndex];
	
	                            var axisIndex = seriesModel.get(dimNames.axisIndex);
	                            var axisId = seriesModel.get(dimNames.axisId);
	
	                            var axisModel = seriesModel.ecModel.queryComponents({
	                                mainType: dimNames.axis,
	                                index: axisIndex,
	                                id: axisId
	                            })[0];
	
	                            if (__DEV__) {
	                                if (!axisModel) {
	                                    throw new Error(
	                                        dimNames.axis + ' "' + zrUtil.retrieve(
	                                            axisIndex,
	                                            axisId,
	                                            0
	                                        ) + '" not found'
	                                    );
	                                }
	                            }
	                            axisIndex = axisModel.componentIndex;
	
	                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	                                axisIndices.push(axisIndex);
	                            }
	                        });
	                    }
	                }, this);
	            }
	        },
	
	        /**
	         * @private
	         */
	        _autoSetOrient: function () {
	            var dim;
	
	            // Find the first axis
	            this.eachTargetAxis(function (dimNames) {
	                !dim && (dim = dimNames.name);
	            }, this);
	
	            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	        },
	
	        /**
	         * @private
	         */
	        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
	            // FIXME
	            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	            // 例如series.type === scatter时。
	
	            var is = true;
	            eachAxisDim(function (dimNames) {
	                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];
	
	                if (!axisModel || axisModel.get('type') !== axisType) {
	                    is = false;
	                }
	            }, this);
	            return is;
	        },
	
	        /**
	         * @private
	         */
	        _setDefaultThrottle: function (rawOption) {
	            // When first time user set throttle, auto throttle ends.
	            if (rawOption.hasOwnProperty('throttle')) {
	                this._autoThrottle = false;
	            }
	            if (this._autoThrottle) {
	                var globalOption = this.ecModel.option;
	                this.option.throttle =
	                    (globalOption.animation && globalOption.animationDurationUpdate > 0)
	                    ? 100 : 20;
	            }
	        },
	
	        /**
	         * @public
	         */
	        getFirstTargetAxisModel: function () {
	            var firstAxisModel;
	            eachAxisDim(function (dimNames) {
	                if (firstAxisModel == null) {
	                    var indices = this.get(dimNames.axisIndex);
	                    if (indices.length) {
	                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	                    }
	                }
	            }, this);
	
	            return firstAxisModel;
	        },
	
	        /**
	         * @public
	         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	         */
	        eachTargetAxis: function (callback, context) {
	            var ecModel = this.ecModel;
	            eachAxisDim(function (dimNames) {
	                each(
	                    this.get(dimNames.axisIndex),
	                    function (axisIndex) {
	                        callback.call(context, dimNames, axisIndex, this, ecModel);
	                    },
	                    this
	                );
	            }, this);
	        },
	
	        getAxisProxy: function (dimName, axisIndex) {
	            return this._axisProxies[dimName + '_' + axisIndex];
	        },
	
	        /**
	         * If not specified, set to undefined.
	         *
	         * @public
	         * @param {Object} opt
	         * @param {number} [opt.start]
	         * @param {number} [opt.end]
	         * @param {number} [opt.startValue]
	         * @param {number} [opt.endValue]
	         */
	        setRawRange: function (opt) {
	            each(['start', 'end', 'startValue', 'endValue'], function (name) {
	                // If any of those prop is null/undefined, we should alos set
	                // them, because only one pair between start/end and
	                // startValue/endValue can work.
	                this.option[name] = opt[name];
	            }, this);
	        },
	
	        /**
	         * @public
	         * @return {Array.<number>} [startPercent, endPercent]
	         */
	        getPercentRange: function () {
	            var axisProxy = this.findRepresentativeAxisProxy();
	            if (axisProxy) {
	                return axisProxy.getDataPercentWindow();
	            }
	        },
	
	        /**
	         * @public
	         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	         *
	         * @param {string} [axisDimName]
	         * @param {number} [axisIndex]
	         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
	         */
	        getValueRange: function (axisDimName, axisIndex) {
	            if (axisDimName == null && axisIndex == null) {
	                var axisProxy = this.findRepresentativeAxisProxy();
	                if (axisProxy) {
	                    return axisProxy.getDataValueWindow();
	                }
	            }
	            else {
	                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	            }
	        },
	
	        /**
	         * @public
	         * @return {module:echarts/component/dataZoom/AxisProxy}
	         */
	        findRepresentativeAxisProxy: function () {
	            // Find the first hosted axisProxy
	            var axisProxies = this._axisProxies;
	            for (var key in axisProxies) {
	                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	                    return axisProxies[key];
	                }
	            }
	
	            // If no hosted axis find not hosted axisProxy.
	            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	            // and the option.start or option.end settings are different. The percentRange
	            // should follow axisProxy.
	            // (We encounter this problem in toolbox data zoom.)
	            for (var key in axisProxies) {
	                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	                    return axisProxies[key];
	                }
	            }
	        }
	
	    });
	
	    function retrieveRaw(option) {
	        var ret = {};
	        each(
	            ['start', 'end', 'startValue', 'endValue', 'throttle'],
	            function (name) {
	                option.hasOwnProperty(name) && (ret[name] = option[name]);
	            }
	        );
	        return ret;
	    }
	
	    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
	        // start/end has higher priority over startValue/endValue,
	        // but we should make chart.setOption({endValue: 1000}) effective,
	        // rather than chart.setOption({endValue: 1000, end: null}).
	        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
	            thisOption[percentProp] = null;
	        }
	        // Otherwise do nothing and use the merge result.
	    }
	
	    module.exports = DataZoomModel;
	


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	
	    var formatUtil = __webpack_require__(27);
	    var zrUtil = __webpack_require__(25);
	
	    var helper = {};
	
	    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];
	    // Supported coords.
	    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];
	
	    /**
	     * @param {string} coordType
	     * @return {boolean}
	     */
	    helper.isCoordSupported = function (coordType) {
	        return zrUtil.indexOf(COORDS, coordType) >= 0;
	    };
	
	    /**
	     * Create "each" method to iterate names.
	     *
	     * @pubilc
	     * @param  {Array.<string>} names
	     * @param  {Array.<string>=} attrs
	     * @return {Function}
	     */
	    helper.createNameEach = function (names, attrs) {
	        names = names.slice();
	        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);
	        attrs = (attrs || []).slice();
	        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);
	
	        return function (callback, context) {
	            zrUtil.each(names, function (name, index) {
	                var nameObj = {name: name, capital: capitalNames[index]};
	
	                for (var j = 0; j < attrs.length; j++) {
	                    nameObj[attrs[j]] = name + capitalAttrs[j];
	                }
	
	                callback.call(context, nameObj);
	            });
	        };
	    };
	
	    /**
	     * Iterate each dimension name.
	     *
	     * @public
	     * @param {Function} callback The parameter is like:
	     *                            {
	     *                                name: 'angle',
	     *                                capital: 'Angle',
	     *                                axis: 'angleAxis',
	     *                                axisIndex: 'angleAixs',
	     *                                index: 'angleIndex'
	     *                            }
	     * @param {Object} context
	     */
	    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);
	
	    /**
	     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	     * dataZoomModels and 'links' make up one or more graphics.
	     * This function finds the graphic where the source dataZoomModel is in.
	     *
	     * @public
	     * @param {Function} forEachNode Node iterator.
	     * @param {Function} forEachEdgeType edgeType iterator
	     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	     */
	    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {
	
	        return function (sourceNode) {
	            var result = {
	                nodes: [],
	                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
	            };
	
	            forEachEdgeType(function (edgeType) {
	                result.records[edgeType.name] = {};
	            });
	
	            if (!sourceNode) {
	                return result;
	            }
	
	            absorb(sourceNode, result);
	
	            var existsLink;
	            do {
	                existsLink = false;
	                forEachNode(processSingleNode);
	            }
	            while (existsLink);
	
	            function processSingleNode(node) {
	                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                    absorb(node, result);
	                    existsLink = true;
	                }
	            }
	
	            return result;
	        };
	
	        function isNodeAbsorded(node, result) {
	            return zrUtil.indexOf(result.nodes, node) >= 0;
	        }
	
	        function isLinked(node, result) {
	            var hasLink = false;
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] && (hasLink = true);
	                });
	            });
	            return hasLink;
	        }
	
	        function absorb(node, result) {
	            result.nodes.push(node);
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] = true;
	                });
	            });
	        }
	    };
	
	    module.exports = helper;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Axis operator
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var helper = __webpack_require__(353);
	    var each = zrUtil.each;
	    var asc = numberUtil.asc;
	
	    /**
	     * Operate single axis.
	     * One axis can only operated by one axis operator.
	     * Different dataZoomModels may be defined to operate the same axis.
	     * (i.e. 'inside' data zoom and 'slider' data zoom components)
	     * So dataZoomModels share one axisProxy in that case.
	     *
	     * @class
	     */
	    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {
	
	        /**
	         * @private
	         * @type {string}
	         */
	        this._dimName = dimName;
	
	        /**
	         * @private
	         */
	        this._axisIndex = axisIndex;
	
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._valueWindow;
	
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._percentWindow;
	
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._dataExtent;
	
	        /**
	         * @readOnly
	         * @type {module: echarts/model/Global}
	         */
	        this.ecModel = ecModel;
	
	        /**
	         * @private
	         * @type {module: echarts/component/dataZoom/DataZoomModel}
	         */
	        this._dataZoomModel = dataZoomModel;
	    };
	
	    AxisProxy.prototype = {
	
	        constructor: AxisProxy,
	
	        /**
	         * Whether the axisProxy is hosted by dataZoomModel.
	         *
	         * @public
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         * @return {boolean}
	         */
	        hostedBy: function (dataZoomModel) {
	            return this._dataZoomModel === dataZoomModel;
	        },
	
	        /**
	         * @return {Array.<number>} Value can only be NaN or finite value.
	         */
	        getDataValueWindow: function () {
	            return this._valueWindow.slice();
	        },
	
	        /**
	         * @return {Array.<number>}
	         */
	        getDataPercentWindow: function () {
	            return this._percentWindow.slice();
	        },
	
	        /**
	         * @public
	         * @param {number} axisIndex
	         * @return {Array} seriesModels
	         */
	        getTargetSeriesModels: function () {
	            var seriesModels = [];
	            var ecModel = this.ecModel;
	
	            ecModel.eachSeries(function (seriesModel) {
	                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {
	                    var dimName = this._dimName;
	                    var axisModel = ecModel.queryComponents({
	                        mainType: dimName + 'Axis',
	                        index: seriesModel.get(dimName + 'AxisIndex'),
	                        id: seriesModel.get(dimName + 'AxisId')
	                    })[0];
	                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
	                        seriesModels.push(seriesModel);
	                    }
	                }
	            }, this);
	
	            return seriesModels;
	        },
	
	        getAxisModel: function () {
	            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	        },
	
	        getOtherAxisModel: function () {
	            var axisDim = this._dimName;
	            var ecModel = this.ecModel;
	            var axisModel = this.getAxisModel();
	            var isCartesian = axisDim === 'x' || axisDim === 'y';
	            var otherAxisDim;
	            var coordSysIndexName;
	            if (isCartesian) {
	                coordSysIndexName = 'gridIndex';
	                otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	            }
	            else {
	                coordSysIndexName = 'polarIndex';
	                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	            }
	            var foundOtherAxisModel;
	            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	                if ((otherAxisModel.get(coordSysIndexName) || 0)
	                    === (axisModel.get(coordSysIndexName) || 0)
	                ) {
	                    foundOtherAxisModel = otherAxisModel;
	                }
	            });
	            return foundOtherAxisModel;
	        },
	
	        /**
	         * Only calculate by given range and this._dataExtent, do not change anything.
	         *
	         * @param {Object} opt
	         * @param {number} [opt.start]
	         * @param {number} [opt.end]
	         * @param {number} [opt.startValue]
	         * @param {number} [opt.endValue]
	         */
	        calculateDataWindow: function (opt) {
	            var dataExtent = this._dataExtent;
	            var axisModel = this.getAxisModel();
	            var scale = axisModel.axis.scale;
	            var percentExtent = [0, 100];
	            var percentWindow = [
	                opt.start,
	                opt.end
	            ];
	            var valueWindow = [];
	
	            // In percent range is used and axis min/max/scale is set,
	            // window should be based on min/max/0, but should not be
	            // based on the extent of filtered data.
	            dataExtent = dataExtent.slice();
	            fixExtentByAxis(dataExtent, axisModel);
	
	            each(['startValue', 'endValue'], function (prop) {
	                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	            });
	
	            // Normalize bound.
	            each([0, 1], function (idx) {
	                var boundValue = valueWindow[idx];
	                var boundPercent = percentWindow[idx];
	
	                // start/end has higher priority over startValue/endValue,
	                // because start/end can be consistent among different type
	                // of axis but startValue/endValue not.
	
	                if (boundPercent != null || boundValue == null) {
	                    if (boundPercent == null) {
	                        boundPercent = percentExtent[idx];
	                    }
	                    // Use scale.parse to math round for category or time axis.
	                    boundValue = scale.parse(numberUtil.linearMap(
	                        boundPercent, percentExtent, dataExtent, true
	                    ));
	                }
	                else { // boundPercent == null && boundValue != null
	                    boundPercent = numberUtil.linearMap(
	                        boundValue, dataExtent, percentExtent, true
	                    );
	                }
	                // valueWindow[idx] = round(boundValue);
	                // percentWindow[idx] = round(boundPercent);
	                valueWindow[idx] = boundValue;
	                percentWindow[idx] = boundPercent;
	            });
	
	            return {
	                valueWindow: asc(valueWindow),
	                percentWindow: asc(percentWindow)
	            };
	        },
	
	        /**
	         * Notice: reset should not be called before series.restoreData() called,
	         * so it is recommanded to be called in "process stage" but not "model init
	         * stage".
	         *
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        reset: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	
	            // Culculate data window and data extent, and record them.
	            this._dataExtent = calculateDataExtent(
	                this._dimName, this.getTargetSeriesModels()
	            );
	            var dataWindow = this.calculateDataWindow(dataZoomModel.option);
	            this._valueWindow = dataWindow.valueWindow;
	            this._percentWindow = dataWindow.percentWindow;
	
	            // Update axis setting then.
	            setAxisModel(this);
	        },
	
	        /**
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        restore: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	
	            this._valueWindow = this._percentWindow = null;
	            setAxisModel(this, true);
	        },
	
	        /**
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        filterData: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }
	
	            var axisDim = this._dimName;
	            var seriesModels = this.getTargetSeriesModels();
	            var filterMode = dataZoomModel.get('filterMode');
	            var valueWindow = this._valueWindow;
	
	            // FIXME
	            // Toolbox may has dataZoom injected. And if there are stacked bar chart
	            // with NaN data, NaN will be filtered and stack will be wrong.
	            // So we need to force the mode to be set empty.
	            // In fect, it is not a big deal that do not support filterMode-'filter'
	            // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	            // selection" some day, which might need "adapt to data extent on the
	            // otherAxis", which is disabled by filterMode-'empty'.
	            var otherAxisModel = this.getOtherAxisModel();
	            if (dataZoomModel.get('$fromToolbox')
	                && otherAxisModel
	                && otherAxisModel.get('type') === 'category'
	            ) {
	                filterMode = 'empty';
	            }
	
	            // Process series data
	            each(seriesModels, function (seriesModel) {
	                var seriesData = seriesModel.getData();
	
	                seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    if (filterMode === 'empty') {
	                        seriesModel.setData(
	                            seriesData.map(dim, function (value) {
	                                return !isInWindow(value) ? NaN : value;
	                            })
	                        );
	                    }
	                    else {
	                        seriesData.filterSelf(dim, isInWindow);
	                    }
	                });
	            });
	
	            function isInWindow(value) {
	                return value >= valueWindow[0] && value <= valueWindow[1];
	            }
	        }
	    };
	
	    function calculateDataExtent(axisDim, seriesModels) {
	        var dataExtent = [Infinity, -Infinity];
	
	        each(seriesModels, function (seriesModel) {
	            var seriesData = seriesModel.getData();
	            if (seriesData) {
	                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    var seriesExtent = seriesData.getDataExtent(dim);
	                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	                });
	            }
	        }, this);
	
	        if (dataExtent[1] < dataExtent[0]) {
	            dataExtent = [NaN, NaN];
	        }
	
	        return dataExtent;
	    }
	
	    function fixExtentByAxis(dataExtent, axisModel) {
	        var min = axisModel.getMin(true);
	        if (min != null && min !== 'dataMin') {
	            dataExtent[0] = min;
	        }
	        var max = axisModel.getMax(true);
	        if (max != null && max !== 'dataMax') {
	            dataExtent[1] = max;
	        }
	
	        if (!axisModel.get('scale', true)) {
	            dataExtent[0] > 0 && (dataExtent[0] = 0);
	            dataExtent[1] < 0 && (dataExtent[1] = 0);
	        }
	
	        return dataExtent;
	    }
	
	    function setAxisModel(axisProxy, isRestore) {
	        var axisModel = axisProxy.getAxisModel();
	
	        var percentWindow = axisProxy._percentWindow;
	        var valueWindow = axisProxy._valueWindow;
	
	        if (!percentWindow) {
	            return;
	        }
	
	        // [0, 500]: arbitrary value, guess axis extent.
	        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	        // isRestore or isFull
	        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);
	
	        axisModel.setRange(
	            useOrigin ? null : +valueWindow[0].toFixed(precision),
	            useOrigin ? null : +valueWindow[1].toFixed(precision)
	        );
	    }
	
	    module.exports = AxisProxy;
	


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var ComponentView = __webpack_require__(50);
	
	    module.exports = ComponentView.extend({
	
	        type: 'dataZoom',
	
	        render: function (dataZoomModel, ecModel, api, payload) {
	            this.dataZoomModel = dataZoomModel;
	            this.ecModel = ecModel;
	            this.api = api;
	        },
	
	        /**
	         * Find the first target coordinate system.
	         *
	         * @protected
	         * @return {Object} {
	         *                   grid: [
	         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	         *                       ...
	         *                   ],  // cartesians must not be null/undefined.
	         *                   polar: [
	         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	         *                       ...
	         *                   ],  // polars must not be null/undefined.
	         *                   singleAxis: [
	         *                       {model: coord0, axisModels: [], coordIndex: 0}
	         *                   ]
	         */
	        getTargetCoordInfo: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var ecModel = this.ecModel;
	            var coordSysLists = {};
	
	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
	                if (axisModel) {
	                    var coordModel = axisModel.getCoordSysModel();
	                    coordModel && save(
	                        coordModel,
	                        axisModel,
	                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),
	                        coordModel.componentIndex
	                    );
	                }
	            }, this);
	
	            function save(coordModel, axisModel, store, coordIndex) {
	                var item;
	                for (var i = 0; i < store.length; i++) {
	                    if (store[i].model === coordModel) {
	                        item = store[i];
	                        break;
	                    }
	                }
	                if (!item) {
	                    store.push(item = {
	                        model: coordModel, axisModels: [], coordIndex: coordIndex
	                    });
	                }
	                item.axisModels.push(axisModel);
	            }
	
	            return coordSysLists;
	        }
	
	    });
	


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */
	
	
	    var DataZoomModel = __webpack_require__(352);
	
	    var SliderZoomModel = DataZoomModel.extend({
	
	        type: 'dataZoom.slider',
	
	        layoutMode: 'box',
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            show: true,
	
	            // ph => placeholder. Using placehoder here because
	            // deault value can only be drived in view stage.
	            right: 'ph',  // Default align to grid rect.
	            top: 'ph',    // Default align to grid rect.
	            width: 'ph',  // Default align to grid rect.
	            height: 'ph', // Default align to grid rect.
	            left: null,   // Default align to grid rect.
	            bottom: null, // Default align to grid rect.
	
	            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.
	            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
	                                                    // highest priority, remain for compatibility of
	                                                    // previous version, but not recommended any more.
	            dataBackground: {
	                lineStyle: {
	                    color: '#2f4554',
	                    width: 0.5,
	                    opacity: 0.3
	                },
	                areaStyle: {
	                    color: 'rgba(47,69,84,0.3)',
	                    opacity: 0.3
	                }
	            },
	            borderColor: '#ddd',                    // border color of the box. For compatibility,
	                                                    // if dataBackgroundColor is set, borderColor
	                                                    // is ignored.
	
	            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.
	            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
	            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',
	            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
	            // Percent of the slider height
	            handleSize: '100%',
	
	            handleStyle: {
	                color: '#a7b7cc'
	            },
	
	            labelPrecision: null,
	            labelFormatter: null,
	            showDetail: true,
	            showDataShadow: 'auto',                 // Default auto decision.
	            realtime: true,
	            zoomLock: false,                        // Whether disable zoom.
	            textStyle: {
	                color: '#333'
	            }
	        }
	
	    });
	
	    module.exports = SliderZoomModel;
	


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var throttle = __webpack_require__(102);
	    var DataZoomView = __webpack_require__(355);
	    var Rect = graphic.Rect;
	    var numberUtil = __webpack_require__(28);
	    var linearMap = numberUtil.linearMap;
	    var layout = __webpack_require__(42);
	    var sliderMove = __webpack_require__(358);
	    var asc = numberUtil.asc;
	    var bind = zrUtil.bind;
	    // var mathMax = Math.max;
	    var each = zrUtil.each;
	
	    // Constants
	    var DEFAULT_LOCATION_EDGE_GAP = 7;
	    var DEFAULT_FRAME_BORDER_WIDTH = 1;
	    var DEFAULT_FILLER_SIZE = 30;
	    var HORIZONTAL = 'horizontal';
	    var VERTICAL = 'vertical';
	    var LABEL_GAP = 5;
	    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];
	
	    var SliderZoomView = DataZoomView.extend({
	
	        type: 'dataZoom.slider',
	
	        init: function (ecModel, api) {
	
	            /**
	             * @private
	             * @type {Object}
	             */
	            this._displayables = {};
	
	            /**
	             * @private
	             * @type {string}
	             */
	            this._orient;
	
	            /**
	             * [0, 100]
	             * @private
	             */
	            this._range;
	
	            /**
	             * [coord of the first handle, coord of the second handle]
	             * @private
	             */
	            this._handleEnds;
	
	            /**
	             * [length, thick]
	             * @private
	             * @type {Array.<number>}
	             */
	            this._size;
	
	            /**
	             * @private
	             * @type {number}
	             */
	            this._handleWidth;
	
	            /**
	             * @private
	             * @type {number}
	             */
	            this._handleHeight;
	
	            /**
	             * @private
	             */
	            this._location;
	
	            /**
	             * @private
	             */
	            this._dragging;
	
	            /**
	             * @private
	             */
	            this._dataShadowInfo;
	
	            this.api = api;
	        },
	
	        /**
	         * @override
	         */
	        render: function (dataZoomModel, ecModel, api, payload) {
	            SliderZoomView.superApply(this, 'render', arguments);
	
	            throttle.createOrUpdate(
	                this,
	                '_dispatchZoomAction',
	                this.dataZoomModel.get('throttle'),
	                'fixRate'
	            );
	
	            this._orient = dataZoomModel.get('orient');
	
	            if (this.dataZoomModel.get('show') === false) {
	                this.group.removeAll();
	                return;
	            }
	
	            // Notice: this._resetInterval() should not be executed when payload.type
	            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
	            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	                this._buildView();
	            }
	
	            this._updateView();
	        },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            SliderZoomView.superApply(this, 'remove', arguments);
	            throttle.clear(this, '_dispatchZoomAction');
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            SliderZoomView.superApply(this, 'dispose', arguments);
	            throttle.clear(this, '_dispatchZoomAction');
	        },
	
	        _buildView: function () {
	            var thisGroup = this.group;
	
	            thisGroup.removeAll();
	
	            this._resetLocation();
	            this._resetInterval();
	
	            var barGroup = this._displayables.barGroup = new graphic.Group();
	
	            this._renderBackground();
	
	            this._renderHandle();
	
	            this._renderDataShadow();
	
	            thisGroup.add(barGroup);
	
	            this._positionGroup();
	        },
	
	        /**
	         * @private
	         */
	        _resetLocation: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var api = this.api;
	
	            // If some of x/y/width/height are not specified,
	            // auto-adapt according to target grid.
	            var coordRect = this._findCoordRect();
	            var ecSize = {width: api.getWidth(), height: api.getHeight()};
	            // Default align by coordinate system rect.
	            var positionInfo = this._orient === HORIZONTAL
	                ? {
	                    // Why using 'right', because right should be used in vertical,
	                    // and it is better to be consistent for dealing with position param merge.
	                    right: ecSize.width - coordRect.x - coordRect.width,
	                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),
	                    width: coordRect.width,
	                    height: DEFAULT_FILLER_SIZE
	                }
	                : { // vertical
	                    right: DEFAULT_LOCATION_EDGE_GAP,
	                    top: coordRect.y,
	                    width: DEFAULT_FILLER_SIZE,
	                    height: coordRect.height
	                };
	
	            // Do not write back to option and replace value 'ph', because
	            // the 'ph' value should be recalculated when resize.
	            var layoutParams = layout.getLayoutParams(dataZoomModel.option);
	
	            // Replace the placeholder value.
	            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	                if (layoutParams[name] === 'ph') {
	                    layoutParams[name] = positionInfo[name];
	                }
	            });
	
	            var layoutRect = layout.getLayoutRect(
	                layoutParams,
	                ecSize,
	                dataZoomModel.padding
	            );
	
	            this._location = {x: layoutRect.x, y: layoutRect.y};
	            this._size = [layoutRect.width, layoutRect.height];
	            this._orient === VERTICAL && this._size.reverse();
	        },
	
	        /**
	         * @private
	         */
	        _positionGroup: function () {
	            var thisGroup = this.group;
	            var location = this._location;
	            var orient = this._orient;
	
	            // Just use the first axis to determine mapping.
	            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	            var inverse = targetAxisModel && targetAxisModel.get('inverse');
	
	            var barGroup = this._displayables.barGroup;
	            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;
	
	            // Transform barGroup.
	            barGroup.attr(
	                (orient === HORIZONTAL && !inverse)
	                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}
	                : (orient === HORIZONTAL && inverse)
	                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}
	                : (orient === VERTICAL && !inverse)
	                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}
	                // Dont use Math.PI, considering shadow direction.
	                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}
	            );
	
	            // Position barGroup
	            var rect = thisGroup.getBoundingRect([barGroup]);
	            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
	        },
	
	        /**
	         * @private
	         */
	        _getViewExtent: function () {
	            return [0, this._size[0]];
	        },
	
	        _renderBackground : function () {
	            var dataZoomModel = this.dataZoomModel;
	            var size = this._size;
	
	            this._displayables.barGroup.add(new Rect({
	                silent: true,
	                shape: {
	                    x: 0, y: 0, width: size[0], height: size[1]
	                },
	                style: {
	                    fill: dataZoomModel.get('backgroundColor')
	                },
	                z2: -40
	            }));
	        },
	
	        _renderDataShadow: function () {
	            var info = this._dataShadowInfo = this._prepareDataShadowInfo();
	
	            if (!info) {
	                return;
	            }
	
	            var size = this._size;
	            var seriesModel = info.series;
	            var data = seriesModel.getRawData();
	            var otherDim = seriesModel.getShadowDim
	                ? seriesModel.getShadowDim() // @see candlestick
	                : info.otherDim;
	
	            if (otherDim == null) {
	                return;
	            }
	
	            var otherDataExtent = data.getDataExtent(otherDim);
	            // Nice extent.
	            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	            otherDataExtent = [
	                otherDataExtent[0] - otherOffset,
	                otherDataExtent[1] + otherOffset
	            ];
	            var otherShadowExtent = [0, size[1]];
	
	            var thisShadowExtent = [0, size[0]];
	
	            var areaPoints = [[size[0], 0], [0, 0]];
	            var linePoints = [];
	            var step = thisShadowExtent[1] / (data.count() - 1);
	            var thisCoord = 0;
	
	            // Optimize for large data shadow
	            var stride = Math.round(data.count() / size[0]);
	            var lastIsEmpty;
	            data.each([otherDim], function (value, index) {
	                if (stride > 0 && (index % stride)) {
	                    thisCoord += step;
	                    return;
	                }
	
	                // FIXME
	                // Should consider axis.min/axis.max when drawing dataShadow.
	
	                // FIXME
	                // 应该使用统一的空判断？还是在list里进行空判断？
	                var isEmpty = value == null || isNaN(value) || value === '';
	                // See #4235.
	                var otherCoord = isEmpty
	                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);
	
	                // Attempt to draw data shadow precisely when there are empty value.
	                if (isEmpty && !lastIsEmpty && index) {
	                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
	                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);
	                }
	                else if (!isEmpty && lastIsEmpty) {
	                    areaPoints.push([thisCoord, 0]);
	                    linePoints.push([thisCoord, 0]);
	                }
	
	                areaPoints.push([thisCoord, otherCoord]);
	                linePoints.push([thisCoord, otherCoord]);
	
	                thisCoord += step;
	                lastIsEmpty = isEmpty;
	            });
	
	            var dataZoomModel = this.dataZoomModel;
	            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');
	            this._displayables.barGroup.add(new graphic.Polygon({
	                shape: {points: areaPoints},
	                style: zrUtil.defaults(
	                    {fill: dataZoomModel.get('dataBackgroundColor')},
	                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()
	                ),
	                silent: true,
	                z2: -20
	            }));
	            this._displayables.barGroup.add(new graphic.Polyline({
	                shape: {points: linePoints},
	                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
	                silent: true,
	                z2: -19
	            }));
	        },
	
	        _prepareDataShadowInfo: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var showDataShadow = dataZoomModel.get('showDataShadow');
	
	            if (showDataShadow === false) {
	                return;
	            }
	
	            // Find a representative series.
	            var result;
	            var ecModel = this.ecModel;
	
	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                var seriesModels = dataZoomModel
	                    .getAxisProxy(dimNames.name, axisIndex)
	                    .getTargetSeriesModels();
	
	                zrUtil.each(seriesModels, function (seriesModel) {
	                    if (result) {
	                        return;
	                    }
	
	                    if (showDataShadow !== true && zrUtil.indexOf(
	                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')
	                        ) < 0
	                    ) {
	                        return;
	                    }
	
	                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	                    var otherDim = getOtherDim(dimNames.name);
	                    var otherAxisInverse;
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (otherDim != null && coordSys.getOtherAxis) {
	                        otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
	                    }
	
	                    result = {
	                        thisAxis: thisAxis,
	                        series: seriesModel,
	                        thisDim: dimNames.name,
	                        otherDim: otherDim,
	                        otherAxisInverse: otherAxisInverse
	                    };
	
	                }, this);
	
	            }, this);
	
	            return result;
	        },
	
	        _renderHandle: function () {
	            var displaybles = this._displayables;
	            var handles = displaybles.handles = [];
	            var handleLabels = displaybles.handleLabels = [];
	            var barGroup = this._displayables.barGroup;
	            var size = this._size;
	            var dataZoomModel = this.dataZoomModel;
	
	            barGroup.add(displaybles.filler = new Rect({
	                draggable: true,
	                cursor: 'move',
	                drift: bind(this._onDragMove, this, 'all'),
	                ondragstart: bind(this._showDataInfo, this, true),
	                ondragend: bind(this._onDragEnd, this),
	                onmouseover: bind(this._showDataInfo, this, true),
	                onmouseout: bind(this._showDataInfo, this, false),
	                style: {
	                    fill: dataZoomModel.get('fillerColor'),
	                    textPosition : 'inside'
	                }
	            }));
	
	            // Frame border.
	            barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	                silent: true,
	                shape: {
	                    x: 0,
	                    y: 0,
	                    width: size[0],
	                    height: size[1]
	                },
	                style: {
	                    stroke: dataZoomModel.get('dataBackgroundColor')
	                        || dataZoomModel.get('borderColor'),
	                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	                    fill: 'rgba(0,0,0,0)'
	                }
	            })));
	
	            var iconStr = dataZoomModel.get('handleIcon');
	            each([0, 1], function (handleIndex) {
	                var path = graphic.makePath(iconStr, {
	                    style: {
	                        strokeNoScale: true
	                    },
	                    rectHover: true,
	                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',
	                    draggable: true,
	                    drift: bind(this._onDragMove, this, handleIndex),
	                    ondragend: bind(this._onDragEnd, this),
	                    onmouseover: bind(this._showDataInfo, this, true),
	                    onmouseout: bind(this._showDataInfo, this, false)
	                }, {
	                    x: -0.5,
	                    y: 0,
	                    width: 1,
	                    height: 1
	                }, 'center');
	
	                var bRect = path.getBoundingRect();
	                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
	                this._handleWidth = bRect.width / bRect.height * this._handleHeight;
	
	                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
	                var handleColor = dataZoomModel.get('handleColor');
	                // Compatitable with previous version
	                if (handleColor != null) {
	                    path.style.fill = handleColor;
	                }
	
	                barGroup.add(handles[handleIndex] = path);
	
	                var textStyleModel = dataZoomModel.textStyleModel;
	
	                this.group.add(
	                    handleLabels[handleIndex] = new graphic.Text({
	                    silent: true,
	                    invisible: true,
	                    style: {
	                        x: 0, y: 0, text: '',
	                        textVerticalAlign: 'middle',
	                        textAlign: 'center',
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    },
	                    z2: 10
	                }));
	
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _resetInterval: function () {
	            var range = this._range = this.dataZoomModel.getPercentRange();
	            var viewExtent = this._getViewExtent();
	
	            this._handleEnds = [
	                linearMap(range[0], [0, 100], viewExtent, true),
	                linearMap(range[1], [0, 100], viewExtent, true)
	            ];
	        },
	
	        /**
	         * @private
	         * @param {(number|string)} handleIndex 0 or 1 or 'all'
	         * @param {number} dx
	         * @param {number} dy
	         */
	        _updateInterval: function (handleIndex, delta) {
	            var handleEnds = this._handleEnds;
	            var viewExtend = this._getViewExtent();
	
	            sliderMove(
	                delta,
	                handleEnds,
	                viewExtend,
	                (handleIndex === 'all' || this.dataZoomModel.get('zoomLock'))
	                    ? 'rigid' : 'cross',
	                handleIndex
	            );
	
	            this._range = asc([
	                linearMap(handleEnds[0], viewExtend, [0, 100], true),
	                linearMap(handleEnds[1], viewExtend, [0, 100], true)
	            ]);
	        },
	
	        /**
	         * @private
	         */
	        _updateView: function (nonRealtime) {
	            var displaybles = this._displayables;
	            var handleEnds = this._handleEnds;
	            var handleInterval = asc(handleEnds.slice());
	            var size = this._size;
	
	            each([0, 1], function (handleIndex) {
	                // Handles
	                var handle = displaybles.handles[handleIndex];
	                var handleHeight = this._handleHeight;
	                handle.attr({
	                    scale: [handleHeight, handleHeight],
	                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
	                });
	            }, this);
	
	            // Filler
	            displaybles.filler.setShape({
	                x: handleInterval[0],
	                y: 0,
	                width: handleInterval[1] - handleInterval[0],
	                height: size[1]
	            });
	
	            this._updateDataInfo(nonRealtime);
	        },
	
	        /**
	         * @private
	         */
	        _updateDataInfo: function (nonRealtime) {
	            var dataZoomModel = this.dataZoomModel;
	            var displaybles = this._displayables;
	            var handleLabels = displaybles.handleLabels;
	            var orient = this._orient;
	            var labelTexts = ['', ''];
	
	            // FIXME
	            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
	            if (dataZoomModel.get('showDetail')) {
	                var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	
	                if (axisProxy) {
	                    var axis = axisProxy.getAxisModel().axis;
	                    var range = this._range;
	
	                    var dataInterval = nonRealtime
	                        // See #4434, data and axis are not processed and reset yet in non-realtime mode.
	                        ? axisProxy.calculateDataWindow({
	                            start: range[0], end: range[1]
	                        }).valueWindow
	                        : axisProxy.getDataValueWindow();
	
	                    labelTexts = [
	                        this._formatLabel(dataInterval[0], axis),
	                        this._formatLabel(dataInterval[1], axis)
	                    ];
	                }
	            }
	
	            var orderedHandleEnds = asc(this._handleEnds.slice());
	
	            setLabel.call(this, 0);
	            setLabel.call(this, 1);
	
	            function setLabel(handleIndex) {
	                // Label
	                // Text should not transform by barGroup.
	                // Ignore handlers transform
	                var barTransform = graphic.getTransform(
	                    displaybles.handles[handleIndex].parent, this.group
	                );
	                var direction = graphic.transformDirection(
	                    handleIndex === 0 ? 'right' : 'left', barTransform
	                );
	                var offset = this._handleWidth / 2 + LABEL_GAP;
	                var textPoint = graphic.applyTransform(
	                    [
	                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),
	                        this._size[1] / 2
	                    ],
	                    barTransform
	                );
	                handleLabels[handleIndex].setStyle({
	                    x: textPoint[0],
	                    y: textPoint[1],
	                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	                    textAlign: orient === HORIZONTAL ? direction : 'center',
	                    text: labelTexts[handleIndex]
	                });
	            }
	        },
	
	        /**
	         * @private
	         */
	        _formatLabel: function (value, axis) {
	            var dataZoomModel = this.dataZoomModel;
	            var labelFormatter = dataZoomModel.get('labelFormatter');
	
	            var labelPrecision = dataZoomModel.get('labelPrecision');
	            if (labelPrecision == null || labelPrecision === 'auto') {
	                labelPrecision = axis.getPixelPrecision();
	            }
	
	            var valueStr = (value == null || isNaN(value))
	                ? ''
	                // FIXME Glue code
	                : (axis.type === 'category' || axis.type === 'time')
	                    ? axis.scale.getLabel(Math.round(value))
	                    // param of toFixed should less then 20.
	                    : value.toFixed(Math.min(labelPrecision, 20));
	
	            return zrUtil.isFunction(labelFormatter)
	                ? labelFormatter(value, valueStr)
	                : zrUtil.isString(labelFormatter)
	                ? labelFormatter.replace('{value}', valueStr)
	                : valueStr;
	        },
	
	        /**
	         * @private
	         * @param {boolean} showOrHide true: show, false: hide
	         */
	        _showDataInfo: function (showOrHide) {
	            // Always show when drgging.
	            showOrHide = this._dragging || showOrHide;
	
	            var handleLabels = this._displayables.handleLabels;
	            handleLabels[0].attr('invisible', !showOrHide);
	            handleLabels[1].attr('invisible', !showOrHide);
	        },
	
	        _onDragMove: function (handleIndex, dx, dy) {
	            this._dragging = true;
	
	            // Transform dx, dy to bar coordination.
	            var vertex = this._applyBarTransform([dx, dy], true);
	
	            this._updateInterval(handleIndex, vertex[0]);
	
	            var realtime = this.dataZoomModel.get('realtime');
	
	            this._updateView(!realtime);
	
	            if (realtime) {
	                realtime && this._dispatchZoomAction();
	            }
	        },
	
	        _onDragEnd: function () {
	            this._dragging = false;
	            this._showDataInfo(false);
	            this._dispatchZoomAction();
	        },
	
	        /**
	         * This action will be throttled.
	         * @private
	         */
	        _dispatchZoomAction: function () {
	            var range = this._range;
	
	            this.api.dispatchAction({
	                type: 'dataZoom',
	                from: this.uid,
	                dataZoomId: this.dataZoomModel.id,
	                start: range[0],
	                end: range[1]
	            });
	        },
	
	        /**
	         * @private
	         */
	        _applyBarTransform: function (vertex, inverse) {
	            var barTransform = this._displayables.barGroup.getLocalTransform();
	            return graphic.applyTransform(vertex, barTransform, inverse);
	        },
	
	        /**
	         * @private
	         */
	        _findCoordRect: function () {
	            // Find the grid coresponding to the first axis referred by dataZoom.
	            var rect;
	            each(this.getTargetCoordInfo(), function (coordInfoList) {
	                if (!rect && coordInfoList.length) {
	                    var coordSys = coordInfoList[0].model.coordinateSystem;
	                    rect = coordSys.getRect && coordSys.getRect();
	                }
	            });
	            if (!rect) {
	                var width = this.api.getWidth();
	                var height = this.api.getHeight();
	                rect = {
	                    x: width * 0.2,
	                    y: height * 0.2,
	                    width: width * 0.6,
	                    height: height * 0.6
	                };
	            }
	
	            return rect;
	        }
	
	    });
	
	    function getOtherDim(thisDim) {
	        // FIXME
	        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	        var map = {x: 'y', y: 'x', radius: 'angle', angle: 'radius'};
	        return map[thisDim];
	    }
	
	    module.exports = SliderZoomView;
	


/***/ },
/* 358 */
/***/ function(module, exports) {

	
	
	    /**
	     * Calculate slider move result.
	     *
	     * @param {number} delta Move length.
	     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].
	     *                                    handleEnds will be modified in this method.
	     * @param {Array.<number>} extent handleEnds is restricted by extent.
	     *                                extent[0] should less or equals than extent[1].
	     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,
	     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],
	     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],
	     *                              when they touch, one push other.
	     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.
	     * @param {Array.<number>} The input handleEnds.
	     */
	    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {
	        if (!delta) {
	            return handleEnds;
	        }
	
	        if (mode === 'rigid') {
	            delta = getRealDelta(delta, handleEnds, extent);
	            handleEnds[0] += delta;
	            handleEnds[1] += delta;
	        }
	        else {
	            delta = getRealDelta(delta, handleEnds[handleIndex], extent);
	            handleEnds[handleIndex] += delta;
	
	            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {
	                handleEnds[1 - handleIndex] = handleEnds[handleIndex];
	            }
	        }
	
	        return handleEnds;
	
	        function getRealDelta(delta, handleEnds, extent) {
	            var handleMinMax = !handleEnds.length
	                ? [handleEnds, handleEnds]
	                : handleEnds.slice();
	            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();
	
	            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {
	                delta = extent[0] - handleMinMax[0];
	            }
	            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {
	                delta = extent[1] - handleMinMax[1];
	            }
	            return delta;
	        }
	    };


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */
	
	
	    module.exports = __webpack_require__(352).extend({
	
	        type: 'dataZoom.inside',
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            disabled: false,   // Whether disable this inside zoom.
	            zoomLock: false  // Whether disable zoom but only pan.
	        }
	    });


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var DataZoomView = __webpack_require__(355);
	    var zrUtil = __webpack_require__(25);
	    var sliderMove = __webpack_require__(358);
	    var roams = __webpack_require__(361);
	    var bind = zrUtil.bind;
	
	    var InsideZoomView = DataZoomView.extend({
	
	        type: 'dataZoom.inside',
	
	        /**
	         * @override
	         */
	        init: function (ecModel, api) {
	            /**
	             * 'throttle' is used in this.dispatchAction, so we save range
	             * to avoid missing some 'pan' info.
	             * @private
	             * @type {Array.<number>}
	             */
	            this._range;
	        },
	
	        /**
	         * @override
	         */
	        render: function (dataZoomModel, ecModel, api, payload) {
	            InsideZoomView.superApply(this, 'render', arguments);
	
	            // Notice: origin this._range should be maintained, and should not be re-fetched
	            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
	            // info will be missed because of 'throttle' of this.dispatchAction.
	            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
	                this._range = dataZoomModel.getPercentRange();
	            }
	
	            // Reset controllers.
	            zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {
	
	                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
	                    return roams.generateCoordId(coordInfo.model);
	                });
	
	                zrUtil.each(coordInfoList, function (coordInfo) {
	                    var coordModel = coordInfo.model;
	
	                    roams.register(
	                        api,
	                        {
	                            coordId: roams.generateCoordId(coordModel),
	                            allCoordIds: allCoordIds,
	                            containsPoint: function (x, y) {
	                                return coordModel.coordinateSystem.containPoint([x, y]);
	                            },
	                            dataZoomId: dataZoomModel.id,
	                            throttleRate: dataZoomModel.get('throttle', true),
	                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),
	                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName)
	                        }
	                    );
	                }, this);
	
	            }, this);
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            roams.unregister(this.api, this.dataZoomModel.id);
	            InsideZoomView.superApply(this, 'dispose', arguments);
	            this._range = null;
	        },
	
	        /**
	         * @private
	         */
	        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {
	            if (this.dataZoomModel.option.disabled) {
	                return this._range;
	            }
	
	            var range = this._range.slice();
	
	            // Calculate transform by the first axis.
	            var axisModel = coordInfo.axisModels[0];
	            if (!axisModel) {
	                return;
	            }
	
	            var directionInfo = getDirectionInfo[coordSysName](
	                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo
	            );
	
	            var percentDelta = directionInfo.signal
	                * (range[1] - range[0])
	                * directionInfo.pixel / directionInfo.pixelLength;
	
	            sliderMove(percentDelta, range, [0, 100], 'rigid');
	
	            return (this._range = range);
	        },
	
	        /**
	         * @private
	         */
	        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {
	            var option = this.dataZoomModel.option;
	
	            if (option.disabled || option.zoomLock) {
	                return this._range;
	            }
	
	            var range = this._range.slice();
	
	            // Calculate transform by the first axis.
	            var axisModel = coordInfo.axisModels[0];
	            if (!axisModel) {
	                return;
	            }
	
	            var directionInfo = getDirectionInfo[coordSysName](
	                null, [mouseX, mouseY], axisModel, controller, coordInfo
	            );
	
	            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /
	                directionInfo.pixelLength * (range[1] - range[0]) + range[0];
	
	            scale = Math.max(1 / scale, 0);
	            range[0] = (range[0] - percentPoint) * scale + percentPoint;
	            range[1] = (range[1] - percentPoint) * scale + percentPoint;
	            return (this._range = fixRange(range));
	        }
	
	    });
	
	    var getDirectionInfo = {
	
	        grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var ret = {};
	            var rect = coordInfo.model.coordinateSystem.getRect();
	            oldPoint = oldPoint || [0, 0];
	
	            if (axis.dim === 'x') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                ret.pixelLength = rect.width;
	                ret.pixelStart = rect.x;
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // axis.dim === 'y'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                ret.pixelLength = rect.height;
	                ret.pixelStart = rect.y;
	                ret.signal = axis.inverse ? -1 : 1;
	            }
	
	            return ret;
	        },
	
	        polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var ret = {};
	            var polar = coordInfo.model.coordinateSystem;
	            var radiusExtent = polar.getRadiusAxis().getExtent();
	            var angleExtent = polar.getAngleAxis().getExtent();
	
	            oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
	            newPoint = polar.pointToCoord(newPoint);
	
	            if (axisModel.mainType === 'radiusAxis') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
	                // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);
	                ret.pixelLength = radiusExtent[1] - radiusExtent[0];
	                ret.pixelStart = radiusExtent[0];
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // 'angleAxis'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
	                // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);
	                ret.pixelLength = angleExtent[1] - angleExtent[0];
	                ret.pixelStart = angleExtent[0];
	                ret.signal = axis.inverse ? -1 : 1;
	            }
	
	            return ret;
	        },
	
	        singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var rect = coordInfo.model.coordinateSystem.getRect();
	            var ret = {};
	
	            oldPoint = oldPoint || [0, 0];
	
	            if (axis.orient === 'horizontal') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                ret.pixelLength = rect.width;
	                ret.pixelStart = rect.x;
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // 'vertical'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                ret.pixelLength = rect.height;
	                ret.pixelStart = rect.y;
	                ret.signal = axis.inverse ? -1 : 1;
	            }
	
	            return ret;
	        }
	    };
	
	    function fixRange(range) {
	        // Clamp, using !(<= or >=) to handle NaN.
	        // jshint ignore:start
	        var bound = [0, 100];
	        !(range[0] <= bound[1]) && (range[0] = bound[1]);
	        !(range[1] <= bound[1]) && (range[1] = bound[1]);
	        !(range[0] >= bound[0]) && (range[0] = bound[0]);
	        !(range[1] >= bound[0]) && (range[1] = bound[0]);
	        // jshint ignore:end
	
	        return range;
	    }
	
	    module.exports = InsideZoomView;


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Roam controller manager.
	 */
	
	
	    // Only create one roam controller for each coordinate system.
	    // one roam controller might be refered by two inside data zoom
	    // components (for example, one for x and one for y). When user
	    // pan or zoom, only dispatch one action for those data zoom
	    // components.
	
	    var zrUtil = __webpack_require__(25);
	    var RoamController = __webpack_require__(198);
	    var throttle = __webpack_require__(102);
	    var curry = zrUtil.curry;
	
	    var ATTR = '\0_ec_dataZoom_roams';
	
	    var roams = {
	
	        /**
	         * @public
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {Object} dataZoomInfo
	         * @param {string} dataZoomInfo.coordId
	         * @param {Function} dataZoomInfo.containsPoint
	         * @param {Array.<string>} dataZoomInfo.allCoordIds
	         * @param {string} dataZoomInfo.dataZoomId
	         * @param {number} dataZoomInfo.throttleRate
	         * @param {Function} dataZoomInfo.panGetRange
	         * @param {Function} dataZoomInfo.zoomGetRange
	         */
	        register: function (api, dataZoomInfo) {
	            var store = giveStore(api);
	            var theDataZoomId = dataZoomInfo.dataZoomId;
	            var theCoordId = dataZoomInfo.coordId;
	
	            // Do clean when a dataZoom changes its target coordnate system.
	            // Avoid memory leak, dispose all not-used-registered.
	            zrUtil.each(store, function (record, coordId) {
	                var dataZoomInfos = record.dataZoomInfos;
	                if (dataZoomInfos[theDataZoomId]
	                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0
	                ) {
	                    delete dataZoomInfos[theDataZoomId];
	                    record.count--;
	                }
	            });
	
	            cleanStore(store);
	
	            var record = store[theCoordId];
	            // Create if needed.
	            if (!record) {
	                record = store[theCoordId] = {
	                    coordId: theCoordId,
	                    dataZoomInfos: {},
	                    count: 0
	                };
	                record.controller = createController(api, dataZoomInfo, record);
	                record.dispatchAction = zrUtil.curry(dispatchAction, api);
	            }
	
	            // Consider resize, area should be always updated.
	            record.controller.setContainsPoint(dataZoomInfo.containsPoint);
	
	            // Update throttle.
	            throttle.createOrUpdate(
	                record,
	                'dispatchAction',
	                dataZoomInfo.throttleRate,
	                'fixRate'
	            );
	
	            // Update reference of dataZoom.
	            !(record.dataZoomInfos[theDataZoomId]) && record.count++;
	            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	        },
	
	        /**
	         * @public
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {string} dataZoomId
	         */
	        unregister: function (api, dataZoomId) {
	            var store = giveStore(api);
	
	            zrUtil.each(store, function (record) {
	                record.controller.dispose();
	                var dataZoomInfos = record.dataZoomInfos;
	                if (dataZoomInfos[dataZoomId]) {
	                    delete dataZoomInfos[dataZoomId];
	                    record.count--;
	                }
	            });
	
	            cleanStore(store);
	        },
	
	        /**
	         * @public
	         */
	        shouldRecordRange: function (payload, dataZoomId) {
	            if (payload && payload.type === 'dataZoom' && payload.batch) {
	                for (var i = 0, len = payload.batch.length; i < len; i++) {
	                    if (payload.batch[i].dataZoomId === dataZoomId) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        },
	
	        /**
	         * @public
	         */
	        generateCoordId: function (coordModel) {
	            return coordModel.type + '\0_' + coordModel.id;
	        }
	    };
	
	    /**
	     * Key: coordId, value: {dataZoomInfos: [], count, controller}
	     * @type {Array.<Object>}
	     */
	    function giveStore(api) {
	        // Mount store on zrender instance, so that we do not
	        // need to worry about dispose.
	        var zr = api.getZr();
	        return zr[ATTR] || (zr[ATTR] = {});
	    }
	
	    function createController(api, dataZoomInfo, newRecord) {
	        var controller = new RoamController(api.getZr());
	        controller.enable();
	        controller.on('pan', curry(onPan, newRecord));
	        controller.on('zoom', curry(onZoom, newRecord));
	
	        return controller;
	    }
	
	    function cleanStore(store) {
	        zrUtil.each(store, function (record, coordId) {
	            if (!record.count) {
	                record.controller.dispose();
	                delete store[coordId];
	            }
	        });
	    }
	
	    function onPan(record, dx, dy, oldX, oldY, newX, newY) {
	        wrapAndDispatch(record, function (info) {
	            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);
	        });
	    }
	
	    function onZoom(record, scale, mouseX, mouseY) {
	        wrapAndDispatch(record, function (info) {
	            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	        });
	    }
	
	    function wrapAndDispatch(record, getRange) {
	        var batch = [];
	
	        zrUtil.each(record.dataZoomInfos, function (info) {
	            var range = getRange(info);
	            range && batch.push({
	                dataZoomId: info.dataZoomId,
	                start: range[0],
	                end: range[1]
	            });
	        });
	
	        record.dispatchAction(batch);
	    }
	
	    /**
	     * This action will be throttled.
	     */
	    function dispatchAction(api, batch) {
	        api.dispatchAction({
	            type: 'dataZoom',
	            batch: batch
	        });
	    }
	
	    module.exports = roams;
	


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom processor
	 */
	
	
	    var echarts = __webpack_require__(22);
	
	    echarts.registerProcessor(function (ecModel, api) {
	
	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // We calculate window and reset axis here but not in model
	            // init stage and not after action dispatch handler, because
	            // reset should be called after seriesData.restoreData.
	            dataZoomModel.eachTargetAxis(resetSingleAxis);
	
	            // Caution: data zoom filtering is order sensitive when using
	            // percent range and no min/max/scale set on axis.
	            // For example, we have dataZoom definition:
	            // [
	            //      {xAxisIndex: 0, start: 30, end: 70},
	            //      {yAxisIndex: 0, start: 20, end: 80}
	            // ]
	            // In this case, [20, 80] of y-dataZoom should be based on data
	            // that have filtered by x-dataZoom using range of [30, 70],
	            // but should not be based on full raw data. Thus sliding
	            // x-dataZoom will change both ranges of xAxis and yAxis,
	            // while sliding y-dataZoom will only change the range of yAxis.
	            // So we should filter x-axis after reset x-axis immediately,
	            // and then reset y-axis and filter y-axis.
	            dataZoomModel.eachTargetAxis(filterSingleAxis);
	        });
	
	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // Fullfill all of the range props so that user
	            // is able to get them from chart.getOption().
	            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	            var percentRange = axisProxy.getDataPercentWindow();
	            var valueRange = axisProxy.getDataValueWindow();
	
	            dataZoomModel.setRawRange({
	                start: percentRange[0],
	                end: percentRange[1],
	                startValue: valueRange[0],
	                endValue: valueRange[1]
	            });
	        });
	    });
	
	    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	    }
	
	    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	    }
	
	


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom action
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var helper = __webpack_require__(353);
	    var echarts = __webpack_require__(22);
	
	
	    echarts.registerAction('dataZoom', function (payload, ecModel) {
	
	        var linkedNodesFinder = helper.createLinkedNodesFinder(
	            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),
	            helper.eachAxisDim,
	            function (model, dimNames) {
	                return model.get(dimNames.axisIndex);
	            }
	        );
	
	        var effectedModels = [];
	
	        ecModel.eachComponent(
	            {mainType: 'dataZoom', query: payload},
	            function (model, index) {
	                effectedModels.push.apply(
	                    effectedModels, linkedNodesFinder(model).nodes
	                );
	            }
	        );
	
	        zrUtil.each(effectedModels, function (dataZoomModel, index) {
	            dataZoomModel.setRawRange({
	                start: payload.start,
	                end: payload.end,
	                startValue: payload.startValue,
	                endValue: payload.endValue
	            });
	        });
	
	    });
	


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * visualMap component entry
	 */
	
	
	    __webpack_require__(365);
	    __webpack_require__(376);
	


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */
	
	
	    __webpack_require__(22).registerPreprocessor(
	        __webpack_require__(366)
	    );
	
	    __webpack_require__(367);
	    __webpack_require__(368);
	    __webpack_require__(369);
	    __webpack_require__(372);
	    __webpack_require__(375);
	


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file VisualMap preprocessor
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var each = zrUtil.each;
	
	    module.exports = function (option) {
	        var visualMap = option && option.visualMap;
	
	        if (!zrUtil.isArray(visualMap)) {
	            visualMap = visualMap ? [visualMap] : [];
	        }
	
	        each(visualMap, function (opt) {
	            if (!opt) {
	                return;
	            }
	
	            // rename splitList to pieces
	            if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	                opt.pieces = opt.splitList;
	                delete opt.splitList;
	            }
	
	            var pieces = opt.pieces;
	            if (pieces && zrUtil.isArray(pieces)) {
	                each(pieces, function (piece) {
	                    if (zrUtil.isObject(piece)) {
	                        if (has(piece, 'start') && !has(piece, 'min')) {
	                            piece.min = piece.start;
	                        }
	                        if (has(piece, 'end') && !has(piece, 'max')) {
	                            piece.max = piece.end;
	                        }
	                    }
	                });
	            }
	        });
	    };
	
	    function has(obj, name) {
	        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	    }
	


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(40).registerSubTypeDefaulter('visualMap', function (option) {
	        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	        return (
	                !option.categories
	                && (
	                    !(
	                        option.pieces
	                            ? option.pieces.length > 0
	                            : option.splitNumber > 0
	                    )
	                    || option.calculable
	                )
	            )
	            ? 'continuous' : 'piecewise';
	    });
	


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data range visual coding.
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var visualSolution = __webpack_require__(341);
	    var VisualMapping = __webpack_require__(216);
	    var zrUtil = __webpack_require__(25);
	
	    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {
	        ecModel.eachComponent('visualMap', function (visualMapModel) {
	            processSingleVisualMap(visualMapModel, ecModel);
	        });
	
	        prepareVisualMeta(ecModel);
	    });
	
	    function processSingleVisualMap(visualMapModel, ecModel) {
	        visualMapModel.eachTargetSeries(function (seriesModel) {
	            var data = seriesModel.getData();
	
	            visualSolution.applyVisual(
	                visualMapModel.stateList,
	                visualMapModel.targetVisuals,
	                data,
	                visualMapModel.getValueState,
	                visualMapModel,
	                visualMapModel.getDataDimension(data)
	            );
	        });
	    }
	
	    // Only support color.
	    function prepareVisualMeta(ecModel) {
	        ecModel.eachSeries(function (seriesModel) {
	            var data = seriesModel.getData();
	            var visualMetaList = [];
	
	            ecModel.eachComponent('visualMap', function (visualMapModel) {
	                if (visualMapModel.isTargetSeries(seriesModel)) {
	                    var visualMeta = visualMapModel.getVisualMeta(
	                        zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)
	                    ) || {stops: [], outerColors: []};
	                    visualMeta.dimension = visualMapModel.getDataDimension(data);
	                    visualMetaList.push(visualMeta);
	                }
	            });
	
	            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));
	            seriesModel.getData().setVisual('visualMeta', visualMetaList);
	        });
	    }
	
	    // FIXME
	    // performance and export for heatmap?
	    // value can be Infinity or -Infinity
	    function getColorVisual(seriesModel, visualMapModel, value, valueState) {
	        var mappings = visualMapModel.targetVisuals[valueState];
	        var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	        var resultVisual = {
	            color: seriesModel.getData().getVisual('color') // default color.
	        };
	
	        for (var i = 0, len = visualTypes.length; i < len; i++) {
	            var type = visualTypes[i];
	            var mapping = mappings[
	                type === 'opacity' ? '__alphaForOpacity' : type
	            ];
	            mapping && mapping.applyVisual(value, getVisual, setVisual);
	        }
	
	        return resultVisual.color;
	
	        function getVisual(key) {
	            return resultVisual[key];
	        }
	
	        function setVisual(key, value) {
	            resultVisual[key] = value;
	        }
	    }
	
	


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */
	
	
	    var VisualMapModel = __webpack_require__(370);
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	
	    // Constant
	    var DEFAULT_BAR_BOUND = [20, 140];
	
	    var ContinuousModel = VisualMapModel.extend({
	
	        type: 'visualMap.continuous',
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'
	            calculable: false,      // This prop effect default component type determine,
	                                    // See echarts/component/visualMap/typeDefaulter.
	            range: null,            // selected range. In default case `range` is [min, max]
	                                    // and can auto change along with modification of min max,
	                                    // util use specifid a range.
	            realtime: true,         // Whether realtime update.
	            itemHeight: null,       // The length of the range control edge.
	            itemWidth: null,        // The length of the other side.
	            hoverLink: true,        // Enable hover highlight.
	            hoverLinkDataSize: null,// The size of hovered data.
	            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.
	        },
	
	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            ContinuousModel.superApply(this, 'optionUpdated', arguments);
	
	            this.resetTargetSeries();
	            this.resetExtent();
	
	            this.resetVisual(function (mappingOption) {
	                mappingOption.mappingMethod = 'linear';
	                mappingOption.dataExtent = this.getExtent();
	            });
	
	            this._resetRange();
	        },
	
	        /**
	         * @protected
	         * @override
	         */
	        resetItemSize: function () {
	            ContinuousModel.superApply(this, 'resetItemSize', arguments);
	
	            var itemSize = this.itemSize;
	
	            this._orient === 'horizontal' && itemSize.reverse();
	
	            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	        },
	
	        /**
	         * @private
	         */
	        _resetRange: function () {
	            var dataExtent = this.getExtent();
	            var range = this.option.range;
	
	            if (!range || range.auto) {
	                // `range` should always be array (so we dont use other
	                // value like 'auto') for user-friend. (consider getOption).
	                dataExtent.auto = 1;
	                this.option.range = dataExtent;
	            }
	            else if (zrUtil.isArray(range)) {
	                if (range[0] > range[1]) {
	                    range.reverse();
	                }
	                range[0] = Math.max(range[0], dataExtent[0]);
	                range[1] = Math.min(range[1], dataExtent[1]);
	            }
	        },
	
	        /**
	         * @protected
	         * @override
	         */
	        completeVisualOption: function () {
	            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	
	            zrUtil.each(this.stateList, function (state) {
	                var symbolSize = this.option.controller[state].symbolSize;
	                if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	                    symbolSize[0] = 0; // For good looking.
	                }
	            }, this);
	        },
	
	        /**
	         * @override
	         */
	        setSelected: function (selected) {
	            this.option.range = selected.slice();
	            this._resetRange();
	        },
	
	        /**
	         * @public
	         */
	        getSelected: function () {
	            var dataExtent = this.getExtent();
	
	            var dataInterval = numberUtil.asc(
	                (this.get('range') || []).slice()
	            );
	
	            // Clamp
	            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);
	
	            return dataInterval;
	        },
	
	        /**
	         * @override
	         */
	        getValueState: function (value) {
	            var range = this.option.range;
	            var dataExtent = this.getExtent();
	
	            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	            // range[1] is processed likewise.
	            return (
	                (range[0] <= dataExtent[0] || range[0] <= value)
	                && (range[1] >= dataExtent[1] || value <= range[1])
	            ) ? 'inRange' : 'outOfRange';
	        },
	
	        /**
	         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]
	         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	         */
	        findTargetDataIndices: function (range) {
	            var result = [];
	
	            this.eachTargetSeries(function (seriesModel) {
	                var dataIndices = [];
	                var data = seriesModel.getData();
	
	                data.each(this.getDataDimension(data), function (value, dataIndex) {
	                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
	                }, true, this);
	
	                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});
	            }, this);
	
	            return result;
	        },
	
	        /**
	         * @implement
	         */
	        getVisualMeta: function (getColorVisual) {
	            var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());
	            var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());
	            var stops = [];
	
	            function setStop(value, valueState) {
	                stops.push({
	                    value: value,
	                    color: getColorVisual(value, valueState)
	                });
	            }
	
	            // Format to: outOfRange -- inRange -- outOfRange.
	            var iIdx = 0;
	            var oIdx = 0;
	            var iLen = iVals.length;
	            var oLen = oVals.length;
	
	            for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
	                // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.
	                if (oVals[oIdx] < iVals[iIdx]) {
	                    setStop(oVals[oIdx], 'outOfRange');
	                }
	            }
	            for (var first = 1; iIdx < iLen; iIdx++, first = 0) {
	                // If range is full, value beyond min, max will be clamped.
	                // make a singularity
	                first && stops.length && setStop(iVals[iIdx], 'outOfRange');
	                setStop(iVals[iIdx], 'inRange');
	            }
	            for (var first = 1; oIdx < oLen; oIdx++) {
	                if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
	                    // make a singularity
	                    if (first) {
	                        stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');
	                        first = 0;
	                    }
	                    setStop(oVals[oIdx], 'outOfRange');
	                }
	            }
	
	            var stopsLen = stops.length;
	
	            return {
	                stops: stops,
	                outerColors: [
	                    stopsLen ? stops[0].color : 'transparent',
	                    stopsLen ? stops[stopsLen - 1].color : 'transparent'
	                ]
	            };
	        }
	
	    });
	
	    function getColorStopValues(visualMapModel, valueState, dataExtent) {
	        if (dataExtent[0] === dataExtent[1]) {
	            return dataExtent.slice();
	        }
	
	        // When using colorHue mapping, it is not linear color any more.
	        // Moreover, canvas gradient seems not to be accurate linear.
	        // FIXME
	        // Should be arbitrary value 100? or based on pixel size?
	        var count = 200;
	        var step = (dataExtent[1] - dataExtent[0]) / count;
	
	        var value = dataExtent[0];
	        var stopValues = [];
	        for (var i = 0; i <= count && value < dataExtent[1]; i++) {
	            stopValues.push(value);
	            value += step;
	        }
	        stopValues.push(dataExtent[1]);
	
	        return stopValues;
	    }
	
	    module.exports = ContinuousModel;
	


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Controller visual map model
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	    var env = __webpack_require__(23);
	    var visualDefault = __webpack_require__(371);
	    var VisualMapping = __webpack_require__(216);
	    var visualSolution = __webpack_require__(341);
	    var mapVisual = VisualMapping.mapVisual;
	    var modelUtil = __webpack_require__(26);
	    var eachVisual = VisualMapping.eachVisual;
	    var numberUtil = __webpack_require__(28);
	    var isArray = zrUtil.isArray;
	    var each = zrUtil.each;
	    var asc = numberUtil.asc;
	    var linearMap = numberUtil.linearMap;
	    var noop = zrUtil.noop;
	
	    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];
	
	    var VisualMapModel = echarts.extendComponentModel({
	
	        type: 'visualMap',
	
	        dependencies: ['series'],
	
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        stateList: ['inRange', 'outOfRange'],
	
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        replacableOptionKeys: [
	            'inRange', 'outOfRange', 'target', 'controller', 'color'
	        ],
	
	        /**
	         * [lowerBound, upperBound]
	         *
	         * @readOnly
	         * @type {Array.<number>}
	         */
	        dataBound: [-Infinity, Infinity],
	
	        /**
	         * @readOnly
	         * @type {string|Object}
	         */
	        layoutMode: {type: 'box', ignoreSize: true},
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            show: true,
	
	            zlevel: 0,
	            z: 4,
	
	            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.
	
	                                    // set min: 0, max: 200, only for campatible with ec2.
	                                    // In fact min max should not have default value.
	            min: 0,                 // min value, must specified if pieces is not specified.
	            max: 200,               // max value, must specified if pieces is not specified.
	
	            dimension: null,
	            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	                                    // 'symbol', 'symbolSize'
	            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',
	                                    // 'colorLightness', 'colorAlpha',
	                                    // 'symbol', 'symbolSize'
	
	            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	            right: null,            // The same as left.
	            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	            bottom: 0,              // The same as top.
	
	            itemWidth: null,
	            itemHeight: null,
	            inverse: false,
	            orient: 'vertical',        // 'horizontal' ¦ 'vertical'
	
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderColor: '#ccc',       // 值域边框颜色
	            contentColor: '#5793f3',
	            inactiveColor: '#aaa',
	            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）
	            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，
	                                       // 接受数组分别设定上右下左边距，同css
	            textGap: 10,               //
	            precision: 0,              // 小数精度，默认为0，无小数点
	            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）
	
	            formatter: null,
	            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	            textStyle: {
	                color: '#333'          // 值域文字颜色
	            }
	        },
	
	        /**
	         * @protected
	         */
	        init: function (option, parentModel, ecModel) {
	
	            /**
	             * @private
	             * @type {Array.<number>}
	             */
	            this._dataExtent;
	
	            /**
	             * @readOnly
	             */
	            this.targetVisuals = {};
	
	            /**
	             * @readOnly
	             */
	            this.controllerVisuals = {};
	
	            /**
	             * @readOnly
	             */
	            this.textStyleModel;
	
	            /**
	             * [width, height]
	             * @readOnly
	             * @type {Array.<number>}
	             */
	            this.itemSize;
	
	            this.mergeDefaultAndTheme(option, ecModel);
	        },
	
	        /**
	         * @protected
	         */
	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;
	
	            // FIXME
	            // necessary?
	            // Disable realtime view update if canvas is not supported.
	            if (!env.canvasSupported) {
	                thisOption.realtime = false;
	            }
	
	            !isInit && visualSolution.replaceVisualOption(
	                thisOption, newOption, this.replacableOptionKeys
	            );
	
	            this.textStyleModel = this.getModel('textStyle');
	
	            this.resetItemSize();
	
	            this.completeVisualOption();
	        },
	
	        /**
	         * @protected
	         */
	        resetVisual: function (supplementVisualOption) {
	            var stateList = this.stateList;
	            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);
	
	            this.controllerVisuals = visualSolution.createVisualMappings(
	                this.option.controller, stateList, supplementVisualOption
	            );
	            this.targetVisuals = visualSolution.createVisualMappings(
	                this.option.target, stateList, supplementVisualOption
	            );
	        },
	
	
	        /**
	         * @protected
	         */
	        resetTargetSeries: function () {
	            var thisOption = this.option;
	            var allSeriesIndex = thisOption.seriesIndex == null;
	            thisOption.seriesIndex = allSeriesIndex
	                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);
	
	            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {
	                thisOption.seriesIndex.push(index);
	            });
	        },
	
	        /**
	         * @public
	         */
	        eachTargetSeries: function (callback, context) {
	            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {
	                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	            }, this);
	        },
	
	        /**
	         * @pubilc
	         */
	        isTargetSeries: function (seriesModel) {
	            var is = false;
	            this.eachTargetSeries(function (model) {
	                model === seriesModel && (is = true);
	            });
	            return is;
	        },
	
	        /**
	         * @example
	         * this.formatValueText(someVal); // format single numeric value to text.
	         * this.formatValueText(someVal, true); // format single category value to text.
	         * this.formatValueText([min, max]); // format numeric min-max to text.
	         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	         *
	         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	         * @param {boolean} [isCategory=false] Only available when value is number.
	         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.
	         * @return {string}
	         * @protected
	         */
	        formatValueText: function(value, isCategory, edgeSymbols) {
	            var option = this.option;
	            var precision = option.precision;
	            var dataBound = this.dataBound;
	            var formatter = option.formatter;
	            var isMinMax;
	            var textValue;
	            edgeSymbols = edgeSymbols || ['<', '>'];
	
	            if (zrUtil.isArray(value)) {
	                value = value.slice();
	                isMinMax = true;
	            }
	
	            textValue = isCategory
	                ? value
	                : (isMinMax
	                    ? [toFixed(value[0]), toFixed(value[1])]
	                    : toFixed(value)
	                );
	
	            if (zrUtil.isString(formatter)) {
	                return formatter
	                    .replace('{value}', isMinMax ? textValue[0] : textValue)
	                    .replace('{value2}', isMinMax ? textValue[1] : textValue);
	            }
	            else if (zrUtil.isFunction(formatter)) {
	                return isMinMax
	                    ? formatter(value[0], value[1])
	                    : formatter(value);
	            }
	
	            if (isMinMax) {
	                if (value[0] === dataBound[0]) {
	                    return edgeSymbols[0] + ' ' + textValue[1];
	                }
	                else if (value[1] === dataBound[1]) {
	                    return edgeSymbols[1] + ' ' + textValue[0];
	                }
	                else {
	                    return textValue[0] + ' - ' + textValue[1];
	                }
	            }
	            else { // Format single value (includes category case).
	                return textValue;
	            }
	
	            function toFixed(val) {
	                return val === dataBound[0]
	                    ? 'min'
	                    : val === dataBound[1]
	                    ? 'max'
	                    : (+val).toFixed(precision);
	            }
	        },
	
	        /**
	         * @protected
	         */
	        resetExtent: function () {
	            var thisOption = this.option;
	
	            // Can not calculate data extent by data here.
	            // Because series and data may be modified in processing stage.
	            // So we do not support the feature "auto min/max".
	
	            var extent = asc([thisOption.min, thisOption.max]);
	
	            this._dataExtent = extent;
	        },
	
	        /**
	         * @public
	         * @param {module:echarts/data/List} list
	         * @return {string} Concrete dimention. If return null/undefined,
	         *                  no dimension used.
	         */
	        getDataDimension: function (list) {
	            var optDim = this.option.dimension;
	            return optDim != null
	                ? optDim : list.dimensions.length - 1;
	        },
	
	        /**
	         * @public
	         * @override
	         */
	        getExtent: function () {
	            return this._dataExtent.slice();
	        },
	
	        /**
	         * @protected
	         */
	        completeVisualOption: function () {
	            var thisOption = this.option;
	            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};
	
	            var target = thisOption.target || (thisOption.target = {});
	            var controller = thisOption.controller || (thisOption.controller = {});
	
	            zrUtil.merge(target, base); // Do not override
	            zrUtil.merge(controller, base); // Do not override
	
	            var isCategory = this.isCategory();
	
	            completeSingle.call(this, target);
	            completeSingle.call(this, controller);
	            completeInactive.call(this, target, 'inRange', 'outOfRange');
	            // completeInactive.call(this, target, 'outOfRange', 'inRange');
	            completeController.call(this, controller);
	
	            function completeSingle(base) {
	                // Compatible with ec2 dataRange.color.
	                // The mapping order of dataRange.color is: [high value, ..., low value]
	                // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	                // Notice: ec2 has no inverse.
	                if (isArray(thisOption.color)
	                    // If there has been inRange: {symbol: ...}, adding color is a mistake.
	                    // So adding color only when no inRange defined.
	                    && !base.inRange
	                ) {
	                    base.inRange = {color: thisOption.color.slice().reverse()};
	                }
	
	                // Compatible with previous logic, always give a defautl color, otherwise
	                // simple config with no inRange and outOfRange will not work.
	                // Originally we use visualMap.color as the default color, but setOption at
	                // the second time the default color will be erased. So we change to use
	                // constant DEFAULT_COLOR.
	                // If user do not want the defualt color, set inRange: {color: null}.
	                base.inRange = base.inRange || {color: DEFAULT_COLOR};
	
	                // If using shortcut like: {inRange: 'symbol'}, complete default value.
	                each(this.stateList, function (state) {
	                    var visualType = base[state];
	
	                    if (zrUtil.isString(visualType)) {
	                        var defa = visualDefault.get(visualType, 'active', isCategory);
	                        if (defa) {
	                            base[state] = {};
	                            base[state][visualType] = defa;
	                        }
	                        else {
	                            // Mark as not specified.
	                            delete base[state];
	                        }
	                    }
	                }, this);
	            }
	
	            function completeInactive(base, stateExist, stateAbsent) {
	                var optExist = base[stateExist];
	                var optAbsent = base[stateAbsent];
	
	                if (optExist && !optAbsent) {
	                    optAbsent = base[stateAbsent] = {};
	                    each(optExist, function (visualData, visualType) {
	                        if (!VisualMapping.isValidType(visualType)) {
	                            return;
	                        }
	
	                        var defa = visualDefault.get(visualType, 'inactive', isCategory);
	
	                        if (defa != null) {
	                            optAbsent[visualType] = defa;
	
	                            // Compatibable with ec2:
	                            // Only inactive color to rgba(0,0,0,0) can not
	                            // make label transparent, so use opacity also.
	                            if (visualType === 'color'
	                                && !optAbsent.hasOwnProperty('opacity')
	                                && !optAbsent.hasOwnProperty('colorAlpha')
	                            ) {
	                                optAbsent.opacity = [0, 0];
	                            }
	                        }
	                    });
	                }
	            }
	
	            function completeController(controller) {
	                var symbolExists = (controller.inRange || {}).symbol
	                    || (controller.outOfRange || {}).symbol;
	                var symbolSizeExists = (controller.inRange || {}).symbolSize
	                    || (controller.outOfRange || {}).symbolSize;
	                var inactiveColor = this.get('inactiveColor');
	
	                each(this.stateList, function (state) {
	
	                    var itemSize = this.itemSize;
	                    var visuals = controller[state];
	
	                    // Set inactive color for controller if no other color
	                    // attr (like colorAlpha) specified.
	                    if (!visuals) {
	                        visuals = controller[state] = {
	                            color: isCategory ? inactiveColor : [inactiveColor]
	                        };
	                    }
	
	                    // Consistent symbol and symbolSize if not specified.
	                    if (visuals.symbol == null) {
	                        visuals.symbol = symbolExists
	                            && zrUtil.clone(symbolExists)
	                            || (isCategory ? 'roundRect' : ['roundRect']);
	                    }
	                    if (visuals.symbolSize == null) {
	                        visuals.symbolSize = symbolSizeExists
	                            && zrUtil.clone(symbolSizeExists)
	                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	                    }
	
	                    // Filter square and none.
	                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;
	                    });
	
	                    // Normalize symbolSize
	                    var symbolSize = visuals.symbolSize;
	
	                    if (symbolSize != null) {
	                        var max = -Infinity;
	                        // symbolSize can be object when categories defined.
	                        eachVisual(symbolSize, function (value) {
	                            value > max && (max = value);
	                        });
	                        visuals.symbolSize = mapVisual(symbolSize, function (value) {
	                            return linearMap(value, [0, max], [0, itemSize[0]], true);
	                        });
	                    }
	
	                }, this);
	            }
	        },
	
	        /**
	         * @protected
	         */
	        resetItemSize: function () {
	            this.itemSize = [
	                parseFloat(this.get('itemWidth')),
	                parseFloat(this.get('itemHeight'))
	            ];
	        },
	
	        /**
	         * @public
	         */
	        isCategory: function () {
	            return !!this.option.categories;
	        },
	
	        /**
	         * @public
	         * @abstract
	         */
	        setSelected: noop,
	
	        /**
	         * @public
	         * @abstract
	         * @param {*|module:echarts/data/List} valueOrData
	         * @param {number} dataIndex
	         * @return {string} state See this.stateList
	         */
	        getValueState: noop,
	
	        /**
	         * FIXME
	         * Do not publish to thirt-part-dev temporarily
	         * util the interface is stable. (Should it return
	         * a function but not visual meta?)
	         *
	         * @pubilc
	         * @abstract
	         * @param {Function} getColorVisual
	         *        params: value, valueState
	         *        return: color
	         * @return {Object} visualMeta
	         *        should includes {stops, outerColors}
	         *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]
	         */
	        getVisualMeta: noop
	
	    });
	
	    module.exports = VisualMapModel;
	


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual mapping.
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    var visualDefault = {
	
	        /**
	         * @public
	         */
	        get: function (visualType, key, isCategory) {
	            var value = zrUtil.clone(
	                (defaultOption[visualType] || {})[key]
	            );
	
	            return isCategory
	                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)
	                : value;
	        }
	
	    };
	
	    var defaultOption = {
	
	        color: {
	            active: ['#006edd', '#e0ffff'],
	            inactive: ['rgba(0,0,0,0)']
	        },
	
	        colorHue: {
	            active: [0, 360],
	            inactive: [0, 0]
	        },
	
	        colorSaturation: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },
	
	        colorLightness: {
	            active: [0.9, 0.5],
	            inactive: [0, 0]
	        },
	
	        colorAlpha: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },
	
	        opacity: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },
	
	        symbol: {
	            active: ['circle', 'roundRect', 'diamond'],
	            inactive: ['none']
	        },
	
	        symbolSize: {
	            active: [10, 50],
	            inactive: [0, 0]
	        }
	    };
	
	    module.exports = visualDefault;
	
	


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var VisualMapView = __webpack_require__(373);
	    var graphic = __webpack_require__(64);
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var sliderMove = __webpack_require__(358);
	    var LinearGradient = __webpack_require__(99);
	    var helper = __webpack_require__(374);
	    var modelUtil = __webpack_require__(26);
	
	    var linearMap = numberUtil.linearMap;
	    var each = zrUtil.each;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	
	    // Arbitrary value
	    var HOVER_LINK_SIZE = 12;
	    var HOVER_LINK_OUT = 6;
	
	    // Notice:
	    // Any "interval" should be by the order of [low, high].
	    // "handle0" (handleIndex === 0) maps to
	    // low data value: this._dataInterval[0] and has low coord.
	    // "handle1" (handleIndex === 1) maps to
	    // high data value: this._dataInterval[1] and has high coord.
	    // The logic of transform is implemented in this._createBarGroup.
	
	    var ContinuousView = VisualMapView.extend({
	
	        type: 'visualMap.continuous',
	
	        /**
	         * @override
	         */
	        init: function () {
	
	            ContinuousView.superApply(this, 'init', arguments);
	
	            /**
	             * @private
	             */
	            this._shapes = {};
	
	            /**
	             * @private
	             */
	            this._dataInterval = [];
	
	            /**
	             * @private
	             */
	            this._handleEnds = [];
	
	            /**
	             * @private
	             */
	            this._orient;
	
	            /**
	             * @private
	             */
	            this._useHandle;
	
	            /**
	             * @private
	             */
	            this._hoverLinkDataIndices = [];
	
	            /**
	             * @private
	             */
	            this._dragging;
	
	            /**
	             * @private
	             */
	            this._hovering;
	        },
	
	        /**
	         * @protected
	         * @override
	         */
	        doRender: function (visualMapModel, ecModel, api, payload) {
	            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	                this._buildView();
	            }
	        },
	
	        /**
	         * @private
	         */
	        _buildView: function () {
	            this.group.removeAll();
	
	            var visualMapModel = this.visualMapModel;
	            var thisGroup = this.group;
	
	            this._orient = visualMapModel.get('orient');
	            this._useHandle = visualMapModel.get('calculable');
	
	            this._resetInterval();
	
	            this._renderBar(thisGroup);
	
	            var dataRangeText = visualMapModel.get('text');
	            this._renderEndsText(thisGroup, dataRangeText, 0);
	            this._renderEndsText(thisGroup, dataRangeText, 1);
	
	            // Do this for background size calculation.
	            this._updateView(true);
	
	            // After updating view, inner shapes is built completely,
	            // and then background can be rendered.
	            this.renderBackground(thisGroup);
	
	            // Real update view
	            this._updateView();
	
	            this._enableHoverLinkToSeries();
	            this._enableHoverLinkFromSeries();
	
	            this.positionGroup(thisGroup);
	        },
	
	        /**
	         * @private
	         */
	        _renderEndsText: function (group, dataRangeText, endsIndex) {
	            if (!dataRangeText) {
	                return;
	            }
	
	            // Compatible with ec2, text[0] map to high value, text[1] map low value.
	            var text = dataRangeText[1 - endsIndex];
	            text = text != null ? text + '' : '';
	
	            var visualMapModel = this.visualMapModel;
	            var textGap = visualMapModel.get('textGap');
	            var itemSize = visualMapModel.itemSize;
	
	            var barGroup = this._shapes.barGroup;
	            var position = this._applyTransform(
	                [
	                    itemSize[0] / 2,
	                    endsIndex === 0 ? -textGap : itemSize[1] + textGap
	                ],
	                barGroup
	            );
	            var align = this._applyTransform(
	                endsIndex === 0 ? 'bottom' : 'top',
	                barGroup
	            );
	            var orient = this._orient;
	            var textStyleModel = this.visualMapModel.textStyleModel;
	
	            this.group.add(new graphic.Text({
	                style: {
	                    x: position[0],
	                    y: position[1],
	                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	                    textAlign: orient === 'horizontal' ? align : 'center',
	                    text: text,
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            }));
	        },
	
	        /**
	         * @private
	         */
	        _renderBar: function (targetGroup) {
	            var visualMapModel = this.visualMapModel;
	            var shapes = this._shapes;
	            var itemSize = visualMapModel.itemSize;
	            var orient = this._orient;
	            var useHandle = this._useHandle;
	            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);
	            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);
	
	            // Bar
	            barGroup.add(shapes.outOfRange = createPolygon());
	            barGroup.add(shapes.inRange = createPolygon(
	                null,
	                useHandle ? 'move' : null,
	                zrUtil.bind(this._dragHandle, this, 'all', false),
	                zrUtil.bind(this._dragHandle, this, 'all', true)
	            ));
	
	            var textRect = visualMapModel.textStyleModel.getTextRect('国');
	            var textSize = mathMax(textRect.width, textRect.height);
	
	            // Handle
	            if (useHandle) {
	                shapes.handleThumbs = [];
	                shapes.handleLabels = [];
	                shapes.handleLabelPoints = [];
	
	                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);
	                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	            }
	
	            this._createIndicator(barGroup, itemSize, textSize, orient);
	
	            targetGroup.add(barGroup);
	        },
	
	        /**
	         * @private
	         */
	        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {
	            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);
	            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);
	            var handleThumb = createPolygon(
	                createHandlePoints(handleIndex, textSize),
	                'move',
	                onDrift,
	                onDragEnd
	            );
	            handleThumb.position[0] = itemSize[0];
	            barGroup.add(handleThumb);
	
	            // Text is always horizontal layout but should not be effected by
	            // transform (orient/inverse). So label is built separately but not
	            // use zrender/graphic/helper/RectText, and is located based on view
	            // group (according to handleLabelPoint) but not barGroup.
	            var textStyleModel = this.visualMapModel.textStyleModel;
	            var handleLabel = new graphic.Text({
	                draggable: true,
	                drift: onDrift,
	                ondragend: onDragEnd,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            });
	            this.group.add(handleLabel);
	
	            var handleLabelPoint = [
	                orient === 'horizontal'
	                    ? textSize / 2
	                    : textSize * 1.5,
	                orient === 'horizontal'
	                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))
	                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)
	            ];
	
	            var shapes = this._shapes;
	            shapes.handleThumbs[handleIndex] = handleThumb;
	            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	            shapes.handleLabels[handleIndex] = handleLabel;
	        },
	
	        /**
	         * @private
	         */
	        _createIndicator: function (barGroup, itemSize, textSize, orient) {
	            var indicator = createPolygon([[0, 0]], 'move');
	            indicator.position[0] = itemSize[0];
	            indicator.attr({invisible: true, silent: true});
	            barGroup.add(indicator);
	
	            var textStyleModel = this.visualMapModel.textStyleModel;
	            var indicatorLabel = new graphic.Text({
	                silent: true,
	                invisible: true,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            });
	            this.group.add(indicatorLabel);
	
	            var indicatorLabelPoint = [
	                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,
	                0
	            ];
	
	            var shapes = this._shapes;
	            shapes.indicator = indicator;
	            shapes.indicatorLabel = indicatorLabel;
	            shapes.indicatorLabelPoint = indicatorLabelPoint;
	        },
	
	        /**
	         * @private
	         */
	        _dragHandle: function (handleIndex, isEnd, dx, dy) {
	            if (!this._useHandle) {
	                return;
	            }
	
	            this._dragging = !isEnd;
	
	            if (!isEnd) {
	                // Transform dx, dy to bar coordination.
	                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);
	                this._updateInterval(handleIndex, vertex[1]);
	
	                // Considering realtime, update view should be executed
	                // before dispatch action.
	                this._updateView();
	            }
	
	            // dragEnd do not dispatch action when realtime.
	            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line
	                this.api.dispatchAction({
	                    type: 'selectDataRange',
	                    from: this.uid,
	                    visualMapId: this.visualMapModel.id,
	                    selected: this._dataInterval.slice()
	                });
	            }
	
	            if (isEnd) {
	                !this._hovering && this._clearHoverLinkToSeries();
	            }
	            else if (useHoverLinkOnHandle(this.visualMapModel)) {
	                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
	            }
	        },
	
	        /**
	         * @private
	         */
	        _resetInterval: function () {
	            var visualMapModel = this.visualMapModel;
	
	            var dataInterval = this._dataInterval = visualMapModel.getSelected();
	            var dataExtent = visualMapModel.getExtent();
	            var sizeExtent = [0, visualMapModel.itemSize[1]];
	
	            this._handleEnds = [
	                linearMap(dataInterval[0], dataExtent, sizeExtent, true),
	                linearMap(dataInterval[1], dataExtent, sizeExtent, true)
	            ];
	        },
	
	        /**
	         * @private
	         * @param {(number|string)} handleIndex 0 or 1 or 'all'
	         * @param {number} dx
	         * @param {number} dy
	         */
	        _updateInterval: function (handleIndex, delta) {
	            delta = delta || 0;
	            var visualMapModel = this.visualMapModel;
	            var handleEnds = this._handleEnds;
	
	            sliderMove(
	                delta,
	                handleEnds,
	                [0, visualMapModel.itemSize[1]],
	                handleIndex === 'all' ? 'rigid' : 'push',
	                handleIndex
	            );
	            var dataExtent = visualMapModel.getExtent();
	            var sizeExtent = [0, visualMapModel.itemSize[1]];
	            // Update data interval.
	            this._dataInterval = [
	                linearMap(handleEnds[0], sizeExtent, dataExtent, true),
	                linearMap(handleEnds[1], sizeExtent, dataExtent, true)
	            ];
	        },
	
	        /**
	         * @private
	         */
	        _updateView: function (forSketch) {
	            var visualMapModel = this.visualMapModel;
	            var dataExtent = visualMapModel.getExtent();
	            var shapes = this._shapes;
	
	            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;
	
	            var visualInRange = this._createBarVisual(
	                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'
	            );
	            var visualOutOfRange = this._createBarVisual(
	                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'
	            );
	
	            shapes.inRange
	                .setStyle({
	                    fill: visualInRange.barColor,
	                    opacity: visualInRange.opacity
	                })
	                .setShape('points', visualInRange.barPoints);
	            shapes.outOfRange
	                .setStyle({
	                    fill: visualOutOfRange.barColor,
	                    opacity: visualOutOfRange.opacity
	                })
	                .setShape('points', visualOutOfRange.barPoints);
	
	            this._updateHandle(inRangeHandleEnds, visualInRange);
	        },
	
	        /**
	         * @private
	         */
	        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {
	            var opts = {
	                forceState: forceState,
	                convertOpacityToAlpha: true
	            };
	            var colorStops = this._makeColorGradient(dataInterval, opts);
	
	            var symbolSizes = [
	                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),
	                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)
	            ];
	            var barPoints = this._createBarPoints(handleEnds, symbolSizes);
	
	            return {
	                barColor: new LinearGradient(0, 0, 0, 1, colorStops),
	                barPoints: barPoints,
	                handlesColor: [
	                    colorStops[0].color,
	                    colorStops[colorStops.length - 1].color
	                ]
	            };
	        },
	
	        /**
	         * @private
	         */
	        _makeColorGradient: function (dataInterval, opts) {
	            // Considering colorHue, which is not linear, so we have to sample
	            // to calculate gradient color stops, but not only caculate head
	            // and tail.
	            var sampleNumber = 100; // Arbitrary value.
	            var colorStops = [];
	            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;
	
	            colorStops.push({
	                color: this.getControllerVisual(dataInterval[0], 'color', opts),
	                offset: 0
	            });
	
	            for (var i = 1; i < sampleNumber; i++) {
	                var currValue = dataInterval[0] + step * i;
	                if (currValue > dataInterval[1]) {
	                    break;
	                }
	                colorStops.push({
	                    color: this.getControllerVisual(currValue, 'color', opts),
	                    offset: i / sampleNumber
	                });
	            }
	
	            colorStops.push({
	                color: this.getControllerVisual(dataInterval[1], 'color', opts),
	                offset: 1
	            });
	
	            return colorStops;
	        },
	
	        /**
	         * @private
	         */
	        _createBarPoints: function (handleEnds, symbolSizes) {
	            var itemSize = this.visualMapModel.itemSize;
	
	            return [
	                [itemSize[0] - symbolSizes[0], handleEnds[0]],
	                [itemSize[0], handleEnds[0]],
	                [itemSize[0], handleEnds[1]],
	                [itemSize[0] - symbolSizes[1], handleEnds[1]]
	            ];
	        },
	
	        /**
	         * @private
	         */
	        _createBarGroup: function (itemAlign) {
	            var orient = this._orient;
	            var inverse = this.visualMapModel.get('inverse');
	
	            return new graphic.Group(
	                (orient === 'horizontal' && !inverse)
	                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}
	                : (orient === 'horizontal' && inverse)
	                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}
	                : (orient === 'vertical' && !inverse)
	                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}
	                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}
	            );
	        },
	
	        /**
	         * @private
	         */
	        _updateHandle: function (handleEnds, visualInRange) {
	            if (!this._useHandle) {
	                return;
	            }
	
	            var shapes = this._shapes;
	            var visualMapModel = this.visualMapModel;
	            var handleThumbs = shapes.handleThumbs;
	            var handleLabels = shapes.handleLabels;
	
	            each([0, 1], function (handleIndex) {
	                var handleThumb = handleThumbs[handleIndex];
	                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);
	                handleThumb.position[1] = handleEnds[handleIndex];
	
	                // Update handle label position.
	                var textPoint = graphic.applyTransform(
	                    shapes.handleLabelPoints[handleIndex],
	                    graphic.getTransform(handleThumb, this.group)
	                );
	                handleLabels[handleIndex].setStyle({
	                    x: textPoint[0],
	                    y: textPoint[1],
	                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
	                    textVerticalAlign: 'middle',
	                    textAlign: this._applyTransform(
	                        this._orient === 'horizontal'
	                            ? (handleIndex === 0 ? 'bottom' : 'top')
	                            : 'left',
	                        shapes.barGroup
	                    )
	                });
	            }, this);
	        },
	
	        /**
	         * @private
	         * @param {number} cursorValue
	         * @param {number} textValue
	         * @param {string} [rangeSymbol]
	         * @param {number} [halfHoverLinkSize]
	         */
	        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
	            var visualMapModel = this.visualMapModel;
	            var dataExtent = visualMapModel.getExtent();
	            var itemSize = visualMapModel.itemSize;
	            var sizeExtent = [0, itemSize[1]];
	            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);
	
	            var shapes = this._shapes;
	            var indicator = shapes.indicator;
	            if (!indicator) {
	                return;
	            }
	
	            indicator.position[1] = pos;
	            indicator.attr('invisible', false);
	            indicator.setShape('points', createIndicatorPoints(
	                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]
	            ));
	
	            var opts = {convertOpacityToAlpha: true};
	            var color = this.getControllerVisual(cursorValue, 'color', opts);
	            indicator.setStyle('fill', color);
	
	            // Update handle label position.
	            var textPoint = graphic.applyTransform(
	                shapes.indicatorLabelPoint,
	                graphic.getTransform(indicator, this.group)
	            );
	
	            var indicatorLabel = shapes.indicatorLabel;
	            indicatorLabel.attr('invisible', false);
	            var align = this._applyTransform('left', shapes.barGroup);
	            var orient = this._orient;
	            indicatorLabel.setStyle({
	                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),
	                textVerticalAlign: orient === 'horizontal' ? align : 'middle',
	                textAlign: orient === 'horizontal' ? 'center' : align,
	                x: textPoint[0],
	                y: textPoint[1]
	            });
	        },
	
	        /**
	         * @private
	         */
	        _enableHoverLinkToSeries: function () {
	            var self = this;
	            this._shapes.barGroup
	
	                .on('mousemove', function (e) {
	                    self._hovering = true;
	
	                    if (!self._dragging) {
	                        var itemSize = self.visualMapModel.itemSize;
	                        var pos = self._applyTransform(
	                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true
	                        );
	                        // For hover link show when hover handle, which might be
	                        // below or upper than sizeExtent.
	                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);
	
	                        self._doHoverLinkToSeries(
	                            pos[1],
	                            0 <= pos[0] && pos[0] <= itemSize[0]
	                        );
	                    }
	                })
	
	                .on('mouseout', function () {
	                    // When mouse is out of handle, hoverLink still need
	                    // to be displayed when realtime is set as false.
	                    self._hovering = false;
	                    !self._dragging && self._clearHoverLinkToSeries();
	                });
	        },
	
	        /**
	         * @private
	         */
	        _enableHoverLinkFromSeries: function () {
	            var zr = this.api.getZr();
	
	            if (this.visualMapModel.option.hoverLink) {
	                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);
	                zr.on('mouseout', this._hideIndicator, this);
	            }
	            else {
	                this._clearHoverLinkFromSeries();
	            }
	        },
	
	        /**
	         * @private
	         */
	        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {
	            var visualMapModel = this.visualMapModel;
	            var itemSize = visualMapModel.itemSize;
	
	            if (!visualMapModel.option.hoverLink) {
	                return;
	            }
	
	            var sizeExtent = [0, itemSize[1]];
	            var dataExtent = visualMapModel.getExtent();
	
	            // For hover link show when hover handle, which might be below or upper than sizeExtent.
	            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);
	
	            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
	            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
	            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);
	            var valueRange = [
	                linearMap(hoverRange[0], sizeExtent, dataExtent, true),
	                linearMap(hoverRange[1], sizeExtent, dataExtent, true)
	            ];
	            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,
	            // where china and india has very large population.
	            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
	            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);
	
	            // Do not show indicator when mouse is over handle,
	            // otherwise labels overlap, especially when dragging.
	            if (hoverOnBar) {
	                if (valueRange[0] === -Infinity) {
	                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);
	                }
	                else if (valueRange[1] === Infinity) {
	                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);
	                }
	                else {
	                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);
	                }
	            }
	
	            // When realtime is set as false, handles, which are in barGroup,
	            // also trigger hoverLink, which help user to realize where they
	            // focus on when dragging. (see test/heatmap-large.html)
	            // When realtime is set as true, highlight will not show when hover
	            // handle, because the label on handle, which displays a exact value
	            // but not range, might mislead users.
	            var oldBatch = this._hoverLinkDataIndices;
	            var newBatch = [];
	            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
	                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
	            }
	
	            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);
	            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));
	            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));
	        },
	
	        /**
	         * @private
	         */
	        _hoverLinkFromSeriesMouseOver: function (e) {
	            var el = e.target;
	
	            if (!el || el.dataIndex == null) {
	                return;
	            }
	
	            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);
	            var data = dataModel.getData(el.dataType);
	            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));
	            var value = data.get(dim, el.dataIndex, true);
	
	            if (!isNaN(value)) {
	                this._showIndicator(value, value);
	            }
	        },
	
	        /**
	         * @private
	         */
	        _hideIndicator: function () {
	            var shapes = this._shapes;
	            shapes.indicator && shapes.indicator.attr('invisible', true);
	            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);
	        },
	
	        /**
	         * @private
	         */
	        _clearHoverLinkToSeries: function () {
	            this._hideIndicator();
	
	            var indices = this._hoverLinkDataIndices;
	
	            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));
	
	            indices.length = 0;
	        },
	
	        /**
	         * @private
	         */
	        _clearHoverLinkFromSeries: function () {
	            this._hideIndicator();
	
	            var zr = this.api.getZr();
	            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);
	            zr.off('mouseout', this._hideIndicator);
	        },
	
	        /**
	         * @private
	         */
	        _applyTransform: function (vertex, element, inverse, global) {
	            var transform = graphic.getTransform(element, global ? null : this.group);
	
	            return graphic[
	                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'
	            ](vertex, transform, inverse);
	        },
	
	        /**
	         * @private
	         */
	        _dispatchHighDown: function (type, batch) {
	            batch && batch.length && this.api.dispatchAction({
	                type: type,
	                batch: batch
	            });
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clearHoverLinkFromSeries();
	            this._clearHoverLinkToSeries();
	        },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearHoverLinkFromSeries();
	            this._clearHoverLinkToSeries();
	        }
	
	    });
	
	    function createPolygon(points, cursor, onDrift, onDragEnd) {
	        return new graphic.Polygon({
	            shape: {points: points},
	            draggable: !!onDrift,
	            cursor: cursor,
	            drift: onDrift,
	            ondragend: onDragEnd
	        });
	    }
	
	    function createHandlePoints(handleIndex, textSize) {
	        return handleIndex === 0
	            ? [[0, 0], [textSize, 0], [textSize, -textSize]]
	            : [[0, 0], [textSize, 0], [textSize, textSize]];
	    }
	
	    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {
	        return isRange
	            ? [ // indicate range
	                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],
	                [HOVER_LINK_OUT, 0],
	                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]
	            ]
	            : [ // indicate single value
	                [0, 0], [5, -5], [5, 5]
	            ];
	    }
	
	    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
	        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;
	        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');
	        if (hoverLinkDataSize) {
	            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
	        }
	        return halfHoverLinkSize;
	    }
	
	    function useHoverLinkOnHandle(visualMapModel) {
	        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');
	    }
	
	    module.exports = ContinuousView;
	


/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var formatUtil = __webpack_require__(27);
	    var layout = __webpack_require__(42);
	    var echarts = __webpack_require__(22);
	    var VisualMapping = __webpack_require__(216);
	
	    module.exports = echarts.extendComponentView({
	
	        type: 'visualMap',
	
	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},
	
	        init: function (ecModel, api) {
	            /**
	             * @readOnly
	             * @type {module:echarts/model/Global}
	             */
	            this.ecModel = ecModel;
	
	            /**
	             * @readOnly
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this.api = api;
	
	            /**
	             * @readOnly
	             * @type {module:echarts/component/visualMap/visualMapModel}
	             */
	            this.visualMapModel;
	        },
	
	        /**
	         * @protected
	         */
	        render: function (visualMapModel, ecModel, api, payload) {
	            this.visualMapModel = visualMapModel;
	
	            if (visualMapModel.get('show') === false) {
	                this.group.removeAll();
	                return;
	            }
	
	            this.doRender.apply(this, arguments);
	        },
	
	        /**
	         * @protected
	         */
	        renderBackground: function (group) {
	            var visualMapModel = this.visualMapModel;
	            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	            var rect = group.getBoundingRect();
	
	            group.add(new graphic.Rect({
	                z2: -1, // Lay background rect on the lowest layer.
	                silent: true,
	                shape: {
	                    x: rect.x - padding[3],
	                    y: rect.y - padding[0],
	                    width: rect.width + padding[3] + padding[1],
	                    height: rect.height + padding[0] + padding[2]
	                },
	                style: {
	                    fill: visualMapModel.get('backgroundColor'),
	                    stroke: visualMapModel.get('borderColor'),
	                    lineWidth: visualMapModel.get('borderWidth')
	                }
	            }));
	        },
	
	        /**
	         * @protected
	         * @param {number} targetValue can be Infinity or -Infinity
	         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'
	         * @param {Object} [opts]
	         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.
	         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.
	         * @return {*} Visual value.
	         */
	        getControllerVisual: function (targetValue, visualCluster, opts) {
	            opts = opts || {};
	
	            var forceState = opts.forceState;
	            var visualMapModel = this.visualMapModel;
	            var visualObj = {};
	
	            // Default values.
	            if (visualCluster === 'symbol') {
	                visualObj.symbol = visualMapModel.get('itemSymbol');
	            }
	            if (visualCluster === 'color') {
	                var defaultColor = visualMapModel.get('contentColor');
	                visualObj.color = defaultColor;
	            }
	
	            function getter(key) {
	                return visualObj[key];
	            }
	
	            function setter(key, value) {
	                visualObj[key] = value;
	            }
	
	            var mappings = visualMapModel.controllerVisuals[
	                forceState || visualMapModel.getValueState(targetValue)
	            ];
	            var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	
	            zrUtil.each(visualTypes, function (type) {
	                var visualMapping = mappings[type];
	                if (opts.convertOpacityToAlpha && type === 'opacity') {
	                    type = 'colorAlpha';
	                    visualMapping = mappings.__alphaForOpacity;
	                }
	                if (VisualMapping.dependsOn(type, visualCluster)) {
	                    visualMapping && visualMapping.applyVisual(
	                        targetValue, getter, setter
	                    );
	                }
	            });
	
	            return visualObj[visualCluster];
	        },
	
	        /**
	         * @protected
	         */
	        positionGroup: function (group) {
	            var model = this.visualMapModel;
	            var api = this.api;
	
	            layout.positionElement(
	                group,
	                model.getBoxLayoutParams(),
	                {width: api.getWidth(), height: api.getHeight()}
	            );
	        },
	
	        /**
	         * @protected
	         * @abstract
	         */
	        doRender: zrUtil.noop
	
	    });
	


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var layout = __webpack_require__(42);
	
	    var helper = {
	
	        /**
	         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {Array.<number>} itemSize always [short, long]
	         * @return {string} 'left' or 'right' or 'top' or 'bottom'
	         */
	        getItemAlign: function (visualMapModel, api, itemSize) {
	            var modelOption = visualMapModel.option;
	            var itemAlign = modelOption.align;
	
	            if (itemAlign != null && itemAlign !== 'auto') {
	                return itemAlign;
	            }
	
	            // Auto decision align.
	            var ecSize = {width: api.getWidth(), height: api.getHeight()};
	            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;
	
	            var paramsSet = [
	                ['left', 'right', 'width'],
	                ['top', 'bottom', 'height']
	            ];
	            var reals = paramsSet[realIndex];
	            var fakeValue = [0, null, 10];
	
	            var layoutInput = {};
	            for (var i = 0; i < 3; i++) {
	                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	            }
	
	            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);
	
	            return reals[
	                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5
	                    < ecSize[rParam[1]] * 0.5 ? 0 : 1
	            ];
	        },
	
	        /**
	         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and
	         * dataIndexInside means filtered index.
	         */
	        convertDataIndex: function (batch) {
	            zrUtil.each(batch || [], function (batchItem) {
	                if (batch.dataIndex != null) {
	                    batch.dataIndexInside = batch.dataIndex;
	                    batch.dataIndex = null;
	                }
	            });
	            return batch;
	        }
	
	    };
	
	
	    module.exports = helper;
	


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data range action
	 */
	
	
	    var echarts = __webpack_require__(22);
	
	    var actionInfo = {
	        type: 'selectDataRange',
	        event: 'dataRangeSelected',
	        // FIXME use updateView appears wrong
	        update: 'update'
	    };
	
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	
	        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {
	            model.setSelected(payload.selected);
	        });
	
	    });
	


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */
	
	
	    __webpack_require__(22).registerPreprocessor(
	        __webpack_require__(366)
	    );
	
	    __webpack_require__(367);
	    __webpack_require__(368);
	    __webpack_require__(377);
	    __webpack_require__(378);
	    __webpack_require__(375);
	


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var VisualMapModel = __webpack_require__(370);
	    var zrUtil = __webpack_require__(25);
	    var VisualMapping = __webpack_require__(216);
	    var visualDefault = __webpack_require__(371);
	    var reformIntervals = __webpack_require__(28).reformIntervals;
	
	    var PiecewiseModel = VisualMapModel.extend({
	
	        type: 'visualMap.piecewise',
	
	        /**
	         * Order Rule:
	         *
	         * option.categories / option.pieces / option.text / option.selected:
	         *     If !option.inverse,
	         *     Order when vertical: ['top', ..., 'bottom'].
	         *     Order when horizontal: ['left', ..., 'right'].
	         *     If option.inverse, the meaning of
	         *     the order should be reversed.
	         *
	         * this._pieceList:
	         *     The order is always [low, ..., high].
	         *
	         * Mapping from location to low-high:
	         *     If !option.inverse
	         *     When vertical, top is high.
	         *     When horizontal, right is high.
	         *     If option.inverse, reverse.
	         */
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	            selected: null,             // Object. If not specified, means selected.
	                                        // When pieces and splitNumber: {'0': true, '5': true}
	                                        // When categories: {'cate1': false, 'cate3': true}
	                                        // When selected === false, means all unselected.
	
	            minOpen: false,             // Whether include values that smaller than `min`.
	            maxOpen: false,             // Whether include values that bigger than `max`.
	
	            align: 'auto',              // 'auto', 'left', 'right'
	            itemWidth: 20,              // When put the controller vertically, it is the length of
	                                        // horizontal side of each item. Otherwise, vertical side.
	            itemHeight: 14,             // When put the controller vertically, it is the length of
	                                        // vertical side of each item. Otherwise, horizontal side.
	            itemSymbol: 'roundRect',
	            pieceList: null,            // Each item is Object, with some of those attrs:
	                                        // {min, max, lt, gt, lte, gte, value,
	                                        // color, colorSaturation, colorAlpha, opacity,
	                                        // symbol, symbolSize}, which customize the range or visual
	                                        // coding of the certain piece. Besides, see "Order Rule".
	            categories: null,           // category names, like: ['some1', 'some2', 'some3'].
	                                        // Attr min/max are ignored when categories set. See "Order Rule"
	            splitNumber: 5,             // If set to 5, auto split five pieces equally.
	                                        // If set to 0 and component type not set, component type will be
	                                        // determined as "continuous". (It is less reasonable but for ec2
	                                        // compatibility, see echarts/component/visualMap/typeDefaulter)
	            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.
	            itemGap: 10,                // The gap between two items, in px.
	            hoverLink: true,            // Enable hover highlight.
	
	            showLabel: null             // By default, when text is used, label will hide (the logic
	                                        // is remained for compatibility reason)
	        },
	
	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            PiecewiseModel.superApply(this, 'optionUpdated', arguments);
	
	            /**
	             * The order is always [low, ..., high].
	             * [{text: string, interval: Array.<number>}, ...]
	             * @private
	             * @type {Array.<Object>}
	             */
	            this._pieceList = [];
	
	            this.resetTargetSeries();
	            this.resetExtent();
	
	            /**
	             * 'pieces', 'categories', 'splitNumber'
	             * @type {string}
	             */
	            var mode = this._mode = this._determineMode();
	
	            resetMethods[this._mode].call(this);
	
	            this._resetSelected(newOption, isInit);
	
	            var categories = this.option.categories;
	
	            this.resetVisual(function (mappingOption, state) {
	                if (mode === 'categories') {
	                    mappingOption.mappingMethod = 'category';
	                    mappingOption.categories = zrUtil.clone(categories);
	                }
	                else {
	                    mappingOption.dataExtent = this.getExtent();
	                    mappingOption.mappingMethod = 'piecewise';
	                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	                        var piece = zrUtil.clone(piece);
	                        if (state !== 'inRange') {
	                            // FIXME
	                            // outOfRange do not support special visual in pieces.
	                            piece.visual = null;
	                        }
	                        return piece;
	                    });
	                }
	            });
	        },
	
	        /**
	         * @protected
	         * @override
	         */
	        completeVisualOption: function () {
	            // Consider this case:
	            // visualMap: {
	            //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]
	            // }
	            // where no inRange/outOfRange set but only pieces. So we should make
	            // default inRange/outOfRange for this case, otherwise visuals that only
	            // appear in `pieces` will not be taken into account in visual encoding.
	
	            var option = this.option;
	            var visualTypesInPieces = {};
	            var visualTypes = VisualMapping.listVisualTypes();
	            var isCategory = this.isCategory();
	
	            zrUtil.each(option.pieces, function (piece) {
	                zrUtil.each(visualTypes, function (visualType) {
	                    if (piece.hasOwnProperty(visualType)) {
	                        visualTypesInPieces[visualType] = 1;
	                    }
	                });
	            });
	
	            zrUtil.each(visualTypesInPieces, function (v, visualType) {
	                var exists = 0;
	                zrUtil.each(this.stateList, function (state) {
	                    exists |= has(option, state, visualType)
	                        || has(option.target, state, visualType);
	                }, this);
	
	                !exists && zrUtil.each(this.stateList, function (state) {
	                    (option[state] || (option[state] = {}))[visualType] = visualDefault.get(
	                        visualType, state === 'inRange' ? 'active' : 'inactive', isCategory
	                    );
	                });
	            }, this);
	
	            function has(obj, state, visualType) {
	                return obj && obj[state] && (
	                    zrUtil.isObject(obj[state])
	                        ? obj[state].hasOwnProperty(visualType)
	                        : obj[state] === visualType // e.g., inRange: 'symbol'
	                );
	            }
	
	            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	        },
	
	        _resetSelected: function (newOption, isInit) {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;
	
	            // Selected do not merge but all override.
	            var selected = (isInit ? thisOption : newOption).selected || {};
	            thisOption.selected = selected;
	
	            // Consider 'not specified' means true.
	            zrUtil.each(pieceList, function (piece, index) {
	                var key = this.getSelectedMapKey(piece);
	                if (!selected.hasOwnProperty(key)) {
	                    selected[key] = true;
	                }
	            }, this);
	
	            if (thisOption.selectedMode === 'single') {
	                // Ensure there is only one selected.
	                var hasSel = false;
	
	                zrUtil.each(pieceList, function (piece, index) {
	                    var key = this.getSelectedMapKey(piece);
	                    if (selected[key]) {
	                        hasSel
	                            ? (selected[key] = false)
	                            : (hasSel = true);
	                    }
	                }, this);
	            }
	            // thisOption.selectedMode === 'multiple', default: all selected.
	        },
	
	        /**
	         * @public
	         */
	        getSelectedMapKey: function (piece) {
	            return this._mode === 'categories'
	                ? piece.value + '' : piece.index + '';
	        },
	
	        /**
	         * @public
	         */
	        getPieceList: function () {
	            return this._pieceList;
	        },
	
	        /**
	         * @private
	         * @return {string}
	         */
	        _determineMode: function () {
	            var option = this.option;
	
	            return option.pieces && option.pieces.length > 0
	                ? 'pieces'
	                : this.option.categories
	                ? 'categories'
	                : 'splitNumber';
	        },
	
	        /**
	         * @public
	         * @override
	         */
	        setSelected: function (selected) {
	            this.option.selected = zrUtil.clone(selected);
	        },
	
	        /**
	         * @public
	         * @override
	         */
	        getValueState: function (value) {
	            var index = VisualMapping.findPieceIndex(value, this._pieceList);
	
	            return index != null
	                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]
	                    ? 'inRange' : 'outOfRange'
	                )
	                : 'outOfRange';
	        },
	
	        /**
	         * @public
	         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()
	         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	         */
	        findTargetDataIndices: function (pieceIndex) {
	            var result = [];
	
	            this.eachTargetSeries(function (seriesModel) {
	                var dataIndices = [];
	                var data = seriesModel.getData();
	
	                data.each(this.getDataDimension(data), function (value, dataIndex) {
	                    // Should always base on model pieceList, because it is order sensitive.
	                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);
	                    pIdx === pieceIndex && dataIndices.push(dataIndex);
	                }, true, this);
	
	                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});
	            }, this);
	
	            return result;
	        },
	
	        /**
	         * @private
	         * @param {Object} piece piece.value or piece.interval is required.
	         * @return {number} Can be Infinity or -Infinity
	         */
	        getRepresentValue: function (piece) {
	            var representValue;
	            if (this.isCategory()) {
	                representValue = piece.value;
	            }
	            else {
	                if (piece.value != null) {
	                    representValue = piece.value;
	                }
	                else {
	                    var pieceInterval = piece.interval || [];
	                    representValue = (pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity)
	                        ? 0
	                        : (pieceInterval[0] + pieceInterval[1]) / 2;
	                }
	            }
	            return representValue;
	        },
	
	        getVisualMeta: function (getColorVisual) {
	            // Do not support category. (category axis is ordinal, numerical)
	            if (this.isCategory()) {
	                return;
	            }
	
	            var stops = [];
	            var outerColors = [];
	            var visualMapModel = this;
	
	            function setStop(interval, valueState) {
	                var representValue = visualMapModel.getRepresentValue({interval: interval});
	                if (!valueState) {
	                    valueState = visualMapModel.getValueState(representValue);
	                }
	                var color = getColorVisual(representValue, valueState);
	                if (interval[0] === -Infinity) {
	                    outerColors[0] = color;
	                }
	                else if (interval[1] === Infinity) {
	                    outerColors[1] = color;
	                }
	                else {
	                    stops.push(
	                        {value: interval[0], color: color},
	                        {value: interval[1], color: color}
	                    );
	                }
	            }
	
	            // Suplement
	            var pieceList = this._pieceList.slice();
	            if (!pieceList.length) {
	                pieceList.push({interval: [-Infinity, Infinity]});
	            }
	            else {
	                var edge = pieceList[0].interval[0];
	                edge !== -Infinity && pieceList.unshift({interval: [-Infinity, edge]});
	                edge = pieceList[pieceList.length - 1].interval[1];
	                edge !== Infinity && pieceList.push({interval: [edge, Infinity]});
	            }
	
	            var curr = -Infinity;
	            zrUtil.each(pieceList, function (piece) {
	                var interval = piece.interval;
	                if (interval) {
	                    // Fulfill gap.
	                    interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');
	                    setStop(interval.slice());
	                    curr = interval[1];
	                }
	            }, this);
	
	            return {stops: stops, outerColors: outerColors};
	        }
	
	    });
	
	    /**
	     * Key is this._mode
	     * @type {Object}
	     * @this {module:echarts/component/viusalMap/PiecewiseMode}
	     */
	    var resetMethods = {
	
	        splitNumber: function () {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;
	            var precision = thisOption.precision;
	            var dataExtent = this.getExtent();
	            var splitNumber = thisOption.splitNumber;
	            splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	            thisOption.splitNumber = splitNumber;
	
	            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
	            // Precision auto-adaption
	            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	                precision++;
	            }
	            thisOption.precision = precision;
	            splitStep = +splitStep.toFixed(precision);
	
	            var index = 0;
	
	            if (thisOption.minOpen) {
	                pieceList.push({
	                    index: index++,
	                    interval: [-Infinity, dataExtent[0]],
	                    close: [0, 0]
	                });
	            }
	
	            for (
	                var curr = dataExtent[0], len = index + splitNumber;
	                index < len;
	                curr += splitStep
	            ) {
	                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);
	
	                pieceList.push({
	                    index: index++,
	                    interval: [curr, max],
	                    close: [1, 1]
	                });
	            }
	
	            if (thisOption.maxOpen) {
	                pieceList.push({
	                    index: index++,
	                    interval: [dataExtent[1], Infinity],
	                    close: [0, 0]
	                });
	            }
	
	            reformIntervals(pieceList);
	
	            zrUtil.each(pieceList, function (piece) {
	                piece.text = this.formatValueText(piece.interval);
	            }, this);
	        },
	
	        categories: function () {
	            var thisOption = this.option;
	            zrUtil.each(thisOption.categories, function (cate) {
	                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	                // 是否改一致。
	                this._pieceList.push({
	                    text: this.formatValueText(cate, true),
	                    value: cate
	                });
	            }, this);
	
	            // See "Order Rule".
	            normalizeReverse(thisOption, this._pieceList);
	        },
	
	        pieces: function () {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;
	
	            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {
	
	                if (!zrUtil.isObject(pieceListItem)) {
	                    pieceListItem = {value: pieceListItem};
	                }
	
	                var item = {text: '', index: index};
	
	                if (pieceListItem.label != null) {
	                    item.text = pieceListItem.label;
	                }
	
	                if (pieceListItem.hasOwnProperty('value')) {
	                    var value = item.value = pieceListItem.value;
	                    item.interval = [value, value];
	                    item.close = [1, 1];
	                }
	                else {
	                    // `min` `max` is legacy option.
	                    // `lt` `gt` `lte` `gte` is recommanded.
	                    var interval = item.interval = [];
	                    var close = item.close = [0, 0];
	
	                    var closeList = [1, 0, 1];
	                    var infinityList = [-Infinity, Infinity];
	
	                    var useMinMax = [];
	                    for (var lg = 0; lg < 2; lg++) {
	                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];
	                        for (var i = 0; i < 3 && interval[lg] == null; i++) {
	                            interval[lg] = pieceListItem[names[i]];
	                            close[lg] = closeList[i];
	                            useMinMax[lg] = i === 2;
	                        }
	                        interval[lg] == null && (interval[lg] = infinityList[lg]);
	                    }
	                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
	                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);
	
	                    if (__DEV__) {
	                        if (interval[0] > interval[1]) {
	                            console.warn(
	                                'Piece ' + index + 'is illegal: ' + interval
	                                + ' lower bound should not greater then uppper bound.'
	                            );
	                        }
	                    }
	
	                    if (interval[0] === interval[1] && close[0] && close[1]) {
	                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	                        // we use value to lift the priority when min === max
	                        item.value = interval[0];
	                    }
	                }
	
	                item.visual = VisualMapping.retrieveVisuals(pieceListItem);
	
	                pieceList.push(item);
	
	            }, this);
	
	            // See "Order Rule".
	            normalizeReverse(thisOption, pieceList);
	            // Only pieces
	            reformIntervals(pieceList);
	
	            zrUtil.each(pieceList, function (piece) {
	                var close = piece.close;
	                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];
	                piece.text = piece.text || this.formatValueText(
	                    piece.value != null ? piece.value : piece.interval,
	                    false,
	                    edgeSymbols
	                );
	            }, this);
	        }
	    };
	
	    function normalizeReverse(thisOption, pieceList) {
	        var inverse = thisOption.inverse;
	        if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	             pieceList.reverse();
	        }
	    }
	
	    module.exports = PiecewiseModel;


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var VisualMapView = __webpack_require__(373);
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var symbolCreators = __webpack_require__(128);
	    var layout = __webpack_require__(42);
	    var helper = __webpack_require__(374);
	
	    var PiecewiseVisualMapView = VisualMapView.extend({
	
	        type: 'visualMap.piecewise',
	
	        /**
	         * @protected
	         * @override
	         */
	        doRender: function () {
	            var thisGroup = this.group;
	
	            thisGroup.removeAll();
	
	            var visualMapModel = this.visualMapModel;
	            var textGap = visualMapModel.get('textGap');
	            var textStyleModel = visualMapModel.textStyleModel;
	            var textFont = textStyleModel.getFont();
	            var textFill = textStyleModel.getTextColor();
	            var itemAlign = this._getItemAlign();
	            var itemSize = visualMapModel.itemSize;
	            var viewData = this._getViewData();
	            var endsText = viewData.endsText;
	            var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);
	
	            endsText && this._renderEndsText(
	                thisGroup, endsText[0], itemSize, showLabel, itemAlign
	            );
	
	            zrUtil.each(viewData.viewPieceList, renderItem, this);
	
	            endsText && this._renderEndsText(
	                thisGroup, endsText[1], itemSize, showLabel, itemAlign
	            );
	
	            layout.box(
	                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')
	            );
	
	            this.renderBackground(thisGroup);
	
	            this.positionGroup(thisGroup);
	
	            function renderItem(item) {
	                var piece = item.piece;
	
	                var itemGroup = new graphic.Group();
	                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);
	
	                this._enableHoverLink(itemGroup, item.indexInModelPieceList);
	
	                var representValue = visualMapModel.getRepresentValue(piece);
	
	                this._createItemSymbol(
	                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]
	                );
	
	                if (showLabel) {
	                    var visualState = this.visualMapModel.getValueState(representValue);
	
	                    itemGroup.add(new graphic.Text({
	                        style: {
	                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	                            y: itemSize[1] / 2,
	                            text: piece.text,
	                            textVerticalAlign: 'middle',
	                            textAlign: itemAlign,
	                            textFont: textFont,
	                            fill: textFill,
	                            opacity: visualState === 'outOfRange' ? 0.5 : 1
	                        }
	                    }));
	                }
	
	                thisGroup.add(itemGroup);
	            }
	        },
	
	        /**
	         * @private
	         */
	        _enableHoverLink: function (itemGroup, pieceIndex) {
	            itemGroup
	                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))
	                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));
	
	            function onHoverLink(method) {
	                var visualMapModel = this.visualMapModel;
	
	                visualMapModel.option.hoverLink && this.api.dispatchAction({
	                    type: method,
	                    batch: helper.convertDataIndex(
	                        visualMapModel.findTargetDataIndices(pieceIndex)
	                    )
	                });
	            }
	        },
	
	        /**
	         * @private
	         */
	        _getItemAlign: function () {
	            var visualMapModel = this.visualMapModel;
	            var modelOption = visualMapModel.option;
	
	            if (modelOption.orient === 'vertical') {
	                return helper.getItemAlign(
	                    visualMapModel, this.api, visualMapModel.itemSize
	                );
	            }
	            else { // horizontal, most case left unless specifying right.
	                var align = modelOption.align;
	                if (!align || align === 'auto') {
	                    align = 'left';
	                }
	                return align;
	            }
	        },
	
	        /**
	         * @private
	         */
	        _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {
	            if (!text) {
	                return;
	            }
	
	            var itemGroup = new graphic.Group();
	            var textStyleModel = this.visualMapModel.textStyleModel;
	
	            itemGroup.add(new graphic.Text({
	                style: {
	                    x: showLabel ? (itemAlign === 'right' ? itemSize[0] : 0) : itemSize[0] / 2,
	                    y: itemSize[1] / 2,
	                    textVerticalAlign: 'middle',
	                    textAlign: showLabel ? itemAlign : 'center',
	                    text: text,
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            }));
	
	            group.add(itemGroup);
	        },
	
	        /**
	         * @private
	         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	         */
	        _getViewData: function () {
	            var visualMapModel = this.visualMapModel;
	
	            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	                return {piece: piece, indexInModelPieceList: index};
	            });
	            var endsText = visualMapModel.get('text');
	
	            // Consider orient and inverse.
	            var orient = visualMapModel.get('orient');
	            var inverse = visualMapModel.get('inverse');
	
	            // Order of model pieceList is always [low, ..., high]
	            if (orient === 'horizontal' ? inverse : !inverse) {
	                viewPieceList.reverse();
	            }
	            // Origin order of endsText is [high, low]
	            else if (endsText) {
	                endsText = endsText.slice().reverse();
	            }
	
	            return {viewPieceList: viewPieceList, endsText: endsText};
	        },
	
	        /**
	         * @private
	         */
	        _createItemSymbol: function (group, representValue, shapeParam) {
	            group.add(symbolCreators.createSymbol(
	                this.getControllerVisual(representValue, 'symbol'),
	                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],
	                this.getControllerVisual(representValue, 'color')
	            ));
	        },
	
	        /**
	         * @private
	         */
	        _onItemClick: function (piece) {
	            var visualMapModel = this.visualMapModel;
	            var option = visualMapModel.option;
	            var selected = zrUtil.clone(option.selected);
	            var newKey = visualMapModel.getSelectedMapKey(piece);
	
	            if (option.selectedMode === 'single') {
	                selected[newKey] = true;
	                zrUtil.each(selected, function (o, key) {
	                    selected[key] = key === newKey;
	                });
	            }
	            else {
	                selected[newKey] = !selected[newKey];
	            }
	
	            this.api.dispatchAction({
	                type: 'selectDataRange',
	                from: this.uid,
	                visualMapId: this.visualMapModel.id,
	                selected: selected
	            });
	        }
	    });
	
	    module.exports = PiecewiseVisualMapView;
	


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	// HINT Markpoint can't be used too much
	
	
	    __webpack_require__(380);
	    __webpack_require__(382);
	
	    __webpack_require__(22).registerPreprocessor(function (opt) {
	        // Make sure markPoint component is enabled
	        opt.markPoint = opt.markPoint || {};
	    });


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(381).extend({
	
	        type: 'markPoint',
	
	        defaultOption: {
	            zlevel: 0,
	            z: 5,
	            symbol: 'pin',
	            symbolSize: 50,
	            //symbolRotate: 0,
	            //symbolOffset: [0, 0]
	            tooltip: {
	                trigger: 'item'
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'inside'
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            itemStyle: {
	                normal: {
	                    borderWidth: 2
	                }
	            }
	        }
	    });


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var modelUtil = __webpack_require__(26);
	    var zrUtil = __webpack_require__(25);
	    var env = __webpack_require__(23);
	
	    var formatUtil = __webpack_require__(27);
	    var addCommas = formatUtil.addCommas;
	    var encodeHTML = formatUtil.encodeHTML;
	
	    function fillLabel(opt) {
	        modelUtil.defaultEmphasis(
	            opt.label,
	            modelUtil.LABEL_OPTIONS
	        );
	    }
	    var MarkerModel = __webpack_require__(22).extendComponentModel({
	
	        type: 'marker',
	
	        dependencies: ['series', 'grid', 'polar', 'geo'],
	        /**
	         * @overrite
	         */
	        init: function (option, parentModel, ecModel, extraOpt) {
	
	            if (__DEV__) {
	                if (this.type === 'marker') {
	                    throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');
	                }
	            }
	            this.mergeDefaultAndTheme(option, ecModel);
	            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	        },
	
	        /**
	         * @return {boolean}
	         */
	        isAnimationEnabled: function () {
	            if (env.node) {
	                return false;
	            }
	
	            var hostSeries = this.__hostSeries;
	            return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();
	        },
	
	        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
	            var MarkerModel = this.constructor;
	            var modelPropName = this.mainType + 'Model';
	            if (!createdBySelf) {
	                ecModel.eachSeries(function (seriesModel) {
	
	                    var markerOpt = seriesModel.get(this.mainType);
	
	                    var markerModel = seriesModel[modelPropName];
	                    if (!markerOpt || !markerOpt.data) {
	                        seriesModel[modelPropName] = null;
	                        return;
	                    }
	                    if (!markerModel) {
	                        if (isInit) {
	                            // Default label emphasis `position` and `show`
	                            fillLabel(markerOpt);
	                        }
	                        zrUtil.each(markerOpt.data, function (item) {
	                            // FIXME Overwrite fillLabel method ?
	                            if (item instanceof Array) {
	                                fillLabel(item[0]);
	                                fillLabel(item[1]);
	                            }
	                            else {
	                                fillLabel(item);
	                            }
	                        });
	
	                        markerModel = new MarkerModel(
	                            markerOpt, this, ecModel
	                        );
	
	                        zrUtil.extend(markerModel, {
	                            mainType: this.mainType,
	                            // Use the same series index and name
	                            seriesIndex: seriesModel.seriesIndex,
	                            name: seriesModel.name,
	                            createdBySelf: true
	                        });
	
	                        markerModel.__hostSeries = seriesModel;
	                    }
	                    else {
	                        markerModel.mergeOption(markerOpt, ecModel, true);
	                    }
	                    seriesModel[modelPropName] = markerModel;
	                }, this);
	            }
	        },
	
	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = zrUtil.isArray(value)
	                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	            var name = data.getName(dataIndex);
	            var html = encodeHTML(this.name);
	            if (value != null || name) {
	                html += '<br />';
	            }
	            if (name) {
	                html += encodeHTML(name);
	                if (value != null) {
	                    html += ' : ';
	                }
	            }
	            if (value != null) {
	                html += encodeHTML(formattedValue);
	            }
	            return html;
	        },
	
	        getData: function () {
	            return this._data;
	        },
	
	        setData: function (data) {
	            this._data = data;
	        }
	    });
	
	    zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);
	
	    module.exports = MarkerModel;


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var SymbolDraw = __webpack_require__(126);
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	
	    var List = __webpack_require__(119);
	
	    var markerHelper = __webpack_require__(383);
	
	    function updateMarkerLayout(mpData, seriesModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        mpData.each(function (idx) {
	            var itemModel = mpData.getItemModel(idx);
	            var point;
	            var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	            var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	            if (!isNaN(xPx) && !isNaN(yPx)) {
	                point = [xPx, yPx];
	            }
	            // Chart like bar may have there own marker positioning logic
	            else if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    mpData.getValues(mpData.dimensions, idx)
	                );
	            }
	            else if (coordSys) {
	                var x = mpData.get(coordSys.dimensions[0], idx);
	                var y = mpData.get(coordSys.dimensions[1], idx);
	                point = coordSys.dataToPoint([x, y]);
	
	            }
	
	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	
	            mpData.setItemLayout(idx, point);
	        });
	    }
	
	    __webpack_require__(384).extend({
	
	        type: 'markPoint',
	
	        updateLayout: function (markPointModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var mpModel = seriesModel.markPointModel;
	                if (mpModel) {
	                    updateMarkerLayout(mpModel.getData(), seriesModel, api);
	                    this.markerGroupMap[seriesModel.name].updateLayout(mpModel);
	                }
	            }, this);
	        },
	
	        renderSeries: function (seriesModel, mpModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();
	
	            var symbolDrawMap = this.markerGroupMap;
	            var symbolDraw = symbolDrawMap[seriesName];
	            if (!symbolDraw) {
	                symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();
	            }
	
	            var mpData = createList(coordSys, seriesModel, mpModel);
	
	            // FIXME
	            mpModel.setData(mpData);
	
	            updateMarkerLayout(mpModel.getData(), seriesModel, api);
	
	            mpData.each(function (idx) {
	                var itemModel = mpData.getItemModel(idx);
	                var symbolSize = itemModel.getShallow('symbolSize');
	                if (typeof symbolSize === 'function') {
	                    // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
	                    symbolSize = symbolSize(
	                        mpModel.getRawValue(idx), mpModel.getDataParams(idx)
	                    );
	                }
	                mpData.setItemVisual(idx, {
	                    symbolSize: symbolSize,
	                    color: itemModel.get('itemStyle.normal.color')
	                        || seriesData.getVisual('color'),
	                    symbol: itemModel.getShallow('symbol')
	                });
	            });
	
	            // TODO Text are wrong
	            symbolDraw.updateData(mpData);
	            this.group.add(symbolDraw.group);
	
	            // Set host model for tooltip
	            // FIXME
	            mpData.eachItemGraphicEl(function (el) {
	                el.traverse(function (child) {
	                    child.dataModel = mpModel;
	                });
	            });
	
	            symbolDraw.__keep = true;
	
	            symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');
	        }
	    });
	
	    /**
	     * @inner
	     * @param {module:echarts/coord/*} [coordSys]
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, mpModel) {
	        var coordDimsInfos;
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	        }
	
	        var mpData = new List(coordDimsInfos, mpModel);
	        var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(
	                markerHelper.dataTransform, seriesModel
	            ));
	        if (coordSys) {
	            dataOpt = zrUtil.filter(
	                dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys)
	            );
	        }
	
	        mpData.initData(dataOpt, null,
	            coordSys ? markerHelper.dimValueGetter : function (item) {
	                return item.value;
	            }
	        );
	        return mpData;
	    }
	


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var numberUtil = __webpack_require__(28);
	    var indexOf = zrUtil.indexOf;
	
	    function hasXOrY(item) {
	        return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
	    }
	
	    function hasXAndY(item) {
	        return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
	    }
	
	    function getPrecision(data, valueAxisDim, dataIndex) {
	        var precision = -1;
	        do {
	            precision = Math.max(
	                numberUtil.getPrecision(data.get(
	                    valueAxisDim, dataIndex
	                )),
	                precision
	            );
	            data = data.stackedOn;
	        } while (data);
	
	        return precision;
	    }
	
	    function markerTypeCalculatorWithExtent(
	        mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex
	    ) {
	        var coordArr = [];
	        var value = numCalculate(data, targetDataDim, mlType);
	
	        var dataIndex = data.indexOfNearest(targetDataDim, value, true);
	        coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);
	        coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);
	
	        var precision = getPrecision(data, targetDataDim, dataIndex);
	        if (precision >= 0) {
	            coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
	        }
	
	        return coordArr;
	    }
	
	    var curry = zrUtil.curry;
	    // TODO Specified percent
	    var markerTypeCalculator = {
	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        min: curry(markerTypeCalculatorWithExtent, 'min'),
	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        max: curry(markerTypeCalculatorWithExtent, 'max'),
	
	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        average: curry(markerTypeCalculatorWithExtent, 'average')
	    };
	
	    /**
	     * Transform markPoint data item to format used in List by do the following
	     * 1. Calculate statistic like `max`, `min`, `average`
	     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {Object}
	     */
	    var dataTransform = function (seriesModel, item) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;
	
	        // 1. If not specify the position with pixel directly
	        // 2. If `coord` is not a data array. Which uses `xAxis`,
	        // `yAxis` to specify the coord on each dimension
	
	        // parseFloat first because item.x and item.y can be percent string like '20%'
	        if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {
	            var dims = coordSys.dimensions;
	            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);
	
	            // Clone the option
	            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
	            item = zrUtil.clone(item);
	
	            if (item.type
	                && markerTypeCalculator[item.type]
	                && axisInfo.baseAxis && axisInfo.valueAxis
	            ) {
	                var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	                var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);
	
	                item.coord = markerTypeCalculator[item.type](
	                    data, axisInfo.baseDataDim, axisInfo.valueDataDim,
	                    otherCoordIndex, targetCoordIndex
	                );
	                // Force to use the value of calculated value.
	                item.value = item.coord[targetCoordIndex];
	            }
	            else {
	                // FIXME Only has one of xAxis and yAxis.
	                var coord = [
	                    item.xAxis != null ? item.xAxis : item.radiusAxis,
	                    item.yAxis != null ? item.yAxis : item.angleAxis
	                ];
	                // Each coord support max, min, average
	                for (var i = 0; i < 2; i++) {
	                    if (markerTypeCalculator[coord[i]]) {
	                        var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];
	                        coord[i] = numCalculate(data, dataDim, coord[i]);
	                    }
	                }
	                item.coord = coord;
	            }
	        }
	        return item;
	    };
	
	    var getAxisInfo = function (item, data, coordSys, seriesModel) {
	        var ret = {};
	
	        if (item.valueIndex != null || item.valueDim != null) {
	            ret.valueDataDim = item.valueIndex != null
	                ? data.getDimension(item.valueIndex) : item.valueDim;
	            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	        }
	        else {
	            ret.baseAxis = seriesModel.getBaseAxis();
	            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	        }
	
	        return ret;
	    };
	
	    /**
	     * Filter data which is out of coordinateSystem range
	     * [dataFilter description]
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {boolean}
	     */
	    var dataFilter = function (coordSys, item) {
	        // Alwalys return true if there is no coordSys
	        return (coordSys && coordSys.containData && item.coord && !hasXOrY(item))
	            ? coordSys.containData(item.coord) : true;
	    };
	
	    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {
	        // x, y, radius, angle
	        if (dimIndex < 2) {
	            return item.coord && item.coord[dimIndex];
	        }
	        return item.value;
	    };
	
	    var numCalculate = function (data, valueDataDim, type) {
	        if (type === 'average') {
	            var sum = 0;
	            var count = 0;
	            data.each(valueDataDim, function (val, idx) {
	                if (!isNaN(val)) {
	                    sum += val;
	                    count++;
	                }
	            }, true);
	            return sum / count;
	        }
	        else {
	            return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];
	        }
	    };
	
	    module.exports = {
	        dataTransform: dataTransform,
	        dataFilter: dataFilter,
	        dimValueGetter: dimValueGetter,
	        getAxisInfo: getAxisInfo,
	        numCalculate: numCalculate
	    };


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(22).extendComponentView({
	
	        type: 'marker',
	
	        init: function () {
	            /**
	             * Markline grouped by series
	             * @private
	             * @type {Object}
	             */
	            this.markerGroupMap = {};
	        },
	
	        render: function (markerModel, ecModel, api) {
	            var markerGroupMap = this.markerGroupMap;
	            for (var name in markerGroupMap) {
	                if (markerGroupMap.hasOwnProperty(name)) {
	                    markerGroupMap[name].__keep = false;
	                }
	            }
	
	            var markerModelKey = this.type + 'Model';
	            ecModel.eachSeries(function (seriesModel) {
	                var markerModel = seriesModel[markerModelKey];
	                markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);
	            }, this);
	
	            for (var name in markerGroupMap) {
	                if (markerGroupMap.hasOwnProperty(name) && !markerGroupMap[name].__keep) {
	                    this.group.remove(markerGroupMap[name].group);
	                }
	            }
	        },
	
	        renderSeries: function () {}
	    });


/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(386);
	    __webpack_require__(387);
	
	    __webpack_require__(22).registerPreprocessor(function (opt) {
	        // Make sure markLine component is enabled
	        opt.markLine = opt.markLine || {};
	    });


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(381).extend({
	
	        type: 'markLine',
	
	        defaultOption: {
	            zlevel: 0,
	            z: 5,
	
	            symbol: ['circle', 'arrow'],
	            symbolSize: [8, 16],
	
	            //symbolRotate: 0,
	
	            precision: 2,
	            tooltip: {
	                trigger: 'item'
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'end'
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            lineStyle: {
	                normal: {
	                    type: 'dashed'
	                },
	                emphasis: {
	                    width: 3
	                }
	            },
	            animationEasing: 'linear'
	        }
	    });


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var List = __webpack_require__(119);
	    var numberUtil = __webpack_require__(28);
	
	    var markerHelper = __webpack_require__(383);
	
	    var LineDraw = __webpack_require__(223);
	
	    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {
	        var data = seriesModel.getData();
	        // Special type markLine like 'min', 'max', 'average'
	        var mlType = item.type;
	
	        if (!zrUtil.isArray(item)
	            && (
	                mlType === 'min' || mlType === 'max' || mlType === 'average'
	                // In case
	                // data: [{
	                //   yAxis: 10
	                // }]
	                || (item.xAxis != null || item.yAxis != null)
	            )
	        ) {
	            var valueAxis;
	            var valueDataDim;
	            var value;
	
	            if (item.yAxis != null || item.xAxis != null) {
	                valueDataDim = item.yAxis != null ? 'y' : 'x';
	                valueAxis = coordSys.getAxis(valueDataDim);
	
	                value = zrUtil.retrieve(item.yAxis, item.xAxis);
	            }
	            else {
	                var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	                valueDataDim = axisInfo.valueDataDim;
	                valueAxis = axisInfo.valueAxis;
	                value = markerHelper.numCalculate(data, valueDataDim, mlType);
	            }
	            var valueIndex = valueDataDim === 'x' ? 0 : 1;
	            var baseIndex = 1 - valueIndex;
	
	            var mlFrom = zrUtil.clone(item);
	            var mlTo = {};
	
	            mlFrom.type = null;
	
	            mlFrom.coord = [];
	            mlTo.coord = [];
	            mlFrom.coord[baseIndex] = -Infinity;
	            mlTo.coord[baseIndex] = Infinity;
	
	            var precision = mlModel.get('precision');
	            if (precision >= 0 && typeof value === 'number') {
	                value = +value.toFixed(precision);
	            }
	
	            mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;
	
	            item = [mlFrom, mlTo, { // Extra option for tooltip and label
	                type: mlType,
	                valueIndex: item.valueIndex,
	                // Force to use the value of calculated value.
	                value: value
	            }];
	        }
	
	        item = [
	            markerHelper.dataTransform(seriesModel, item[0]),
	            markerHelper.dataTransform(seriesModel, item[1]),
	            zrUtil.extend({}, item[2])
	        ];
	
	        // Avoid line data type is extended by from(to) data type
	        item[2].type = item[2].type || '';
	
	        // Merge from option and to option into line option
	        zrUtil.merge(item[2], item[0]);
	        zrUtil.merge(item[2], item[1]);
	
	        return item;
	    };
	
	    function isInifinity(val) {
	        return !isNaN(val) && !isFinite(val);
	    }
	
	    // If a markLine has one dim
	    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	        var otherDimIndex = 1 - dimIndex;
	        var dimName = coordSys.dimensions[dimIndex];
	        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex])
	            && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
	    }
	
	    function markLineFilter(coordSys, item) {
	        if (coordSys.type === 'cartesian2d') {
	            var fromCoord = item[0].coord;
	            var toCoord = item[1].coord;
	            // In case
	            // {
	            //  markLine: {
	            //    data: [{ yAxis: 2 }]
	            //  }
	            // }
	            if (
	                fromCoord && toCoord &&
	                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)
	                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))
	            ) {
	                return true;
	            }
	        }
	        return markerHelper.dataFilter(coordSys, item[0])
	            && markerHelper.dataFilter(coordSys, item[1]);
	    }
	
	    function updateSingleMarkerEndLayout(
	        data, idx, isFrom, seriesModel, api
	    ) {
	        var coordSys = seriesModel.coordinateSystem;
	        var itemModel = data.getItemModel(idx);
	
	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [xPx, yPx];
	        }
	        else {
	            // Chart like bar may have there own marker positioning logic
	            if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    data.getValues(data.dimensions, idx)
	                );
	            }
	            else {
	                var dims = coordSys.dimensions;
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                point = coordSys.dataToPoint([x, y]);
	            }
	            // Expand line to the edge of grid if value on one axis is Inifnity
	            // In case
	            //  markLine: {
	            //    data: [{
	            //      yAxis: 2
	            //      // or
	            //      type: 'average'
	            //    }]
	            //  }
	            if (coordSys.type === 'cartesian2d') {
	                var xAxis = coordSys.getAxis('x');
	                var yAxis = coordSys.getAxis('y');
	                var dims = coordSys.dimensions;
	                if (isInifinity(data.get(dims[0], idx))) {
	                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
	                }
	                else if (isInifinity(data.get(dims[1], idx))) {
	                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
	                }
	            }
	
	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	        }
	
	        data.setItemLayout(idx, point);
	    }
	
	    __webpack_require__(384).extend({
	
	        type: 'markLine',
	
	        updateLayout: function (markLineModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var mlModel = seriesModel.markLineModel;
	                if (mlModel) {
	                    var mlData = mlModel.getData();
	                    var fromData = mlModel.__from;
	                    var toData = mlModel.__to;
	                    // Update visual and layout of from symbol and to symbol
	                    fromData.each(function (idx) {
	                        updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
	                        updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
	                    });
	                    // Update layout of line
	                    mlData.each(function (idx) {
	                        mlData.setItemLayout(idx, [
	                            fromData.getItemLayout(idx),
	                            toData.getItemLayout(idx)
	                        ]);
	                    });
	
	                    this.markerGroupMap[seriesModel.name].updateLayout();
	
	                }
	            }, this);
	        },
	
	        renderSeries: function (seriesModel, mlModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();
	
	            var lineDrawMap = this.markerGroupMap;
	            var lineDraw = lineDrawMap[seriesName];
	            if (!lineDraw) {
	                lineDraw = lineDrawMap[seriesName] = new LineDraw();
	            }
	            this.group.add(lineDraw.group);
	
	            var mlData = createList(coordSys, seriesModel, mlModel);
	
	            var fromData = mlData.from;
	            var toData = mlData.to;
	            var lineData = mlData.line;
	
	            mlModel.__from = fromData;
	            mlModel.__to = toData;
	            // Line data for tooltip and formatter
	            mlModel.setData(lineData);
	
	            var symbolType = mlModel.get('symbol');
	            var symbolSize = mlModel.get('symbolSize');
	            if (!zrUtil.isArray(symbolType)) {
	                symbolType = [symbolType, symbolType];
	            }
	            if (typeof symbolSize === 'number') {
	                symbolSize = [symbolSize, symbolSize];
	            }
	
	            // Update visual and layout of from symbol and to symbol
	            mlData.from.each(function (idx) {
	                updateDataVisualAndLayout(fromData, idx, true);
	                updateDataVisualAndLayout(toData, idx, false);
	            });
	
	            // Update visual and layout of line
	            lineData.each(function (idx) {
	                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	                lineData.setItemVisual(idx, {
	                    color: lineColor || fromData.getItemVisual(idx, 'color')
	                });
	                lineData.setItemLayout(idx, [
	                    fromData.getItemLayout(idx),
	                    toData.getItemLayout(idx)
	                ]);
	
	                lineData.setItemVisual(idx, {
	                    'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),
	                    'fromSymbol': fromData.getItemVisual(idx, 'symbol'),
	                    'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),
	                    'toSymbol': toData.getItemVisual(idx, 'symbol')
	                });
	            });
	
	            lineDraw.updateData(lineData);
	
	            // Set host model for tooltip
	            // FIXME
	            mlData.line.eachItemGraphicEl(function (el, idx) {
	                el.traverse(function (child) {
	                    child.dataModel = mlModel;
	                });
	            });
	
	            function updateDataVisualAndLayout(data, idx, isFrom) {
	                var itemModel = data.getItemModel(idx);
	
	                updateSingleMarkerEndLayout(
	                    data, idx, isFrom, seriesModel, api
	                );
	
	                data.setItemVisual(idx, {
	                    symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	                    symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	                    color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	                });
	            }
	
	            lineDraw.__keep = true;
	
	            lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');
	        }
	    });
	
	    /**
	     * @inner
	     * @param {module:echarts/coord/*} coordSys
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, mlModel) {
	
	        var coordDimsInfos;
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	        }
	
	        var fromData = new List(coordDimsInfos, mlModel);
	        var toData = new List(coordDimsInfos, mlModel);
	        // No dimensions
	        var lineData = new List([], mlModel);
	
	        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(
	            markLineTransform, seriesModel, coordSys, mlModel
	        ));
	        if (coordSys) {
	            optData = zrUtil.filter(
	                optData, zrUtil.curry(markLineFilter, coordSys)
	            );
	        }
	        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
	            return item.value;
	        };
	        fromData.initData(
	            zrUtil.map(optData, function (item) { return item[0]; }),
	            null, dimValueGetter
	        );
	        toData.initData(
	            zrUtil.map(optData, function (item) { return item[1]; }),
	            null, dimValueGetter
	        );
	        lineData.initData(
	            zrUtil.map(optData, function (item) { return item[2]; })
	        );
	        lineData.hasItemOption = true;
	        return {
	            from: fromData,
	            to: toData,
	            line: lineData
	        };
	    }


/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(389);
	    __webpack_require__(390);
	
	    __webpack_require__(22).registerPreprocessor(function (opt) {
	        // Make sure markArea component is enabled
	        opt.markArea = opt.markArea || {};
	    });


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(381).extend({
	
	        type: 'markArea',
	
	        defaultOption: {
	            zlevel: 0,
	            // PENDING
	            z: 1,
	            tooltip: {
	                trigger: 'item'
	            },
	            // markArea should fixed on the coordinate system
	            animation: false,
	            label: {
	                normal: {
	                    show: true,
	                    position: 'top'
	                },
	                emphasis: {
	                    show: true,
	                    position: 'top'
	                }
	            },
	            itemStyle: {
	                normal: {
	                    // color and borderColor default to use color from series
	                    // color: 'auto'
	                    // borderColor: 'auto'
	                    borderWidth: 0
	                }
	            }
	        }
	    });


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Better on polar
	
	
	    var zrUtil = __webpack_require__(25);
	    var List = __webpack_require__(119);
	    var numberUtil = __webpack_require__(28);
	    var graphic = __webpack_require__(64);
	    var colorUtil = __webpack_require__(60);
	
	    var markerHelper = __webpack_require__(383);
	
	    var markAreaTransform = function (seriesModel, coordSys, maModel, item) {
	        var lt = markerHelper.dataTransform(seriesModel, item[0]);
	        var rb = markerHelper.dataTransform(seriesModel, item[1]);
	        var retrieve = zrUtil.retrieve;
	
	        // FIXME make sure lt is less than rb
	        var ltCoord = lt.coord;
	        var rbCoord = rb.coord;
	        ltCoord[0] = retrieve(ltCoord[0], -Infinity);
	        ltCoord[1] = retrieve(ltCoord[1], -Infinity);
	
	        rbCoord[0] = retrieve(rbCoord[0], Infinity);
	        rbCoord[1] = retrieve(rbCoord[1], Infinity);
	
	        // Merge option into one
	        var result = zrUtil.mergeAll([{}, lt, rb]);
	
	        result.coord = [
	            lt.coord, rb.coord
	        ];
	        result.x0 = lt.x;
	        result.y0 = lt.y;
	        result.x1 = rb.x;
	        result.y1 = rb.y;
	        return result;
	    };
	
	    function isInifinity(val) {
	        return !isNaN(val) && !isFinite(val);
	    }
	
	    // If a markArea has one dim
	    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	        var otherDimIndex = 1 - dimIndex;
	        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);
	    }
	
	    function markAreaFilter(coordSys, item) {
	        var fromCoord = item.coord[0];
	        var toCoord = item.coord[1];
	        if (coordSys.type === 'cartesian2d') {
	            // In case
	            // {
	            //  markArea: {
	            //    data: [{ yAxis: 2 }]
	            //  }
	            // }
	            if (
	                fromCoord && toCoord &&
	                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)
	                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))
	            ) {
	                return true;
	            }
	        }
	        return markerHelper.dataFilter(coordSys, {
	                coord: fromCoord,
	                x: item.x0,
	                y: item.y0
	            })
	            || markerHelper.dataFilter(coordSys, {
	                coord: toCoord,
	                x: item.x1,
	                y: item.y1
	            });
	    }
	
	    // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']
	    function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var itemModel = data.getItemModel(idx);
	
	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [xPx, yPx];
	        }
	        else {
	            // Chart like bar may have there own marker positioning logic
	            if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    data.getValues(dims, idx)
	                );
	            }
	            else {
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                point = coordSys.dataToPoint([x, y], true);
	            }
	            if (coordSys.type === 'cartesian2d') {
	                var xAxis = coordSys.getAxis('x');
	                var yAxis = coordSys.getAxis('y');
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                if (isInifinity(x)) {
	                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);
	                }
	                else if (isInifinity(y)) {
	                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);
	                }
	            }
	
	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	        }
	
	        return point;
	    }
	
	    var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];
	
	    __webpack_require__(384).extend({
	
	        type: 'markArea',
	
	        updateLayout: function (markAreaModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var maModel = seriesModel.markAreaModel;
	                if (maModel) {
	                    var areaData = maModel.getData();
	                    areaData.each(function (idx) {
	                        var points = zrUtil.map(dimPermutations, function (dim) {
	                            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	                        });
	                        // Layout
	                        areaData.setItemLayout(idx, points);
	                        var el = areaData.getItemGraphicEl(idx);
	                        el.setShape('points', points);
	                    });
	                }
	            }, this);
	        },
	
	        renderSeries: function (seriesModel, maModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();
	
	            var areaGroupMap = this.markerGroupMap;
	            var polygonGroup = areaGroupMap[seriesName];
	            if (!polygonGroup) {
	                polygonGroup = areaGroupMap[seriesName] = {
	                    group: new graphic.Group()
	                };
	            }
	            this.group.add(polygonGroup.group);
	            polygonGroup.__keep = true;
	
	            var areaData = createList(coordSys, seriesModel, maModel);
	
	            // Line data for tooltip and formatter
	            maModel.setData(areaData);
	
	            // Update visual and layout of line
	            areaData.each(function (idx) {
	                // Layout
	                areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {
	                    return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	                }));
	
	                // Visual
	                areaData.setItemVisual(idx, {
	                    color: seriesData.getVisual('color')
	                });
	            });
	
	
	            areaData.diff(polygonGroup.__data)
	                .add(function (idx) {
	                    var polygon = new graphic.Polygon({
	                        shape: {
	                            points: areaData.getItemLayout(idx)
	                        }
	                    });
	                    areaData.setItemGraphicEl(idx, polygon);
	                    polygonGroup.group.add(polygon);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);
	                    graphic.updateProps(polygon, {
	                        shape: {
	                            points: areaData.getItemLayout(newIdx)
	                        }
	                    }, maModel, newIdx);
	                    polygonGroup.group.add(polygon);
	                    areaData.setItemGraphicEl(newIdx, polygon);
	                })
	                .remove(function (idx) {
	                    var polygon = polygonGroup.__data.getItemGraphicEl(idx);
	                    polygonGroup.group.remove(polygon);
	                })
	                .execute();
	
	            areaData.eachItemGraphicEl(function (polygon, idx) {
	                var itemModel = areaData.getItemModel(idx);
	                var labelModel = itemModel.getModel('label.normal');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                var color = areaData.getItemVisual(idx, 'color');
	                polygon.useStyle(
	                    zrUtil.defaults(
	                        itemModel.getModel('itemStyle.normal').getItemStyle(),
	                        {
	                            fill: colorUtil.modifyAlpha(color, 0.4),
	                            stroke: color
	                        }
	                    )
	                );
	
	                polygon.hoverStyle = itemModel.getModel('itemStyle.normal').getItemStyle();
	
	                var defaultValue = areaData.getName(idx) || '';
	                var textColor = color || polygon.style.fill;
	
	                if (labelModel.getShallow('show')) {
	                    graphic.setText(polygon.style, labelModel, textColor);
	                    polygon.style.text = zrUtil.retrieve(
	                        maModel.getFormattedLabel(idx, 'normal'),
	                        defaultValue
	                    );
	                }
	                else {
	                    polygon.style.text = '';
	                }
	
	                if (labelHoverModel.getShallow('show')) {
	                    graphic.setText(polygon.hoverStyle, labelHoverModel, textColor);
	                    polygon.hoverStyle.text = zrUtil.retrieve(
	                        maModel.getFormattedLabel(idx, 'emphasis'),
	                        defaultValue
	                    );
	                }
	                else {
	                    polygon.hoverStyle.text = '';
	                }
	
	                graphic.setHoverStyle(polygon, {});
	
	                polygon.dataModel = maModel;
	            });
	
	            polygonGroup.__data = areaData;
	
	            polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');
	        }
	    });
	
	    /**
	     * @inner
	     * @param {module:echarts/coord/*} coordSys
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, maModel) {
	
	        var coordDimsInfos;
	        var areaData;
	        var dims = ['x0', 'y0', 'x1', 'y1'];
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	            areaData = new List(zrUtil.map(dims, function (dim, idx) {
	                return {
	                    name: dim,
	                    type: coordDimsInfos[idx % 2].type
	                };
	            }), maModel);
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	            areaData = new List(coordDimsInfos, maModel);
	        }
	
	        var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(
	            markAreaTransform, seriesModel, coordSys, maModel
	        ));
	        if (coordSys) {
	            optData = zrUtil.filter(
	                optData, zrUtil.curry(markAreaFilter, coordSys)
	            );
	        }
	
	        var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {
	            return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];
	        } : function (item) {
	            return item.value;
	        };
	        areaData.initData(optData, null, dimValueGetter);
	        areaData.hasItemOption = true;
	        return areaData;
	    }


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */
	
	
	    var echarts = __webpack_require__(22);
	
	    echarts.registerPreprocessor(__webpack_require__(392));
	
	    __webpack_require__(393);
	    __webpack_require__(394);
	    __webpack_require__(395);
	    __webpack_require__(397);
	


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline preprocessor
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	
	    module.exports = function (option) {
	        var timelineOpt = option && option.timeline;
	
	        if (!zrUtil.isArray(timelineOpt)) {
	            timelineOpt = timelineOpt ? [timelineOpt] : [];
	        }
	
	        zrUtil.each(timelineOpt, function (opt) {
	            if (!opt) {
	                return;
	            }
	
	            compatibleEC2(opt);
	        });
	    };
	
	    function compatibleEC2(opt) {
	        var type = opt.type;
	
	        var ec2Types = {'number': 'value', 'time': 'time'};
	
	        // Compatible with ec2
	        if (ec2Types[type]) {
	            opt.axisType = ec2Types[type];
	            delete opt.type;
	        }
	
	        transferItem(opt);
	
	        if (has(opt, 'controlPosition')) {
	            var controlStyle = opt.controlStyle || (opt.controlStyle = {});
	            if (!has(controlStyle, 'position')) {
	                controlStyle.position = opt.controlPosition;
	            }
	            if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
	                controlStyle.show = false;
	                delete controlStyle.position;
	            }
	            delete opt.controlPosition;
	        }
	
	        zrUtil.each(opt.data || [], function (dataItem) {
	            if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
	                if (!has(dataItem, 'value') && has(dataItem, 'name')) {
	                    // In ec2, using name as value.
	                    dataItem.value = dataItem.name;
	                }
	                transferItem(dataItem);
	            }
	        });
	    }
	
	    function transferItem(opt) {
	        var itemStyle = opt.itemStyle || (opt.itemStyle = {});
	
	        var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});
	
	        // Transfer label out
	        var label = opt.label || (opt.label || {});
	        var labelNormal = label.normal || (label.normal = {});
	        var excludeLabelAttr = {normal: 1, emphasis: 1};
	
	        zrUtil.each(label, function (value, name) {
	            if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
	                labelNormal[name] = value;
	            }
	        });
	
	        if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
	            label.emphasis = itemStyleEmphasis.label;
	            delete itemStyleEmphasis.label;
	        }
	    }
	
	    function has(obj, attr) {
	        return obj.hasOwnProperty(attr);
	    }
	


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(40).registerSubTypeDefaulter('timeline', function () {
	        // Only slider now.
	        return 'slider';
	    });
	


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeilne action
	 */
	
	
	    var echarts = __webpack_require__(22);
	    var zrUtil = __webpack_require__(25);
	
	    echarts.registerAction(
	
	        {type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate'},
	
	        function (payload, ecModel) {
	
	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel && payload.currentIndex != null) {
	                timelineModel.setCurrentIndex(payload.currentIndex);
	
	                if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
	                    timelineModel.setPlayState(false);
	                }
	            }
	
	            // Set normalized currentIndex to payload.
	            ecModel.resetOption('timeline');
	
	            return zrUtil.defaults({
	                currentIndex: timelineModel.option.currentIndex
	            }, payload);
	        }
	    );
	
	    echarts.registerAction(
	
	        {type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update'},
	
	        function (payload, ecModel) {
	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel && payload.playState != null) {
	                timelineModel.setPlayState(payload.playState);
	            }
	        }
	    );
	


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Silder timeline model
	 */
	
	
	    var TimelineModel = __webpack_require__(396);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	
	    var SliderTimelineModel = TimelineModel.extend({
	
	        type: 'timeline.slider',
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	
	            backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色
	            borderColor: '#ccc',               // 时间轴边框颜色
	            borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）
	
	            orient: 'horizontal',              // 'vertical'
	            inverse: false,
	
	            tooltip: {                          // boolean or Object
	                trigger: 'item'                 // data item may also have tootip attr.
	            },
	
	            symbol: 'emptyCircle',
	            symbolSize: 10,
	
	            lineStyle: {
	                show: true,
	                width: 2,
	                color: '#304654'
	            },
	            label: {                            // 文本标签
	                position: 'auto',           // auto left right top bottom
	                                            // When using number, label position is not
	                                            // restricted by viewRect.
	                                            // positive: right/bottom, negative: left/top
	                normal: {
	                    show: true,
	                    interval: 'auto',
	                    rotate: 0,
	                    // formatter: null,
	                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                        color: '#304654'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                        color: '#c23531'
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    color: '#304654',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    color: '#c23531'
	                }
	            },
	
	            checkpointStyle: {
	                symbol: 'circle',
	                symbolSize: 13,
	                color: '#c23531',
	                borderWidth: 5,
	                borderColor: 'rgba(194,53,49, 0.5)',
	                animation: true,
	                animationDuration: 300,
	                animationEasing: 'quinticInOut'
	            },
	
	            controlStyle: {
	                show: true,
	                showPlayBtn: true,
	                showPrevBtn: true,
	                showNextBtn: true,
	                itemSize: 22,
	                itemGap: 12,
	                position: 'left',  // 'left' 'right' 'top' 'bottom'
	                playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line
	                stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line
	                nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line
	                prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line
	                normal: {
	                    color: '#304654',
	                    borderColor: '#304654',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    color: '#c23531',
	                    borderColor: '#c23531',
	                    borderWidth: 2
	                }
	            },
	            data: []
	        }
	
	    });
	
	    zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);
	
	    module.exports = SliderTimelineModel;


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline model
	 */
	
	
	    var ComponentModel = __webpack_require__(40);
	    var List = __webpack_require__(119);
	    var zrUtil = __webpack_require__(25);
	    var modelUtil = __webpack_require__(26);
	
	    var TimelineModel = ComponentModel.extend({
	
	        type: 'timeline',
	
	        layoutMode: 'box',
	
	        /**
	         * @protected
	         */
	        defaultOption: {
	
	            zlevel: 0,                  // 一级层叠
	            z: 4,                       // 二级层叠
	            show: true,
	
	            axisType: 'time',  // 模式是时间类型，支持 value, category
	
	            realtime: true,
	
	            left: '20%',
	            top: null,
	            right: '20%',
	            bottom: 0,
	            width: null,
	            height: 40,
	            padding: 5,
	
	            controlPosition: 'left',           // 'left' 'right' 'top' 'bottom' 'none'
	            autoPlay: false,
	            rewind: false,                     // 反向播放
	            loop: true,
	            playInterval: 2000,                // 播放时间间隔，单位ms
	
	            currentIndex: 0,
	
	            itemStyle: {
	                normal: {},
	                emphasis: {}
	            },
	            label: {
	                normal: {
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {}
	            },
	
	            data: []
	        },
	
	        /**
	         * @override
	         */
	        init: function (option, parentModel, ecModel) {
	
	            /**
	             * @private
	             * @type {module:echarts/data/List}
	             */
	            this._data;
	
	            /**
	             * @private
	             * @type {Array.<string>}
	             */
	            this._names;
	
	            this.mergeDefaultAndTheme(option, ecModel);
	            this._initData();
	        },
	
	        /**
	         * @override
	         */
	        mergeOption: function (option) {
	            TimelineModel.superApply(this, 'mergeOption', arguments);
	            this._initData();
	        },
	
	        /**
	         * @param {number} [currentIndex]
	         */
	        setCurrentIndex: function (currentIndex) {
	            if (currentIndex == null) {
	                currentIndex = this.option.currentIndex;
	            }
	            var count = this._data.count();
	
	            if (this.option.loop) {
	                currentIndex = (currentIndex % count + count) % count;
	            }
	            else {
	                currentIndex >= count && (currentIndex = count - 1);
	                currentIndex < 0 && (currentIndex = 0);
	            }
	
	            this.option.currentIndex = currentIndex;
	        },
	
	        /**
	         * @return {number} currentIndex
	         */
	        getCurrentIndex: function () {
	            return this.option.currentIndex;
	        },
	
	        /**
	         * @return {boolean}
	         */
	        isIndexMax: function () {
	            return this.getCurrentIndex() >= this._data.count() - 1;
	        },
	
	        /**
	         * @param {boolean} state true: play, false: stop
	         */
	        setPlayState: function (state) {
	            this.option.autoPlay = !!state;
	        },
	
	        /**
	         * @return {boolean} true: play, false: stop
	         */
	        getPlayState: function () {
	            return !!this.option.autoPlay;
	        },
	
	        /**
	         * @private
	         */
	        _initData: function () {
	            var thisOption = this.option;
	            var dataArr = thisOption.data || [];
	            var axisType = thisOption.axisType;
	            var names = this._names = [];
	
	            if (axisType === 'category') {
	                var idxArr = [];
	                zrUtil.each(dataArr, function (item, index) {
	                    var value = modelUtil.getDataItemValue(item);
	                    var newItem;
	
	                    if (zrUtil.isObject(item)) {
	                        newItem = zrUtil.clone(item);
	                        newItem.value = index;
	                    }
	                    else {
	                        newItem = index;
	                    }
	
	                    idxArr.push(newItem);
	
	                    if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
	                        value = '';
	                    }
	
	                    names.push(value + '');
	                });
	                dataArr = idxArr;
	            }
	
	            var dimType = ({category: 'ordinal', time: 'time'})[axisType] || 'number';
	
	            var data = this._data = new List([{name: 'value', type: dimType}], this);
	
	            data.initData(dataArr, names);
	        },
	
	        getData: function () {
	            return this._data;
	        },
	
	        /**
	         * @public
	         * @return {Array.<string>} categoreis
	         */
	        getCategories: function () {
	            if (this.get('axisType') === 'category') {
	                return this._names.slice();
	            }
	        }
	
	    });
	
	    module.exports = TimelineModel;


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Silder timeline view
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var layout = __webpack_require__(42);
	    var TimelineView = __webpack_require__(398);
	    var TimelineAxis = __webpack_require__(399);
	    var symbolUtil = __webpack_require__(128);
	    var axisHelper = __webpack_require__(136);
	    var BoundingRect = __webpack_require__(30);
	    var matrix = __webpack_require__(32);
	    var numberUtil = __webpack_require__(28);
	    var formatUtil = __webpack_require__(27);
	    var encodeHTML = formatUtil.encodeHTML;
	
	    var bind = zrUtil.bind;
	    var each = zrUtil.each;
	
	    var PI = Math.PI;
	
	    module.exports = TimelineView.extend({
	
	        type: 'timeline.slider',
	
	        init: function (ecModel, api) {
	
	            this.api = api;
	
	            /**
	             * @private
	             * @type {module:echarts/component/timeline/TimelineAxis}
	             */
	            this._axis;
	
	            /**
	             * @private
	             * @type {module:zrender/core/BoundingRect}
	             */
	            this._viewRect;
	
	            /**
	             * @type {number}
	             */
	            this._timer;
	
	            /**
	             * @type {module:zrende/Element}
	             */
	            this._currentPointer;
	
	            /**
	             * @type {module:zrender/container/Group}
	             */
	            this._mainGroup;
	
	            /**
	             * @type {module:zrender/container/Group}
	             */
	            this._labelGroup;
	        },
	
	        /**
	         * @override
	         */
	        render: function (timelineModel, ecModel, api, payload) {
	            this.model = timelineModel;
	            this.api = api;
	            this.ecModel = ecModel;
	
	            this.group.removeAll();
	
	            if (timelineModel.get('show', true)) {
	
	                var layoutInfo = this._layout(timelineModel, api);
	                var mainGroup = this._createGroup('mainGroup');
	                var labelGroup = this._createGroup('labelGroup');
	
	                /**
	                 * @private
	                 * @type {module:echarts/component/timeline/TimelineAxis}
	                 */
	                var axis = this._axis = this._createAxis(layoutInfo, timelineModel);
	
	                timelineModel.formatTooltip = function (dataIndex) {
	                    return encodeHTML(axis.scale.getLabel(dataIndex));
	                };
	
	                each(
	                    ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],
	                    function (name) {
	                        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
	                    },
	                    this
	                );
	
	                this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);
	                this._position(layoutInfo, timelineModel);
	            }
	
	            this._doPlayStop();
	        },
	
	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearTimer();
	            this.group.removeAll();
	        },
	
	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clearTimer();
	        },
	
	        _layout: function (timelineModel, api) {
	            var labelPosOpt = timelineModel.get('label.normal.position');
	            var orient = timelineModel.get('orient');
	            var viewRect = getViewRect(timelineModel, api);
	            // Auto label offset.
	            if (labelPosOpt == null || labelPosOpt === 'auto') {
	                labelPosOpt = orient === 'horizontal'
	                    ? ((viewRect.y + viewRect.height / 2) < api.getHeight() / 2 ? '-' : '+')
	                    : ((viewRect.x + viewRect.width / 2) < api.getWidth() / 2 ? '+' : '-');
	            }
	            else if (isNaN(labelPosOpt)) {
	                labelPosOpt = ({
	                    horizontal: {top: '-', bottom: '+'},
	                    vertical: {left: '-', right: '+'}
	                })[orient][labelPosOpt];
	            }
	
	            // FIXME
	            // 暂没有实现用户传入
	            // var labelAlign = timelineModel.get('label.normal.textStyle.align');
	            // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');
	            var labelAlignMap = {
	                horizontal: 'center',
	                vertical: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'left' : 'right'
	            };
	
	            var labelBaselineMap = {
	                horizontal: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'top' : 'bottom',
	                vertical: 'middle'
	            };
	            var rotationMap = {
	                horizontal: 0,
	                vertical: PI / 2
	            };
	
	            // Position
	            var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;
	
	            var controlModel = timelineModel.getModel('controlStyle');
	            var showControl = controlModel.get('show');
	            var controlSize = showControl ? controlModel.get('itemSize') : 0;
	            var controlGap = showControl ? controlModel.get('itemGap') : 0;
	            var sizePlusGap = controlSize + controlGap;
	
	            // Special label rotate.
	            var labelRotation = timelineModel.get('label.normal.rotate') || 0;
	            labelRotation = labelRotation * PI / 180; // To radian.
	
	            var playPosition;
	            var prevBtnPosition;
	            var nextBtnPosition;
	            var axisExtent;
	            var controlPosition = controlModel.get('position', true);
	            var showControl = controlModel.get('show', true);
	            var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
	            var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
	            var showNextBtn = showControl && controlModel.get('showNextBtn', true);
	            var xLeft = 0;
	            var xRight = mainLength;
	
	            // position[0] means left, position[1] means middle.
	            if (controlPosition === 'left' || controlPosition === 'bottom') {
	                showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
	                showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
	                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            }
	            else { // 'top' 'right'
	                showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	                showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
	                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            }
	            axisExtent = [xLeft, xRight];
	
	            if (timelineModel.get('inverse')) {
	                axisExtent.reverse();
	            }
	
	            return {
	                viewRect: viewRect,
	                mainLength: mainLength,
	                orient: orient,
	
	                rotation: rotationMap[orient],
	                labelRotation: labelRotation,
	                labelPosOpt: labelPosOpt,
	                labelAlign: labelAlignMap[orient],
	                labelBaseline: labelBaselineMap[orient],
	
	                // Based on mainGroup.
	                playPosition: playPosition,
	                prevBtnPosition: prevBtnPosition,
	                nextBtnPosition: nextBtnPosition,
	                axisExtent: axisExtent,
	
	                controlSize: controlSize,
	                controlGap: controlGap
	            };
	        },
	
	        _position: function (layoutInfo, timelineModel) {
	            // Position is be called finally, because bounding rect is needed for
	            // adapt content to fill viewRect (auto adapt offset).
	
	            // Timeline may be not all in the viewRect when 'offset' is specified
	            // as a number, because it is more appropriate that label aligns at
	            // 'offset' but not the other edge defined by viewRect.
	
	            var mainGroup = this._mainGroup;
	            var labelGroup = this._labelGroup;
	
	            var viewRect = layoutInfo.viewRect;
	            if (layoutInfo.orient === 'vertical') {
	                // transfrom to horizontal, inverse rotate by left-top point.
	                var m = matrix.create();
	                var rotateOriginX = viewRect.x;
	                var rotateOriginY = viewRect.y + viewRect.height;
	                matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
	                matrix.rotate(m, m, -PI / 2);
	                matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
	                viewRect = viewRect.clone();
	                viewRect.applyTransform(m);
	            }
	
	            var viewBound = getBound(viewRect);
	            var mainBound = getBound(mainGroup.getBoundingRect());
	            var labelBound = getBound(labelGroup.getBoundingRect());
	
	            var mainPosition = mainGroup.position;
	            var labelsPosition = labelGroup.position;
	
	            labelsPosition[0] = mainPosition[0] = viewBound[0][0];
	
	            var labelPosOpt = layoutInfo.labelPosOpt;
	
	            if (isNaN(labelPosOpt)) { // '+' or '-'
	                var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
	                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	                toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
	            }
	            else {
	                var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
	                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	                labelsPosition[1] = mainPosition[1] + labelPosOpt;
	            }
	
	            mainGroup.attr('position', mainPosition);
	            labelGroup.attr('position', labelsPosition);
	            mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;
	
	            setOrigin(mainGroup);
	            setOrigin(labelGroup);
	
	            function setOrigin(targetGroup) {
	                var pos = targetGroup.position;
	                targetGroup.origin = [
	                    viewBound[0][0] - pos[0],
	                    viewBound[1][0] - pos[1]
	                ];
	            }
	
	            function getBound(rect) {
	                // [[xmin, xmax], [ymin, ymax]]
	                return [
	                    [rect.x, rect.x + rect.width],
	                    [rect.y, rect.y + rect.height]
	                ];
	            }
	
	            function toBound(fromPos, from, to, dimIdx, boundIdx) {
	                fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
	            }
	        },
	
	        _createAxis: function (layoutInfo, timelineModel) {
	            var data = timelineModel.getData();
	            var axisType = timelineModel.get('axisType');
	
	            var scale = axisHelper.createScaleByModel(timelineModel, axisType);
	            var dataExtent = data.getDataExtent('value');
	            scale.setExtent(dataExtent[0], dataExtent[1]);
	            this._customizeScale(scale, data);
	            scale.niceTicks();
	
	            var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
	            axis.model = timelineModel;
	
	            return axis;
	        },
	
	        _customizeScale: function (scale, data) {
	
	            scale.getTicks = function () {
	                return data.mapArray(['value'], function (value) {
	                    return value;
	                });
	            };
	
	            scale.getTicksLabels = function () {
	                return zrUtil.map(this.getTicks(), scale.getLabel, scale);
	            };
	        },
	
	        _createGroup: function (name) {
	            var newGroup = this['_' + name] = new graphic.Group();
	            this.group.add(newGroup);
	            return newGroup;
	        },
	
	        _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {
	            var axisExtent = axis.getExtent();
	
	            if (!timelineModel.get('lineStyle.show')) {
	                return;
	            }
	
	            group.add(new graphic.Line({
	                shape: {
	                    x1: axisExtent[0], y1: 0,
	                    x2: axisExtent[1], y2: 0
	                },
	                style: zrUtil.extend(
	                    {lineCap: 'round'},
	                    timelineModel.getModel('lineStyle').getLineStyle()
	                ),
	                silent: true,
	                z2: 1
	            }));
	        },
	
	        /**
	         * @private
	         */
	        _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {
	            var data = timelineModel.getData();
	            var ticks = axis.scale.getTicks();
	
	            each(ticks, function (value, dataIndex) {
	
	                var tickCoord = axis.dataToCoord(value);
	                var itemModel = data.getItemModel(dataIndex);
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');
	                var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
	                var symbolOpt = {
	                    position: [tickCoord, 0],
	                    onclick: bind(this._changeTimeline, this, dataIndex)
	                };
	                var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
	                graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());
	
	                if (itemModel.get('tooltip')) {
	                    el.dataIndex = dataIndex;
	                    el.dataModel = timelineModel;
	                }
	                else {
	                    el.dataIndex = el.dataModel = null;
	                }
	
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {
	            var labelModel = timelineModel.getModel('label.normal');
	
	            if (!labelModel.get('show')) {
	                return;
	            }
	
	            var data = timelineModel.getData();
	            var ticks = axis.scale.getTicks();
	            var labels = axisHelper.getFormattedLabels(
	                axis, labelModel.get('formatter')
	            );
	            var labelInterval = axis.getLabelInterval();
	
	            each(ticks, function (tick, dataIndex) {
	                if (axis.isLabelIgnored(dataIndex, labelInterval)) {
	                    return;
	                }
	
	                var itemModel = data.getItemModel(dataIndex);
	                var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');
	                var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');
	                var tickCoord = axis.dataToCoord(tick);
	                var textEl = new graphic.Text({
	                    style: {
	                        text: labels[dataIndex],
	                        textAlign: layoutInfo.labelAlign,
	                        textVerticalAlign: layoutInfo.labelBaseline,
	                        textFont: itemTextStyleModel.getFont(),
	                        fill: itemTextStyleModel.getTextColor()
	                    },
	                    position: [tickCoord, 0],
	                    rotation: layoutInfo.labelRotation - layoutInfo.rotation,
	                    onclick: bind(this._changeTimeline, this, dataIndex),
	                    silent: false
	                });
	
	                group.add(textEl);
	                graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());
	
	            }, this);
	        },
	
	        /**
	         * @private
	         */
	        _renderControl: function (layoutInfo, group, axis, timelineModel) {
	            var controlSize = layoutInfo.controlSize;
	            var rotation = layoutInfo.rotation;
	
	            var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
	            var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
	            var rect = [0, -controlSize / 2, controlSize, controlSize];
	            var playState = timelineModel.getPlayState();
	            var inverse = timelineModel.get('inverse', true);
	
	            makeBtn(
	                layoutInfo.nextBtnPosition,
	                'controlStyle.nextIcon',
	                bind(this._changeTimeline, this, inverse ? '-' : '+')
	            );
	            makeBtn(
	                layoutInfo.prevBtnPosition,
	                'controlStyle.prevIcon',
	                bind(this._changeTimeline, this, inverse ? '+' : '-')
	            );
	            makeBtn(
	                layoutInfo.playPosition,
	                'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'),
	                bind(this._handlePlayClick, this, !playState),
	                true
	            );
	
	            function makeBtn(position, iconPath, onclick, willRotate) {
	                if (!position) {
	                    return;
	                }
	                var opt = {
	                    position: position,
	                    origin: [controlSize / 2, 0],
	                    rotation: willRotate ? -rotation : 0,
	                    rectHover: true,
	                    style: itemStyle,
	                    onclick: onclick
	                };
	                var btn = makeIcon(timelineModel, iconPath, rect, opt);
	                group.add(btn);
	                graphic.setHoverStyle(btn, hoverStyle);
	            }
	        },
	
	        _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {
	            var data = timelineModel.getData();
	            var currentIndex = timelineModel.getCurrentIndex();
	            var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
	            var me = this;
	
	            var callback = {
	                onCreate: function (pointer) {
	                    pointer.draggable = true;
	                    pointer.drift = bind(me._handlePointerDrag, me);
	                    pointer.ondragend = bind(me._handlePointerDragend, me);
	                    pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
	                },
	                onUpdate: function (pointer) {
	                    pointerMoveTo(pointer, currentIndex, axis, timelineModel);
	                }
	            };
	
	            // Reuse when exists, for animation and drag.
	            this._currentPointer = giveSymbol(
	                pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback
	            );
	        },
	
	        _handlePlayClick: function (nextState) {
	            this._clearTimer();
	            this.api.dispatchAction({
	                type: 'timelinePlayChange',
	                playState: nextState,
	                from: this.uid
	            });
	        },
	
	        _handlePointerDrag: function (dx, dy, e) {
	            this._clearTimer();
	            this._pointerChangeTimeline([e.offsetX, e.offsetY]);
	        },
	
	        _handlePointerDragend: function (e) {
	            this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
	        },
	
	        _pointerChangeTimeline: function (mousePos, trigger) {
	            var toCoord = this._toAxisCoord(mousePos)[0];
	
	            var axis = this._axis;
	            var axisExtent = numberUtil.asc(axis.getExtent().slice());
	
	            toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
	            toCoord < axisExtent[0] && (toCoord = axisExtent[0]);
	
	            this._currentPointer.position[0] = toCoord;
	            this._currentPointer.dirty();
	
	            var targetDataIndex = this._findNearestTick(toCoord);
	            var timelineModel = this.model;
	
	            if (trigger || (
	                targetDataIndex !== timelineModel.getCurrentIndex()
	                && timelineModel.get('realtime')
	            )) {
	                this._changeTimeline(targetDataIndex);
	            }
	        },
	
	        _doPlayStop: function () {
	            this._clearTimer();
	
	            if (this.model.getPlayState()) {
	                this._timer = setTimeout(
	                    bind(handleFrame, this),
	                    this.model.get('playInterval')
	                );
	            }
	
	            function handleFrame() {
	                // Do not cache
	                var timelineModel = this.model;
	                this._changeTimeline(
	                    timelineModel.getCurrentIndex()
	                    + (timelineModel.get('rewind', true) ? -1 : 1)
	                );
	            }
	        },
	
	        _toAxisCoord: function (vertex) {
	            var trans = this._mainGroup.getLocalTransform();
	            return graphic.applyTransform(vertex, trans, true);
	        },
	
	        _findNearestTick: function (axisCoord) {
	            var data = this.model.getData();
	            var dist = Infinity;
	            var targetDataIndex;
	            var axis = this._axis;
	
	            data.each(['value'], function (value, dataIndex) {
	                var coord = axis.dataToCoord(value);
	                var d = Math.abs(coord - axisCoord);
	                if (d < dist) {
	                    dist = d;
	                    targetDataIndex = dataIndex;
	                }
	            });
	
	            return targetDataIndex;
	        },
	
	        _clearTimer: function () {
	            if (this._timer) {
	                clearTimeout(this._timer);
	                this._timer = null;
	            }
	        },
	
	        _changeTimeline: function (nextIndex) {
	            var currentIndex = this.model.getCurrentIndex();
	
	            if (nextIndex === '+') {
	                nextIndex = currentIndex + 1;
	            }
	            else if (nextIndex === '-') {
	                nextIndex = currentIndex - 1;
	            }
	
	            this.api.dispatchAction({
	                type: 'timelineChange',
	                currentIndex: nextIndex,
	                from: this.uid
	            });
	        }
	
	    });
	
	    function getViewRect(model, api) {
	        return layout.getLayoutRect(
	            model.getBoxLayoutParams(),
	            {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            model.get('padding')
	        );
	    }
	
	    function makeIcon(timelineModel, objPath, rect, opts) {
	        var icon = graphic.makePath(
	            timelineModel.get(objPath).replace(/^path:\/\//, ''),
	            zrUtil.clone(opts || {}),
	            new BoundingRect(rect[0], rect[1], rect[2], rect[3]),
	            'center'
	        );
	
	        return icon;
	    }
	
	    /**
	     * Create symbol or update symbol
	     * opt: basic position and event handlers
	     */
	    function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
	        var color = itemStyleModel.get('color');
	
	        if (!symbol) {
	            var symbolType = hostModel.get('symbol');
	            symbol = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);
	            symbol.setStyle('strokeNoScale', true);
	            group.add(symbol);
	            callback && callback.onCreate(symbol);
	        }
	        else {
	            symbol.setColor(color);
	            group.add(symbol); // Group may be new, also need to add.
	            callback && callback.onUpdate(symbol);
	        }
	
	        // Style
	        var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);
	        symbol.setStyle(itemStyle);
	
	        // Transform and events.
	        opt = zrUtil.merge({
	            rectHover: true,
	            z2: 100
	        }, opt, true);
	
	        var symbolSize = hostModel.get('symbolSize');
	        symbolSize = symbolSize instanceof Array
	            ? symbolSize.slice()
	            : [+symbolSize, +symbolSize];
	        symbolSize[0] /= 2;
	        symbolSize[1] /= 2;
	        opt.scale = symbolSize;
	
	        var symbolOffset = hostModel.get('symbolOffset');
	        if (symbolOffset) {
	            var pos = opt.position = opt.position || [0, 0];
	            pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	            pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	        }
	
	        var symbolRotate = hostModel.get('symbolRotate');
	        opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	
	        symbol.attr(opt);
	
	        // FIXME
	        // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,
	        // getBoundingRect will return wrong result.
	        // (This is supposed to be resolved in zrender, but it is a little difficult to
	        // leverage performance and auto updateTransform)
	        // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.
	        symbol.updateTransform();
	
	        return symbol;
	    }
	
	    function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
	        if (pointer.dragging) {
	            return;
	        }
	
	        var pointerModel = timelineModel.getModel('checkpointStyle');
	        var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));
	
	        if (noAnimation || !pointerModel.get('animation', true)) {
	            pointer.attr({position: [toCoord, 0]});
	        }
	        else {
	            pointer.stopAnimation(true);
	            pointer.animateTo(
	                {position: [toCoord, 0]},
	                pointerModel.get('animationDuration', true),
	                pointerModel.get('animationEasing', true)
	            );
	        }
	    }
	


/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline view
	 */
	
	
	    // var zrUtil = require('zrender/lib/core/util');
	    // var graphic = require('../../util/graphic');
	    var ComponentView = __webpack_require__(50);
	
	    module.exports = ComponentView.extend({
	
	        type: 'timeline'
	    });
	


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var zrUtil = __webpack_require__(25);
	    var Axis = __webpack_require__(145);
	    var axisHelper = __webpack_require__(136);
	
	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var TimelineAxis = function (dim, scale, coordExtent, axisType) {
	
	        Axis.call(this, dim, scale, coordExtent);
	
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';
	
	        /**
	         * @private
	         * @type {number}
	         */
	        this._autoLabelInterval;
	
	        /**
	         * Axis model
	         * @param {module:echarts/component/TimelineModel}
	         */
	        this.model = null;
	    };
	
	    TimelineAxis.prototype = {
	
	        constructor: TimelineAxis,
	
	        /**
	         * @public
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var timelineModel = this.model;
	            var labelModel = timelineModel.getModel('label.normal');
	            var labelInterval = labelModel.get('interval');
	
	            if (labelInterval != null && labelInterval != 'auto') {
	                return labelInterval;
	            }
	
	            var labelInterval = this._autoLabelInterval;
	
	            if (!labelInterval) {
	                labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(
	                    zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),
	                    axisHelper.getFormattedLabels(this, labelModel.get('formatter')),
	                    labelModel.getModel('textStyle').getFont(),
	                    timelineModel.get('orient') === 'horizontal'
	                );
	            }
	
	            return labelInterval;
	        },
	
	        /**
	         * If label is ignored.
	         * Automatically used when axis is category and label can not be all shown
	         * @public
	         * @param  {number} idx
	         * @return {boolean}
	         */
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return ((typeof labelInterval === 'function')
	                    && !labelInterval(idx, this.scale.getLabel(idx)))
	                    || idx % (labelInterval + 1);
	            }
	        }
	
	    };
	
	    zrUtil.inherits(TimelineAxis, Axis);
	
	    module.exports = TimelineAxis;


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    __webpack_require__(401);
	    __webpack_require__(402);
	
	    __webpack_require__(403);
	    __webpack_require__(404);
	    __webpack_require__(405);
	    __webpack_require__(406);
	    __webpack_require__(411);


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var featureManager = __webpack_require__(348);
	    var zrUtil = __webpack_require__(25);
	
	    var ToolboxModel = __webpack_require__(22).extendComponentModel({
	
	        type: 'toolbox',
	
	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },
	
	        mergeDefaultAndTheme: function (option) {
	            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);
	
	            zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	                var Feature = featureManager.get(featureName);
	                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	            });
	        },
	
	        defaultOption: {
	
	            show: true,
	
	            z: 6,
	
	            zlevel: 0,
	
	            orient: 'horizontal',
	
	            left: 'right',
	
	            top: 'top',
	
	            // right
	            // bottom
	
	            backgroundColor: 'transparent',
	
	            borderColor: '#ccc',
	
	            borderWidth: 0,
	
	            padding: 5,
	
	            itemSize: 15,
	
	            itemGap: 8,
	
	            showTitle: true,
	
	            iconStyle: {
	                normal: {
	                    borderColor: '#666',
	                    color: 'none'
	                },
	                emphasis: {
	                    borderColor: '#3E98C5'
	                }
	            }
	            // textStyle: {},
	
	            // feature
	        }
	    });
	
	    module.exports = ToolboxModel;


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	
	    var featureManager = __webpack_require__(348);
	    var zrUtil = __webpack_require__(25);
	    var graphic = __webpack_require__(64);
	    var Model = __webpack_require__(33);
	    var DataDiffer = __webpack_require__(120);
	    var listComponentHelper = __webpack_require__(318);
	    var textContain = __webpack_require__(29);
	
	    module.exports = __webpack_require__(22).extendComponentView({
	
	        type: 'toolbox',
	
	        render: function (toolboxModel, ecModel, api, payload) {
	            var group = this.group;
	            group.removeAll();
	
	            if (!toolboxModel.get('show')) {
	                return;
	            }
	
	            var itemSize = +toolboxModel.get('itemSize');
	            var featureOpts = toolboxModel.get('feature') || {};
	            var features = this._features || (this._features = {});
	
	            var featureNames = [];
	            zrUtil.each(featureOpts, function (opt, name) {
	                featureNames.push(name);
	            });
	
	            (new DataDiffer(this._featureNames || [], featureNames))
	                .add(process)
	                .update(process)
	                .remove(zrUtil.curry(process, null))
	                .execute();
	
	            // Keep for diff.
	            this._featureNames = featureNames;
	
	            function process(newIndex, oldIndex) {
	                var featureName = featureNames[newIndex];
	                var oldName = featureNames[oldIndex];
	                var featureOpt = featureOpts[featureName];
	                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	                var feature;
	
	                if (featureName && !oldName) { // Create
	                    if (isUserFeatureName(featureName)) {
	                        feature = {
	                            model: featureModel,
	                            onclick: featureModel.option.onclick,
	                            featureName: featureName
	                        };
	                    }
	                    else {
	                        var Feature = featureManager.get(featureName);
	                        if (!Feature) {
	                            return;
	                        }
	                        feature = new Feature(featureModel, ecModel, api);
	                    }
	                    features[featureName] = feature;
	                }
	                else {
	                    feature = features[oldName];
	                    // If feature does not exsit.
	                    if (!feature) {
	                        return;
	                    }
	                    feature.model = featureModel;
	                    feature.ecModel = ecModel;
	                    feature.api = api;
	                }
	
	                if (!featureName && oldName) {
	                    feature.dispose && feature.dispose(ecModel, api);
	                    return;
	                }
	
	                if (!featureModel.get('show') || feature.unusable) {
	                    feature.remove && feature.remove(ecModel, api);
	                    return;
	                }
	
	                createIconPaths(featureModel, feature, featureName);
	
	                featureModel.setIconStatus = function (iconName, status) {
	                    var option = this.option;
	                    var iconPaths = this.iconPaths;
	                    option.iconStatus = option.iconStatus || {};
	                    option.iconStatus[iconName] = status;
	                    // FIXME
	                    iconPaths[iconName] && iconPaths[iconName].trigger(status);
	                };
	
	                if (feature.render) {
	                    feature.render(featureModel, ecModel, api, payload);
	                }
	            }
	
	            function createIconPaths(featureModel, feature, featureName) {
	                var iconStyleModel = featureModel.getModel('iconStyle');
	
	                // If one feature has mutiple icon. they are orginaized as
	                // {
	                //     icon: {
	                //         foo: '',
	                //         bar: ''
	                //     },
	                //     title: {
	                //         foo: '',
	                //         bar: ''
	                //     }
	                // }
	                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	                var titles = featureModel.get('title') || {};
	                if (typeof icons === 'string') {
	                    var icon = icons;
	                    var title = titles;
	                    icons = {};
	                    titles = {};
	                    icons[featureName] = icon;
	                    titles[featureName] = title;
	                }
	                var iconPaths = featureModel.iconPaths = {};
	                zrUtil.each(icons, function (icon, iconName) {
	                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
	                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	
	                    var style = {
	                        x: -itemSize / 2,
	                        y: -itemSize / 2,
	                        width: itemSize,
	                        height: itemSize
	                    };
	                    var path = icon.indexOf('image://') === 0
	                        ? (
	                            style.image = icon.slice(8),
	                            new graphic.Image({style: style})
	                        )
	                        : graphic.makePath(
	                            icon.replace('path://', ''),
	                            {
	                                style: normalStyle,
	                                hoverStyle: hoverStyle,
	                                rectHover: true
	                            },
	                            style,
	                            'center'
	                        );
	
	                    graphic.setHoverStyle(path);
	
	                    if (toolboxModel.get('showTitle')) {
	                        path.__title = titles[iconName];
	                        path.on('mouseover', function () {
	                                // Should not reuse above hoverStyle, which might be modified.
	                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	                                path.setStyle({
	                                    text: titles[iconName],
	                                    textPosition: hoverStyle.textPosition || 'bottom',
	                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	                                    textAlign: hoverStyle.textAlign || 'center'
	                                });
	                            })
	                            .on('mouseout', function () {
	                                path.setStyle({
	                                    textFill: null
	                                });
	                            });
	                    }
	                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');
	
	                    group.add(path);
	                    path.on('click', zrUtil.bind(
	                        feature.onclick, feature, ecModel, api, iconName
	                    ));
	
	                    iconPaths[iconName] = path;
	                });
	            }
	
	            listComponentHelper.layout(group, toolboxModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, toolboxModel);
	
	            // Adjust icon title positions to avoid them out of screen
	            group.eachChild(function (icon) {
	                var titleText = icon.__title;
	                var hoverStyle = icon.hoverStyle;
	                // May be background element
	                if (hoverStyle && titleText) {
	                    var rect = textContain.getBoundingRect(
	                        titleText, hoverStyle.font
	                    );
	                    var offsetX = icon.position[0] + group.position[0];
	                    var offsetY = icon.position[1] + group.position[1] + itemSize;
	
	                    var needPutOnTop = false;
	                    if (offsetY + rect.height > api.getHeight()) {
	                        hoverStyle.textPosition = 'top';
	                        needPutOnTop = true;
	                    }
	                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);
	                    if (offsetX + rect.width /  2 > api.getWidth()) {
	                        hoverStyle.textPosition = ['100%', topOffset];
	                        hoverStyle.textAlign = 'right';
	                    }
	                    else if (offsetX - rect.width / 2 < 0) {
	                        hoverStyle.textPosition = [0, topOffset];
	                        hoverStyle.textAlign = 'left';
	                    }
	                }
	            });
	        },
	
	        updateView: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	            });
	        },
	
	        updateLayout: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	            });
	        },
	
	        remove: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.remove && feature.remove(ecModel, api);
	            });
	            this.group.removeAll();
	        },
	
	        dispose: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.dispose && feature.dispose(ecModel, api);
	            });
	        }
	    });
	
	    function isUserFeatureName(featureName) {
	        return featureName.indexOf('my') === 0;
	    }
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(310)))

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    var env = __webpack_require__(23);
	
	    function SaveAsImage (model) {
	        this.model = model;
	    }
	
	    SaveAsImage.defaultOption = {
	        show: true,
	        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	        title: '保存为图片',
	        type: 'png',
	        // Default use option.backgroundColor
	        // backgroundColor: '#fff',
	        name: '',
	        excludeComponents: ['toolbox'],
	        pixelRatio: 1,
	        lang: ['右键另存为图片']
	    };
	
	    SaveAsImage.prototype.unusable = !env.canvasSupported;
	
	    var proto = SaveAsImage.prototype;
	
	    proto.onclick = function (ecModel, api) {
	        var model = this.model;
	        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	        var $a = document.createElement('a');
	        var type = model.get('type', true) || 'png';
	        $a.download = title + '.' + type;
	        $a.target = '_blank';
	        var url = api.getConnectedDataURL({
	            type: type,
	            backgroundColor: model.get('backgroundColor', true)
	                || ecModel.get('backgroundColor') || '#fff',
	            excludeComponents: model.get('excludeComponents'),
	            pixelRatio: model.get('pixelRatio')
	        });
	        $a.href = url;
	        // Chrome and Firefox
	        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {
	            var evt = new MouseEvent('click', {
	                view: window,
	                bubbles: true,
	                cancelable: false
	            });
	            $a.dispatchEvent(evt);
	        }
	        // IE
	        else {
	            var lang = model.get('lang');
	            var html = ''
	                + '<body style="margin:0;">'
	                + '<img src="' + url + '" style="max-width:100%;" title="' + ((lang && lang[0]) || '') + '" />'
	                + '</body>';
	            var tab = window.open();
	            tab.document.write(html);
	        }
	    };
	
	    __webpack_require__(348).register(
	        'saveAsImage', SaveAsImage
	    );
	
	    module.exports = SaveAsImage;


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	
	    function MagicType(model) {
	        this.model = model;
	    }
	
	    MagicType.defaultOption = {
	        show: true,
	        type: [],
	        // Icon group
	        icon: {
	            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line
	            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	        },
	        title: {
	            line: '切换为折线图',
	            bar: '切换为柱状图',
	            stack: '切换为堆叠',
	            tiled: '切换为平铺'
	        },
	        option: {},
	        seriesIndex: {}
	    };
	
	    var proto = MagicType.prototype;
	
	    proto.getIcons = function () {
	        var model = this.model;
	        var availableIcons = model.get('icon');
	        var icons = {};
	        zrUtil.each(model.get('type'), function (type) {
	            if (availableIcons[type]) {
	                icons[type] = availableIcons[type];
	            }
	        });
	        return icons;
	    };
	
	    var seriesOptGenreator = {
	        'line': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    type: 'line',
	                    // Preserve data related option
	                    data: seriesModel.get('data'),
	                    stack: seriesModel.get('stack'),
	                    markPoint: seriesModel.get('markPoint'),
	                    markLine: seriesModel.get('markLine')
	                }, model.get('option.line') || {}, true);
	            }
	        },
	        'bar': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    type: 'bar',
	                    // Preserve data related option
	                    data: seriesModel.get('data'),
	                    stack: seriesModel.get('stack'),
	                    markPoint: seriesModel.get('markPoint'),
	                    markLine: seriesModel.get('markLine')
	                }, model.get('option.bar') || {}, true);
	            }
	        },
	        'stack': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line' || seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    stack: '__ec_magicType_stack__'
	                }, model.get('option.stack') || {}, true);
	            }
	        },
	        'tiled': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line' || seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    stack: ''
	                }, model.get('option.tiled') || {}, true);
	            }
	        }
	    };
	
	    var radioTypes = [
	        ['line', 'bar'],
	        ['stack', 'tiled']
	    ];
	
	    proto.onclick = function (ecModel, api, type) {
	        var model = this.model;
	        var seriesIndex = model.get('seriesIndex.' + type);
	        // Not supported magicType
	        if (!seriesOptGenreator[type]) {
	            return;
	        }
	        var newOption = {
	            series: []
	        };
	        var generateNewSeriesTypes = function (seriesModel) {
	            var seriesType = seriesModel.subType;
	            var seriesId = seriesModel.id;
	            var newSeriesOpt = seriesOptGenreator[type](
	                seriesType, seriesId, seriesModel, model
	            );
	            if (newSeriesOpt) {
	                // PENDING If merge original option?
	                zrUtil.defaults(newSeriesOpt, seriesModel.option);
	                newOption.series.push(newSeriesOpt);
	            }
	            // Modify boundaryGap
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	                if (categoryAxis) {
	                    var axisDim = categoryAxis.dim;
	                    var axisType = axisDim + 'Axis';
	                    var axisModel = ecModel.queryComponents({
	                        mainType: axisType,
	                        index: seriesModel.get(name + 'Index'),
	                        id: seriesModel.get(name + 'Id')
	                    })[0];
	                    var axisIndex = axisModel.componentIndex;
	
	                    newOption[axisType] = newOption[axisType] || [];
	                    for (var i = 0; i <= axisIndex; i++) {
	                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
	                    }
	                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;
	                }
	            }
	        };
	
	        zrUtil.each(radioTypes, function (radio) {
	            if (zrUtil.indexOf(radio, type) >= 0) {
	                zrUtil.each(radio, function (item) {
	                    model.setIconStatus(item, 'normal');
	                });
	            }
	        });
	
	        model.setIconStatus(type, 'emphasis');
	
	        ecModel.eachComponent(
	            {
	                mainType: 'series',
	                query: seriesIndex == null ? null : {
	                    seriesIndex: seriesIndex
	                }
	            }, generateNewSeriesTypes
	        );
	        api.dispatchAction({
	            type: 'changeMagicType',
	            currentType: type,
	            newOption: newOption
	        });
	    };
	
	    var echarts = __webpack_require__(22);
	    echarts.registerAction({
	        type: 'changeMagicType',
	        event: 'magicTypeChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        ecModel.mergeOption(payload.newOption);
	    });
	
	    __webpack_require__(348).register('magicType', MagicType);
	
	    module.exports = MagicType;


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/toolbox/feature/DataView
	 */
	
	
	
	    var zrUtil = __webpack_require__(25);
	    var eventTool = __webpack_require__(109);
	
	
	    var BLOCK_SPLITER = new Array(60).join('-');
	    var ITEM_SPLITER = '\t';
	    /**
	     * Group series into two types
	     *  1. on category axis, like line, bar
	     *  2. others, like scatter, pie
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object}
	     * @inner
	     */
	    function groupSeries(ecModel) {
	        var seriesGroupByCategoryAxis = {};
	        var otherSeries = [];
	        var meta = [];
	        ecModel.eachRawSeries(function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	
	            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	                var baseAxis = coordSys.getBaseAxis();
	                if (baseAxis.type === 'category') {
	                    var key = baseAxis.dim + '_' + baseAxis.index;
	                    if (!seriesGroupByCategoryAxis[key]) {
	                        seriesGroupByCategoryAxis[key] = {
	                            categoryAxis: baseAxis,
	                            valueAxis: coordSys.getOtherAxis(baseAxis),
	                            series: []
	                        };
	                        meta.push({
	                            axisDim: baseAxis.dim,
	                            axisIndex: baseAxis.index
	                        });
	                    }
	                    seriesGroupByCategoryAxis[key].series.push(seriesModel);
	                }
	                else {
	                    otherSeries.push(seriesModel);
	                }
	            }
	            else {
	                otherSeries.push(seriesModel);
	            }
	        });
	
	        return {
	            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	            other: otherSeries,
	            meta: meta
	        };
	    }
	
	    /**
	     * Assemble content of series on cateogory axis
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleSeriesWithCategoryAxis(series) {
	        var tables = [];
	        zrUtil.each(series, function (group, key) {
	            var categoryAxis = group.categoryAxis;
	            var valueAxis = group.valueAxis;
	            var valueAxisDim = valueAxis.dim;
	
	            var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	                return series.name;
	            }));
	            var columns = [categoryAxis.model.getCategories()];
	            zrUtil.each(group.series, function (series) {
	                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	                    return val;
	                }));
	            });
	            // Assemble table content
	            var lines = [headers.join(ITEM_SPLITER)];
	            for (var i = 0; i < columns[0].length; i++) {
	                var items = [];
	                for (var j = 0; j < columns.length; j++) {
	                    items.push(columns[j][i]);
	                }
	                lines.push(items.join(ITEM_SPLITER));
	            }
	            tables.push(lines.join('\n'));
	        });
	        return tables.join('\n\n' +  BLOCK_SPLITER + '\n\n');
	    }
	
	    /**
	     * Assemble content of other series
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleOtherSeries(series) {
	        return zrUtil.map(series, function (series) {
	            var data = series.getRawData();
	            var lines = [series.name];
	            var vals = [];
	            data.each(data.dimensions, function () {
	                var argLen = arguments.length;
	                var dataIndex = arguments[argLen - 1];
	                var name = data.getName(dataIndex);
	                for (var i = 0; i < argLen - 1; i++) {
	                    vals[i] = arguments[i];
	                }
	                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));
	            });
	            return lines.join('\n');
	        }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	    }
	
	    /**
	     * @param {module:echarts/model/Global}
	     * @return {string}
	     * @inner
	     */
	    function getContentFromModel(ecModel) {
	
	        var result = groupSeries(ecModel);
	
	        return {
	            value: zrUtil.filter([
	                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),
	                    assembleOtherSeries(result.other)
	                ], function (str) {
	                    return str.replace(/[\n\t\s]/g, '');
	                }).join('\n\n' + BLOCK_SPLITER + '\n\n'),
	
	            meta: result.meta
	        };
	    }
	
	
	    function trim(str) {
	        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	    }
	    /**
	     * If a block is tsv format
	     */
	    function isTSVFormat(block) {
	        // Simple method to find out if a block is tsv format
	        var firstLine = block.slice(0, block.indexOf('\n'));
	        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	            return true;
	        }
	    }
	
	    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	    /**
	     * @param {string} tsv
	     * @return {Array.<Object>}
	     */
	    function parseTSVContents(tsv) {
	        var tsvLines = tsv.split(/\n+/g);
	        var headers = trim(tsvLines.shift()).split(itemSplitRegex);
	
	        var categories = [];
	        var series = zrUtil.map(headers, function (header) {
	            return {
	                name: header,
	                data: []
	            };
	        });
	        for (var i = 0; i < tsvLines.length; i++) {
	            var items = trim(tsvLines[i]).split(itemSplitRegex);
	            categories.push(items.shift());
	            for (var j = 0; j < items.length; j++) {
	                series[j] && (series[j].data[i] = items[j]);
	            }
	        }
	        return {
	            series: series,
	            categories: categories
	        };
	    }
	
	    /**
	     * @param {string} str
	     * @return {Array.<Object>}
	     * @inner
	     */
	    function parseListContents(str) {
	        var lines = str.split(/\n+/g);
	        var seriesName = trim(lines.shift());
	
	        var data = [];
	        for (var i = 0; i < lines.length; i++) {
	            var items = trim(lines[i]).split(itemSplitRegex);
	            var name = '';
	            var value;
	            var hasName = false;
	            if (isNaN(items[0])) { // First item is name
	                hasName = true;
	                name = items[0];
	                items = items.slice(1);
	                data[i] = {
	                    name: name,
	                    value: []
	                };
	                value = data[i].value;
	            }
	            else {
	                value = data[i] = [];
	            }
	            for (var j = 0; j < items.length; j++) {
	                value.push(+items[j]);
	            }
	            if (value.length === 1) {
	                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);
	            }
	        }
	
	        return {
	            name: seriesName,
	            data: data
	        };
	    }
	
	    /**
	     * @param {string} str
	     * @param {Array.<Object>} blockMetaList
	     * @return {Object}
	     * @inner
	     */
	    function parseContents(str, blockMetaList) {
	        var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	        var newOption = {
	            series: []
	        };
	        zrUtil.each(blocks, function (block, idx) {
	            if (isTSVFormat(block)) {
	                var result = parseTSVContents(block);
	                var blockMeta = blockMetaList[idx];
	                var axisKey = blockMeta.axisDim + 'Axis';
	
	                if (blockMeta) {
	                    newOption[axisKey] = newOption[axisKey] || [];
	                    newOption[axisKey][blockMeta.axisIndex] = {
	                        data: result.categories
	                    };
	                    newOption.series = newOption.series.concat(result.series);
	                }
	            }
	            else {
	                var result = parseListContents(block);
	                newOption.series.push(result);
	            }
	        });
	        return newOption;
	    }
	
	    /**
	     * @alias {module:echarts/component/toolbox/feature/DataView}
	     * @constructor
	     * @param {module:echarts/model/Model} model
	     */
	    function DataView(model) {
	
	        this._dom = null;
	
	        this.model = model;
	    }
	
	    DataView.defaultOption = {
	        show: true,
	        readOnly: false,
	        optionToContent: null,
	        contentToOption: null,
	
	        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	        title: '数据视图',
	        lang: ['数据视图', '关闭', '刷新'],
	        backgroundColor: '#fff',
	        textColor: '#000',
	        textareaColor: '#fff',
	        textareaBorderColor: '#333',
	        buttonColor: '#c23531',
	        buttonTextColor: '#fff'
	    };
	
	    DataView.prototype.onclick = function (ecModel, api) {
	        var container = api.getDom();
	        var model = this.model;
	        if (this._dom) {
	            container.removeChild(this._dom);
	        }
	        var root = document.createElement('div');
	        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	        root.style.backgroundColor = model.get('backgroundColor') || '#fff';
	
	        // Create elements
	        var header = document.createElement('h4');
	        var lang = model.get('lang') || [];
	        header.innerHTML = lang[0] || model.get('title');
	        header.style.cssText = 'margin: 10px 20px;';
	        header.style.color = model.get('textColor');
	
	        var viewMain = document.createElement('div');
	        var textarea = document.createElement('textarea');
	        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';
	
	        var optionToContent = model.get('optionToContent');
	        var contentToOption = model.get('contentToOption');
	        var result = getContentFromModel(ecModel);
	        if (typeof optionToContent === 'function') {
	            var htmlOrDom = optionToContent(api.getOption());
	            if (typeof htmlOrDom === 'string') {
	                viewMain.innerHTML = htmlOrDom;
	            }
	            else if (zrUtil.isDom(htmlOrDom)) {
	                viewMain.appendChild(htmlOrDom);
	            }
	        }
	        else {
	            // Use default textarea
	            viewMain.appendChild(textarea);
	            textarea.readOnly = model.get('readOnly');
	            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	            textarea.style.color = model.get('textColor');
	            textarea.style.borderColor = model.get('textareaBorderColor');
	            textarea.style.backgroundColor = model.get('textareaColor');
	            textarea.value = result.value;
	        }
	
	        var blockMetaList = result.meta;
	
	        var buttonContainer = document.createElement('div');
	        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
	
	        var buttonStyle = 'float:right;margin-right:20px;border:none;'
	            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	        var closeButton = document.createElement('div');
	        var refreshButton = document.createElement('div');
	
	        buttonStyle += ';background-color:' + model.get('buttonColor');
	        buttonStyle += ';color:' + model.get('buttonTextColor');
	
	        var self = this;
	
	        function close() {
	            container.removeChild(root);
	            self._dom = null;
	        }
	        eventTool.addEventListener(closeButton, 'click', close);
	
	        eventTool.addEventListener(refreshButton, 'click', function () {
	            var newOption;
	            try {
	                if (typeof contentToOption === 'function') {
	                    newOption = contentToOption(viewMain, api.getOption());
	                }
	                else {
	                    newOption = parseContents(textarea.value, blockMetaList);
	                }
	            }
	            catch (e) {
	                close();
	                throw new Error('Data view format error ' + e);
	            }
	            if (newOption) {
	                api.dispatchAction({
	                    type: 'changeDataView',
	                    newOption: newOption
	                });
	            }
	
	            close();
	        });
	
	        closeButton.innerHTML = lang[1];
	        refreshButton.innerHTML = lang[2];
	        refreshButton.style.cssText = buttonStyle;
	        closeButton.style.cssText = buttonStyle;
	
	        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	        buttonContainer.appendChild(closeButton);
	
	        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
	        eventTool.addEventListener(textarea, 'keydown', function (e) {
	            if ((e.keyCode || e.which) === 9) {
	                // get caret position/selection
	                var val = this.value;
	                var start = this.selectionStart;
	                var end = this.selectionEnd;
	
	                // set textarea value to: text before caret + tab + text after caret
	                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);
	
	                // put caret at right position again
	                this.selectionStart = this.selectionEnd = start + 1;
	
	                // prevent the focus lose
	                eventTool.stop(e);
	            }
	        });
	
	        root.appendChild(header);
	        root.appendChild(viewMain);
	        root.appendChild(buttonContainer);
	
	        viewMain.style.height = (container.clientHeight - 80) + 'px';
	
	        container.appendChild(root);
	        this._dom = root;
	    };
	
	    DataView.prototype.remove = function (ecModel, api) {
	        this._dom && api.getDom().removeChild(this._dom);
	    };
	
	    DataView.prototype.dispose = function (ecModel, api) {
	        this.remove(ecModel, api);
	    };
	
	    /**
	     * @inner
	     */
	    function tryMergeDataOption(newData, originalData) {
	        return zrUtil.map(newData, function (newVal, idx) {
	            var original = originalData && originalData[idx];
	            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	                    newVal = newVal.value;
	                }
	                // Original data has option
	                return zrUtil.defaults({
	                    value: newVal
	                }, original);
	            }
	            else {
	                return newVal;
	            }
	        });
	    }
	
	    __webpack_require__(348).register('dataView', DataView);
	
	    __webpack_require__(22).registerAction({
	        type: 'changeDataView',
	        event: 'dataViewChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        var newSeriesOptList = [];
	        zrUtil.each(payload.newOption.series, function (seriesOpt) {
	            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
	            if (!seriesModel) {
	                // New created series
	                // Geuss the series type
	                newSeriesOptList.push(zrUtil.extend({
	                    // Default is scatter
	                    type: 'scatter'
	                }, seriesOpt));
	            }
	            else {
	                var originalData = seriesModel.get('data');
	                newSeriesOptList.push({
	                    name: seriesOpt.name,
	                    data: tryMergeDataOption(seriesOpt.data, originalData)
	                });
	            }
	        });
	
	        ecModel.mergeOption(zrUtil.defaults({
	            series: newSeriesOptList
	        }, payload.newOption));
	    });
	
	    module.exports = DataView;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var zrUtil = __webpack_require__(25);
	    var BrushController = __webpack_require__(257);
	    var brushHelper = __webpack_require__(343);
	    var history = __webpack_require__(407);
	
	    var each = zrUtil.each;
	
	    // Use dataZoomSelect
	    __webpack_require__(408);
	
	    // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
	    var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';
	
	    function DataZoom(model, ecModel, api) {
	
	        /**
	         * @private
	         * @type {module:echarts/component/helper/BrushController}
	         */
	        (this._brushController = new BrushController(api.getZr()))
	            .on('brush', zrUtil.bind(this._onBrush, this))
	            .mount();
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._isZoomActive;
	    }
	
	    DataZoom.defaultOption = {
	        show: true,
	        // Icon group
	        icon: {
	            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	        },
	        title: {
	            zoom: '区域缩放',
	            back: '区域缩放还原'
	        }
	    };
	
	    var proto = DataZoom.prototype;
	
	    proto.render = function (featureModel, ecModel, api, payload) {
	        this.model = featureModel;
	        this.ecModel = ecModel;
	        this.api = api;
	
	        updateZoomBtnStatus(featureModel, ecModel, this, payload);
	        updateBackBtnStatus(featureModel, ecModel);
	    };
	
	    proto.onclick = function (ecModel, api, type) {
	        handlers[type].call(this);
	    };
	
	    proto.remove = function (ecModel, api) {
	        this._brushController.unmount();
	    };
	
	    proto.dispose = function (ecModel, api) {
	        this._brushController.dispose();
	    };
	
	    /**
	     * @private
	     */
	    var handlers = {
	
	        zoom: function () {
	            var nextActive = !this._isZoomActive;
	
	            this.api.dispatchAction({
	                type: 'takeGlobalCursor',
	                key: 'dataZoomSelect',
	                dataZoomSelectActive: nextActive
	            });
	        },
	
	        back: function () {
	            this._dispatchZoomAction(history.pop(this.ecModel));
	        }
	    };
	
	    /**
	     * @private
	     */
	    proto._onBrush = function (areas, opt) {
	        if (!opt.isEnd || !areas.length) {
	            return;
	        }
	        var snapshot = {};
	        var ecModel = this.ecModel;
	
	        this._brushController.updateCovers([]); // remove cover
	
	        var coordInfoList = brushHelper.makeCoordInfoList(
	            retrieveAxisSetting(this.model.option), ecModel
	        );
	        var rangesCoordInfoList = [];
	        brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);
	
	        var area = areas[0]; // dataZoom can not multiple area.
	        var coordInfo = rangesCoordInfoList[0];
	        var coordRange = area.coordRange;
	        var brushType = area.brushType;
	
	        if (coordInfo && coordRange) {
	            if (brushType === 'rect') {
	                setBatch('xAxis', coordRange[0], coordInfo);
	                setBatch('yAxis', coordRange[1], coordInfo);
	            }
	            else {
	                var axisNames = {lineX: 'xAxis', lineY: 'yAxis'};
	                setBatch(axisNames[brushType], coordRange, coordInfo);
	            }
	        }
	
	        history.push(ecModel, snapshot);
	
	        this._dispatchZoomAction(snapshot);
	
	        function setBatch(axisName, minMax, coordInfo) {
	            var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);
	            if (dataZoomModel) {
	                snapshot[dataZoomModel.id] = {
	                    dataZoomId: dataZoomModel.id,
	                    startValue: minMax[0],
	                    endValue: minMax[1]
	                };
	            }
	        }
	
	        function findDataZoom(axisName, axisModel, ecModel) {
	            var dataZoomModel;
	            ecModel.eachComponent(
	                {mainType: 'dataZoom', subType: 'select'},
	                function (dzModel, dataZoomIndex) {
	                    var axisIndex = dzModel.get(axisName + 'Index');
	                    if (axisIndex != null
	                        && ecModel.getComponent(axisName, axisIndex) === axisModel
	                    ) {
	                        dataZoomModel = dzModel;
	                    }
	                }
	            );
	            return dataZoomModel;
	        }
	    };
	
	    /**
	     * @private
	     */
	    proto._dispatchZoomAction = function (snapshot) {
	        var batch = [];
	
	        // Convert from hash map to array.
	        each(snapshot, function (batchItem, dataZoomId) {
	            batch.push(zrUtil.clone(batchItem));
	        });
	
	        batch.length && this.api.dispatchAction({
	            type: 'dataZoom',
	            from: this.uid,
	            batch: batch
	        });
	    };
	
	    function retrieveAxisSetting(option) {
	        var setting = {};
	        // Compatible with previous setting: null => all axis, false => no axis.
	        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {
	            setting[name] = option[name];
	            setting[name] == null && (setting[name] = 'all');
	            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	        });
	        return setting;
	    }
	
	    function updateBackBtnStatus(featureModel, ecModel) {
	        featureModel.setIconStatus(
	            'back',
	            history.count(ecModel) > 1 ? 'emphasis' : 'normal'
	        );
	    }
	
	    function updateZoomBtnStatus(featureModel, ecModel, view, payload) {
	        var zoomActive = view._isZoomActive;
	
	        if (payload && payload.type === 'takeGlobalCursor') {
	            zoomActive = payload.key === 'dataZoomSelect'
	                ? payload.dataZoomSelectActive : false;
	        }
	
	        view._isZoomActive = zoomActive;
	
	        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');
	
	        var coordInfoList = brushHelper.makeCoordInfoList(
	            retrieveAxisSetting(featureModel.option), ecModel
	        );
	        var brushType = (coordInfoList.xAxisHas && !coordInfoList.yAxisHas)
	            ? 'lineX'
	            : (!coordInfoList.xAxisHas && coordInfoList.yAxisHas)
	            ? 'lineY'
	            : 'rect';
	
	        view._brushController
	            .setPanels(brushHelper.makePanelOpts(coordInfoList))
	            .enableBrush(
	                zoomActive
	                ? {
	                    brushType: brushType,
	                    brushStyle: { // FIXME user customized?
	                        lineWidth: 0,
	                        // stroke: '#333',
	                        fill: 'rgba(0,0,0,0.2)'
	                    }
	                }
	                : false
	            );
	    }
	
	
	    __webpack_require__(348).register('dataZoom', DataZoom);
	
	
	    // Create special dataZoom option for select
	    __webpack_require__(22).registerPreprocessor(function (option) {
	        if (!option) {
	            return;
	        }
	
	        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
	        if (!zrUtil.isArray(dataZoomOpts)) {
	            option.dataZoom = dataZoomOpts = [dataZoomOpts];
	        }
	
	        var toolboxOpt = option.toolbox;
	        if (toolboxOpt) {
	            // Assume there is only one toolbox
	            if (zrUtil.isArray(toolboxOpt)) {
	                toolboxOpt = toolboxOpt[0];
	            }
	
	            if (toolboxOpt && toolboxOpt.feature) {
	                var dataZoomOpt = toolboxOpt.feature.dataZoom;
	                addForAxis('xAxis', dataZoomOpt);
	                addForAxis('yAxis', dataZoomOpt);
	            }
	        }
	
	        function addForAxis(axisName, dataZoomOpt) {
	            if (!dataZoomOpt) {
	                return;
	            }
	
	            // Try not to modify model, because it is not merged yet.
	            var axisIndicesName = axisName + 'Index';
	            var givenAxisIndices = dataZoomOpt[axisIndicesName];
	            if (givenAxisIndices != null
	                && givenAxisIndices != 'all'
	                && !zrUtil.isArray(givenAxisIndices)
	            ) {
	                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];
	            }
	
	            forEachComponent(axisName, function (axisOpt, axisIndex) {
	                if (givenAxisIndices != null
	                    && givenAxisIndices != 'all'
	                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1
	                ) {
	                    return;
	                }
	                var newOpt = {
	                    type: 'select',
	                    $fromToolbox: true,
	                    // Id for merge mapping.
	                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	                };
	                // FIXME
	                // Only support one axis now.
	                newOpt[axisIndicesName] = axisIndex;
	                dataZoomOpts.push(newOpt);
	            });
	        }
	
	        function forEachComponent(mainType, cb) {
	            var opts = option[mainType];
	            if (!zrUtil.isArray(opts)) {
	                opts = opts ? [opts] : [];
	            }
	            each(opts, cb);
	        }
	    });
	
	    module.exports = DataZoom;


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file History manager.
	 */
	
	
	    var zrUtil = __webpack_require__(25);
	    var each = zrUtil.each;
	
	    var ATTR = '\0_ec_hist_store';
	
	    var history = {
	
	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	         */
	        push: function (ecModel, newSnapshot) {
	            var store = giveStore(ecModel);
	
	            // If previous dataZoom can not be found,
	            // complete an range with current range.
	            each(newSnapshot, function (batchItem, dataZoomId) {
	                var i = store.length - 1;
	                for (; i >= 0; i--) {
	                    var snapshot = store[i];
	                    if (snapshot[dataZoomId]) {
	                        break;
	                    }
	                }
	                if (i < 0) {
	                    // No origin range set, create one by current range.
	                    var dataZoomModel = ecModel.queryComponents(
	                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}
	                    )[0];
	                    if (dataZoomModel) {
	                        var percentRange = dataZoomModel.getPercentRange();
	                        store[0][dataZoomId] = {
	                            dataZoomId: dataZoomId,
	                            start: percentRange[0],
	                            end: percentRange[1]
	                        };
	                    }
	                }
	            });
	
	            store.push(newSnapshot);
	        },
	
	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Object} snapshot
	         */
	        pop: function (ecModel) {
	            var store = giveStore(ecModel);
	            var head = store[store.length - 1];
	            store.length > 1 && store.pop();
	
	            // Find top for all dataZoom.
	            var snapshot = {};
	            each(head, function (batchItem, dataZoomId) {
	                for (var i = store.length - 1; i >= 0; i--) {
	                    var batchItem = store[i][dataZoomId];
	                    if (batchItem) {
	                        snapshot[dataZoomId] = batchItem;
	                        break;
	                    }
	                }
	            });
	
	            return snapshot;
	        },
	
	        /**
	         * @public
	         */
	        clear: function (ecModel) {
	            ecModel[ATTR] = null;
	        },
	
	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @return {number} records. always >= 1.
	         */
	        count: function (ecModel) {
	            return giveStore(ecModel).length;
	        }
	
	    };
	
	    /**
	     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	     * History length of each dataZoom may be different.
	     * this._history[0] is used to store origin range.
	     * @type {Array.<Object>}
	     */
	    function giveStore(ecModel) {
	        var store = ecModel[ATTR];
	        if (!store) {
	            store = ecModel[ATTR] = [{}];
	        }
	        return store;
	    }
	
	    module.exports = history;
	


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */
	
	
	    __webpack_require__(351);
	
	    __webpack_require__(352);
	    __webpack_require__(355);
	
	    __webpack_require__(409);
	    __webpack_require__(410);
	
	    __webpack_require__(362);
	    __webpack_require__(363);
	


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */
	
	
	    var DataZoomModel = __webpack_require__(352);
	
	    module.exports = DataZoomModel.extend({
	
	        type: 'dataZoom.select'
	
	    });
	


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	
	
	    module.exports = __webpack_require__(355).extend({
	
	        type: 'dataZoom.select'
	
	    });
	


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	
	    var history = __webpack_require__(407);
	
	    function Restore(model) {
	        this.model = model;
	    }
	
	    Restore.defaultOption = {
	        show: true,
	        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	        title: '还原'
	    };
	
	    var proto = Restore.prototype;
	
	    proto.onclick = function (ecModel, api, type) {
	        history.clear(ecModel);
	
	        api.dispatchAction({
	            type: 'restore',
	            from: this.uid
	        });
	    };
	
	
	    __webpack_require__(348).register('restore', Restore);
	
	
	    __webpack_require__(22).registerAction(
	        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},
	        function (payload, ecModel) {
	            ecModel.resetOption('recreate');
	        }
	    );
	
	    module.exports = Restore;


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	
	    __webpack_require__(413);
	    __webpack_require__(103).registerPainter('vml', __webpack_require__(415));


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods
	
	
	if (!__webpack_require__(23).canvasSupported) {
	    var vec2 = __webpack_require__(31);
	    var BoundingRect = __webpack_require__(30);
	    var CMD = __webpack_require__(70).CMD;
	    var colorTool = __webpack_require__(60);
	    var textContain = __webpack_require__(29);
	    var RectText = __webpack_require__(69);
	    var Displayable = __webpack_require__(67);
	    var ZImage = __webpack_require__(82);
	    var Text = __webpack_require__(84);
	    var Path = __webpack_require__(66);
	
	    var Gradient = __webpack_require__(100);
	
	    var vmlCore = __webpack_require__(414);
	
	    var round = Math.round;
	    var sqrt = Math.sqrt;
	    var abs = Math.abs;
	    var cos = Math.cos;
	    var sin = Math.sin;
	    var mathMax = Math.max;
	
	    var applyTransform = vec2.applyTransform;
	
	    var comma = ',';
	    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';
	
	    var Z = 21600;
	    var Z2 = Z / 2;
	
	    var ZLEVEL_BASE = 100000;
	    var Z_BASE = 1000;
	
	    var initRootElStyle = function (el) {
	        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	        el.coordsize = Z + ','  + Z;
	        el.coordorigin = '0,0';
	    };
	
	    var encodeHtmlAttribute = function (s) {
	        return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	    };
	
	    var rgb2Str = function (r, g, b) {
	        return 'rgb(' + [r, g, b].join(',') + ')';
	    };
	
	    var append = function (parent, child) {
	        if (child && parent && child.parentNode !== parent) {
	            parent.appendChild(child);
	        }
	    };
	
	    var remove = function (parent, child) {
	        if (child && parent && child.parentNode === parent) {
	            parent.removeChild(child);
	        }
	    };
	
	    var getZIndex = function (zlevel, z, z2) {
	        // z 的取值范围为 [0, 1000]
	        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	    };
	
	    var parsePercent = function (value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    };
	
	    /***************************************************
	     * PATH
	     **************************************************/
	
	    var setColorAndOpacity = function (el, color, opacity) {
	        var colorArr = colorTool.parse(color);
	        opacity = +opacity;
	        if (isNaN(opacity)) {
	            opacity = 1;
	        }
	        if (colorArr) {
	            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	            el.opacity = opacity * colorArr[3];
	        }
	    };
	
	    var getColorAndAlpha = function (color) {
	        var colorArr = colorTool.parse(color);
	        return [
	            rgb2Str(colorArr[0], colorArr[1], colorArr[2]),
	            colorArr[3]
	        ];
	    };
	
	    var updateFillNode = function (el, style, zrEl) {
	        // TODO pattern
	        var fill = style.fill;
	        if (fill != null) {
	            // Modified from excanvas
	            if (fill instanceof Gradient) {
	                var gradientType;
	                var angle = 0;
	                var focus = [0, 0];
	                // additional offset
	                var shift = 0;
	                // scale factor for offset
	                var expansion = 1;
	                var rect = zrEl.getBoundingRect();
	                var rectWidth = rect.width;
	                var rectHeight = rect.height;
	                if (fill.type === 'linear') {
	                    gradientType = 'gradient';
	                    var transform = zrEl.transform;
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                        applyTransform(p1, p1, transform);
	                    }
	                    var dx = p1[0] - p0[0];
	                    var dy = p1[1] - p0[1];
	                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
	                    // The angle should be a non-negative number.
	                    if (angle < 0) {
	                        angle += 360;
	                    }
	
	                    // Very small angles produce an unexpected result because they are
	                    // converted to a scientific notation string.
	                    if (angle < 1e-6) {
	                        angle = 0;
	                    }
	                }
	                else {
	                    gradientType = 'gradientradial';
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var transform = zrEl.transform;
	                    var scale = zrEl.scale;
	                    var width = rectWidth;
	                    var height = rectHeight;
	                    focus = [
	                        // Percent in bounding rect
	                        (p0[0] - rect.x) / width,
	                        (p0[1] - rect.y) / height
	                    ];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                    }
	
	                    width /= scale[0] * Z;
	                    height /= scale[1] * Z;
	                    var dimension = mathMax(width, height);
	                    shift = 2 * 0 / dimension;
	                    expansion = 2 * fill.r / dimension - shift;
	                }
	
	                // We need to sort the color stops in ascending order by offset,
	                // otherwise IE won't interpret it correctly.
	                var stops = fill.colorStops.slice();
	                stops.sort(function(cs1, cs2) {
	                    return cs1.offset - cs2.offset;
	                });
	
	                var length = stops.length;
	                // Color and alpha list of first and last stop
	                var colorAndAlphaList = [];
	                var colors = [];
	                for (var i = 0; i < length; i++) {
	                    var stop = stops[i];
	                    var colorAndAlpha = getColorAndAlpha(stop.color);
	                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	                    if (i === 0 || i === length - 1) {
	                        colorAndAlphaList.push(colorAndAlpha);
	                    }
	                }
	
	                if (length >= 2) {
	                    var color1 = colorAndAlphaList[0][0];
	                    var color2 = colorAndAlphaList[1][0];
	                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;
	
	                    el.type = gradientType;
	                    el.method = 'none';
	                    el.focus = '100%';
	                    el.angle = angle;
	                    el.color = color1;
	                    el.color2 = color2;
	                    el.colors = colors.join(',');
	                    // When colors attribute is used, the meanings of opacity and o:opacity2
	                    // are reversed.
	                    el.opacity = opacity2;
	                    // FIXME g_o_:opacity ?
	                    el.opacity2 = opacity1;
	                }
	                if (gradientType === 'radial') {
	                    el.focusposition = focus.join(',');
	                }
	            }
	            else {
	                // FIXME Change from Gradient fill to color fill
	                setColorAndOpacity(el, fill, style.opacity);
	            }
	        }
	    };
	
	    var updateStrokeNode = function (el, style) {
	        // if (style.lineJoin != null) {
	        //     el.joinstyle = style.lineJoin;
	        // }
	        // if (style.miterLimit != null) {
	        //     el.miterlimit = style.miterLimit * Z;
	        // }
	        // if (style.lineCap != null) {
	        //     el.endcap = style.lineCap;
	        // }
	        if (style.lineDash != null) {
	            el.dashstyle = style.lineDash.join(' ');
	        }
	        if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	            setColorAndOpacity(el, style.stroke, style.opacity);
	        }
	    };
	
	    var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
	        var isFill = type == 'fill';
	        var el = vmlEl.getElementsByTagName(type)[0];
	        // Stroke must have lineWidth
	        if (style[type] != null && style[type] !== 'none' && (isFill || (!isFill && style.lineWidth))) {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
	            // FIXME Remove before updating, or set `colors` will throw error
	            if (style[type] instanceof Gradient) {
	                remove(vmlEl, el);
	            }
	            if (!el) {
	                el = vmlCore.createNode(type);
	            }
	
	            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	            append(vmlEl, el);
	        }
	        else {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	            remove(vmlEl, el);
	        }
	    };
	
	    var points = [[], [], []];
	    var pathDataToString = function (data, m) {
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var A = CMD.A;
	        var Q = CMD.Q;
	
	        var str = [];
	        var nPoint;
	        var cmdStr;
	        var cmd;
	        var i;
	        var xi;
	        var yi;
	        for (i = 0; i < data.length;) {
	            cmd = data[i++];
	            cmdStr = '';
	            nPoint = 0;
	            switch (cmd) {
	                case M:
	                    cmdStr = ' m ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case L:
	                    cmdStr = ' l ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case Q:
	                case C:
	                    cmdStr = ' c ';
	                    nPoint = 3;
	                    var x1 = data[i++];
	                    var y1 = data[i++];
	                    var x2 = data[i++];
	                    var y2 = data[i++];
	                    var x3;
	                    var y3;
	                    if (cmd === Q) {
	                        // Convert quadratic to cubic using degree elevation
	                        x3 = x2;
	                        y3 = y2;
	                        x2 = (x2 + 2 * x1) / 3;
	                        y2 = (y2 + 2 * y1) / 3;
	                        x1 = (xi + 2 * x1) / 3;
	                        y1 = (yi + 2 * y1) / 3;
	                    }
	                    else {
	                        x3 = data[i++];
	                        y3 = data[i++];
	                    }
	                    points[0][0] = x1;
	                    points[0][1] = y1;
	                    points[1][0] = x2;
	                    points[1][1] = y2;
	                    points[2][0] = x3;
	                    points[2][1] = y3;
	
	                    xi = x3;
	                    yi = y3;
	                    break;
	                case A:
	                    var x = 0;
	                    var y = 0;
	                    var sx = 1;
	                    var sy = 1;
	                    var angle = 0;
	                    if (m) {
	                        // Extract SRT from matrix
	                        x = m[4];
	                        y = m[5];
	                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
	                    }
	
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++] + angle;
	                    var endAngle = data[i++] + startAngle + angle;
	                    // FIXME
	                    // var psi = data[i++];
	                    i++;
	                    var clockwise = data[i++];
	
	                    var x0 = cx + cos(startAngle) * rx;
	                    var y0 = cy + sin(startAngle) * ry;
	
	                    var x1 = cx + cos(endAngle) * rx;
	                    var y1 = cy + sin(endAngle) * ry;
	
	                    var type = clockwise ? ' wa ' : ' at ';
	                    if (Math.abs(x0 - x1) < 1e-4) {
	                        // IE won't render arches drawn counter clockwise if x0 == x1.
	                        if (Math.abs(endAngle - startAngle) > 1e-2) {
	                            // Offset x0 by 1/80 of a pixel. Use something
	                            // that can be represented in binary
	                            if (clockwise) {
	                                x0 += 270 / Z;
	                            }
	                        }
	                        else {
	                            // Avoid case draw full circle
	                            if (Math.abs(y0 - cy) < 1e-4) {
	                                if ((clockwise && x0 < cx) || (!clockwise && x0 > cx)) {
	                                    y1 -= 270 / Z;
	                                }
	                                else {
	                                    y1 += 270 / Z;
	                                }
	                            }
	                            else if ((clockwise && y0 < cy) || (!clockwise && y0 > cy)) {
	                                x1 += 270 / Z;
	                            }
	                            else {
	                                x1 -= 270 / Z;
	                            }
	                        }
	                    }
	                    str.push(
	                        type,
	                        round(((cx - rx) * sx + x) * Z - Z2), comma,
	                        round(((cy - ry) * sy + y) * Z - Z2), comma,
	                        round(((cx + rx) * sx + x) * Z - Z2), comma,
	                        round(((cy + ry) * sy + y) * Z - Z2), comma,
	                        round((x0 * sx + x) * Z - Z2), comma,
	                        round((y0 * sy + y) * Z - Z2), comma,
	                        round((x1 * sx + x) * Z - Z2), comma,
	                        round((y1 * sy + y) * Z - Z2)
	                    );
	
	                    xi = x1;
	                    yi = y1;
	                    break;
	                case CMD.R:
	                    var p0 = points[0];
	                    var p1 = points[1];
	                    // x0, y0
	                    p0[0] = data[i++];
	                    p0[1] = data[i++];
	                    // x1, y1
	                    p1[0] = p0[0] + data[i++];
	                    p1[1] = p0[1] + data[i++];
	
	                    if (m) {
	                        applyTransform(p0, p0, m);
	                        applyTransform(p1, p1, m);
	                    }
	
	                    p0[0] = round(p0[0] * Z - Z2);
	                    p1[0] = round(p1[0] * Z - Z2);
	                    p0[1] = round(p0[1] * Z - Z2);
	                    p1[1] = round(p1[1] * Z - Z2);
	                    str.push(
	                        // x0, y0
	                        ' m ', p0[0], comma, p0[1],
	                        // x1, y0
	                        ' l ', p1[0], comma, p0[1],
	                        // x1, y1
	                        ' l ', p1[0], comma, p1[1],
	                        // x0, y1
	                        ' l ', p0[0], comma, p1[1]
	                    );
	                    break;
	                case CMD.Z:
	                    // FIXME Update xi, yi
	                    str.push(' x ');
	            }
	
	            if (nPoint > 0) {
	                str.push(cmdStr);
	                for (var k = 0; k < nPoint; k++) {
	                    var p = points[k];
	
	                    m && applyTransform(p, p, m);
	                    // 不 round 会非常慢
	                    str.push(
	                        round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2),
	                        k < nPoint - 1 ? comma : ''
	                    );
	                }
	            }
	        }
	
	        return str.join('');
	    };
	
	    // Rewrite the original path method
	    Path.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	
	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            vmlEl = vmlCore.createNode('shape');
	            initRootElStyle(vmlEl);
	
	            this._vmlEl = vmlEl;
	        }
	
	        updateFillAndStroke(vmlEl, 'fill', style, this);
	        updateFillAndStroke(vmlEl, 'stroke', style, this);
	
	        var m = this.transform;
	        var needTransform = m != null;
	        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	        if (strokeEl) {
	            var lineWidth = style.lineWidth;
	            // Get the line scale.
	            // Determinant of this.m_ means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            if (needTransform && !style.strokeNoScale) {
	                var det = m[0] * m[3] - m[1] * m[2];
	                lineWidth *= sqrt(abs(det));
	            }
	            strokeEl.weight = lineWidth + 'px';
	        }
	
	        var path = this.path;
	        if (this.__dirtyPath) {
	            path.beginPath();
	            this.buildPath(path, this.shape);
	            path.toStatic();
	            this.__dirtyPath = false;
	        }
	
	        vmlEl.path = pathDataToString(path.data, this.transform);
	
	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Append to root
	        append(vmlRoot, vmlEl);
	
	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	        else {
	            this.removeRectText(vmlRoot);
	        }
	    };
	
	    Path.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	        this.removeRectText(vmlRoot);
	    };
	
	    Path.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };
	
	    /***************************************************
	     * IMAGE
	     **************************************************/
	    var isImage = function (img) {
	        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	        return (typeof img === 'object') && img.tagName && img.tagName.toUpperCase() === 'IMG';
	        // return img instanceof Image;
	    };
	
	    // Rewrite the original path method
	    ZImage.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        var image = style.image;
	
	        // Image original width, height
	        var ow;
	        var oh;
	
	        if (isImage(image)) {
	            var src = image.src;
	            if (src === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	            else {
	                var imageRuntimeStyle = image.runtimeStyle;
	                var oldRuntimeWidth = imageRuntimeStyle.width;
	                var oldRuntimeHeight = imageRuntimeStyle.height;
	                imageRuntimeStyle.width = 'auto';
	                imageRuntimeStyle.height = 'auto';
	
	                // get the original size
	                ow = image.width;
	                oh = image.height;
	
	                // and remove overides
	                imageRuntimeStyle.width = oldRuntimeWidth;
	                imageRuntimeStyle.height = oldRuntimeHeight;
	
	                // Caching image original width, height and src
	                this._imageSrc = src;
	                this._imageWidth = ow;
	                this._imageHeight = oh;
	            }
	            image = src;
	        }
	        else {
	            if (image === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	        }
	        if (!image) {
	            return;
	        }
	
	        var x = style.x || 0;
	        var y = style.y || 0;
	
	        var dw = style.width;
	        var dh = style.height;
	
	        var sw = style.sWidth;
	        var sh = style.sHeight;
	        var sx = style.sx || 0;
	        var sy = style.sy || 0;
	
	        var hasCrop = sw && sh;
	
	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	            // vmlEl = vmlCore.createNode('group');
	            vmlEl = vmlCore.doc.createElement('div');
	            initRootElStyle(vmlEl);
	
	            this._vmlEl = vmlEl;
	        }
	
	        var vmlElStyle = vmlEl.style;
	        var hasRotation = false;
	        var m;
	        var scaleX = 1;
	        var scaleY = 1;
	        if (this.transform) {
	            m = this.transform;
	            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);
	
	            hasRotation = m[1] || m[2];
	        }
	        if (hasRotation) {
	            // If filters are necessary (rotation exists), create them
	            // filters are bog-slow, so only create them if abbsolutely necessary
	            // The following check doesn't account for skews (which don't exist
	            // in the canvas spec (yet) anyway.
	            // From excanvas
	            var p0 = [x, y];
	            var p1 = [x + dw, y];
	            var p2 = [x, y + dh];
	            var p3 = [x + dw, y + dh];
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	            applyTransform(p2, p2, m);
	            applyTransform(p3, p3, m);
	
	            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);
	
	            var transformFilter = [];
	            transformFilter.push('M11=', m[0] / scaleX, comma,
	                        'M12=', m[2] / scaleY, comma,
	                        'M21=', m[1] / scaleX, comma,
	                        'M22=', m[3] / scaleY, comma,
	                        'Dx=', round(x * scaleX + m[4]), comma,
	                        'Dy=', round(y * scaleY + m[5]));
	
	            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
	            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	            vmlElStyle.filter = imageTransformPrefix + '.Matrix('
	                + transformFilter.join('') + ', SizingMethod=clip)';
	
	        }
	        else {
	            if (m) {
	                x = x * scaleX + m[4];
	                y = y * scaleY + m[5];
	            }
	            vmlElStyle.filter = '';
	            vmlElStyle.left = round(x) + 'px';
	            vmlElStyle.top = round(y) + 'px';
	        }
	
	        var imageEl = this._imageEl;
	        var cropEl = this._cropEl;
	
	        if (!imageEl) {
	            imageEl = vmlCore.doc.createElement('div');
	            this._imageEl = imageEl;
	        }
	        var imageELStyle = imageEl.style;
	        if (hasCrop) {
	            // Needs know image original width and height
	            if (! (ow && oh)) {
	                var tmpImage = new Image();
	                var self = this;
	                tmpImage.onload = function () {
	                    tmpImage.onload = null;
	                    ow = tmpImage.width;
	                    oh = tmpImage.height;
	                    // Adjust image width and height to fit the ratio destinationSize / sourceSize
	                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	
	                    // Caching image original width, height and src
	                    self._imageWidth = ow;
	                    self._imageHeight = oh;
	                    self._imageSrc = image;
	                };
	                tmpImage.src = image;
	            }
	            else {
	                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	            }
	
	            if (! cropEl) {
	                cropEl = vmlCore.doc.createElement('div');
	                cropEl.style.overflow = 'hidden';
	                this._cropEl = cropEl;
	            }
	            var cropElStyle = cropEl.style;
	            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx='
	                    + (-sx * dw / sw * scaleX) + ',Dy=' + (-sy * dh / sh * scaleY) + ')';
	
	            if (! cropEl.parentNode) {
	                vmlEl.appendChild(cropEl);
	            }
	            if (imageEl.parentNode != cropEl) {
	                cropEl.appendChild(imageEl);
	            }
	        }
	        else {
	            imageELStyle.width = round(scaleX * dw) + 'px';
	            imageELStyle.height = round(scaleY * dh) + 'px';
	
	            vmlEl.appendChild(imageEl);
	
	            if (cropEl && cropEl.parentNode) {
	                vmlEl.removeChild(cropEl);
	                this._cropEl = null;
	            }
	        }
	
	        var filterStr = '';
	        var alpha = style.opacity;
	        if (alpha < 1) {
	            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	        }
	        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';
	
	        imageELStyle.filter = filterStr;
	
	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Append to root
	        append(vmlRoot, vmlEl);
	
	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	    };
	
	    ZImage.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	
	        this._vmlEl = null;
	        this._cropEl = null;
	        this._imageEl = null;
	
	        this.removeRectText(vmlRoot);
	    };
	
	    ZImage.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };
	
	
	    /***************************************************
	     * TEXT
	     **************************************************/
	
	    var DEFAULT_STYLE_NORMAL = 'normal';
	
	    var fontStyleCache = {};
	    var fontStyleCacheCount = 0;
	    var MAX_FONT_CACHE_SIZE = 100;
	    var fontEl = document.createElement('div');
	
	    var getFontStyle = function (fontString) {
	        var fontStyle = fontStyleCache[fontString];
	        if (!fontStyle) {
	            // Clear cache
	            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	                fontStyleCacheCount = 0;
	                fontStyleCache = {};
	            }
	
	            var style = fontEl.style;
	            var fontFamily;
	            try {
	                style.font = fontString;
	                fontFamily = style.fontFamily.split(',')[0];
	            }
	            catch (e) {
	            }
	
	            fontStyle = {
	                style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	                size: parseFloat(style.fontSize || 12) | 0,
	                family: fontFamily || 'Microsoft YaHei'
	            };
	
	            fontStyleCache[fontString] = fontStyle;
	            fontStyleCacheCount++;
	        }
	        return fontStyle;
	    };
	
	    var textMeasureEl;
	    // Overwrite measure text method
	    textContain.measureText = function (text, textFont) {
	        var doc = vmlCore.doc;
	        if (!textMeasureEl) {
	            textMeasureEl = doc.createElement('div');
	            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;'
	                + 'padding:0;margin:0;border:none;white-space:pre;';
	            vmlCore.doc.body.appendChild(textMeasureEl);
	        }
	
	        try {
	            textMeasureEl.style.font = textFont;
	        } catch (ex) {
	            // Ignore failures to set to invalid font.
	        }
	        textMeasureEl.innerHTML = '';
	        // Don't use innerHTML or innerText because they allow markup/whitespace.
	        textMeasureEl.appendChild(doc.createTextNode(text));
	        return {
	            width: textMeasureEl.offsetWidth
	        };
	    };
	
	    var tmpRect = new BoundingRect();
	
	    var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {
	
	        var style = this.style;
	        var text = style.text;
	        // Convert to string
	        text != null && (text += '');
	        if (!text) {
	            return;
	        }
	
	        var x;
	        var y;
	        var align = style.textAlign;
	        var fontStyle = getFontStyle(style.textFont);
	        // FIXME encodeHtmlAttribute ?
	        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' '
	            + fontStyle.size + 'px "' + fontStyle.family + '"';
	
	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;
	
	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	
	        // Transform rect to view space
	        var m = this.transform;
	        // Ignore transform for text in other element
	        if (m && !fromTextEl) {
	            tmpRect.copy(rect);
	            tmpRect.applyTransform(m);
	            rect = tmpRect;
	        }
	
	        if (!fromTextEl) {
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	
	                align = align || 'left';
	                baseline = baseline || 'top';
	            }
	            else {
	                var res = textContain.adjustTextPositionOnRect(
	                    textPosition, rect, textRect, distance
	                );
	                x = res.x;
	                y = res.y;
	
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	        }
	        else {
	            x = rect.x;
	            y = rect.y;
	        }
	        if (verticalAlign) {
	            switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;
	                // 'top'
	            }
	            // Ignore baseline
	            baseline = 'top';
	        }
	
	        var fontSize = fontStyle.size;
	        // 1.75 is an arbitrary number, as there is no info about the text baseline
	        switch (baseline) {
	            case 'hanging':
	            case 'top':
	                y += fontSize / 1.75;
	                break;
	            case 'middle':
	                break;
	            default:
	            // case null:
	            // case 'alphabetic':
	            // case 'ideographic':
	            // case 'bottom':
	                y -= fontSize / 2.25;
	                break;
	        }
	        switch (align) {
	            case 'left':
	                break;
	            case 'center':
	                x -= textRect.width / 2;
	                break;
	            case 'right':
	                x -= textRect.width;
	                break;
	            // case 'end':
	                // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	                // break;
	            // case 'start':
	                // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	                // break;
	            // default:
	            //     align = 'left';
	        }
	
	        var createNode = vmlCore.createNode;
	
	        var textVmlEl = this._textVmlEl;
	        var pathEl;
	        var textPathEl;
	        var skewEl;
	        if (!textVmlEl) {
	            textVmlEl = createNode('line');
	            pathEl = createNode('path');
	            textPathEl = createNode('textpath');
	            skewEl = createNode('skew');
	
	            // FIXME Why here is not cammel case
	            // Align 'center' seems wrong
	            textPathEl.style['v-text-align'] = 'left';
	
	            initRootElStyle(textVmlEl);
	
	            pathEl.textpathok = true;
	            textPathEl.on = true;
	
	            textVmlEl.from = '0 0';
	            textVmlEl.to = '1000 0.05';
	
	            append(textVmlEl, skewEl);
	            append(textVmlEl, pathEl);
	            append(textVmlEl, textPathEl);
	
	            this._textVmlEl = textVmlEl;
	        }
	        else {
	            // 这里是在前面 appendChild 保证顺序的前提下
	            skewEl = textVmlEl.firstChild;
	            pathEl = skewEl.nextSibling;
	            textPathEl = pathEl.nextSibling;
	        }
	
	        var coords = [x, y];
	        var textVmlElStyle = textVmlEl.style;
	        // Ignore transform for text in other element
	        if (m && fromTextEl) {
	            applyTransform(coords, coords, m);
	
	            skewEl.on = true;
	
	            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma +
	            m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';
	
	            // Text position
	            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
	            // Left top point as origin
	            skewEl.origin = '0 0';
	
	            textVmlElStyle.left = '0px';
	            textVmlElStyle.top = '0px';
	        }
	        else {
	            skewEl.on = false;
	            textVmlElStyle.left = round(x) + 'px';
	            textVmlElStyle.top = round(y) + 'px';
	        }
	
	        textPathEl.string = encodeHtmlAttribute(text);
	        // TODO
	        try {
	            textPathEl.style.font = font;
	        }
	        // Error font format
	        catch (e) {}
	
	        updateFillAndStroke(textVmlEl, 'fill', {
	            fill: fromTextEl ? style.fill : style.textFill,
	            opacity: style.opacity
	        }, this);
	        updateFillAndStroke(textVmlEl, 'stroke', {
	            stroke: fromTextEl ? style.stroke : style.textStroke,
	            opacity: style.opacity,
	            lineDash: style.lineDash
	        }, this);
	
	        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Attached to root
	        append(vmlRoot, textVmlEl);
	    };
	
	    var removeRectText = function (vmlRoot) {
	        remove(vmlRoot, this._textVmlEl);
	        this._textVmlEl = null;
	    };
	
	    var appendRectText = function (vmlRoot) {
	        append(vmlRoot, this._textVmlEl);
	    };
	
	    var list = [RectText, Displayable, ZImage, Path, Text];
	
	    // In case Displayable has been mixed in RectText
	    for (var i = 0; i < list.length; i++) {
	        var proto = list[i].prototype;
	        proto.drawRectText = drawRectText;
	        proto.removeRectText = removeRectText;
	        proto.appendRectText = appendRectText;
	    }
	
	    Text.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, {
	                x: style.x || 0, y: style.y || 0,
	                width: 0, height: 0
	            }, this.getBoundingRect(), true);
	        }
	        else {
	            this.removeRectText(vmlRoot);
	        }
	    };
	
	    Text.prototype.onRemove = function (vmlRoot) {
	        this.removeRectText(vmlRoot);
	    };
	
	    Text.prototype.onAdd = function (vmlRoot) {
	        this.appendRectText(vmlRoot);
	    };
	}


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	
	
	if (!__webpack_require__(23).canvasSupported) {
	    var urn = 'urn:schemas-microsoft-com:vml';
	
	    var createNode;
	    var win = window;
	    var doc = win.document;
	
	    var vmlInited = false;
	
	    try {
	        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	        createNode = function (tagName) {
	            return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	        };
	    }
	    catch (e) {
	        createNode = function (tagName) {
	            return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	        };
	    }
	
	    // From raphael
	    var initVML = function () {
	        if (vmlInited) {
	            return;
	        }
	        vmlInited = true;
	
	        var styleSheets = doc.styleSheets;
	        if (styleSheets.length < 31) {
	            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	        else {
	            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	    };
	
	    // Not useing return to avoid error when converting to CommonJS module
	    module.exports = {
	        doc: doc,
	        initVML: initVML,
	        createNode: createNode
	    };
	}


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */
	
	
	
	    var zrLog = __webpack_require__(61);
	    var vmlCore = __webpack_require__(414);
	
	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }
	
	    /**
	     * @alias module:zrender/vml/Painter
	     */
	    function VMLPainter(root, storage) {
	
	        vmlCore.initVML();
	
	        this.root = root;
	
	        this.storage = storage;
	
	        var vmlViewport = document.createElement('div');
	
	        var vmlRoot = document.createElement('div');
	
	        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';
	
	        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';
	
	        root.appendChild(vmlViewport);
	
	        this._vmlRoot = vmlRoot;
	        this._vmlViewport = vmlViewport;
	
	        this.resize();
	
	        // Modify storage
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;
	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);
	
	            oldDelFromMap.call(storage, elId);
	
	            if (el) {
	                el.onRemove && el.onRemove(vmlRoot);
	            }
	        };
	
	        storage.addToMap = function (el) {
	            // Displayable already has a vml node
	            el.onAdd && el.onAdd(vmlRoot);
	
	            oldAddToMap.call(storage, el);
	        };
	
	        this._firstPaint = true;
	    }
	
	    VMLPainter.prototype = {
	
	        constructor: VMLPainter,
	
	        /**
	         * @return {HTMLDivElement}
	         */
	        getViewportRoot: function () {
	            return this._vmlViewport;
	        },
	
	        /**
	         * 刷新
	         */
	        refresh: function () {
	
	            var list = this.storage.getDisplayList(true, true);
	
	            this._paintList(list);
	        },
	
	        _paintList: function (list) {
	            var vmlRoot = this._vmlRoot;
	            for (var i = 0; i < list.length; i++) {
	                var el = list[i];
	                if (el.invisible || el.ignore) {
	                    if (!el.__alreadyNotVisible) {
	                        el.onRemove(vmlRoot);
	                    }
	                    // Set as already invisible
	                    el.__alreadyNotVisible = true;
	                }
	                else {
	                    if (el.__alreadyNotVisible) {
	                        el.onAdd(vmlRoot);
	                    }
	                    el.__alreadyNotVisible = false;
	                    if (el.__dirty) {
	                        el.beforeBrush && el.beforeBrush();
	                        (el.brushVML || el.brush).call(el, vmlRoot);
	                        el.afterBrush && el.afterBrush();
	                    }
	                }
	                el.__dirty = false;
	            }
	
	            if (this._firstPaint) {
	                // Detached from document at first time
	                // to avoid page refreshing too many times
	
	                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	                this._vmlViewport.appendChild(vmlRoot);
	                this._firstPaint = false;
	            }
	        },
	
	        resize: function (width, height) {
	            var width = width == null ? this._getWidth() : width;
	            var height = height == null ? this._getHeight() : height;
	
	            if (this._width != width || this._height != height) {
	                this._width = width;
	                this._height = height;
	
	                var vmlViewportStyle = this._vmlViewport.style;
	                vmlViewportStyle.width = width + 'px';
	                vmlViewportStyle.height = height + 'px';
	            }
	        },
	
	        dispose: function () {
	            this.root.innerHTML = '';
	
	            this._vmlRoot =
	            this._vmlViewport =
	            this.storage = null;
	        },
	
	        getWidth: function () {
	            return this._width;
	        },
	
	        getHeight: function () {
	            return this._height;
	        },
	
	        clear: function () {
	            if (this._vmlViewport) {
	                this.root.removeChild(this._vmlViewport);
	            }
	        },
	
	        _getWidth: function () {
	            var root = this.root;
	            var stl = root.currentStyle;
	
	            return ((root.clientWidth || parseInt10(stl.width))
	                    - parseInt10(stl.paddingLeft)
	                    - parseInt10(stl.paddingRight)) | 0;
	        },
	
	        _getHeight: function () {
	            var root = this.root;
	            var stl = root.currentStyle;
	
	            return ((root.clientHeight || parseInt10(stl.height))
	                    - parseInt10(stl.paddingTop)
	                    - parseInt10(stl.paddingBottom)) | 0;
	        }
	    };
	
	    // Not supported methods
	    function createMethodNotSupport(method) {
	        return function () {
	            zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	        };
	    }
	
	    var notSupportedMethods = [
	        'getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers',
	        'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'
	    ];
	
	    for (var i = 0; i < notSupportedMethods.length; i++) {
	        var name = notSupportedMethods[i];
	        VMLPainter.prototype[name] = createMethodNotSupport(name);
	    }
	
	    module.exports = VMLPainter;


/***/ }
]));
//# sourceMappingURL=3.chunk.45a00d47.js.map